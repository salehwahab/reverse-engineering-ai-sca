GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1
Copyright (C) 2022 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./cfiles/HASH...
0x00010418 in _start ()
The target architecture is set to "arm".
Breakpoint 1 at 0x105fc: file HASH.c, line 14.

Breakpoint 1, main () at HASH.c:14
14	    byte buffer[] = "Hello, World!";
0x00010600	14	    byte buffer[] = "Hello, World!";
=> 0x10600 <main+52>:	sub	r12, r11, #64	; 0x40
0x00010604	14	    byte buffer[] = "Hello, World!";
=> 0x10604 <main+56>:	ldm	r3, {r0, r1, r2, r3}
0x00010608	14	    byte buffer[] = "Hello, World!";
=> 0x10608 <main+60>:	stmia	r12!, {r0, r1, r2}
0x0001060c	14	    byte buffer[] = "Hello, World!";
=> 0x1060c <main+64>:	strh	r3, [r12]
19	    ret = wc_InitSha256(&sha256);
=> 0x10610 <main+68>:	mov	r0, r4
0x00010614	19	    ret = wc_InitSha256(&sha256);
=> 0x10614 <main+72>:	bl	0x11d38 <wc_InitSha256>
wc_InitSha256 (sha256=0x0) at wolfcrypt/src/sha256.c:1954
1954	{
=> 0x11d38 <wc_InitSha256>:	push	{r11, lr}
0x00011d3c	1954	{
=> 0x11d3c <wc_InitSha256+4>:	add	r11, sp, #4
0x00011d40	1954	{
=> 0x11d40 <wc_InitSha256+8>:	sub	sp, sp, #16
0x00011d44	1954	{
=> 0x11d44 <wc_InitSha256+12>:	str	r0, [r11, #-16]
1955	    int devId = INVALID_DEVID;
=> 0x11d48 <wc_InitSha256+16>:	mvn	r3, #1
0x00011d4c	1955	    int devId = INVALID_DEVID;
=> 0x11d4c <wc_InitSha256+20>:	str	r3, [r11, #-8]
1960	    return wc_InitSha256_ex(sha256, NULL, devId);
=> 0x11d50 <wc_InitSha256+24>:	ldr	r2, [r11, #-8]
0x00011d54	1960	    return wc_InitSha256_ex(sha256, NULL, devId);
=> 0x11d54 <wc_InitSha256+28>:	mov	r1, #0
0x00011d58	1960	    return wc_InitSha256_ex(sha256, NULL, devId);
=> 0x11d58 <wc_InitSha256+32>:	ldr	r0, [r11, #-16]
0x00011d5c	1960	    return wc_InitSha256_ex(sha256, NULL, devId);
=> 0x11d5c <wc_InitSha256+36>:	bl	0x10ac0 <wc_InitSha256_ex>
wc_InitSha256_ex (sha256=0x0, heap=0x0, devId=0) at wolfcrypt/src/sha256.c:859
859	    {
=> 0x10ac0 <wc_InitSha256_ex>:	push	{r11, lr}
0x00010ac4	859	    {
=> 0x10ac4 <wc_InitSha256_ex+4>:	add	r11, sp, #4
0x00010ac8	859	    {
=> 0x10ac8 <wc_InitSha256_ex+8>:	sub	sp, sp, #24
0x00010acc	859	    {
=> 0x10acc <wc_InitSha256_ex+12>:	str	r0, [r11, #-16]
0x00010ad0	859	    {
=> 0x10ad0 <wc_InitSha256_ex+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00010ad4	859	    {
=> 0x10ad4 <wc_InitSha256_ex+20>:	str	r2, [r11, #-24]	; 0xffffffe8
860	        int ret = 0;
=> 0x10ad8 <wc_InitSha256_ex+24>:	mov	r3, #0
0x00010adc	860	        int ret = 0;
=> 0x10adc <wc_InitSha256_ex+28>:	str	r3, [r11, #-8]
861	        if (sha256 == NULL)
=> 0x10ae0 <wc_InitSha256_ex+32>:	ldr	r3, [r11, #-16]
0x00010ae4	861	        if (sha256 == NULL)
=> 0x10ae4 <wc_InitSha256_ex+36>:	cmp	r3, #0
0x00010ae8	861	        if (sha256 == NULL)
=> 0x10ae8 <wc_InitSha256_ex+40>:	bne	0x10af4 <wc_InitSha256_ex+52>
863	        ret = InitSha256(sha256);
=> 0x10af4 <wc_InitSha256_ex+52>:	ldr	r0, [r11, #-16]
0x00010af8	863	        ret = InitSha256(sha256);
=> 0x10af8 <wc_InitSha256_ex+56>:	bl	0x109e8 <InitSha256>
InitSha256 (sha256=0x0) at wolfcrypt/src/sha256.c:233
233	{
=> 0x109e8 <InitSha256>:	push	{r11, lr}
0x000109ec	233	{
=> 0x109ec <InitSha256+4>:	add	r11, sp, #4
0x000109f0	233	{
=> 0x109f0 <InitSha256+8>:	sub	sp, sp, #8
0x000109f4	233	{
=> 0x109f4 <InitSha256+12>:	str	r0, [r11, #-8]
234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x109f8 <InitSha256+16>:	ldr	r3, [r11, #-8]
0x000109fc	234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x109fc <InitSha256+20>:	mov	r2, #32
0x00010a00	234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x10a00 <InitSha256+24>:	mov	r1, #0
0x00010a04	234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x10a04 <InitSha256+28>:	mov	r0, r3
0x00010a08	234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x10a08 <InitSha256+32>:	bl	0x304b0 <memset>
0x000304b0 in memset ()
=> 0x304b0 <memset>:	mov	r3, r0
0x000304b4 in memset ()
=> 0x304b4 <memset+4>:	cmp	r2, #8
0x000304b8 in memset ()
=> 0x304b8 <memset+8>:	bcc	0x30504 <memset+84>
0x000304bc in memset ()
=> 0x304bc <memset+12>:	tst	r3, #3
0x000304c0 in memset ()
=> 0x304c0 <memset+16>:	strbne	r1, [r3], #1
0x000304c4 in memset ()
=> 0x304c4 <memset+20>:	subne	r2, r2, #1
0x000304c8 in memset ()
=> 0x304c8 <memset+24>:	bne	0x304bc <memset+12>
0x000304cc in memset ()
=> 0x304cc <memset+28>:	and	r1, r1, #255	; 0xff
0x000304d0 in memset ()
=> 0x304d0 <memset+32>:	orr	r1, r1, r1, lsl #8
0x000304d4 in memset ()
=> 0x304d4 <memset+36>:	orr	r1, r1, r1, lsl #16
0x000304d8 in memset ()
=> 0x304d8 <memset+40>:	mov	r12, r1
0x000304dc in memset ()
=> 0x304dc <memset+44>:	subs	r2, r2, #8
0x000304e0 in memset ()
=> 0x304e0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000304e4 in memset ()
=> 0x304e4 <memset+52>:	subscs	r2, r2, #8
0x000304e8 in memset ()
=> 0x304e8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000304ec in memset ()
=> 0x304ec <memset+60>:	subscs	r2, r2, #8
0x000304f0 in memset ()
=> 0x304f0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000304f4 in memset ()
=> 0x304f4 <memset+68>:	subscs	r2, r2, #8
0x000304f8 in memset ()
=> 0x304f8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000304fc in memset ()
=> 0x304fc <memset+76>:	bcs	0x304dc <memset+44>
0x000304dc in memset ()
=> 0x304dc <memset+44>:	subs	r2, r2, #8
0x000304e0 in memset ()
=> 0x304e0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000304e4 in memset ()
=> 0x304e4 <memset+52>:	subscs	r2, r2, #8
0x000304e8 in memset ()
=> 0x304e8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000304ec in memset ()
=> 0x304ec <memset+60>:	subscs	r2, r2, #8
0x000304f0 in memset ()
=> 0x304f0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000304f4 in memset ()
=> 0x304f4 <memset+68>:	subscs	r2, r2, #8
0x000304f8 in memset ()
=> 0x304f8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000304fc in memset ()
=> 0x304fc <memset+76>:	bcs	0x304dc <memset+44>
0x00030500 in memset ()
=> 0x30500 <memset+80>:	and	r2, r2, #7
0x00030504 in memset ()
=> 0x30504 <memset+84>:	subs	r2, r2, #1
0x00030508 in memset ()
=> 0x30508 <memset+88>:	strbcs	r1, [r3], #1
0x0003050c in memset ()
=> 0x3050c <memset+92>:	subscs	r2, r2, #1
0x00030510 in memset ()
=> 0x30510 <memset+96>:	strbcs	r1, [r3], #1
0x00030514 in memset ()
=> 0x30514 <memset+100>:	subscs	r2, r2, #1
0x00030518 in memset ()
=> 0x30518 <memset+104>:	strbcs	r1, [r3], #1
0x0003051c in memset ()
=> 0x3051c <memset+108>:	subscs	r2, r2, #1
0x00030520 in memset ()
=> 0x30520 <memset+112>:	strbcs	r1, [r3], #1
0x00030524 in memset ()
=> 0x30524 <memset+116>:	bcs	0x30504 <memset+84>
0x00030528 in memset ()
=> 0x30528 <memset+120>:	bx	lr
InitSha256 (sha256=0x40800100) at wolfcrypt/src/sha256.c:235
235	    sha256->digest[0] = 0x6A09E667L;
=> 0x10a0c <InitSha256+36>:	ldr	r3, [r11, #-8]
0x00010a10	235	    sha256->digest[0] = 0x6A09E667L;
=> 0x10a10 <InitSha256+40>:	ldr	r2, [pc, #136]	; 0x10aa0 <InitSha256+184>
0x00010a14	235	    sha256->digest[0] = 0x6A09E667L;
=> 0x10a14 <InitSha256+44>:	str	r2, [r3]
236	    sha256->digest[1] = 0xBB67AE85L;
=> 0x10a18 <InitSha256+48>:	ldr	r3, [r11, #-8]
0x00010a1c	236	    sha256->digest[1] = 0xBB67AE85L;
=> 0x10a1c <InitSha256+52>:	ldr	r2, [pc, #128]	; 0x10aa4 <InitSha256+188>
0x00010a20	236	    sha256->digest[1] = 0xBB67AE85L;
=> 0x10a20 <InitSha256+56>:	str	r2, [r3, #4]
237	    sha256->digest[2] = 0x3C6EF372L;
=> 0x10a24 <InitSha256+60>:	ldr	r3, [r11, #-8]
0x00010a28	237	    sha256->digest[2] = 0x3C6EF372L;
=> 0x10a28 <InitSha256+64>:	ldr	r2, [pc, #120]	; 0x10aa8 <InitSha256+192>
0x00010a2c	237	    sha256->digest[2] = 0x3C6EF372L;
=> 0x10a2c <InitSha256+68>:	str	r2, [r3, #8]
238	    sha256->digest[3] = 0xA54FF53AL;
=> 0x10a30 <InitSha256+72>:	ldr	r3, [r11, #-8]
0x00010a34	238	    sha256->digest[3] = 0xA54FF53AL;
=> 0x10a34 <InitSha256+76>:	ldr	r2, [pc, #112]	; 0x10aac <InitSha256+196>
0x00010a38	238	    sha256->digest[3] = 0xA54FF53AL;
=> 0x10a38 <InitSha256+80>:	str	r2, [r3, #12]
239	    sha256->digest[4] = 0x510E527FL;
=> 0x10a3c <InitSha256+84>:	ldr	r3, [r11, #-8]
0x00010a40	239	    sha256->digest[4] = 0x510E527FL;
=> 0x10a40 <InitSha256+88>:	ldr	r2, [pc, #104]	; 0x10ab0 <InitSha256+200>
0x00010a44	239	    sha256->digest[4] = 0x510E527FL;
=> 0x10a44 <InitSha256+92>:	str	r2, [r3, #16]
240	    sha256->digest[5] = 0x9B05688CL;
=> 0x10a48 <InitSha256+96>:	ldr	r3, [r11, #-8]
0x00010a4c	240	    sha256->digest[5] = 0x9B05688CL;
=> 0x10a4c <InitSha256+100>:	ldr	r2, [pc, #96]	; 0x10ab4 <InitSha256+204>
0x00010a50	240	    sha256->digest[5] = 0x9B05688CL;
=> 0x10a50 <InitSha256+104>:	str	r2, [r3, #20]
241	    sha256->digest[6] = 0x1F83D9ABL;
=> 0x10a54 <InitSha256+108>:	ldr	r3, [r11, #-8]
0x00010a58	241	    sha256->digest[6] = 0x1F83D9ABL;
=> 0x10a58 <InitSha256+112>:	ldr	r2, [pc, #88]	; 0x10ab8 <InitSha256+208>
0x00010a5c	241	    sha256->digest[6] = 0x1F83D9ABL;
=> 0x10a5c <InitSha256+116>:	str	r2, [r3, #24]
242	    sha256->digest[7] = 0x5BE0CD19L;
=> 0x10a60 <InitSha256+120>:	ldr	r3, [r11, #-8]
0x00010a64	242	    sha256->digest[7] = 0x5BE0CD19L;
=> 0x10a64 <InitSha256+124>:	ldr	r2, [pc, #80]	; 0x10abc <InitSha256+212>
0x00010a68	242	    sha256->digest[7] = 0x5BE0CD19L;
=> 0x10a68 <InitSha256+128>:	str	r2, [r3, #28]
244	    sha256->buffLen = 0;
=> 0x10a6c <InitSha256+132>:	ldr	r3, [r11, #-8]
0x00010a70	244	    sha256->buffLen = 0;
=> 0x10a70 <InitSha256+136>:	mov	r2, #0
0x00010a74	244	    sha256->buffLen = 0;
=> 0x10a74 <InitSha256+140>:	str	r2, [r3, #96]	; 0x60
245	    sha256->loLen   = 0;
=> 0x10a78 <InitSha256+144>:	ldr	r3, [r11, #-8]
0x00010a7c	245	    sha256->loLen   = 0;
=> 0x10a7c <InitSha256+148>:	mov	r2, #0
0x00010a80	245	    sha256->loLen   = 0;
=> 0x10a80 <InitSha256+152>:	str	r2, [r3, #100]	; 0x64
246	    sha256->hiLen   = 0;
=> 0x10a84 <InitSha256+156>:	ldr	r3, [r11, #-8]
0x00010a88	246	    sha256->hiLen   = 0;
=> 0x10a88 <InitSha256+160>:	mov	r2, #0
0x00010a8c	246	    sha256->hiLen   = 0;
=> 0x10a8c <InitSha256+164>:	str	r2, [r3, #104]	; 0x68
268	    return 0;
=> 0x10a90 <InitSha256+168>:	mov	r3, #0
269	}
=> 0x10a94 <InitSha256+172>:	mov	r0, r3
0x00010a98	269	}
=> 0x10a98 <InitSha256+176>:	sub	sp, r11, #4
0x00010a9c	269	}
=> 0x10a9c <InitSha256+180>:	pop	{r11, pc}
0x00010afc in wc_InitSha256_ex (sha256=0x40800100, heap=0x0, devId=-2) at wolfcrypt/src/sha256.c:863
863	        ret = InitSha256(sha256);
=> 0x10afc <wc_InitSha256_ex+60>:	str	r0, [r11, #-8]
864	        if (ret != 0)
=> 0x10b00 <wc_InitSha256_ex+64>:	ldr	r3, [r11, #-8]
0x00010b04	864	        if (ret != 0)
=> 0x10b04 <wc_InitSha256_ex+68>:	cmp	r3, #0
0x00010b08	864	        if (ret != 0)
=> 0x10b08 <wc_InitSha256_ex+72>:	beq	0x10b14 <wc_InitSha256_ex+84>
867	        sha256->heap = heap;
=> 0x10b14 <wc_InitSha256_ex+84>:	ldr	r3, [r11, #-16]
0x00010b18	867	        sha256->heap = heap;
=> 0x10b18 <wc_InitSha256_ex+88>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010b1c	867	        sha256->heap = heap;
=> 0x10b1c <wc_InitSha256_ex+92>:	str	r2, [r3, #108]	; 0x6c
886	        return ret;
=> 0x10b20 <wc_InitSha256_ex+96>:	ldr	r3, [r11, #-8]
887	    }
=> 0x10b24 <wc_InitSha256_ex+100>:	mov	r0, r3
0x00010b28	887	    }
=> 0x10b28 <wc_InitSha256_ex+104>:	sub	sp, r11, #4
0x00010b2c	887	    }
=> 0x10b2c <wc_InitSha256_ex+108>:	pop	{r11, pc}
0x00011d60 in wc_InitSha256 (sha256=0x40800100) at wolfcrypt/src/sha256.c:1960
1960	    return wc_InitSha256_ex(sha256, NULL, devId);
=> 0x11d60 <wc_InitSha256+40>:	mov	r3, r0
1961	}
=> 0x11d64 <wc_InitSha256+44>:	mov	r0, r3
0x00011d68	1961	}
=> 0x11d68 <wc_InitSha256+48>:	sub	sp, r11, #4
0x00011d6c	1961	}
=> 0x11d6c <wc_InitSha256+52>:	pop	{r11, pc}
0x00010618 in main () at HASH.c:19
19	    ret = wc_InitSha256(&sha256);
=> 0x10618 <main+76>:	str	r0, [r11, #-192]	; 0xffffff40
20	    if (ret != 0) {
=> 0x1061c <main+80>:	ldr	r3, [r11, #-192]	; 0xffffff40
0x00010620	20	    if (ret != 0) {
=> 0x10620 <main+84>:	cmp	r3, #0
0x00010624	20	    if (ret != 0) {
=> 0x10624 <main+88>:	beq	0x10648 <main+124>
26	    ret = wc_Sha256Update(&sha256, buffer, sizeof(buffer)-1); // -1 to exclude null terminator
=> 0x10648 <main+124>:	sub	r3, r11, #64	; 0x40
0x0001064c	26	    ret = wc_Sha256Update(&sha256, buffer, sizeof(buffer)-1); // -1 to exclude null terminator
=> 0x1064c <main+128>:	mov	r2, #13
0x00010650	26	    ret = wc_Sha256Update(&sha256, buffer, sizeof(buffer)-1); // -1 to exclude null terminator
=> 0x10650 <main+132>:	mov	r1, r3
0x00010654	26	    ret = wc_Sha256Update(&sha256, buffer, sizeof(buffer)-1); // -1 to exclude null terminator
=> 0x10654 <main+136>:	mov	r0, r4
0x00010658	26	    ret = wc_Sha256Update(&sha256, buffer, sizeof(buffer)-1); // -1 to exclude null terminator
=> 0x10658 <main+140>:	bl	0x119c8 <wc_Sha256Update>
wc_Sha256Update (sha256=0xfffffffe, data=0x0, len=1082130688) at wolfcrypt/src/sha256.c:1255
1255	    {
=> 0x119c8 <wc_Sha256Update>:	push	{r11, lr}
0x000119cc	1255	    {
=> 0x119cc <wc_Sha256Update+4>:	add	r11, sp, #4
0x000119d0	1255	    {
=> 0x119d0 <wc_Sha256Update+8>:	sub	sp, sp, #16
0x000119d4	1255	    {
=> 0x119d4 <wc_Sha256Update+12>:	str	r0, [r11, #-8]
0x000119d8	1255	    {
=> 0x119d8 <wc_Sha256Update+16>:	str	r1, [r11, #-12]
0x000119dc	1255	    {
=> 0x119dc <wc_Sha256Update+20>:	str	r2, [r11, #-16]
1256	        if (sha256 == NULL) {
=> 0x119e0 <wc_Sha256Update+24>:	ldr	r3, [r11, #-8]
0x000119e4	1256	        if (sha256 == NULL) {
=> 0x119e4 <wc_Sha256Update+28>:	cmp	r3, #0
0x000119e8	1256	        if (sha256 == NULL) {
=> 0x119e8 <wc_Sha256Update+32>:	bne	0x119f4 <wc_Sha256Update+44>
1259	        if (data == NULL && len == 0) {
=> 0x119f4 <wc_Sha256Update+44>:	ldr	r3, [r11, #-12]
0x000119f8	1259	        if (data == NULL && len == 0) {
=> 0x119f8 <wc_Sha256Update+48>:	cmp	r3, #0
0x000119fc	1259	        if (data == NULL && len == 0) {
=> 0x119fc <wc_Sha256Update+52>:	bne	0x11a14 <wc_Sha256Update+76>
1263	        if (data == NULL) {
=> 0x11a14 <wc_Sha256Update+76>:	ldr	r3, [r11, #-12]
0x00011a18	1263	        if (data == NULL) {
=> 0x11a18 <wc_Sha256Update+80>:	cmp	r3, #0
0x00011a1c	1263	        if (data == NULL) {
=> 0x11a1c <wc_Sha256Update+84>:	bne	0x11a28 <wc_Sha256Update+96>
1286	        return Sha256Update(sha256, data, len);
=> 0x11a28 <wc_Sha256Update+96>:	ldr	r2, [r11, #-16]
0x00011a2c	1286	        return Sha256Update(sha256, data, len);
=> 0x11a2c <wc_Sha256Update+100>:	ldr	r1, [r11, #-12]
0x00011a30	1286	        return Sha256Update(sha256, data, len);
=> 0x11a30 <wc_Sha256Update+104>:	ldr	r0, [r11, #-8]
0x00011a34	1286	        return Sha256Update(sha256, data, len);
=> 0x11a34 <wc_Sha256Update+108>:	bl	0x117d8 <Sha256Update>
Sha256Update (sha256=0xfffffffe, data=0x0, len=68348) at wolfcrypt/src/sha256.c:1088
1088	    {
=> 0x117d8 <Sha256Update>:	push	{r11, lr}
0x000117dc	1088	    {
=> 0x117dc <Sha256Update+4>:	add	r11, sp, #4
0x000117e0	1088	    {
=> 0x117e0 <Sha256Update+8>:	sub	sp, sp, #32
0x000117e4	1088	    {
=> 0x117e4 <Sha256Update+12>:	str	r0, [r11, #-24]	; 0xffffffe8
0x000117e8	1088	    {
=> 0x117e8 <Sha256Update+16>:	str	r1, [r11, #-28]	; 0xffffffe4
0x000117ec	1088	    {
=> 0x117ec <Sha256Update+20>:	str	r2, [r11, #-32]	; 0xffffffe0
1089	        int ret = 0;
=> 0x117f0 <Sha256Update+24>:	mov	r3, #0
0x000117f4	1089	        int ret = 0;
=> 0x117f4 <Sha256Update+28>:	str	r3, [r11, #-20]	; 0xffffffec
1094	        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
=> 0x117f8 <Sha256Update+32>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000117fc	1094	        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
=> 0x117fc <Sha256Update+36>:	ldr	r3, [r3, #96]	; 0x60
1094	        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
=> 0x11800 <Sha256Update+40>:	cmp	r3, #63	; 0x3f
0x00011804	1094	        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
=> 0x11804 <Sha256Update+44>:	bls	0x11810 <Sha256Update+56>
1099	        AddLength(sha256, len);
=> 0x11810 <Sha256Update+56>:	ldr	r1, [r11, #-32]	; 0xffffffe0
0x00011814	1099	        AddLength(sha256, len);
=> 0x11814 <Sha256Update+60>:	ldr	r0, [r11, #-24]	; 0xffffffe8
0x00011818	1099	        AddLength(sha256, len);
=> 0x11818 <Sha256Update+64>:	bl	0x11768 <AddLength>
AddLength (sha256=0x0, len=0) at wolfcrypt/src/sha256.c:1078
1078	    {
=> 0x11768 <AddLength>:	push	{r11}		; (str r11, [sp, #-4]!)
0x0001176c	1078	    {
=> 0x1176c <AddLength+4>:	add	r11, sp, #0
0x00011770	1078	    {
=> 0x11770 <AddLength+8>:	sub	sp, sp, #20
0x00011774	1078	    {
=> 0x11774 <AddLength+12>:	str	r0, [r11, #-16]
0x00011778	1078	    {
=> 0x11778 <AddLength+16>:	str	r1, [r11, #-20]	; 0xffffffec
1079	        word32 tmp = sha256->loLen;
=> 0x1177c <AddLength+20>:	ldr	r3, [r11, #-16]
0x00011780	1079	        word32 tmp = sha256->loLen;
=> 0x11780 <AddLength+24>:	ldr	r3, [r3, #100]	; 0x64
0x00011784	1079	        word32 tmp = sha256->loLen;
=> 0x11784 <AddLength+28>:	str	r3, [r11, #-8]
1080	        if ((sha256->loLen += len) < tmp) {
=> 0x11788 <AddLength+32>:	ldr	r3, [r11, #-16]
0x0001178c	1080	        if ((sha256->loLen += len) < tmp) {
=> 0x1178c <AddLength+36>:	ldr	r2, [r3, #100]	; 0x64
0x00011790	1080	        if ((sha256->loLen += len) < tmp) {
=> 0x11790 <AddLength+40>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011794	1080	        if ((sha256->loLen += len) < tmp) {
=> 0x11794 <AddLength+44>:	add	r2, r2, r3
0x00011798	1080	        if ((sha256->loLen += len) < tmp) {
=> 0x11798 <AddLength+48>:	ldr	r3, [r11, #-16]
0x0001179c	1080	        if ((sha256->loLen += len) < tmp) {
=> 0x1179c <AddLength+52>:	str	r2, [r3, #100]	; 0x64
0x000117a0	1080	        if ((sha256->loLen += len) < tmp) {
=> 0x117a0 <AddLength+56>:	ldr	r3, [r11, #-16]
0x000117a4	1080	        if ((sha256->loLen += len) < tmp) {
=> 0x117a4 <AddLength+60>:	ldr	r3, [r3, #100]	; 0x64
1080	        if ((sha256->loLen += len) < tmp) {
=> 0x117a8 <AddLength+64>:	ldr	r2, [r11, #-8]
0x000117ac	1080	        if ((sha256->loLen += len) < tmp) {
=> 0x117ac <AddLength+68>:	cmp	r2, r3
0x000117b0	1080	        if ((sha256->loLen += len) < tmp) {
=> 0x117b0 <AddLength+72>:	bls	0x117c8 <AddLength+96>
1083	    }
=> 0x117c8 <AddLength+96>:	nop			; (mov r0, r0)
0x000117cc	1083	    }
=> 0x117cc <AddLength+100>:	add	sp, r11, #0
0x000117d0	1083	    }
=> 0x117d0 <AddLength+104>:	pop	{r11}		; (ldr r11, [sp], #4)
0x000117d4	1083	    }
=> 0x117d4 <AddLength+108>:	bx	lr
Sha256Update (sha256=0x40800100, data=0x40800174 "Hello, World!", len=13) at wolfcrypt/src/sha256.c:1101
1101	        local = (byte*)sha256->buffer;
=> 0x1181c <Sha256Update+68>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011820	1101	        local = (byte*)sha256->buffer;
=> 0x11820 <Sha256Update+72>:	add	r3, r3, #32
0x00011824	1101	        local = (byte*)sha256->buffer;
=> 0x11824 <Sha256Update+76>:	str	r3, [r11, #-16]
1104	        if (sha256->buffLen > 0) {
=> 0x11828 <Sha256Update+80>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001182c	1104	        if (sha256->buffLen > 0) {
=> 0x1182c <Sha256Update+84>:	ldr	r3, [r3, #96]	; 0x60
1104	        if (sha256->buffLen > 0) {
=> 0x11830 <Sha256Update+88>:	cmp	r3, #0
0x00011834	1104	        if (sha256->buffLen > 0) {
=> 0x11834 <Sha256Update+92>:	beq	0x11970 <Sha256Update+408>
1189	            while (len >= WC_SHA256_BLOCK_SIZE) {
=> 0x11970 <Sha256Update+408>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011974	1189	            while (len >= WC_SHA256_BLOCK_SIZE) {
=> 0x11974 <Sha256Update+412>:	cmp	r3, #63	; 0x3f
0x00011978	1189	            while (len >= WC_SHA256_BLOCK_SIZE) {
=> 0x11978 <Sha256Update+416>:	bhi	0x11910 <Sha256Update+312>
0x0001197c	1189	            while (len >= WC_SHA256_BLOCK_SIZE) {
=> 0x1197c <Sha256Update+420>:	b	0x11984 <Sha256Update+428>
1242	        if (ret == 0 && len > 0) {
=> 0x11984 <Sha256Update+428>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011988	1242	        if (ret == 0 && len > 0) {
=> 0x11988 <Sha256Update+432>:	cmp	r3, #0
0x0001198c	1242	        if (ret == 0 && len > 0) {
=> 0x1198c <Sha256Update+436>:	bne	0x119b8 <Sha256Update+480>
0x00011990	1242	        if (ret == 0 && len > 0) {
=> 0x11990 <Sha256Update+440>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011994	1242	        if (ret == 0 && len > 0) {
=> 0x11994 <Sha256Update+444>:	cmp	r3, #0
0x00011998	1242	        if (ret == 0 && len > 0) {
=> 0x11998 <Sha256Update+448>:	beq	0x119b8 <Sha256Update+480>
1243	            XMEMCPY(local, data, len);
=> 0x1199c <Sha256Update+452>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x000119a0	1243	            XMEMCPY(local, data, len);
=> 0x119a0 <Sha256Update+456>:	ldr	r1, [r11, #-28]	; 0xffffffe4
0x000119a4	1243	            XMEMCPY(local, data, len);
=> 0x119a4 <Sha256Update+460>:	ldr	r0, [r11, #-16]
0x000119a8	1243	            XMEMCPY(local, data, len);
=> 0x119a8 <Sha256Update+464>:	bl	0x305a0 <memcpy>
0x000305a0 in memcpy ()
=> 0x305a0 <memcpy>:	push	{r0, r4, lr}
0x000305a4 in memcpy ()
=> 0x305a4 <memcpy+4>:	subs	r2, r2, #4
0x000305a8 in memcpy ()
=> 0x305a8 <memcpy+8>:	bcc	0x30634 <memcpy+148>
0x000305ac in memcpy ()
=> 0x305ac <memcpy+12>:	ands	r12, r0, #3
0x000305b0 in memcpy ()
=> 0x305b0 <memcpy+16>:	bne	0x30654 <memcpy+180>
0x000305b4 in memcpy ()
=> 0x305b4 <memcpy+20>:	ands	r12, r1, #3
0x000305b8 in memcpy ()
=> 0x305b8 <memcpy+24>:	bne	0x30684 <memcpy+228>
0x000305bc in memcpy ()
=> 0x305bc <memcpy+28>:	subs	r2, r2, #28
0x000305c0 in memcpy ()
=> 0x305c0 <memcpy+32>:	push	{r5, r6, r7, r8}
0x000305c4 in memcpy ()
=> 0x305c4 <memcpy+36>:	bcc	0x305d8 <memcpy+56>
0x000305d8 in memcpy ()
=> 0x305d8 <memcpy+56>:	ands	r12, r2, #28
0x000305dc in memcpy ()
=> 0x305dc <memcpy+60>:	rsb	r12, r12, #32
0x000305e0 in memcpy ()
=> 0x305e0 <memcpy+64>:	addne	pc, pc, r12
0x000305fc in memcpy ()
=> 0x305fc <memcpy+92>:	ldr	r7, [r1], #4
0x00030600 in memcpy ()
=> 0x30600 <memcpy+96>:	ldr	r8, [r1], #4
0x00030604 in memcpy ()
=> 0x30604 <memcpy+100>:	ldr	lr, [r1], #4
0x00030608 in memcpy ()
=> 0x30608 <memcpy+104>:	add	pc, pc, r12
0x00030624 in memcpy ()
=> 0x30624 <memcpy+132>:	str	r7, [r0], #4
0x00030628 in memcpy ()
=> 0x30628 <memcpy+136>:	str	r8, [r0], #4
0x0003062c in memcpy ()
=> 0x3062c <memcpy+140>:	str	lr, [r0], #4
0x00030630 in memcpy ()
=> 0x30630 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x00030634 in memcpy ()
=> 0x30634 <memcpy+148>:	lsls	r2, r2, #31
0x00030638 in memcpy ()
=> 0x30638 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003063c in memcpy ()
=> 0x3063c <memcpy+156>:	ldrbcs	r4, [r1], #1
0x00030640 in memcpy ()
=> 0x30640 <memcpy+160>:	ldrbcs	r12, [r1]
0x00030644 in memcpy ()
=> 0x30644 <memcpy+164>:	strbne	r3, [r0], #1
0x00030648 in memcpy ()
=> 0x30648 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003064c in memcpy ()
=> 0x3064c <memcpy+172>:	strbcs	r12, [r0]
0x00030650 in memcpy ()
=> 0x30650 <memcpy+176>:	pop	{r0, r4, pc}
Sha256Update (sha256=0x40800100, data=0x40800174 "Hello, World!", len=13) at wolfcrypt/src/sha256.c:1244
1244	            sha256->buffLen = len;
=> 0x119ac <Sha256Update+468>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000119b0	1244	            sha256->buffLen = len;
=> 0x119b0 <Sha256Update+472>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x000119b4	1244	            sha256->buffLen = len;
=> 0x119b4 <Sha256Update+476>:	str	r2, [r3, #96]	; 0x60
1247	        return ret;
=> 0x119b8 <Sha256Update+480>:	ldr	r3, [r11, #-20]	; 0xffffffec
1248	    }
=> 0x119bc <Sha256Update+484>:	mov	r0, r3
0x000119c0	1248	    }
=> 0x119c0 <Sha256Update+488>:	sub	sp, r11, #4
0x000119c4	1248	    }
=> 0x119c4 <Sha256Update+492>:	pop	{r11, pc}
0x00011a38 in wc_Sha256Update (sha256=0x40800100, data=0x40800174 "Hello, World!", len=13) at wolfcrypt/src/sha256.c:1286
1286	        return Sha256Update(sha256, data, len);
=> 0x11a38 <wc_Sha256Update+112>:	mov	r3, r0
1287	    }
=> 0x11a3c <wc_Sha256Update+116>:	mov	r0, r3
0x00011a40	1287	    }
=> 0x11a40 <wc_Sha256Update+120>:	sub	sp, r11, #4
0x00011a44	1287	    }
=> 0x11a44 <wc_Sha256Update+124>:	pop	{r11, pc}
0x0001065c in main () at HASH.c:26
26	    ret = wc_Sha256Update(&sha256, buffer, sizeof(buffer)-1); // -1 to exclude null terminator
=> 0x1065c <main+144>:	str	r0, [r11, #-192]	; 0xffffff40
27	    if (ret != 0) {
=> 0x10660 <main+148>:	ldr	r3, [r11, #-192]	; 0xffffff40
0x00010664	27	    if (ret != 0) {
=> 0x10664 <main+152>:	cmp	r3, #0
0x00010668	27	    if (ret != 0) {
=> 0x10668 <main+156>:	beq	0x1068c <main+192>
33	    ret = wc_Sha256Final(&sha256, hash);
=> 0x1068c <main+192>:	sub	r3, r11, #48	; 0x30
0x00010690	33	    ret = wc_Sha256Final(&sha256, hash);
=> 0x10690 <main+196>:	mov	r1, r3
0x00010694	33	    ret = wc_Sha256Final(&sha256, hash);
=> 0x10694 <main+200>:	mov	r0, r4
0x00010698	33	    ret = wc_Sha256Final(&sha256, hash);
=> 0x10698 <main+204>:	bl	0x11ca4 <wc_Sha256Final>
wc_Sha256Final (sha256=0xd, hash=0x0) at wolfcrypt/src/sha256.c:1457
1457	    {
=> 0x11ca4 <wc_Sha256Final>:	push	{r11, lr}
0x00011ca8	1457	    {
=> 0x11ca8 <wc_Sha256Final+4>:	add	r11, sp, #4
0x00011cac	1457	    {
=> 0x11cac <wc_Sha256Final+8>:	sub	sp, sp, #16
0x00011cb0	1457	    {
=> 0x11cb0 <wc_Sha256Final+12>:	str	r0, [r11, #-16]
0x00011cb4	1457	    {
=> 0x11cb4 <wc_Sha256Final+16>:	str	r1, [r11, #-20]	; 0xffffffec
1460	        if (sha256 == NULL || hash == NULL) {
=> 0x11cb8 <wc_Sha256Final+20>:	ldr	r3, [r11, #-16]
0x00011cbc	1460	        if (sha256 == NULL || hash == NULL) {
=> 0x11cbc <wc_Sha256Final+24>:	cmp	r3, #0
0x00011cc0	1460	        if (sha256 == NULL || hash == NULL) {
=> 0x11cc0 <wc_Sha256Final+28>:	beq	0x11cd0 <wc_Sha256Final+44>
0x00011cc4	1460	        if (sha256 == NULL || hash == NULL) {
=> 0x11cc4 <wc_Sha256Final+32>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011cc8	1460	        if (sha256 == NULL || hash == NULL) {
=> 0x11cc8 <wc_Sha256Final+36>:	cmp	r3, #0
0x00011ccc	1460	        if (sha256 == NULL || hash == NULL) {
=> 0x11ccc <wc_Sha256Final+40>:	bne	0x11cd8 <wc_Sha256Final+52>
1485	        ret = Sha256Final(sha256);
=> 0x11cd8 <wc_Sha256Final+52>:	ldr	r0, [r11, #-16]
0x00011cdc	1485	        ret = Sha256Final(sha256);
=> 0x11cdc <wc_Sha256Final+56>:	bl	0x11a48 <Sha256Final>
Sha256Final (sha256=0x40800120) at wolfcrypt/src/sha256.c:1291
1291	    {
=> 0x11a48 <Sha256Final>:	push	{r11, lr}
0x00011a4c	1291	    {
=> 0x11a4c <Sha256Final+4>:	add	r11, sp, #4
0x00011a50	1291	    {
=> 0x11a50 <Sha256Final+8>:	sub	sp, sp, #16
0x00011a54	1291	    {
=> 0x11a54 <Sha256Final+12>:	str	r0, [r11, #-16]
1297	        if (sha256->buffLen > WC_SHA256_BLOCK_SIZE - 1) {
=> 0x11a58 <Sha256Final+16>:	ldr	r3, [r11, #-16]
0x00011a5c	1297	        if (sha256->buffLen > WC_SHA256_BLOCK_SIZE - 1) {
=> 0x11a5c <Sha256Final+20>:	ldr	r3, [r3, #96]	; 0x60
1297	        if (sha256->buffLen > WC_SHA256_BLOCK_SIZE - 1) {
=> 0x11a60 <Sha256Final+24>:	cmp	r3, #63	; 0x3f
0x00011a64	1297	        if (sha256->buffLen > WC_SHA256_BLOCK_SIZE - 1) {
=> 0x11a64 <Sha256Final+28>:	bls	0x11a70 <Sha256Final+40>
1302	        local = (byte*)sha256->buffer;
=> 0x11a70 <Sha256Final+40>:	ldr	r3, [r11, #-16]
0x00011a74	1302	        local = (byte*)sha256->buffer;
=> 0x11a74 <Sha256Final+44>:	add	r3, r3, #32
0x00011a78	1302	        local = (byte*)sha256->buffer;
=> 0x11a78 <Sha256Final+48>:	str	r3, [r11, #-12]
1303	        local[sha256->buffLen++] = 0x80; /* add 1 */
=> 0x11a7c <Sha256Final+52>:	ldr	r3, [r11, #-16]
0x00011a80	1303	        local[sha256->buffLen++] = 0x80; /* add 1 */
=> 0x11a80 <Sha256Final+56>:	ldr	r3, [r3, #96]	; 0x60
1303	        local[sha256->buffLen++] = 0x80; /* add 1 */
=> 0x11a84 <Sha256Final+60>:	add	r1, r3, #1
0x00011a88	1303	        local[sha256->buffLen++] = 0x80; /* add 1 */
=> 0x11a88 <Sha256Final+64>:	ldr	r2, [r11, #-16]
0x00011a8c	1303	        local[sha256->buffLen++] = 0x80; /* add 1 */
=> 0x11a8c <Sha256Final+68>:	str	r1, [r2, #96]	; 0x60
1303	        local[sha256->buffLen++] = 0x80; /* add 1 */
=> 0x11a90 <Sha256Final+72>:	ldr	r2, [r11, #-12]
0x00011a94	1303	        local[sha256->buffLen++] = 0x80; /* add 1 */
=> 0x11a94 <Sha256Final+76>:	add	r3, r2, r3
1303	        local[sha256->buffLen++] = 0x80; /* add 1 */
=> 0x11a98 <Sha256Final+80>:	mvn	r2, #127	; 0x7f
0x00011a9c	1303	        local[sha256->buffLen++] = 0x80; /* add 1 */
=> 0x11a9c <Sha256Final+84>:	strb	r2, [r3]
1306	        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
=> 0x11aa0 <Sha256Final+88>:	ldr	r3, [r11, #-16]
0x00011aa4	1306	        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
=> 0x11aa4 <Sha256Final+92>:	ldr	r3, [r3, #96]	; 0x60
1306	        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
=> 0x11aa8 <Sha256Final+96>:	cmp	r3, #56	; 0x38
0x00011aac	1306	        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
=> 0x11aac <Sha256Final+100>:	bls	0x11b34 <Sha256Final+236>
1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b34 <Sha256Final+236>:	ldr	r3, [r11, #-16]
0x00011b38	1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b38 <Sha256Final+240>:	ldr	r3, [r3, #96]	; 0x60
0x00011b3c	1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b3c <Sha256Final+244>:	ldr	r2, [r11, #-12]
0x00011b40	1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b40 <Sha256Final+248>:	add	r0, r2, r3
0x00011b44	1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b44 <Sha256Final+252>:	ldr	r3, [r11, #-16]
0x00011b48	1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b48 <Sha256Final+256>:	ldr	r3, [r3, #96]	; 0x60
0x00011b4c	1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b4c <Sha256Final+260>:	rsb	r3, r3, #56	; 0x38
0x00011b50	1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b50 <Sha256Final+264>:	mov	r2, r3
0x00011b54	1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b54 <Sha256Final+268>:	mov	r1, #0
0x00011b58	1343	        XMEMSET(&local[sha256->buffLen], 0,
=> 0x11b58 <Sha256Final+272>:	bl	0x304b0 <memset>
0x000304b0 in memset ()
=> 0x304b0 <memset>:	mov	r3, r0
0x000304b4 in memset ()
=> 0x304b4 <memset+4>:	cmp	r2, #8
0x000304b8 in memset ()
=> 0x304b8 <memset+8>:	bcc	0x30504 <memset+84>
0x000304bc in memset ()
=> 0x304bc <memset+12>:	tst	r3, #3
0x000304c0 in memset ()
=> 0x304c0 <memset+16>:	strbne	r1, [r3], #1
0x000304c4 in memset ()
=> 0x304c4 <memset+20>:	subne	r2, r2, #1
0x000304c8 in memset ()
=> 0x304c8 <memset+24>:	bne	0x304bc <memset+12>
0x000304bc in memset ()
=> 0x304bc <memset+12>:	tst	r3, #3
0x000304c0 in memset ()
=> 0x304c0 <memset+16>:	strbne	r1, [r3], #1
0x000304c4 in memset ()
=> 0x304c4 <memset+20>:	subne	r2, r2, #1
0x000304c8 in memset ()
=> 0x304c8 <memset+24>:	bne	0x304bc <memset+12>
0x000304bc in memset ()
=> 0x304bc <memset+12>:	tst	r3, #3
0x000304c0 in memset ()
=> 0x304c0 <memset+16>:	strbne	r1, [r3], #1
0x000304c4 in memset ()
=> 0x304c4 <memset+20>:	subne	r2, r2, #1
0x000304c8 in memset ()
=> 0x304c8 <memset+24>:	bne	0x304bc <memset+12>
0x000304cc in memset ()
=> 0x304cc <memset+28>:	and	r1, r1, #255	; 0xff
0x000304d0 in memset ()
=> 0x304d0 <memset+32>:	orr	r1, r1, r1, lsl #8
0x000304d4 in memset ()
=> 0x304d4 <memset+36>:	orr	r1, r1, r1, lsl #16
0x000304d8 in memset ()
=> 0x304d8 <memset+40>:	mov	r12, r1
0x000304dc in memset ()
=> 0x304dc <memset+44>:	subs	r2, r2, #8
0x000304e0 in memset ()
=> 0x304e0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000304e4 in memset ()
=> 0x304e4 <memset+52>:	subscs	r2, r2, #8
0x000304e8 in memset ()
=> 0x304e8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000304ec in memset ()
=> 0x304ec <memset+60>:	subscs	r2, r2, #8
0x000304f0 in memset ()
=> 0x304f0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000304f4 in memset ()
=> 0x304f4 <memset+68>:	subscs	r2, r2, #8
0x000304f8 in memset ()
=> 0x304f8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000304fc in memset ()
=> 0x304fc <memset+76>:	bcs	0x304dc <memset+44>
0x000304dc in memset ()
=> 0x304dc <memset+44>:	subs	r2, r2, #8
0x000304e0 in memset ()
=> 0x304e0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000304e4 in memset ()
=> 0x304e4 <memset+52>:	subscs	r2, r2, #8
0x000304e8 in memset ()
=> 0x304e8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000304ec in memset ()
=> 0x304ec <memset+60>:	subscs	r2, r2, #8
0x000304f0 in memset ()
=> 0x304f0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000304f4 in memset ()
=> 0x304f4 <memset+68>:	subscs	r2, r2, #8
0x000304f8 in memset ()
=> 0x304f8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000304fc in memset ()
=> 0x304fc <memset+76>:	bcs	0x304dc <memset+44>
0x00030500 in memset ()
=> 0x30500 <memset+80>:	and	r2, r2, #7
0x00030504 in memset ()
=> 0x30504 <memset+84>:	subs	r2, r2, #1
0x00030508 in memset ()
=> 0x30508 <memset+88>:	strbcs	r1, [r3], #1
0x0003050c in memset ()
=> 0x3050c <memset+92>:	subscs	r2, r2, #1
0x00030510 in memset ()
=> 0x30510 <memset+96>:	strbcs	r1, [r3], #1
0x00030514 in memset ()
=> 0x30514 <memset+100>:	subscs	r2, r2, #1
0x00030518 in memset ()
=> 0x30518 <memset+104>:	strbcs	r1, [r3], #1
0x0003051c in memset ()
=> 0x3051c <memset+108>:	subscs	r2, r2, #1
0x00030520 in memset ()
=> 0x30520 <memset+112>:	strbcs	r1, [r3], #1
0x00030524 in memset ()
=> 0x30524 <memset+116>:	bcs	0x30504 <memset+84>
0x00030528 in memset ()
=> 0x30528 <memset+120>:	bx	lr
Sha256Final (sha256=0x40800100) at wolfcrypt/src/sha256.c:1347
1347	        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
=> 0x11b5c <Sha256Final+276>:	ldr	r3, [r11, #-16]
0x00011b60	1347	        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
=> 0x11b60 <Sha256Final+280>:	ldr	r3, [r3, #100]	; 0x64
1347	        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
=> 0x11b64 <Sha256Final+284>:	lsr	r2, r3, #29
1348	                                                         (sha256->hiLen << 3);
=> 0x11b68 <Sha256Final+288>:	ldr	r3, [r11, #-16]
0x00011b6c	1348	                                                         (sha256->hiLen << 3);
=> 0x11b6c <Sha256Final+292>:	ldr	r3, [r3, #104]	; 0x68
1348	                                                         (sha256->hiLen << 3);
=> 0x11b70 <Sha256Final+296>:	lsl	r3, r3, #3
1347	        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
=> 0x11b74 <Sha256Final+300>:	add	r2, r2, r3
1347	        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
=> 0x11b78 <Sha256Final+304>:	ldr	r3, [r11, #-16]
0x00011b7c	1347	        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
=> 0x11b7c <Sha256Final+308>:	str	r2, [r3, #104]	; 0x68
1349	        sha256->loLen = sha256->loLen << 3;
=> 0x11b80 <Sha256Final+312>:	ldr	r3, [r11, #-16]
0x00011b84	1349	        sha256->loLen = sha256->loLen << 3;
=> 0x11b84 <Sha256Final+316>:	ldr	r3, [r3, #100]	; 0x64
1349	        sha256->loLen = sha256->loLen << 3;
=> 0x11b88 <Sha256Final+320>:	lsl	r2, r3, #3
1349	        sha256->loLen = sha256->loLen << 3;
=> 0x11b8c <Sha256Final+324>:	ldr	r3, [r11, #-16]
0x00011b90	1349	        sha256->loLen = sha256->loLen << 3;
=> 0x11b90 <Sha256Final+328>:	str	r2, [r3, #100]	; 0x64
1360	            ByteReverseWords(sha256->buffer, sha256->buffer,
=> 0x11b94 <Sha256Final+332>:	ldr	r3, [r11, #-16]
0x00011b98	1360	            ByteReverseWords(sha256->buffer, sha256->buffer,
=> 0x11b98 <Sha256Final+336>:	add	r0, r3, #32
1360	            ByteReverseWords(sha256->buffer, sha256->buffer,
=> 0x11b9c <Sha256Final+340>:	ldr	r3, [r11, #-16]
0x00011ba0	1360	            ByteReverseWords(sha256->buffer, sha256->buffer,
=> 0x11ba0 <Sha256Final+344>:	add	r3, r3, #32
1360	            ByteReverseWords(sha256->buffer, sha256->buffer,
=> 0x11ba4 <Sha256Final+348>:	mov	r2, #56	; 0x38
0x00011ba8	1360	            ByteReverseWords(sha256->buffer, sha256->buffer,
=> 0x11ba8 <Sha256Final+352>:	mov	r1, r3
0x00011bac	1360	            ByteReverseWords(sha256->buffer, sha256->buffer,
=> 0x11bac <Sha256Final+356>:	bl	0x107e4 <ByteReverseWords>
ByteReverseWords (out=0x970ac, in=0x0, byteCount=0) at ./wolfcrypt/src/misc.c:183
183	{
=> 0x107e4 <ByteReverseWords>:	push	{r4, r11, lr}
0x000107e8	183	{
=> 0x107e8 <ByteReverseWords+4>:	add	r11, sp, #8
0x000107ec	183	{
=> 0x107ec <ByteReverseWords+8>:	sub	sp, sp, #44	; 0x2c
0x000107f0	183	{
=> 0x107f0 <ByteReverseWords+12>:	str	r0, [r11, #-40]	; 0xffffffd8
0x000107f4	183	{
=> 0x107f4 <ByteReverseWords+16>:	str	r1, [r11, #-44]	; 0xffffffd4
0x000107f8	183	{
=> 0x107f8 <ByteReverseWords+20>:	str	r2, [r11, #-48]	; 0xffffffd0
183	{
=> 0x107fc <ByteReverseWords+24>:	ldr	r3, [pc, #332]	; 0x10950 <ByteReverseWords+364>
0x00010800	183	{
=> 0x10800 <ByteReverseWords+28>:	ldr	r3, [r3]
0x00010804	183	{
=> 0x10804 <ByteReverseWords+32>:	str	r3, [r11, #-16]
0x00010808	183	{
=> 0x10808 <ByteReverseWords+36>:	mov	r3, #0
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1080c <ByteReverseWords+40>:	ldr	r3, [r11, #-44]	; 0xffffffd4
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10810 <ByteReverseWords+44>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10814 <ByteReverseWords+48>:	cmp	r3, #0
0x00010818	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10818 <ByteReverseWords+52>:	bne	0x10898 <ByteReverseWords+180>
188	        (((size_t)out & 0x3) == 0))
=> 0x1081c <ByteReverseWords+56>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010820	188	        (((size_t)out & 0x3) == 0))
=> 0x10820 <ByteReverseWords+60>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10824 <ByteReverseWords+64>:	cmp	r3, #0
0x00010828	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10828 <ByteReverseWords+68>:	bne	0x10898 <ByteReverseWords+180>
191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x1082c <ByteReverseWords+72>:	ldr	r3, [r11, #-48]	; 0xffffffd0
0x00010830	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10830 <ByteReverseWords+76>:	lsr	r3, r3, #2
0x00010834	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10834 <ByteReverseWords+80>:	str	r3, [r11, #-28]	; 0xffffffe4
192	        for (i = 0; i < count; i++)
=> 0x10838 <ByteReverseWords+84>:	mov	r3, #0
0x0001083c	192	        for (i = 0; i < count; i++)
=> 0x1083c <ByteReverseWords+88>:	str	r3, [r11, #-32]	; 0xffffffe0
192	        for (i = 0; i < count; i++)
=> 0x10840 <ByteReverseWords+92>:	b	0x10884 <ByteReverseWords+160>
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=0) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=1819035749) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=1819035749) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=1819035749, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=542601004) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=542601004) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=542601004, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=1818521458) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=1818521458) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=1818521458, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=8576) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=8576) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=8576, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=0, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800120, in=0x40800120, byteCount=56) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
190	    {
=> 0x10894 <ByteReverseWords+176>:	b	0x10928 <ByteReverseWords+324>
210	}
=> 0x10928 <ByteReverseWords+324>:	nop			; (mov r0, r0)
0x0001092c	210	}
=> 0x1092c <ByteReverseWords+328>:	ldr	r3, [pc, #28]	; 0x10950 <ByteReverseWords+364>
0x00010930	210	}
=> 0x10930 <ByteReverseWords+332>:	ldr	r2, [r3]
0x00010934	210	}
=> 0x10934 <ByteReverseWords+336>:	ldr	r3, [r11, #-16]
0x00010938	210	}
=> 0x10938 <ByteReverseWords+340>:	eors	r2, r3, r2
0x0001093c	210	}
=> 0x1093c <ByteReverseWords+344>:	mov	r3, #0
0x00010940	210	}
=> 0x10940 <ByteReverseWords+348>:	beq	0x10948 <ByteReverseWords+356>
0x00010948	210	}
=> 0x10948 <ByteReverseWords+356>:	sub	sp, r11, #8
0x0001094c	210	}
=> 0x1094c <ByteReverseWords+360>:	pop	{r4, r11, pc}
Sha256Final (sha256=0x40800100) at wolfcrypt/src/sha256.c:1364
1364	        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
=> 0x11bb0 <Sha256Final+360>:	ldr	r3, [r11, #-12]
0x00011bb4	1364	        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
=> 0x11bb4 <Sha256Final+364>:	add	r0, r3, #56	; 0x38
0x00011bb8	1364	        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
=> 0x11bb8 <Sha256Final+368>:	ldr	r3, [r11, #-16]
0x00011bbc	1364	        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
=> 0x11bbc <Sha256Final+372>:	add	r3, r3, #104	; 0x68
0x00011bc0	1364	        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
=> 0x11bc0 <Sha256Final+376>:	mov	r2, #4
0x00011bc4	1364	        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
=> 0x11bc4 <Sha256Final+380>:	mov	r1, r3
0x00011bc8	1364	        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
=> 0x11bc8 <Sha256Final+384>:	bl	0x305a0 <memcpy>
0x000305a0 in memcpy ()
=> 0x305a0 <memcpy>:	push	{r0, r4, lr}
0x000305a4 in memcpy ()
=> 0x305a4 <memcpy+4>:	subs	r2, r2, #4
0x000305a8 in memcpy ()
=> 0x305a8 <memcpy+8>:	bcc	0x30634 <memcpy+148>
0x000305ac in memcpy ()
=> 0x305ac <memcpy+12>:	ands	r12, r0, #3
0x000305b0 in memcpy ()
=> 0x305b0 <memcpy+16>:	bne	0x30654 <memcpy+180>
0x000305b4 in memcpy ()
=> 0x305b4 <memcpy+20>:	ands	r12, r1, #3
0x000305b8 in memcpy ()
=> 0x305b8 <memcpy+24>:	bne	0x30684 <memcpy+228>
0x000305bc in memcpy ()
=> 0x305bc <memcpy+28>:	subs	r2, r2, #28
0x000305c0 in memcpy ()
=> 0x305c0 <memcpy+32>:	push	{r5, r6, r7, r8}
0x000305c4 in memcpy ()
=> 0x305c4 <memcpy+36>:	bcc	0x305d8 <memcpy+56>
0x000305d8 in memcpy ()
=> 0x305d8 <memcpy+56>:	ands	r12, r2, #28
0x000305dc in memcpy ()
=> 0x305dc <memcpy+60>:	rsb	r12, r12, #32
0x000305e0 in memcpy ()
=> 0x305e0 <memcpy+64>:	addne	pc, pc, r12
0x00030604 in memcpy ()
=> 0x30604 <memcpy+100>:	ldr	lr, [r1], #4
0x00030608 in memcpy ()
=> 0x30608 <memcpy+104>:	add	pc, pc, r12
0x0003062c in memcpy ()
=> 0x3062c <memcpy+140>:	str	lr, [r0], #4
0x00030630 in memcpy ()
=> 0x30630 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x00030634 in memcpy ()
=> 0x30634 <memcpy+148>:	lsls	r2, r2, #31
0x00030638 in memcpy ()
=> 0x30638 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003063c in memcpy ()
=> 0x3063c <memcpy+156>:	ldrbcs	r4, [r1], #1
0x00030640 in memcpy ()
=> 0x30640 <memcpy+160>:	ldrbcs	r12, [r1]
0x00030644 in memcpy ()
=> 0x30644 <memcpy+164>:	strbne	r3, [r0], #1
0x00030648 in memcpy ()
=> 0x30648 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003064c in memcpy ()
=> 0x3064c <memcpy+172>:	strbcs	r12, [r0]
0x00030650 in memcpy ()
=> 0x30650 <memcpy+176>:	pop	{r0, r4, pc}
Sha256Final (sha256=0x40800100) at wolfcrypt/src/sha256.c:1365
1365	        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
=> 0x11bcc <Sha256Final+388>:	ldr	r3, [r11, #-12]
0x00011bd0	1365	        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
=> 0x11bd0 <Sha256Final+392>:	add	r0, r3, #60	; 0x3c
0x00011bd4	1365	        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
=> 0x11bd4 <Sha256Final+396>:	ldr	r3, [r11, #-16]
0x00011bd8	1365	        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
=> 0x11bd8 <Sha256Final+400>:	add	r3, r3, #100	; 0x64
0x00011bdc	1365	        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
=> 0x11bdc <Sha256Final+404>:	mov	r2, #4
0x00011be0	1365	        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
=> 0x11be0 <Sha256Final+408>:	mov	r1, r3
0x00011be4	1365	        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
=> 0x11be4 <Sha256Final+412>:	bl	0x305a0 <memcpy>
0x000305a0 in memcpy ()
=> 0x305a0 <memcpy>:	push	{r0, r4, lr}
0x000305a4 in memcpy ()
=> 0x305a4 <memcpy+4>:	subs	r2, r2, #4
0x000305a8 in memcpy ()
=> 0x305a8 <memcpy+8>:	bcc	0x30634 <memcpy+148>
0x000305ac in memcpy ()
=> 0x305ac <memcpy+12>:	ands	r12, r0, #3
0x000305b0 in memcpy ()
=> 0x305b0 <memcpy+16>:	bne	0x30654 <memcpy+180>
0x000305b4 in memcpy ()
=> 0x305b4 <memcpy+20>:	ands	r12, r1, #3
0x000305b8 in memcpy ()
=> 0x305b8 <memcpy+24>:	bne	0x30684 <memcpy+228>
0x000305bc in memcpy ()
=> 0x305bc <memcpy+28>:	subs	r2, r2, #28
0x000305c0 in memcpy ()
=> 0x305c0 <memcpy+32>:	push	{r5, r6, r7, r8}
0x000305c4 in memcpy ()
=> 0x305c4 <memcpy+36>:	bcc	0x305d8 <memcpy+56>
0x000305d8 in memcpy ()
=> 0x305d8 <memcpy+56>:	ands	r12, r2, #28
0x000305dc in memcpy ()
=> 0x305dc <memcpy+60>:	rsb	r12, r12, #32
0x000305e0 in memcpy ()
=> 0x305e0 <memcpy+64>:	addne	pc, pc, r12
0x00030604 in memcpy ()
=> 0x30604 <memcpy+100>:	ldr	lr, [r1], #4
0x00030608 in memcpy ()
=> 0x30608 <memcpy+104>:	add	pc, pc, r12
0x0003062c in memcpy ()
=> 0x3062c <memcpy+140>:	str	lr, [r0], #4
0x00030630 in memcpy ()
=> 0x30630 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x00030634 in memcpy ()
=> 0x30634 <memcpy+148>:	lsls	r2, r2, #31
0x00030638 in memcpy ()
=> 0x30638 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003063c in memcpy ()
=> 0x3063c <memcpy+156>:	ldrbcs	r4, [r1], #1
0x00030640 in memcpy ()
=> 0x30640 <memcpy+160>:	ldrbcs	r12, [r1]
0x00030644 in memcpy ()
=> 0x30644 <memcpy+164>:	strbne	r3, [r0], #1
0x00030648 in memcpy ()
=> 0x30648 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003064c in memcpy ()
=> 0x3064c <memcpy+172>:	strbcs	r12, [r0]
0x00030650 in memcpy ()
=> 0x30650 <memcpy+176>:	pop	{r0, r4, pc}
Sha256Final (sha256=0x40800100) at wolfcrypt/src/sha256.c:1425
1425	        ret = XTRANSFORM(sha256, (const byte*)local);
=> 0x11be8 <Sha256Final+416>:	ldr	r1, [r11, #-12]
0x00011bec	1425	        ret = XTRANSFORM(sha256, (const byte*)local);
=> 0x11bec <Sha256Final+420>:	ldr	r0, [r11, #-16]
0x00011bf0	1425	        ret = XTRANSFORM(sha256, (const byte*)local);
=> 0x11bf0 <Sha256Final+424>:	bl	0x10b30 <Transform_Sha256>
Transform_Sha256 (sha256=0x0, data=0x0) at wolfcrypt/src/sha256.c:948
948	    {
=> 0x10b30 <Transform_Sha256>:	push	{r4, r5, r11, lr}
0x00010b34	948	    {
=> 0x10b34 <Transform_Sha256+4>:	add	r11, sp, #12
0x00010b38	948	    {
=> 0x10b38 <Transform_Sha256+8>:	sub	sp, sp, #312	; 0x138
0x00010b3c	948	    {
=> 0x10b3c <Transform_Sha256+12>:	str	r0, [r11, #-320]	; 0xfffffec0
0x00010b40	948	    {
=> 0x10b40 <Transform_Sha256+16>:	str	r1, [r11, #-324]	; 0xfffffebc
948	    {
=> 0x10b44 <Transform_Sha256+20>:	ldr	r3, [pc, #3092]	; 0x11760 <Transform_Sha256+3120>
0x00010b48	948	    {
=> 0x10b48 <Transform_Sha256+24>:	ldr	r3, [r3]
0x00010b4c	948	    {
=> 0x10b4c <Transform_Sha256+28>:	str	r3, [r11, #-16]
0x00010b50	948	    {
=> 0x10b50 <Transform_Sha256+32>:	mov	r3, #0
972	        for (i = 0; i < 8; i++)
=> 0x10b54 <Transform_Sha256+36>:	mov	r3, #0
0x00010b58	972	        for (i = 0; i < 8; i++)
=> 0x10b58 <Transform_Sha256+40>:	str	r3, [r11, #-316]	; 0xfffffec4
972	        for (i = 0; i < 8; i++)
=> 0x10b5c <Transform_Sha256+44>:	b	0x10b8c <Transform_Sha256+92>
0x00010b8c	972	        for (i = 0; i < 8; i++)
=> 0x10b8c <Transform_Sha256+92>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b90	972	        for (i = 0; i < 8; i++)
=> 0x10b90 <Transform_Sha256+96>:	cmp	r3, #7
0x00010b94	972	        for (i = 0; i < 8; i++)
=> 0x10b94 <Transform_Sha256+100>:	ble	0x10b60 <Transform_Sha256+48>
973	            S[i] = sha256->digest[i];
=> 0x10b60 <Transform_Sha256+48>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00010b64	973	            S[i] = sha256->digest[i];
=> 0x10b64 <Transform_Sha256+52>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00010b68	973	            S[i] = sha256->digest[i];
=> 0x10b68 <Transform_Sha256+56>:	ldr	r2, [r3, r2, lsl #2]
0x00010b6c	973	            S[i] = sha256->digest[i];
=> 0x10b6c <Transform_Sha256+60>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b70	973	            S[i] = sha256->digest[i];
=> 0x10b70 <Transform_Sha256+64>:	lsl	r3, r3, #2
0x00010b74	973	            S[i] = sha256->digest[i];
=> 0x10b74 <Transform_Sha256+68>:	sub	r3, r3, #12
0x00010b78	973	            S[i] = sha256->digest[i];
=> 0x10b78 <Transform_Sha256+72>:	add	r3, r3, r11
0x00010b7c	973	            S[i] = sha256->digest[i];
=> 0x10b7c <Transform_Sha256+76>:	str	r2, [r3, #-292]	; 0xfffffedc
972	        for (i = 0; i < 8; i++)
=> 0x10b80 <Transform_Sha256+80>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b84	972	        for (i = 0; i < 8; i++)
=> 0x10b84 <Transform_Sha256+84>:	add	r3, r3, #1
0x00010b88	972	        for (i = 0; i < 8; i++)
=> 0x10b88 <Transform_Sha256+88>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010b8c	972	        for (i = 0; i < 8; i++)
=> 0x10b8c <Transform_Sha256+92>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b90	972	        for (i = 0; i < 8; i++)
=> 0x10b90 <Transform_Sha256+96>:	cmp	r3, #7
0x00010b94	972	        for (i = 0; i < 8; i++)
=> 0x10b94 <Transform_Sha256+100>:	ble	0x10b60 <Transform_Sha256+48>
973	            S[i] = sha256->digest[i];
=> 0x10b60 <Transform_Sha256+48>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00010b64	973	            S[i] = sha256->digest[i];
=> 0x10b64 <Transform_Sha256+52>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00010b68	973	            S[i] = sha256->digest[i];
=> 0x10b68 <Transform_Sha256+56>:	ldr	r2, [r3, r2, lsl #2]
0x00010b6c	973	            S[i] = sha256->digest[i];
=> 0x10b6c <Transform_Sha256+60>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b70	973	            S[i] = sha256->digest[i];
=> 0x10b70 <Transform_Sha256+64>:	lsl	r3, r3, #2
0x00010b74	973	            S[i] = sha256->digest[i];
=> 0x10b74 <Transform_Sha256+68>:	sub	r3, r3, #12
0x00010b78	973	            S[i] = sha256->digest[i];
=> 0x10b78 <Transform_Sha256+72>:	add	r3, r3, r11
0x00010b7c	973	            S[i] = sha256->digest[i];
=> 0x10b7c <Transform_Sha256+76>:	str	r2, [r3, #-292]	; 0xfffffedc
972	        for (i = 0; i < 8; i++)
=> 0x10b80 <Transform_Sha256+80>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b84	972	        for (i = 0; i < 8; i++)
=> 0x10b84 <Transform_Sha256+84>:	add	r3, r3, #1
0x00010b88	972	        for (i = 0; i < 8; i++)
=> 0x10b88 <Transform_Sha256+88>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010b8c	972	        for (i = 0; i < 8; i++)
=> 0x10b8c <Transform_Sha256+92>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b90	972	        for (i = 0; i < 8; i++)
=> 0x10b90 <Transform_Sha256+96>:	cmp	r3, #7
0x00010b94	972	        for (i = 0; i < 8; i++)
=> 0x10b94 <Transform_Sha256+100>:	ble	0x10b60 <Transform_Sha256+48>
973	            S[i] = sha256->digest[i];
=> 0x10b60 <Transform_Sha256+48>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00010b64	973	            S[i] = sha256->digest[i];
=> 0x10b64 <Transform_Sha256+52>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00010b68	973	            S[i] = sha256->digest[i];
=> 0x10b68 <Transform_Sha256+56>:	ldr	r2, [r3, r2, lsl #2]
0x00010b6c	973	            S[i] = sha256->digest[i];
=> 0x10b6c <Transform_Sha256+60>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b70	973	            S[i] = sha256->digest[i];
=> 0x10b70 <Transform_Sha256+64>:	lsl	r3, r3, #2
0x00010b74	973	            S[i] = sha256->digest[i];
=> 0x10b74 <Transform_Sha256+68>:	sub	r3, r3, #12
0x00010b78	973	            S[i] = sha256->digest[i];
=> 0x10b78 <Transform_Sha256+72>:	add	r3, r3, r11
0x00010b7c	973	            S[i] = sha256->digest[i];
=> 0x10b7c <Transform_Sha256+76>:	str	r2, [r3, #-292]	; 0xfffffedc
972	        for (i = 0; i < 8; i++)
=> 0x10b80 <Transform_Sha256+80>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b84	972	        for (i = 0; i < 8; i++)
=> 0x10b84 <Transform_Sha256+84>:	add	r3, r3, #1
0x00010b88	972	        for (i = 0; i < 8; i++)
=> 0x10b88 <Transform_Sha256+88>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010b8c	972	        for (i = 0; i < 8; i++)
=> 0x10b8c <Transform_Sha256+92>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b90	972	        for (i = 0; i < 8; i++)
=> 0x10b90 <Transform_Sha256+96>:	cmp	r3, #7
0x00010b94	972	        for (i = 0; i < 8; i++)
=> 0x10b94 <Transform_Sha256+100>:	ble	0x10b60 <Transform_Sha256+48>
973	            S[i] = sha256->digest[i];
=> 0x10b60 <Transform_Sha256+48>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00010b64	973	            S[i] = sha256->digest[i];
=> 0x10b64 <Transform_Sha256+52>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00010b68	973	            S[i] = sha256->digest[i];
=> 0x10b68 <Transform_Sha256+56>:	ldr	r2, [r3, r2, lsl #2]
0x00010b6c	973	            S[i] = sha256->digest[i];
=> 0x10b6c <Transform_Sha256+60>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b70	973	            S[i] = sha256->digest[i];
=> 0x10b70 <Transform_Sha256+64>:	lsl	r3, r3, #2
0x00010b74	973	            S[i] = sha256->digest[i];
=> 0x10b74 <Transform_Sha256+68>:	sub	r3, r3, #12
0x00010b78	973	            S[i] = sha256->digest[i];
=> 0x10b78 <Transform_Sha256+72>:	add	r3, r3, r11
0x00010b7c	973	            S[i] = sha256->digest[i];
=> 0x10b7c <Transform_Sha256+76>:	str	r2, [r3, #-292]	; 0xfffffedc
972	        for (i = 0; i < 8; i++)
=> 0x10b80 <Transform_Sha256+80>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b84	972	        for (i = 0; i < 8; i++)
=> 0x10b84 <Transform_Sha256+84>:	add	r3, r3, #1
0x00010b88	972	        for (i = 0; i < 8; i++)
=> 0x10b88 <Transform_Sha256+88>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010b8c	972	        for (i = 0; i < 8; i++)
=> 0x10b8c <Transform_Sha256+92>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b90	972	        for (i = 0; i < 8; i++)
=> 0x10b90 <Transform_Sha256+96>:	cmp	r3, #7
0x00010b94	972	        for (i = 0; i < 8; i++)
=> 0x10b94 <Transform_Sha256+100>:	ble	0x10b60 <Transform_Sha256+48>
973	            S[i] = sha256->digest[i];
=> 0x10b60 <Transform_Sha256+48>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00010b64	973	            S[i] = sha256->digest[i];
=> 0x10b64 <Transform_Sha256+52>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00010b68	973	            S[i] = sha256->digest[i];
=> 0x10b68 <Transform_Sha256+56>:	ldr	r2, [r3, r2, lsl #2]
0x00010b6c	973	            S[i] = sha256->digest[i];
=> 0x10b6c <Transform_Sha256+60>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b70	973	            S[i] = sha256->digest[i];
=> 0x10b70 <Transform_Sha256+64>:	lsl	r3, r3, #2
0x00010b74	973	            S[i] = sha256->digest[i];
=> 0x10b74 <Transform_Sha256+68>:	sub	r3, r3, #12
0x00010b78	973	            S[i] = sha256->digest[i];
=> 0x10b78 <Transform_Sha256+72>:	add	r3, r3, r11
0x00010b7c	973	            S[i] = sha256->digest[i];
=> 0x10b7c <Transform_Sha256+76>:	str	r2, [r3, #-292]	; 0xfffffedc
972	        for (i = 0; i < 8; i++)
=> 0x10b80 <Transform_Sha256+80>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b84	972	        for (i = 0; i < 8; i++)
=> 0x10b84 <Transform_Sha256+84>:	add	r3, r3, #1
0x00010b88	972	        for (i = 0; i < 8; i++)
=> 0x10b88 <Transform_Sha256+88>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010b8c	972	        for (i = 0; i < 8; i++)
=> 0x10b8c <Transform_Sha256+92>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b90	972	        for (i = 0; i < 8; i++)
=> 0x10b90 <Transform_Sha256+96>:	cmp	r3, #7
0x00010b94	972	        for (i = 0; i < 8; i++)
=> 0x10b94 <Transform_Sha256+100>:	ble	0x10b60 <Transform_Sha256+48>
973	            S[i] = sha256->digest[i];
=> 0x10b60 <Transform_Sha256+48>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00010b64	973	            S[i] = sha256->digest[i];
=> 0x10b64 <Transform_Sha256+52>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00010b68	973	            S[i] = sha256->digest[i];
=> 0x10b68 <Transform_Sha256+56>:	ldr	r2, [r3, r2, lsl #2]
0x00010b6c	973	            S[i] = sha256->digest[i];
=> 0x10b6c <Transform_Sha256+60>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b70	973	            S[i] = sha256->digest[i];
=> 0x10b70 <Transform_Sha256+64>:	lsl	r3, r3, #2
0x00010b74	973	            S[i] = sha256->digest[i];
=> 0x10b74 <Transform_Sha256+68>:	sub	r3, r3, #12
0x00010b78	973	            S[i] = sha256->digest[i];
=> 0x10b78 <Transform_Sha256+72>:	add	r3, r3, r11
0x00010b7c	973	            S[i] = sha256->digest[i];
=> 0x10b7c <Transform_Sha256+76>:	str	r2, [r3, #-292]	; 0xfffffedc
972	        for (i = 0; i < 8; i++)
=> 0x10b80 <Transform_Sha256+80>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b84	972	        for (i = 0; i < 8; i++)
=> 0x10b84 <Transform_Sha256+84>:	add	r3, r3, #1
0x00010b88	972	        for (i = 0; i < 8; i++)
=> 0x10b88 <Transform_Sha256+88>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010b8c	972	        for (i = 0; i < 8; i++)
=> 0x10b8c <Transform_Sha256+92>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b90	972	        for (i = 0; i < 8; i++)
=> 0x10b90 <Transform_Sha256+96>:	cmp	r3, #7
0x00010b94	972	        for (i = 0; i < 8; i++)
=> 0x10b94 <Transform_Sha256+100>:	ble	0x10b60 <Transform_Sha256+48>
973	            S[i] = sha256->digest[i];
=> 0x10b60 <Transform_Sha256+48>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00010b64	973	            S[i] = sha256->digest[i];
=> 0x10b64 <Transform_Sha256+52>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00010b68	973	            S[i] = sha256->digest[i];
=> 0x10b68 <Transform_Sha256+56>:	ldr	r2, [r3, r2, lsl #2]
0x00010b6c	973	            S[i] = sha256->digest[i];
=> 0x10b6c <Transform_Sha256+60>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b70	973	            S[i] = sha256->digest[i];
=> 0x10b70 <Transform_Sha256+64>:	lsl	r3, r3, #2
0x00010b74	973	            S[i] = sha256->digest[i];
=> 0x10b74 <Transform_Sha256+68>:	sub	r3, r3, #12
0x00010b78	973	            S[i] = sha256->digest[i];
=> 0x10b78 <Transform_Sha256+72>:	add	r3, r3, r11
0x00010b7c	973	            S[i] = sha256->digest[i];
=> 0x10b7c <Transform_Sha256+76>:	str	r2, [r3, #-292]	; 0xfffffedc
972	        for (i = 0; i < 8; i++)
=> 0x10b80 <Transform_Sha256+80>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b84	972	        for (i = 0; i < 8; i++)
=> 0x10b84 <Transform_Sha256+84>:	add	r3, r3, #1
0x00010b88	972	        for (i = 0; i < 8; i++)
=> 0x10b88 <Transform_Sha256+88>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010b8c	972	        for (i = 0; i < 8; i++)
=> 0x10b8c <Transform_Sha256+92>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b90	972	        for (i = 0; i < 8; i++)
=> 0x10b90 <Transform_Sha256+96>:	cmp	r3, #7
0x00010b94	972	        for (i = 0; i < 8; i++)
=> 0x10b94 <Transform_Sha256+100>:	ble	0x10b60 <Transform_Sha256+48>
973	            S[i] = sha256->digest[i];
=> 0x10b60 <Transform_Sha256+48>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00010b64	973	            S[i] = sha256->digest[i];
=> 0x10b64 <Transform_Sha256+52>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00010b68	973	            S[i] = sha256->digest[i];
=> 0x10b68 <Transform_Sha256+56>:	ldr	r2, [r3, r2, lsl #2]
0x00010b6c	973	            S[i] = sha256->digest[i];
=> 0x10b6c <Transform_Sha256+60>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b70	973	            S[i] = sha256->digest[i];
=> 0x10b70 <Transform_Sha256+64>:	lsl	r3, r3, #2
0x00010b74	973	            S[i] = sha256->digest[i];
=> 0x10b74 <Transform_Sha256+68>:	sub	r3, r3, #12
0x00010b78	973	            S[i] = sha256->digest[i];
=> 0x10b78 <Transform_Sha256+72>:	add	r3, r3, r11
0x00010b7c	973	            S[i] = sha256->digest[i];
=> 0x10b7c <Transform_Sha256+76>:	str	r2, [r3, #-292]	; 0xfffffedc
972	        for (i = 0; i < 8; i++)
=> 0x10b80 <Transform_Sha256+80>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b84	972	        for (i = 0; i < 8; i++)
=> 0x10b84 <Transform_Sha256+84>:	add	r3, r3, #1
0x00010b88	972	        for (i = 0; i < 8; i++)
=> 0x10b88 <Transform_Sha256+88>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010b8c	972	        for (i = 0; i < 8; i++)
=> 0x10b8c <Transform_Sha256+92>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010b90	972	        for (i = 0; i < 8; i++)
=> 0x10b90 <Transform_Sha256+96>:	cmp	r3, #7
0x00010b94	972	        for (i = 0; i < 8; i++)
=> 0x10b94 <Transform_Sha256+100>:	ble	0x10b60 <Transform_Sha256+48>
975	        for (i = 0; i < 16; i++)
=> 0x10b98 <Transform_Sha256+104>:	mov	r3, #0
0x00010b9c	975	        for (i = 0; i < 16; i++)
=> 0x10b9c <Transform_Sha256+108>:	str	r3, [r11, #-316]	; 0xfffffec4
975	        for (i = 0; i < 16; i++)
=> 0x10ba0 <Transform_Sha256+112>:	b	0x10bdc <Transform_Sha256+172>
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba4 <Transform_Sha256+116>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ba8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10ba8 <Transform_Sha256+120>:	lsl	r3, r3, #2
0x00010bac	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bac <Transform_Sha256+124>:	mov	r2, r3
0x00010bb0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb0 <Transform_Sha256+128>:	ldr	r3, [r11, #-324]	; 0xfffffebc
0x00010bb4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb4 <Transform_Sha256+132>:	add	r3, r3, r2
0x00010bb8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bb8 <Transform_Sha256+136>:	ldr	r2, [r3]
0x00010bbc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bbc <Transform_Sha256+140>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bc0	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc0 <Transform_Sha256+144>:	lsl	r3, r3, #2
0x00010bc4	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc4 <Transform_Sha256+148>:	sub	r3, r3, #12
0x00010bc8	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bc8 <Transform_Sha256+152>:	add	r3, r3, r11
0x00010bcc	976	            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
=> 0x10bcc <Transform_Sha256+156>:	str	r2, [r3, #-260]	; 0xfffffefc
975	        for (i = 0; i < 16; i++)
=> 0x10bd0 <Transform_Sha256+160>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bd4	975	        for (i = 0; i < 16; i++)
=> 0x10bd4 <Transform_Sha256+164>:	add	r3, r3, #1
0x00010bd8	975	        for (i = 0; i < 16; i++)
=> 0x10bd8 <Transform_Sha256+168>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010bdc	975	        for (i = 0; i < 16; i++)
=> 0x10bdc <Transform_Sha256+172>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010be0	975	        for (i = 0; i < 16; i++)
=> 0x10be0 <Transform_Sha256+176>:	cmp	r3, #15
0x00010be4	975	        for (i = 0; i < 16; i++)
=> 0x10be4 <Transform_Sha256+180>:	ble	0x10ba4 <Transform_Sha256+116>
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10be8 <Transform_Sha256+184>:	mov	r3, #16
0x00010bec	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10bec <Transform_Sha256+188>:	str	r3, [r11, #-316]	; 0xfffffec4
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10bf0 <Transform_Sha256+192>:	b	0x10d38 <Transform_Sha256+520>
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=0) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1865162839, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1865162839, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=104, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=104, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1869769828, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1869769828, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4086526957, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4086526957, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=562036736, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=562036736, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3448689375, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3448689375, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1268586539, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1268586539, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3565649090, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3565649090, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=788671483, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=788671483, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1372328204, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1372328204, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1351168851, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1351168851, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2118600136, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2118600136, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2372317944, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2372317944, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2514467173, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2514467173, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1669827445, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1669827445, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1522351029, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1522351029, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=0, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2258177373, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2258177373, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=104, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=104, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2336480410, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2336480410, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4086526957, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4086526957, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4119206833, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4119206833, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3448689375, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3448689375, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1020374044, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1020374044, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1268586539, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1268586539, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1789134820, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1789134820, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3565649090, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3565649090, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=780621759, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=780621759, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=788671483, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=788671483, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1769453863, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1769453863, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1372328204, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1372328204, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=361031757, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=361031757, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1351168851, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1351168851, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4241234816, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4241234816, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2118600136, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2118600136, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=283203123, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=283203123, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2372317944, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2372317944, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1781574667, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1781574667, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2514467173, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2514467173, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3067041864, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3067041864, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1669827445, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1669827445, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=928353365, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=928353365, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1522351029, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1522351029, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1254299533, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1254299533, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2258177373, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2258177373, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=533325715, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=533325715, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2336480410, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2336480410, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=691570248, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=691570248, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4119206833, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4119206833, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=974053614, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=974053614, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1020374044, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1020374044, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1158912607, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1158912607, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1789134820, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1789134820, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2912839654, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2912839654, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=780621759, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=780621759, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4145355160, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4145355160, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1769453863, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1769453863, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1659778127, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1659778127, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=361031757, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=361031757, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=734634379, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=734634379, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4241234816, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4241234816, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=300939214, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=300939214, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=283203123, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=283203123, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1293021348, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1293021348, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1781574667, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1781574667, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2024510312, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2024510312, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3067041864, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3067041864, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3043383236, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3043383236, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=928353365, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=928353365, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1857238865, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1857238865, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1254299533, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1254299533, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3397810536, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3397810536, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=533325715, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=533325715, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=916920976, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=916920976, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=691570248, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=691570248, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2894157239, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2894157239, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=974053614, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=974053614, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2413492227, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2413492227, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1158912607, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1158912607, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2235067540, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2235067540, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2912839654, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2912839654, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1666645653, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1666645653, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4145355160, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf4 <Transform_Sha256+196>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010bf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bf8 <Transform_Sha256+200>:	sub	r3, r3, #2
0x00010bfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10bfc <Transform_Sha256+204>:	lsl	r3, r3, #2
0x00010c00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c00 <Transform_Sha256+208>:	sub	r3, r3, #12
0x00010c04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c04 <Transform_Sha256+212>:	add	r3, r3, r11
0x00010c08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c08 <Transform_Sha256+216>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c0c <Transform_Sha256+220>:	mov	r1, #17
0x00010c10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c10 <Transform_Sha256+224>:	mov	r0, r3
0x00010c14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c14 <Transform_Sha256+228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4145355160, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c18 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c18 <Transform_Sha256+232>:	mov	r4, r0
0x00010c1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c1c <Transform_Sha256+236>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c20 <Transform_Sha256+240>:	sub	r3, r3, #2
0x00010c24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c24 <Transform_Sha256+244>:	lsl	r3, r3, #2
0x00010c28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c28 <Transform_Sha256+248>:	sub	r3, r3, #12
0x00010c2c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c2c <Transform_Sha256+252>:	add	r3, r3, r11
0x00010c30	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c30 <Transform_Sha256+256>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c34	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c34 <Transform_Sha256+260>:	mov	r1, #19
0x00010c38	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c38 <Transform_Sha256+264>:	mov	r0, r3
0x00010c3c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c3c <Transform_Sha256+268>:	bl	0x10760 <rotrFixed>
rotrFixed (x=819054884, y=17) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010c40 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c40 <Transform_Sha256+272>:	mov	r3, r0
0x00010c44	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c44 <Transform_Sha256+276>:	eor	r2, r4, r3
0x00010c48	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c48 <Transform_Sha256+280>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c4c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c4c <Transform_Sha256+284>:	sub	r3, r3, #2
0x00010c50	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c50 <Transform_Sha256+288>:	lsl	r3, r3, #2
0x00010c54	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c54 <Transform_Sha256+292>:	sub	r3, r3, #12
0x00010c58	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c58 <Transform_Sha256+296>:	add	r3, r3, r11
0x00010c5c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c5c <Transform_Sha256+300>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c60	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c60 <Transform_Sha256+304>:	lsr	r3, r3, #10
0x00010c64	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c64 <Transform_Sha256+308>:	eor	r2, r2, r3
0x00010c68	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c68 <Transform_Sha256+312>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c6c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c6c <Transform_Sha256+316>:	sub	r3, r3, #7
0x00010c70	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c70 <Transform_Sha256+320>:	lsl	r3, r3, #2
0x00010c74	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c74 <Transform_Sha256+324>:	sub	r3, r3, #12
0x00010c78	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c78 <Transform_Sha256+328>:	add	r3, r3, r11
0x00010c7c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c7c <Transform_Sha256+332>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c80	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c80 <Transform_Sha256+336>:	add	r4, r2, r3
0x00010c84	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c84 <Transform_Sha256+340>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010c88	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c88 <Transform_Sha256+344>:	sub	r3, r3, #15
0x00010c8c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c8c <Transform_Sha256+348>:	lsl	r3, r3, #2
0x00010c90	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c90 <Transform_Sha256+352>:	sub	r3, r3, #12
0x00010c94	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c94 <Transform_Sha256+356>:	add	r3, r3, r11
0x00010c98	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c98 <Transform_Sha256+360>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010c9c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10c9c <Transform_Sha256+364>:	mov	r1, #7
0x00010ca0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca0 <Transform_Sha256+368>:	mov	r0, r3
0x00010ca4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca4 <Transform_Sha256+372>:	bl	0x10760 <rotrFixed>
rotrFixed (x=819054884, y=19) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ca8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ca8 <Transform_Sha256+376>:	mov	r5, r0
0x00010cac	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cac <Transform_Sha256+380>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cb0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb0 <Transform_Sha256+384>:	sub	r3, r3, #15
0x00010cb4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb4 <Transform_Sha256+388>:	lsl	r3, r3, #2
0x00010cb8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cb8 <Transform_Sha256+392>:	sub	r3, r3, #12
0x00010cbc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cbc <Transform_Sha256+396>:	add	r3, r3, r11
0x00010cc0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc0 <Transform_Sha256+400>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cc4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc4 <Transform_Sha256+404>:	mov	r1, #18
0x00010cc8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cc8 <Transform_Sha256+408>:	mov	r0, r3
0x00010ccc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ccc <Transform_Sha256+412>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1659778127, y=7) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010cd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:979
979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd0 <Transform_Sha256+416>:	mov	r3, r0
0x00010cd4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd4 <Transform_Sha256+420>:	eor	r2, r5, r3
0x00010cd8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cd8 <Transform_Sha256+424>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010cdc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cdc <Transform_Sha256+428>:	sub	r3, r3, #15
0x00010ce0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce0 <Transform_Sha256+432>:	lsl	r3, r3, #2
0x00010ce4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce4 <Transform_Sha256+436>:	sub	r3, r3, #12
0x00010ce8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10ce8 <Transform_Sha256+440>:	add	r3, r3, r11
0x00010cec	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cec <Transform_Sha256+444>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010cf0	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf0 <Transform_Sha256+448>:	lsr	r3, r3, #3
0x00010cf4	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf4 <Transform_Sha256+452>:	eor	r3, r3, r2
0x00010cf8	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cf8 <Transform_Sha256+456>:	add	r2, r4, r3
0x00010cfc	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10cfc <Transform_Sha256+460>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d00	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d00 <Transform_Sha256+464>:	sub	r3, r3, #16
0x00010d04	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d04 <Transform_Sha256+468>:	lsl	r3, r3, #2
0x00010d08	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d08 <Transform_Sha256+472>:	sub	r3, r3, #12
0x00010d0c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d0c <Transform_Sha256+476>:	add	r3, r3, r11
0x00010d10	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d10 <Transform_Sha256+480>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010d14	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d14 <Transform_Sha256+484>:	add	r2, r2, r3
0x00010d18	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d18 <Transform_Sha256+488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d1c	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d1c <Transform_Sha256+492>:	lsl	r3, r3, #2
0x00010d20	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d20 <Transform_Sha256+496>:	sub	r3, r3, #12
0x00010d24	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d24 <Transform_Sha256+500>:	add	r3, r3, r11
0x00010d28	979	            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
=> 0x10d28 <Transform_Sha256+504>:	str	r2, [r3, #-260]	; 0xfffffefc
978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d2c <Transform_Sha256+508>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d30	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d30 <Transform_Sha256+512>:	add	r3, r3, #1
0x00010d34	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d34 <Transform_Sha256+516>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00010d38	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d38 <Transform_Sha256+520>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010d3c	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d3c <Transform_Sha256+524>:	cmp	r3, #63	; 0x3f
0x00010d40	978	        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
=> 0x10d40 <Transform_Sha256+528>:	ble	0x10bf4 <Transform_Sha256+196>
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x10d44 <Transform_Sha256+532>:	mov	r3, #0
0x00010d48	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x10d48 <Transform_Sha256+536>:	str	r3, [r11, #-316]	; 0xfffffec4
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x10d4c <Transform_Sha256+540>:	b	0x116d4 <Transform_Sha256+2980>
0x000116d4	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d4 <Transform_Sha256+2980>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116d8	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d8 <Transform_Sha256+2984>:	cmp	r3, #63	; 0x3f
0x000116dc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116dc <Transform_Sha256+2988>:	ble	0x10d50 <Transform_Sha256+544>
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d50 <Transform_Sha256+544>:	ldr	r4, [r11, #-276]	; 0xfffffeec
0x00010d54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d54 <Transform_Sha256+548>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d58 <Transform_Sha256+552>:	mov	r1, #6
0x00010d5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d5c <Transform_Sha256+556>:	mov	r0, r3
0x00010d60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d60 <Transform_Sha256+560>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1659778127, y=18) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d64 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d64 <Transform_Sha256+564>:	mov	r5, r0
0x00010d68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d68 <Transform_Sha256+568>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d6c <Transform_Sha256+572>:	mov	r1, #11
0x00010d70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d70 <Transform_Sha256+576>:	mov	r0, r3
0x00010d74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d74 <Transform_Sha256+580>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1359893119, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d78 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d78 <Transform_Sha256+584>:	mov	r3, r0
0x00010d7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d7c <Transform_Sha256+588>:	eor	r5, r5, r3
0x00010d80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d80 <Transform_Sha256+592>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d84 <Transform_Sha256+596>:	mov	r1, #25
0x00010d88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d88 <Transform_Sha256+600>:	mov	r0, r3
0x00010d8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d8c <Transform_Sha256+604>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1359893119, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d90 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d90 <Transform_Sha256+608>:	mov	r3, r0
0x00010d94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d94 <Transform_Sha256+612>:	eor	r3, r3, r5
0x00010d98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d98 <Transform_Sha256+616>:	add	r2, r4, r3
0x00010d9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d9c <Transform_Sha256+620>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00010da0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da0 <Transform_Sha256+624>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00010da4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da4 <Transform_Sha256+628>:	ldr	r12, [r11, #-284]	; 0xfffffee4
0x00010da8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da8 <Transform_Sha256+632>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00010dac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dac <Transform_Sha256+636>:	eor	r3, r3, r12
0x00010db0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db0 <Transform_Sha256+640>:	and	r3, r3, r0
0x00010db4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db4 <Transform_Sha256+644>:	eor	r3, r3, r1
0x00010db8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db8 <Transform_Sha256+648>:	add	r2, r2, r3
0x00010dbc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dbc <Transform_Sha256+652>:	ldr	r1, [pc, #2464]	; 0x11764 <Transform_Sha256+3124>
0x00010dc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc0 <Transform_Sha256+656>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc4 <Transform_Sha256+660>:	ldr	r3, [r1, r3, lsl #2]
0x00010dc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc8 <Transform_Sha256+664>:	add	r2, r2, r3
0x00010dcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dcc <Transform_Sha256+668>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dd0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd0 <Transform_Sha256+672>:	lsl	r3, r3, #2
0x00010dd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd4 <Transform_Sha256+676>:	sub	r3, r3, #12
0x00010dd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd8 <Transform_Sha256+680>:	add	r3, r3, r11
0x00010ddc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ddc <Transform_Sha256+684>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010de0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de0 <Transform_Sha256+688>:	add	r3, r2, r3
0x00010de4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de4 <Transform_Sha256+692>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010de8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de8 <Transform_Sha256+696>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010dec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dec <Transform_Sha256+700>:	mov	r1, #2
0x00010df0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df0 <Transform_Sha256+704>:	mov	r0, r3
0x00010df4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df4 <Transform_Sha256+708>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1359893119, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010df8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df8 <Transform_Sha256+712>:	mov	r4, r0
0x00010dfc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dfc <Transform_Sha256+716>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e00 <Transform_Sha256+720>:	mov	r1, #13
0x00010e04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e04 <Transform_Sha256+724>:	mov	r0, r3
0x00010e08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e08 <Transform_Sha256+728>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1779033703, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e0c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e0c <Transform_Sha256+732>:	mov	r3, r0
0x00010e10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e10 <Transform_Sha256+736>:	eor	r4, r4, r3
0x00010e14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e14 <Transform_Sha256+740>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e18 <Transform_Sha256+744>:	mov	r1, #22
0x00010e1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e1c <Transform_Sha256+748>:	mov	r0, r3
0x00010e20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e20 <Transform_Sha256+752>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1779033703, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e24 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e24 <Transform_Sha256+756>:	mov	r3, r0
0x00010e28	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e28 <Transform_Sha256+760>:	eor	r2, r4, r3
0x00010e2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e2c <Transform_Sha256+764>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x00010e30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e30 <Transform_Sha256+768>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e34 <Transform_Sha256+772>:	orr	r1, r1, r3
0x00010e38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e38 <Transform_Sha256+776>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010e3c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e3c <Transform_Sha256+780>:	and	r1, r1, r3
0x00010e40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e40 <Transform_Sha256+784>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x00010e44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e44 <Transform_Sha256+788>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e48 <Transform_Sha256+792>:	and	r3, r3, r0
0x00010e4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e4c <Transform_Sha256+796>:	orr	r3, r1, r3
0x00010e50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e50 <Transform_Sha256+800>:	add	r3, r2, r3
0x00010e54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e54 <Transform_Sha256+804>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010e58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e58 <Transform_Sha256+808>:	ldr	r2, [r11, #-292]	; 0xfffffedc
0x00010e5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e5c <Transform_Sha256+812>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010e60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e60 <Transform_Sha256+816>:	add	r3, r2, r3
0x00010e64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e64 <Transform_Sha256+820>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00010e68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e68 <Transform_Sha256+824>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010e6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e6c <Transform_Sha256+828>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010e70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e70 <Transform_Sha256+832>:	add	r3, r2, r3
0x00010e74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e74 <Transform_Sha256+836>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00010e78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e78 <Transform_Sha256+840>:	ldr	r4, [r11, #-280]	; 0xfffffee8
0x00010e7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e7c <Transform_Sha256+844>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e80 <Transform_Sha256+848>:	mov	r1, #6
0x00010e84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e84 <Transform_Sha256+852>:	mov	r0, r3
0x00010e88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e88 <Transform_Sha256+856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1779033703, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e8c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e8c <Transform_Sha256+860>:	mov	r5, r0
0x00010e90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e90 <Transform_Sha256+864>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e94 <Transform_Sha256+868>:	mov	r1, #11
0x00010e98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e98 <Transform_Sha256+872>:	mov	r0, r3
0x00010e9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e9c <Transform_Sha256+876>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3777842958, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ea0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea0 <Transform_Sha256+880>:	mov	r3, r0
0x00010ea4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea4 <Transform_Sha256+884>:	eor	r5, r5, r3
0x00010ea8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea8 <Transform_Sha256+888>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010eac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eac <Transform_Sha256+892>:	mov	r1, #25
0x00010eb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb0 <Transform_Sha256+896>:	mov	r0, r3
0x00010eb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb4 <Transform_Sha256+900>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3777842958, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010eb8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb8 <Transform_Sha256+904>:	mov	r3, r0
0x00010ebc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ebc <Transform_Sha256+908>:	eor	r3, r3, r5
0x00010ec0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec0 <Transform_Sha256+912>:	add	r2, r4, r3
0x00010ec4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec4 <Transform_Sha256+916>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x00010ec8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec8 <Transform_Sha256+920>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00010ecc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ecc <Transform_Sha256+924>:	ldr	r12, [r11, #-288]	; 0xfffffee0
0x00010ed0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed0 <Transform_Sha256+928>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00010ed4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed4 <Transform_Sha256+932>:	eor	r3, r3, r12
0x00010ed8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed8 <Transform_Sha256+936>:	and	r3, r3, r0
0x00010edc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10edc <Transform_Sha256+940>:	eor	r3, r3, r1
0x00010ee0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee0 <Transform_Sha256+944>:	add	r2, r2, r3
0x00010ee4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee4 <Transform_Sha256+948>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ee8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee8 <Transform_Sha256+952>:	add	r3, r3, #1
0x00010eec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eec <Transform_Sha256+956>:	ldr	r1, [pc, #2160]	; 0x11764 <Transform_Sha256+3124>
0x00010ef0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef0 <Transform_Sha256+960>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef4 <Transform_Sha256+964>:	add	r2, r2, r3
0x00010ef8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef8 <Transform_Sha256+968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010efc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10efc <Transform_Sha256+972>:	add	r3, r3, #1
0x00010f00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f00 <Transform_Sha256+976>:	lsl	r3, r3, #2
0x00010f04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f04 <Transform_Sha256+980>:	sub	r3, r3, #12
0x00010f08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f08 <Transform_Sha256+984>:	add	r3, r3, r11
0x00010f0c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f0c <Transform_Sha256+988>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010f10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f10 <Transform_Sha256+992>:	add	r3, r2, r3
0x00010f14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f14 <Transform_Sha256+996>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010f18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f18 <Transform_Sha256+1000>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f1c <Transform_Sha256+1004>:	mov	r1, #2
0x00010f20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f20 <Transform_Sha256+1008>:	mov	r0, r3
0x00010f24	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f24 <Transform_Sha256+1012>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3777842958, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f28 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f28 <Transform_Sha256+1016>:	mov	r4, r0
0x00010f2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f2c <Transform_Sha256+1020>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f30 <Transform_Sha256+1024>:	mov	r1, #13
0x00010f34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f34 <Transform_Sha256+1028>:	mov	r0, r3
0x00010f38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f38 <Transform_Sha256+1032>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1148056761, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f3c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f3c <Transform_Sha256+1036>:	mov	r3, r0
0x00010f40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f40 <Transform_Sha256+1040>:	eor	r4, r4, r3
0x00010f44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f44 <Transform_Sha256+1044>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f48 <Transform_Sha256+1048>:	mov	r1, #22
0x00010f4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f4c <Transform_Sha256+1052>:	mov	r0, r3
0x00010f50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f50 <Transform_Sha256+1056>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1148056761, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f54 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f54 <Transform_Sha256+1060>:	mov	r3, r0
0x00010f58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f58 <Transform_Sha256+1064>:	eor	r2, r4, r3
0x00010f5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f5c <Transform_Sha256+1068>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x00010f60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f60 <Transform_Sha256+1072>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f64 <Transform_Sha256+1076>:	orr	r1, r1, r3
0x00010f68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f68 <Transform_Sha256+1080>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010f6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f6c <Transform_Sha256+1084>:	and	r1, r1, r3
0x00010f70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f70 <Transform_Sha256+1088>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x00010f74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f74 <Transform_Sha256+1092>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f78 <Transform_Sha256+1096>:	and	r3, r3, r0
0x00010f7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f7c <Transform_Sha256+1100>:	orr	r3, r1, r3
0x00010f80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f80 <Transform_Sha256+1104>:	add	r3, r2, r3
0x00010f84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f84 <Transform_Sha256+1108>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010f88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f88 <Transform_Sha256+1112>:	ldr	r2, [r11, #-296]	; 0xfffffed8
0x00010f8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f8c <Transform_Sha256+1116>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010f90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f90 <Transform_Sha256+1120>:	add	r3, r2, r3
0x00010f94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f94 <Transform_Sha256+1124>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00010f98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f98 <Transform_Sha256+1128>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010f9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f9c <Transform_Sha256+1132>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010fa0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa0 <Transform_Sha256+1136>:	add	r3, r2, r3
0x00010fa4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa4 <Transform_Sha256+1140>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00010fa8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa8 <Transform_Sha256+1144>:	ldr	r4, [r11, #-284]	; 0xfffffee4
0x00010fac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fac <Transform_Sha256+1148>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb0 <Transform_Sha256+1152>:	mov	r1, #6
0x00010fb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb4 <Transform_Sha256+1156>:	mov	r0, r3
0x00010fb8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb8 <Transform_Sha256+1160>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1148056761, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fbc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fbc <Transform_Sha256+1164>:	mov	r5, r0
0x00010fc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc0 <Transform_Sha256+1168>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc4 <Transform_Sha256+1172>:	mov	r1, #11
0x00010fc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc8 <Transform_Sha256+1176>:	mov	r0, r3
0x00010fcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fcc <Transform_Sha256+1180>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3831606392, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd0 <Transform_Sha256+1184>:	mov	r3, r0
0x00010fd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd4 <Transform_Sha256+1188>:	eor	r5, r5, r3
0x00010fd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd8 <Transform_Sha256+1192>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fdc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fdc <Transform_Sha256+1196>:	mov	r1, #25
0x00010fe0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe0 <Transform_Sha256+1200>:	mov	r0, r3
0x00010fe4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe4 <Transform_Sha256+1204>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3831606392, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fe8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe8 <Transform_Sha256+1208>:	mov	r3, r0
0x00010fec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fec <Transform_Sha256+1212>:	eor	r3, r3, r5
0x00010ff0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff0 <Transform_Sha256+1216>:	add	r2, r4, r3
0x00010ff4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff4 <Transform_Sha256+1220>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x00010ff8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff8 <Transform_Sha256+1224>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00010ffc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ffc <Transform_Sha256+1228>:	ldr	r12, [r11, #-292]	; 0xfffffedc
0x00011000	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11000 <Transform_Sha256+1232>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011004	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11004 <Transform_Sha256+1236>:	eor	r3, r3, r12
0x00011008	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11008 <Transform_Sha256+1240>:	and	r3, r3, r0
0x0001100c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1100c <Transform_Sha256+1244>:	eor	r3, r3, r1
0x00011010	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11010 <Transform_Sha256+1248>:	add	r2, r2, r3
0x00011014	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11014 <Transform_Sha256+1252>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011018	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11018 <Transform_Sha256+1256>:	add	r3, r3, #2
0x0001101c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1101c <Transform_Sha256+1260>:	ldr	r1, [pc, #1856]	; 0x11764 <Transform_Sha256+3124>
0x00011020	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11020 <Transform_Sha256+1264>:	ldr	r3, [r1, r3, lsl #2]
0x00011024	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11024 <Transform_Sha256+1268>:	add	r2, r2, r3
0x00011028	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11028 <Transform_Sha256+1272>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001102c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1102c <Transform_Sha256+1276>:	add	r3, r3, #2
0x00011030	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11030 <Transform_Sha256+1280>:	lsl	r3, r3, #2
0x00011034	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11034 <Transform_Sha256+1284>:	sub	r3, r3, #12
0x00011038	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11038 <Transform_Sha256+1288>:	add	r3, r3, r11
0x0001103c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1103c <Transform_Sha256+1292>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011040	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11040 <Transform_Sha256+1296>:	add	r3, r2, r3
0x00011044	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11044 <Transform_Sha256+1300>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011048	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11048 <Transform_Sha256+1304>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001104c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1104c <Transform_Sha256+1308>:	mov	r1, #2
0x00011050	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11050 <Transform_Sha256+1312>:	mov	r0, r3
0x00011054	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11054 <Transform_Sha256+1316>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3831606392, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011058 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11058 <Transform_Sha256+1320>:	mov	r4, r0
0x0001105c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1105c <Transform_Sha256+1324>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011060	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11060 <Transform_Sha256+1328>:	mov	r1, #13
0x00011064	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11064 <Transform_Sha256+1332>:	mov	r0, r3
0x00011068	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11068 <Transform_Sha256+1336>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1432640251, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001106c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1106c <Transform_Sha256+1340>:	mov	r3, r0
0x00011070	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11070 <Transform_Sha256+1344>:	eor	r4, r4, r3
0x00011074	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11074 <Transform_Sha256+1348>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011078	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11078 <Transform_Sha256+1352>:	mov	r1, #22
0x0001107c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1107c <Transform_Sha256+1356>:	mov	r0, r3
0x00011080	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11080 <Transform_Sha256+1360>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1432640251, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011084 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11084 <Transform_Sha256+1364>:	mov	r3, r0
0x00011088	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11088 <Transform_Sha256+1368>:	eor	r2, r4, r3
0x0001108c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1108c <Transform_Sha256+1372>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00011090	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11090 <Transform_Sha256+1376>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011094	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11094 <Transform_Sha256+1380>:	orr	r1, r1, r3
0x00011098	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11098 <Transform_Sha256+1384>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001109c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1109c <Transform_Sha256+1388>:	and	r1, r1, r3
0x000110a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a0 <Transform_Sha256+1392>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000110a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a4 <Transform_Sha256+1396>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000110a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a8 <Transform_Sha256+1400>:	and	r3, r3, r0
0x000110ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ac <Transform_Sha256+1404>:	orr	r3, r1, r3
0x000110b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b0 <Transform_Sha256+1408>:	add	r3, r2, r3
0x000110b4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b4 <Transform_Sha256+1412>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000110b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b8 <Transform_Sha256+1416>:	ldr	r2, [r11, #-300]	; 0xfffffed4
0x000110bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110bc <Transform_Sha256+1420>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000110c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c0 <Transform_Sha256+1424>:	add	r3, r2, r3
0x000110c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c4 <Transform_Sha256+1428>:	str	r3, [r11, #-300]	; 0xfffffed4
0x000110c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c8 <Transform_Sha256+1432>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000110cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110cc <Transform_Sha256+1436>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000110d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d0 <Transform_Sha256+1440>:	add	r3, r2, r3
0x000110d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d4 <Transform_Sha256+1444>:	str	r3, [r11, #-284]	; 0xfffffee4
0x000110d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d8 <Transform_Sha256+1448>:	ldr	r4, [r11, #-288]	; 0xfffffee0
0x000110dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110dc <Transform_Sha256+1452>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e0 <Transform_Sha256+1456>:	mov	r1, #6
0x000110e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e4 <Transform_Sha256+1460>:	mov	r0, r3
0x000110e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e8 <Transform_Sha256+1464>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1432640251, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000110ec in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ec <Transform_Sha256+1468>:	mov	r5, r0
0x000110f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f0 <Transform_Sha256+1472>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f4 <Transform_Sha256+1476>:	mov	r1, #11
0x000110f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f8 <Transform_Sha256+1480>:	mov	r0, r3
0x000110fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110fc <Transform_Sha256+1484>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3375043657, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011100 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11100 <Transform_Sha256+1488>:	mov	r3, r0
0x00011104	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11104 <Transform_Sha256+1492>:	eor	r5, r5, r3
0x00011108	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11108 <Transform_Sha256+1496>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001110c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1110c <Transform_Sha256+1500>:	mov	r1, #25
0x00011110	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11110 <Transform_Sha256+1504>:	mov	r0, r3
0x00011114	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11114 <Transform_Sha256+1508>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3375043657, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011118 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11118 <Transform_Sha256+1512>:	mov	r3, r0
0x0001111c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1111c <Transform_Sha256+1516>:	eor	r3, r3, r5
0x00011120	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11120 <Transform_Sha256+1520>:	add	r2, r4, r3
0x00011124	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11124 <Transform_Sha256+1524>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011128	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11128 <Transform_Sha256+1528>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x0001112c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1112c <Transform_Sha256+1532>:	ldr	r12, [r11, #-296]	; 0xfffffed8
0x00011130	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11130 <Transform_Sha256+1536>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011134	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11134 <Transform_Sha256+1540>:	eor	r3, r3, r12
0x00011138	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11138 <Transform_Sha256+1544>:	and	r3, r3, r0
0x0001113c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1113c <Transform_Sha256+1548>:	eor	r3, r3, r1
0x00011140	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11140 <Transform_Sha256+1552>:	add	r2, r2, r3
0x00011144	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11144 <Transform_Sha256+1556>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011148	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11148 <Transform_Sha256+1560>:	add	r3, r3, #3
0x0001114c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1114c <Transform_Sha256+1564>:	ldr	r1, [pc, #1552]	; 0x11764 <Transform_Sha256+3124>
0x00011150	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11150 <Transform_Sha256+1568>:	ldr	r3, [r1, r3, lsl #2]
0x00011154	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11154 <Transform_Sha256+1572>:	add	r2, r2, r3
0x00011158	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11158 <Transform_Sha256+1576>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001115c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1115c <Transform_Sha256+1580>:	add	r3, r3, #3
0x00011160	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11160 <Transform_Sha256+1584>:	lsl	r3, r3, #2
0x00011164	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11164 <Transform_Sha256+1588>:	sub	r3, r3, #12
0x00011168	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11168 <Transform_Sha256+1592>:	add	r3, r3, r11
0x0001116c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1116c <Transform_Sha256+1596>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011170	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11170 <Transform_Sha256+1600>:	add	r3, r2, r3
0x00011174	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11174 <Transform_Sha256+1604>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011178	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11178 <Transform_Sha256+1608>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001117c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1117c <Transform_Sha256+1612>:	mov	r1, #2
0x00011180	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11180 <Transform_Sha256+1616>:	mov	r0, r3
0x00011184	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11184 <Transform_Sha256+1620>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3375043657, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011188 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11188 <Transform_Sha256+1624>:	mov	r4, r0
0x0001118c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1118c <Transform_Sha256+1628>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011190	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11190 <Transform_Sha256+1632>:	mov	r1, #13
0x00011194	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11194 <Transform_Sha256+1636>:	mov	r0, r3
0x00011198	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11198 <Transform_Sha256+1640>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3860442504, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001119c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1119c <Transform_Sha256+1644>:	mov	r3, r0
0x000111a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a0 <Transform_Sha256+1648>:	eor	r4, r4, r3
0x000111a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a4 <Transform_Sha256+1652>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000111a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a8 <Transform_Sha256+1656>:	mov	r1, #22
0x000111ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ac <Transform_Sha256+1660>:	mov	r0, r3
0x000111b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b0 <Transform_Sha256+1664>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3860442504, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000111b4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b4 <Transform_Sha256+1668>:	mov	r3, r0
0x000111b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b8 <Transform_Sha256+1672>:	eor	r2, r4, r3
0x000111bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111bc <Transform_Sha256+1676>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x000111c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c0 <Transform_Sha256+1680>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c4 <Transform_Sha256+1684>:	orr	r1, r1, r3
0x000111c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c8 <Transform_Sha256+1688>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000111cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111cc <Transform_Sha256+1692>:	and	r1, r1, r3
0x000111d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d0 <Transform_Sha256+1696>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000111d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d4 <Transform_Sha256+1700>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d8 <Transform_Sha256+1704>:	and	r3, r3, r0
0x000111dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111dc <Transform_Sha256+1708>:	orr	r3, r1, r3
0x000111e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e0 <Transform_Sha256+1712>:	add	r3, r2, r3
0x000111e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e4 <Transform_Sha256+1716>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000111e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e8 <Transform_Sha256+1720>:	ldr	r2, [r11, #-304]	; 0xfffffed0
0x000111ec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ec <Transform_Sha256+1724>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000111f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f0 <Transform_Sha256+1728>:	add	r3, r2, r3
0x000111f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f4 <Transform_Sha256+1732>:	str	r3, [r11, #-304]	; 0xfffffed0
0x000111f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f8 <Transform_Sha256+1736>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000111fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111fc <Transform_Sha256+1740>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011200	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11200 <Transform_Sha256+1744>:	add	r3, r2, r3
0x00011204	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11204 <Transform_Sha256+1748>:	str	r3, [r11, #-288]	; 0xfffffee0
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11208 <Transform_Sha256+1752>:	ldr	r4, [r11, #-292]	; 0xfffffedc
0x0001120c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1120c <Transform_Sha256+1756>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011210	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11210 <Transform_Sha256+1760>:	mov	r1, #6
0x00011214	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11214 <Transform_Sha256+1764>:	mov	r0, r3
0x00011218	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11218 <Transform_Sha256+1768>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3860442504, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001121c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1121c <Transform_Sha256+1772>:	mov	r5, r0
0x00011220	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11220 <Transform_Sha256+1776>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011224	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11224 <Transform_Sha256+1780>:	mov	r1, #11
0x00011228	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11228 <Transform_Sha256+1784>:	mov	r0, r3
0x0001122c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1122c <Transform_Sha256+1788>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3792376240, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011230 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11230 <Transform_Sha256+1792>:	mov	r3, r0
0x00011234	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11234 <Transform_Sha256+1796>:	eor	r5, r5, r3
0x00011238	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11238 <Transform_Sha256+1800>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001123c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1123c <Transform_Sha256+1804>:	mov	r1, #25
0x00011240	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11240 <Transform_Sha256+1808>:	mov	r0, r3
0x00011244	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11244 <Transform_Sha256+1812>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3792376240, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011248 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11248 <Transform_Sha256+1816>:	mov	r3, r0
0x0001124c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1124c <Transform_Sha256+1820>:	eor	r3, r3, r5
0x00011250	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11250 <Transform_Sha256+1824>:	add	r2, r4, r3
0x00011254	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11254 <Transform_Sha256+1828>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011258	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11258 <Transform_Sha256+1832>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x0001125c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1125c <Transform_Sha256+1836>:	ldr	r12, [r11, #-300]	; 0xfffffed4
0x00011260	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11260 <Transform_Sha256+1840>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011264	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11264 <Transform_Sha256+1844>:	eor	r3, r3, r12
0x00011268	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11268 <Transform_Sha256+1848>:	and	r3, r3, r0
0x0001126c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1126c <Transform_Sha256+1852>:	eor	r3, r3, r1
0x00011270	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11270 <Transform_Sha256+1856>:	add	r2, r2, r3
0x00011274	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11274 <Transform_Sha256+1860>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011278	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11278 <Transform_Sha256+1864>:	add	r3, r3, #4
0x0001127c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1127c <Transform_Sha256+1868>:	ldr	r1, [pc, #1248]	; 0x11764 <Transform_Sha256+3124>
0x00011280	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11280 <Transform_Sha256+1872>:	ldr	r3, [r1, r3, lsl #2]
0x00011284	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11284 <Transform_Sha256+1876>:	add	r2, r2, r3
0x00011288	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11288 <Transform_Sha256+1880>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001128c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1128c <Transform_Sha256+1884>:	add	r3, r3, #4
0x00011290	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11290 <Transform_Sha256+1888>:	lsl	r3, r3, #2
0x00011294	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11294 <Transform_Sha256+1892>:	sub	r3, r3, #12
0x00011298	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11298 <Transform_Sha256+1896>:	add	r3, r3, r11
0x0001129c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1129c <Transform_Sha256+1900>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000112a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a0 <Transform_Sha256+1904>:	add	r3, r2, r3
0x000112a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a4 <Transform_Sha256+1908>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000112a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a8 <Transform_Sha256+1912>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ac <Transform_Sha256+1916>:	mov	r1, #2
0x000112b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b0 <Transform_Sha256+1920>:	mov	r0, r3
0x000112b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b4 <Transform_Sha256+1924>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3792376240, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112b8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b8 <Transform_Sha256+1928>:	mov	r4, r0
0x000112bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112bc <Transform_Sha256+1932>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c0 <Transform_Sha256+1936>:	mov	r1, #13
0x000112c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c4 <Transform_Sha256+1940>:	mov	r0, r3
0x000112c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c8 <Transform_Sha256+1944>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4024868921, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112cc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112cc <Transform_Sha256+1948>:	mov	r3, r0
0x000112d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d0 <Transform_Sha256+1952>:	eor	r4, r4, r3
0x000112d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d4 <Transform_Sha256+1956>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d8 <Transform_Sha256+1960>:	mov	r1, #22
0x000112dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112dc <Transform_Sha256+1964>:	mov	r0, r3
0x000112e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e0 <Transform_Sha256+1968>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4024868921, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112e4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e4 <Transform_Sha256+1972>:	mov	r3, r0
0x000112e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e8 <Transform_Sha256+1976>:	eor	r2, r4, r3
0x000112ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ec <Transform_Sha256+1980>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x000112f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f0 <Transform_Sha256+1984>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000112f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f4 <Transform_Sha256+1988>:	orr	r1, r1, r3
0x000112f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f8 <Transform_Sha256+1992>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000112fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112fc <Transform_Sha256+1996>:	and	r1, r1, r3
0x00011300	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11300 <Transform_Sha256+2000>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00011304	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11304 <Transform_Sha256+2004>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011308	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11308 <Transform_Sha256+2008>:	and	r3, r3, r0
0x0001130c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1130c <Transform_Sha256+2012>:	orr	r3, r1, r3
0x00011310	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11310 <Transform_Sha256+2016>:	add	r3, r2, r3
0x00011314	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11314 <Transform_Sha256+2020>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011318	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11318 <Transform_Sha256+2024>:	ldr	r2, [r11, #-276]	; 0xfffffeec
0x0001131c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1131c <Transform_Sha256+2028>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011320	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11320 <Transform_Sha256+2032>:	add	r3, r2, r3
0x00011324	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11324 <Transform_Sha256+2036>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00011328	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11328 <Transform_Sha256+2040>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001132c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1132c <Transform_Sha256+2044>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011330	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11330 <Transform_Sha256+2048>:	add	r3, r2, r3
0x00011334	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11334 <Transform_Sha256+2052>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00011338	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11338 <Transform_Sha256+2056>:	ldr	r4, [r11, #-296]	; 0xfffffed8
0x0001133c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1133c <Transform_Sha256+2060>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011340	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11340 <Transform_Sha256+2064>:	mov	r1, #6
0x00011344	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11344 <Transform_Sha256+2068>:	mov	r0, r3
0x00011348	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11348 <Transform_Sha256+2072>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4024868921, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001134c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1134c <Transform_Sha256+2076>:	mov	r5, r0
0x00011350	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11350 <Transform_Sha256+2080>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011354	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11354 <Transform_Sha256+2084>:	mov	r1, #11
0x00011358	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11358 <Transform_Sha256+2088>:	mov	r0, r3
0x0001135c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1135c <Transform_Sha256+2092>:	bl	0x10760 <rotrFixed>
rotrFixed (x=326793151, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011360 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11360 <Transform_Sha256+2096>:	mov	r3, r0
0x00011364	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11364 <Transform_Sha256+2100>:	eor	r5, r5, r3
0x00011368	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11368 <Transform_Sha256+2104>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x0001136c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1136c <Transform_Sha256+2108>:	mov	r1, #25
0x00011370	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11370 <Transform_Sha256+2112>:	mov	r0, r3
0x00011374	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11374 <Transform_Sha256+2116>:	bl	0x10760 <rotrFixed>
rotrFixed (x=326793151, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011378 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11378 <Transform_Sha256+2120>:	mov	r3, r0
0x0001137c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1137c <Transform_Sha256+2124>:	eor	r3, r3, r5
0x00011380	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11380 <Transform_Sha256+2128>:	add	r2, r4, r3
0x00011384	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11384 <Transform_Sha256+2132>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011388	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11388 <Transform_Sha256+2136>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x0001138c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1138c <Transform_Sha256+2140>:	ldr	r12, [r11, #-304]	; 0xfffffed0
0x00011390	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11390 <Transform_Sha256+2144>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011394	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11394 <Transform_Sha256+2148>:	eor	r3, r3, r12
0x00011398	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11398 <Transform_Sha256+2152>:	and	r3, r3, r0
0x0001139c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1139c <Transform_Sha256+2156>:	eor	r3, r3, r1
0x000113a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a0 <Transform_Sha256+2160>:	add	r2, r2, r3
0x000113a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a4 <Transform_Sha256+2164>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a8 <Transform_Sha256+2168>:	add	r3, r3, #5
0x000113ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ac <Transform_Sha256+2172>:	ldr	r1, [pc, #944]	; 0x11764 <Transform_Sha256+3124>
0x000113b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b0 <Transform_Sha256+2176>:	ldr	r3, [r1, r3, lsl #2]
0x000113b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b4 <Transform_Sha256+2180>:	add	r2, r2, r3
0x000113b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b8 <Transform_Sha256+2184>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113bc <Transform_Sha256+2188>:	add	r3, r3, #5
0x000113c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c0 <Transform_Sha256+2192>:	lsl	r3, r3, #2
0x000113c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c4 <Transform_Sha256+2196>:	sub	r3, r3, #12
0x000113c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c8 <Transform_Sha256+2200>:	add	r3, r3, r11
0x000113cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113cc <Transform_Sha256+2204>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000113d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d0 <Transform_Sha256+2208>:	add	r3, r2, r3
0x000113d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d4 <Transform_Sha256+2212>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000113d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d8 <Transform_Sha256+2216>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113dc <Transform_Sha256+2220>:	mov	r1, #2
0x000113e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e0 <Transform_Sha256+2224>:	mov	r0, r3
0x000113e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e4 <Transform_Sha256+2228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=326793151, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113e8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e8 <Transform_Sha256+2232>:	mov	r4, r0
0x000113ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ec <Transform_Sha256+2236>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f0 <Transform_Sha256+2240>:	mov	r1, #13
0x000113f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f4 <Transform_Sha256+2244>:	mov	r0, r3
0x000113f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f8 <Transform_Sha256+2248>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2535939139, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113fc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113fc <Transform_Sha256+2252>:	mov	r3, r0
0x00011400	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11400 <Transform_Sha256+2256>:	eor	r4, r4, r3
0x00011404	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11404 <Transform_Sha256+2260>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011408	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11408 <Transform_Sha256+2264>:	mov	r1, #22
0x0001140c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1140c <Transform_Sha256+2268>:	mov	r0, r3
0x00011410	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11410 <Transform_Sha256+2272>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2535939139, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011414 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11414 <Transform_Sha256+2276>:	mov	r3, r0
0x00011418	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11418 <Transform_Sha256+2280>:	eor	r2, r4, r3
0x0001141c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1141c <Transform_Sha256+2284>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011420	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11420 <Transform_Sha256+2288>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011424	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11424 <Transform_Sha256+2292>:	orr	r1, r1, r3
0x00011428	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11428 <Transform_Sha256+2296>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001142c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1142c <Transform_Sha256+2300>:	and	r1, r1, r3
0x00011430	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11430 <Transform_Sha256+2304>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00011434	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11434 <Transform_Sha256+2308>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011438	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11438 <Transform_Sha256+2312>:	and	r3, r3, r0
0x0001143c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1143c <Transform_Sha256+2316>:	orr	r3, r1, r3
0x00011440	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11440 <Transform_Sha256+2320>:	add	r3, r2, r3
0x00011444	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11444 <Transform_Sha256+2324>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011448	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11448 <Transform_Sha256+2328>:	ldr	r2, [r11, #-280]	; 0xfffffee8
0x0001144c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1144c <Transform_Sha256+2332>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011450	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11450 <Transform_Sha256+2336>:	add	r3, r2, r3
0x00011454	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11454 <Transform_Sha256+2340>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00011458	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11458 <Transform_Sha256+2344>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001145c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1145c <Transform_Sha256+2348>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011460	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11460 <Transform_Sha256+2352>:	add	r3, r2, r3
0x00011464	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11464 <Transform_Sha256+2356>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00011468	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11468 <Transform_Sha256+2360>:	ldr	r4, [r11, #-300]	; 0xfffffed4
0x0001146c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1146c <Transform_Sha256+2364>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011470	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11470 <Transform_Sha256+2368>:	mov	r1, #6
0x00011474	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11474 <Transform_Sha256+2372>:	mov	r0, r3
0x00011478	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11478 <Transform_Sha256+2376>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2535939139, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001147c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1147c <Transform_Sha256+2380>:	mov	r5, r0
0x00011480	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11480 <Transform_Sha256+2384>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011484	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11484 <Transform_Sha256+2388>:	mov	r1, #11
0x00011488	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11488 <Transform_Sha256+2392>:	mov	r0, r3
0x0001148c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1148c <Transform_Sha256+2396>:	bl	0x10760 <rotrFixed>
rotrFixed (x=341214317, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011490 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11490 <Transform_Sha256+2400>:	mov	r3, r0
0x00011494	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11494 <Transform_Sha256+2404>:	eor	r5, r5, r3
0x00011498	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11498 <Transform_Sha256+2408>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001149c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1149c <Transform_Sha256+2412>:	mov	r1, #25
0x000114a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a0 <Transform_Sha256+2416>:	mov	r0, r3
0x000114a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a4 <Transform_Sha256+2420>:	bl	0x10760 <rotrFixed>
rotrFixed (x=341214317, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000114a8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a8 <Transform_Sha256+2424>:	mov	r3, r0
0x000114ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ac <Transform_Sha256+2428>:	eor	r3, r3, r5
0x000114b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b0 <Transform_Sha256+2432>:	add	r2, r4, r3
0x000114b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b4 <Transform_Sha256+2436>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x000114b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b8 <Transform_Sha256+2440>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000114bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114bc <Transform_Sha256+2444>:	ldr	r12, [r11, #-276]	; 0xfffffeec
0x000114c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c0 <Transform_Sha256+2448>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x000114c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c4 <Transform_Sha256+2452>:	eor	r3, r3, r12
0x000114c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c8 <Transform_Sha256+2456>:	and	r3, r3, r0
0x000114cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114cc <Transform_Sha256+2460>:	eor	r3, r3, r1
0x000114d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d0 <Transform_Sha256+2464>:	add	r2, r2, r3
0x000114d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d4 <Transform_Sha256+2468>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d8 <Transform_Sha256+2472>:	add	r3, r3, #6
0x000114dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114dc <Transform_Sha256+2476>:	ldr	r1, [pc, #640]	; 0x11764 <Transform_Sha256+3124>
0x000114e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e0 <Transform_Sha256+2480>:	ldr	r3, [r1, r3, lsl #2]
0x000114e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e4 <Transform_Sha256+2484>:	add	r2, r2, r3
0x000114e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e8 <Transform_Sha256+2488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ec <Transform_Sha256+2492>:	add	r3, r3, #6
0x000114f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f0 <Transform_Sha256+2496>:	lsl	r3, r3, #2
0x000114f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f4 <Transform_Sha256+2500>:	sub	r3, r3, #12
0x000114f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f8 <Transform_Sha256+2504>:	add	r3, r3, r11
0x000114fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114fc <Transform_Sha256+2508>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011500	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11500 <Transform_Sha256+2512>:	add	r3, r2, r3
0x00011504	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11504 <Transform_Sha256+2516>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011508	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11508 <Transform_Sha256+2520>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x0001150c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1150c <Transform_Sha256+2524>:	mov	r1, #2
0x00011510	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11510 <Transform_Sha256+2528>:	mov	r0, r3
0x00011514	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11514 <Transform_Sha256+2532>:	bl	0x10760 <rotrFixed>
rotrFixed (x=341214317, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011518 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11518 <Transform_Sha256+2536>:	mov	r4, r0
0x0001151c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1151c <Transform_Sha256+2540>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011520	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11520 <Transform_Sha256+2544>:	mov	r1, #13
0x00011524	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11524 <Transform_Sha256+2548>:	mov	r0, r3
0x00011528	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11528 <Transform_Sha256+2552>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1086207473, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001152c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1152c <Transform_Sha256+2556>:	mov	r3, r0
0x00011530	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11530 <Transform_Sha256+2560>:	eor	r4, r4, r3
0x00011534	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11534 <Transform_Sha256+2564>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011538	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11538 <Transform_Sha256+2568>:	mov	r1, #22
0x0001153c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1153c <Transform_Sha256+2572>:	mov	r0, r3
0x00011540	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11540 <Transform_Sha256+2576>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1086207473, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011544 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11544 <Transform_Sha256+2580>:	mov	r3, r0
0x00011548	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11548 <Transform_Sha256+2584>:	eor	r2, r4, r3
0x0001154c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1154c <Transform_Sha256+2588>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011550	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11550 <Transform_Sha256+2592>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011554	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11554 <Transform_Sha256+2596>:	orr	r1, r1, r3
0x00011558	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11558 <Transform_Sha256+2600>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x0001155c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1155c <Transform_Sha256+2604>:	and	r1, r1, r3
0x00011560	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11560 <Transform_Sha256+2608>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00011564	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11564 <Transform_Sha256+2612>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011568	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11568 <Transform_Sha256+2616>:	and	r3, r3, r0
0x0001156c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1156c <Transform_Sha256+2620>:	orr	r3, r1, r3
0x00011570	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11570 <Transform_Sha256+2624>:	add	r3, r2, r3
0x00011574	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11574 <Transform_Sha256+2628>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011578	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11578 <Transform_Sha256+2632>:	ldr	r2, [r11, #-284]	; 0xfffffee4
0x0001157c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1157c <Transform_Sha256+2636>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011580	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11580 <Transform_Sha256+2640>:	add	r3, r2, r3
0x00011584	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11584 <Transform_Sha256+2644>:	str	r3, [r11, #-284]	; 0xfffffee4
0x00011588	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11588 <Transform_Sha256+2648>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001158c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1158c <Transform_Sha256+2652>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011590	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11590 <Transform_Sha256+2656>:	add	r3, r2, r3
0x00011594	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11594 <Transform_Sha256+2660>:	str	r3, [r11, #-300]	; 0xfffffed4
0x00011598	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11598 <Transform_Sha256+2664>:	ldr	r4, [r11, #-304]	; 0xfffffed0
0x0001159c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1159c <Transform_Sha256+2668>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a0 <Transform_Sha256+2672>:	mov	r1, #6
0x000115a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a4 <Transform_Sha256+2676>:	mov	r0, r3
0x000115a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a8 <Transform_Sha256+2680>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1086207473, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115ac in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ac <Transform_Sha256+2684>:	mov	r5, r0
0x000115b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b0 <Transform_Sha256+2688>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b4 <Transform_Sha256+2692>:	mov	r1, #11
0x000115b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b8 <Transform_Sha256+2696>:	mov	r0, r3
0x000115bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115bc <Transform_Sha256+2700>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1183924349, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115c0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c0 <Transform_Sha256+2704>:	mov	r3, r0
0x000115c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c4 <Transform_Sha256+2708>:	eor	r5, r5, r3
0x000115c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c8 <Transform_Sha256+2712>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115cc <Transform_Sha256+2716>:	mov	r1, #25
0x000115d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d0 <Transform_Sha256+2720>:	mov	r0, r3
0x000115d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d4 <Transform_Sha256+2724>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1183924349, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115d8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d8 <Transform_Sha256+2728>:	mov	r3, r0
0x000115dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115dc <Transform_Sha256+2732>:	eor	r3, r3, r5
0x000115e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e0 <Transform_Sha256+2736>:	add	r2, r4, r3
0x000115e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e4 <Transform_Sha256+2740>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x000115e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e8 <Transform_Sha256+2744>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000115ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ec <Transform_Sha256+2748>:	ldr	r12, [r11, #-280]	; 0xfffffee8
0x000115f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f0 <Transform_Sha256+2752>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000115f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f4 <Transform_Sha256+2756>:	eor	r3, r3, r12
0x000115f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f8 <Transform_Sha256+2760>:	and	r3, r3, r0
0x000115fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115fc <Transform_Sha256+2764>:	eor	r3, r3, r1
0x00011600	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11600 <Transform_Sha256+2768>:	add	r2, r2, r3
0x00011604	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11604 <Transform_Sha256+2772>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011608	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11608 <Transform_Sha256+2776>:	add	r3, r3, #7
0x0001160c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1160c <Transform_Sha256+2780>:	ldr	r1, [pc, #336]	; 0x11764 <Transform_Sha256+3124>
0x00011610	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11610 <Transform_Sha256+2784>:	ldr	r3, [r1, r3, lsl #2]
0x00011614	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11614 <Transform_Sha256+2788>:	add	r2, r2, r3
0x00011618	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11618 <Transform_Sha256+2792>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001161c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1161c <Transform_Sha256+2796>:	add	r3, r3, #7
0x00011620	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11620 <Transform_Sha256+2800>:	lsl	r3, r3, #2
0x00011624	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11624 <Transform_Sha256+2804>:	sub	r3, r3, #12
0x00011628	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11628 <Transform_Sha256+2808>:	add	r3, r3, r11
0x0001162c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1162c <Transform_Sha256+2812>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011630	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11630 <Transform_Sha256+2816>:	add	r3, r2, r3
0x00011634	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11634 <Transform_Sha256+2820>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011638	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11638 <Transform_Sha256+2824>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001163c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1163c <Transform_Sha256+2828>:	mov	r1, #2
0x00011640	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11640 <Transform_Sha256+2832>:	mov	r0, r3
0x00011644	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11644 <Transform_Sha256+2836>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1183924349, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011648 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11648 <Transform_Sha256+2840>:	mov	r4, r0
0x0001164c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1164c <Transform_Sha256+2844>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011650	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11650 <Transform_Sha256+2848>:	mov	r1, #13
0x00011654	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11654 <Transform_Sha256+2852>:	mov	r0, r3
0x00011658	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11658 <Transform_Sha256+2856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=797971701, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001165c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1165c <Transform_Sha256+2860>:	mov	r3, r0
0x00011660	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11660 <Transform_Sha256+2864>:	eor	r4, r4, r3
0x00011664	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11664 <Transform_Sha256+2868>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011668	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11668 <Transform_Sha256+2872>:	mov	r1, #22
0x0001166c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1166c <Transform_Sha256+2876>:	mov	r0, r3
0x00011670	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11670 <Transform_Sha256+2880>:	bl	0x10760 <rotrFixed>
rotrFixed (x=797971701, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011674 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11674 <Transform_Sha256+2884>:	mov	r3, r0
0x00011678	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11678 <Transform_Sha256+2888>:	eor	r2, r4, r3
0x0001167c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1167c <Transform_Sha256+2892>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011680	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11680 <Transform_Sha256+2896>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011684	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11684 <Transform_Sha256+2900>:	orr	r1, r1, r3
0x00011688	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11688 <Transform_Sha256+2904>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x0001168c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1168c <Transform_Sha256+2908>:	and	r1, r1, r3
0x00011690	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11690 <Transform_Sha256+2912>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x00011694	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11694 <Transform_Sha256+2916>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011698	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11698 <Transform_Sha256+2920>:	and	r3, r3, r0
0x0001169c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1169c <Transform_Sha256+2924>:	orr	r3, r1, r3
0x000116a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a0 <Transform_Sha256+2928>:	add	r3, r2, r3
0x000116a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a4 <Transform_Sha256+2932>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000116a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a8 <Transform_Sha256+2936>:	ldr	r2, [r11, #-288]	; 0xfffffee0
0x000116ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116ac <Transform_Sha256+2940>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000116b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b0 <Transform_Sha256+2944>:	add	r3, r2, r3
0x000116b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b4 <Transform_Sha256+2948>:	str	r3, [r11, #-288]	; 0xfffffee0
0x000116b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b8 <Transform_Sha256+2952>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000116bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116bc <Transform_Sha256+2956>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000116c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c0 <Transform_Sha256+2960>:	add	r3, r2, r3
0x000116c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c4 <Transform_Sha256+2964>:	str	r3, [r11, #-304]	; 0xfffffed0
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116c8 <Transform_Sha256+2968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116cc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116cc <Transform_Sha256+2972>:	add	r3, r3, #8
0x000116d0	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d0 <Transform_Sha256+2976>:	str	r3, [r11, #-316]	; 0xfffffec4
0x000116d4	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d4 <Transform_Sha256+2980>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116d8	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d8 <Transform_Sha256+2984>:	cmp	r3, #63	; 0x3f
0x000116dc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116dc <Transform_Sha256+2988>:	ble	0x10d50 <Transform_Sha256+544>
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d50 <Transform_Sha256+544>:	ldr	r4, [r11, #-276]	; 0xfffffeec
0x00010d54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d54 <Transform_Sha256+548>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d58 <Transform_Sha256+552>:	mov	r1, #6
0x00010d5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d5c <Transform_Sha256+556>:	mov	r0, r3
0x00010d60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d60 <Transform_Sha256+560>:	bl	0x10760 <rotrFixed>
rotrFixed (x=797971701, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d64 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d64 <Transform_Sha256+564>:	mov	r5, r0
0x00010d68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d68 <Transform_Sha256+568>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d6c <Transform_Sha256+572>:	mov	r1, #11
0x00010d70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d70 <Transform_Sha256+576>:	mov	r0, r3
0x00010d74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d74 <Transform_Sha256+580>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1151005239, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d78 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d78 <Transform_Sha256+584>:	mov	r3, r0
0x00010d7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d7c <Transform_Sha256+588>:	eor	r5, r5, r3
0x00010d80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d80 <Transform_Sha256+592>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d84 <Transform_Sha256+596>:	mov	r1, #25
0x00010d88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d88 <Transform_Sha256+600>:	mov	r0, r3
0x00010d8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d8c <Transform_Sha256+604>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1151005239, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d90 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d90 <Transform_Sha256+608>:	mov	r3, r0
0x00010d94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d94 <Transform_Sha256+612>:	eor	r3, r3, r5
0x00010d98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d98 <Transform_Sha256+616>:	add	r2, r4, r3
0x00010d9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d9c <Transform_Sha256+620>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00010da0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da0 <Transform_Sha256+624>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00010da4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da4 <Transform_Sha256+628>:	ldr	r12, [r11, #-284]	; 0xfffffee4
0x00010da8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da8 <Transform_Sha256+632>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00010dac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dac <Transform_Sha256+636>:	eor	r3, r3, r12
0x00010db0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db0 <Transform_Sha256+640>:	and	r3, r3, r0
0x00010db4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db4 <Transform_Sha256+644>:	eor	r3, r3, r1
0x00010db8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db8 <Transform_Sha256+648>:	add	r2, r2, r3
0x00010dbc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dbc <Transform_Sha256+652>:	ldr	r1, [pc, #2464]	; 0x11764 <Transform_Sha256+3124>
0x00010dc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc0 <Transform_Sha256+656>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc4 <Transform_Sha256+660>:	ldr	r3, [r1, r3, lsl #2]
0x00010dc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc8 <Transform_Sha256+664>:	add	r2, r2, r3
0x00010dcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dcc <Transform_Sha256+668>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dd0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd0 <Transform_Sha256+672>:	lsl	r3, r3, #2
0x00010dd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd4 <Transform_Sha256+676>:	sub	r3, r3, #12
0x00010dd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd8 <Transform_Sha256+680>:	add	r3, r3, r11
0x00010ddc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ddc <Transform_Sha256+684>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010de0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de0 <Transform_Sha256+688>:	add	r3, r2, r3
0x00010de4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de4 <Transform_Sha256+692>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010de8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de8 <Transform_Sha256+696>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010dec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dec <Transform_Sha256+700>:	mov	r1, #2
0x00010df0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df0 <Transform_Sha256+704>:	mov	r0, r3
0x00010df4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df4 <Transform_Sha256+708>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1151005239, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010df8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df8 <Transform_Sha256+712>:	mov	r4, r0
0x00010dfc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dfc <Transform_Sha256+716>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e00 <Transform_Sha256+720>:	mov	r1, #13
0x00010e04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e04 <Transform_Sha256+724>:	mov	r0, r3
0x00010e08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e08 <Transform_Sha256+728>:	bl	0x10760 <rotrFixed>
rotrFixed (x=143201266, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e0c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e0c <Transform_Sha256+732>:	mov	r3, r0
0x00010e10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e10 <Transform_Sha256+736>:	eor	r4, r4, r3
0x00010e14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e14 <Transform_Sha256+740>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e18 <Transform_Sha256+744>:	mov	r1, #22
0x00010e1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e1c <Transform_Sha256+748>:	mov	r0, r3
0x00010e20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e20 <Transform_Sha256+752>:	bl	0x10760 <rotrFixed>
rotrFixed (x=143201266, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e24 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e24 <Transform_Sha256+756>:	mov	r3, r0
0x00010e28	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e28 <Transform_Sha256+760>:	eor	r2, r4, r3
0x00010e2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e2c <Transform_Sha256+764>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x00010e30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e30 <Transform_Sha256+768>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e34 <Transform_Sha256+772>:	orr	r1, r1, r3
0x00010e38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e38 <Transform_Sha256+776>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010e3c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e3c <Transform_Sha256+780>:	and	r1, r1, r3
0x00010e40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e40 <Transform_Sha256+784>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x00010e44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e44 <Transform_Sha256+788>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e48 <Transform_Sha256+792>:	and	r3, r3, r0
0x00010e4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e4c <Transform_Sha256+796>:	orr	r3, r1, r3
0x00010e50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e50 <Transform_Sha256+800>:	add	r3, r2, r3
0x00010e54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e54 <Transform_Sha256+804>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010e58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e58 <Transform_Sha256+808>:	ldr	r2, [r11, #-292]	; 0xfffffedc
0x00010e5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e5c <Transform_Sha256+812>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010e60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e60 <Transform_Sha256+816>:	add	r3, r2, r3
0x00010e64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e64 <Transform_Sha256+820>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00010e68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e68 <Transform_Sha256+824>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010e6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e6c <Transform_Sha256+828>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010e70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e70 <Transform_Sha256+832>:	add	r3, r2, r3
0x00010e74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e74 <Transform_Sha256+836>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00010e78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e78 <Transform_Sha256+840>:	ldr	r4, [r11, #-280]	; 0xfffffee8
0x00010e7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e7c <Transform_Sha256+844>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e80 <Transform_Sha256+848>:	mov	r1, #6
0x00010e84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e84 <Transform_Sha256+852>:	mov	r0, r3
0x00010e88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e88 <Transform_Sha256+856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=143201266, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e8c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e8c <Transform_Sha256+860>:	mov	r5, r0
0x00010e90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e90 <Transform_Sha256+864>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e94 <Transform_Sha256+868>:	mov	r1, #11
0x00010e98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e98 <Transform_Sha256+872>:	mov	r0, r3
0x00010e9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e9c <Transform_Sha256+876>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2919343691, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ea0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea0 <Transform_Sha256+880>:	mov	r3, r0
0x00010ea4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea4 <Transform_Sha256+884>:	eor	r5, r5, r3
0x00010ea8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea8 <Transform_Sha256+888>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010eac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eac <Transform_Sha256+892>:	mov	r1, #25
0x00010eb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb0 <Transform_Sha256+896>:	mov	r0, r3
0x00010eb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb4 <Transform_Sha256+900>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2919343691, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010eb8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb8 <Transform_Sha256+904>:	mov	r3, r0
0x00010ebc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ebc <Transform_Sha256+908>:	eor	r3, r3, r5
0x00010ec0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec0 <Transform_Sha256+912>:	add	r2, r4, r3
0x00010ec4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec4 <Transform_Sha256+916>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x00010ec8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec8 <Transform_Sha256+920>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00010ecc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ecc <Transform_Sha256+924>:	ldr	r12, [r11, #-288]	; 0xfffffee0
0x00010ed0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed0 <Transform_Sha256+928>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00010ed4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed4 <Transform_Sha256+932>:	eor	r3, r3, r12
0x00010ed8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed8 <Transform_Sha256+936>:	and	r3, r3, r0
0x00010edc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10edc <Transform_Sha256+940>:	eor	r3, r3, r1
0x00010ee0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee0 <Transform_Sha256+944>:	add	r2, r2, r3
0x00010ee4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee4 <Transform_Sha256+948>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ee8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee8 <Transform_Sha256+952>:	add	r3, r3, #1
0x00010eec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eec <Transform_Sha256+956>:	ldr	r1, [pc, #2160]	; 0x11764 <Transform_Sha256+3124>
0x00010ef0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef0 <Transform_Sha256+960>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef4 <Transform_Sha256+964>:	add	r2, r2, r3
0x00010ef8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef8 <Transform_Sha256+968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010efc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10efc <Transform_Sha256+972>:	add	r3, r3, #1
0x00010f00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f00 <Transform_Sha256+976>:	lsl	r3, r3, #2
0x00010f04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f04 <Transform_Sha256+980>:	sub	r3, r3, #12
0x00010f08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f08 <Transform_Sha256+984>:	add	r3, r3, r11
0x00010f0c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f0c <Transform_Sha256+988>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010f10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f10 <Transform_Sha256+992>:	add	r3, r2, r3
0x00010f14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f14 <Transform_Sha256+996>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010f18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f18 <Transform_Sha256+1000>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f1c <Transform_Sha256+1004>:	mov	r1, #2
0x00010f20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f20 <Transform_Sha256+1008>:	mov	r0, r3
0x00010f24	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f24 <Transform_Sha256+1012>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2919343691, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f28 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f28 <Transform_Sha256+1016>:	mov	r4, r0
0x00010f2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f2c <Transform_Sha256+1020>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f30 <Transform_Sha256+1024>:	mov	r1, #13
0x00010f34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f34 <Transform_Sha256+1028>:	mov	r0, r3
0x00010f38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f38 <Transform_Sha256+1032>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1500522639, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f3c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f3c <Transform_Sha256+1036>:	mov	r3, r0
0x00010f40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f40 <Transform_Sha256+1040>:	eor	r4, r4, r3
0x00010f44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f44 <Transform_Sha256+1044>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f48 <Transform_Sha256+1048>:	mov	r1, #22
0x00010f4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f4c <Transform_Sha256+1052>:	mov	r0, r3
0x00010f50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f50 <Transform_Sha256+1056>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1500522639, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f54 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f54 <Transform_Sha256+1060>:	mov	r3, r0
0x00010f58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f58 <Transform_Sha256+1064>:	eor	r2, r4, r3
0x00010f5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f5c <Transform_Sha256+1068>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x00010f60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f60 <Transform_Sha256+1072>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f64 <Transform_Sha256+1076>:	orr	r1, r1, r3
0x00010f68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f68 <Transform_Sha256+1080>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010f6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f6c <Transform_Sha256+1084>:	and	r1, r1, r3
0x00010f70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f70 <Transform_Sha256+1088>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x00010f74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f74 <Transform_Sha256+1092>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f78 <Transform_Sha256+1096>:	and	r3, r3, r0
0x00010f7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f7c <Transform_Sha256+1100>:	orr	r3, r1, r3
0x00010f80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f80 <Transform_Sha256+1104>:	add	r3, r2, r3
0x00010f84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f84 <Transform_Sha256+1108>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010f88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f88 <Transform_Sha256+1112>:	ldr	r2, [r11, #-296]	; 0xfffffed8
0x00010f8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f8c <Transform_Sha256+1116>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010f90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f90 <Transform_Sha256+1120>:	add	r3, r2, r3
0x00010f94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f94 <Transform_Sha256+1124>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00010f98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f98 <Transform_Sha256+1128>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010f9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f9c <Transform_Sha256+1132>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010fa0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa0 <Transform_Sha256+1136>:	add	r3, r2, r3
0x00010fa4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa4 <Transform_Sha256+1140>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00010fa8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa8 <Transform_Sha256+1144>:	ldr	r4, [r11, #-284]	; 0xfffffee4
0x00010fac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fac <Transform_Sha256+1148>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb0 <Transform_Sha256+1152>:	mov	r1, #6
0x00010fb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb4 <Transform_Sha256+1156>:	mov	r0, r3
0x00010fb8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb8 <Transform_Sha256+1160>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1500522639, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fbc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fbc <Transform_Sha256+1164>:	mov	r5, r0
0x00010fc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc0 <Transform_Sha256+1168>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc4 <Transform_Sha256+1172>:	mov	r1, #11
0x00010fc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc8 <Transform_Sha256+1176>:	mov	r0, r3
0x00010fcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fcc <Transform_Sha256+1180>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2470959888, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd0 <Transform_Sha256+1184>:	mov	r3, r0
0x00010fd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd4 <Transform_Sha256+1188>:	eor	r5, r5, r3
0x00010fd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd8 <Transform_Sha256+1192>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fdc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fdc <Transform_Sha256+1196>:	mov	r1, #25
0x00010fe0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe0 <Transform_Sha256+1200>:	mov	r0, r3
0x00010fe4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe4 <Transform_Sha256+1204>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2470959888, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fe8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe8 <Transform_Sha256+1208>:	mov	r3, r0
0x00010fec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fec <Transform_Sha256+1212>:	eor	r3, r3, r5
0x00010ff0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff0 <Transform_Sha256+1216>:	add	r2, r4, r3
0x00010ff4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff4 <Transform_Sha256+1220>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x00010ff8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff8 <Transform_Sha256+1224>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00010ffc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ffc <Transform_Sha256+1228>:	ldr	r12, [r11, #-292]	; 0xfffffedc
0x00011000	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11000 <Transform_Sha256+1232>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011004	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11004 <Transform_Sha256+1236>:	eor	r3, r3, r12
0x00011008	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11008 <Transform_Sha256+1240>:	and	r3, r3, r0
0x0001100c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1100c <Transform_Sha256+1244>:	eor	r3, r3, r1
0x00011010	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11010 <Transform_Sha256+1248>:	add	r2, r2, r3
0x00011014	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11014 <Transform_Sha256+1252>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011018	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11018 <Transform_Sha256+1256>:	add	r3, r3, #2
0x0001101c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1101c <Transform_Sha256+1260>:	ldr	r1, [pc, #1856]	; 0x11764 <Transform_Sha256+3124>
0x00011020	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11020 <Transform_Sha256+1264>:	ldr	r3, [r1, r3, lsl #2]
0x00011024	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11024 <Transform_Sha256+1268>:	add	r2, r2, r3
0x00011028	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11028 <Transform_Sha256+1272>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001102c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1102c <Transform_Sha256+1276>:	add	r3, r3, #2
0x00011030	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11030 <Transform_Sha256+1280>:	lsl	r3, r3, #2
0x00011034	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11034 <Transform_Sha256+1284>:	sub	r3, r3, #12
0x00011038	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11038 <Transform_Sha256+1288>:	add	r3, r3, r11
0x0001103c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1103c <Transform_Sha256+1292>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011040	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11040 <Transform_Sha256+1296>:	add	r3, r2, r3
0x00011044	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11044 <Transform_Sha256+1300>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011048	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11048 <Transform_Sha256+1304>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001104c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1104c <Transform_Sha256+1308>:	mov	r1, #2
0x00011050	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11050 <Transform_Sha256+1312>:	mov	r0, r3
0x00011054	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11054 <Transform_Sha256+1316>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2470959888, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011058 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11058 <Transform_Sha256+1320>:	mov	r4, r0
0x0001105c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1105c <Transform_Sha256+1324>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011060	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11060 <Transform_Sha256+1328>:	mov	r1, #13
0x00011064	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11064 <Transform_Sha256+1332>:	mov	r0, r3
0x00011068	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11068 <Transform_Sha256+1336>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2929636061, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001106c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1106c <Transform_Sha256+1340>:	mov	r3, r0
0x00011070	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11070 <Transform_Sha256+1344>:	eor	r4, r4, r3
0x00011074	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11074 <Transform_Sha256+1348>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011078	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11078 <Transform_Sha256+1352>:	mov	r1, #22
0x0001107c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1107c <Transform_Sha256+1356>:	mov	r0, r3
0x00011080	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11080 <Transform_Sha256+1360>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2929636061, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011084 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11084 <Transform_Sha256+1364>:	mov	r3, r0
0x00011088	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11088 <Transform_Sha256+1368>:	eor	r2, r4, r3
0x0001108c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1108c <Transform_Sha256+1372>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00011090	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11090 <Transform_Sha256+1376>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011094	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11094 <Transform_Sha256+1380>:	orr	r1, r1, r3
0x00011098	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11098 <Transform_Sha256+1384>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001109c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1109c <Transform_Sha256+1388>:	and	r1, r1, r3
0x000110a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a0 <Transform_Sha256+1392>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000110a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a4 <Transform_Sha256+1396>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000110a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a8 <Transform_Sha256+1400>:	and	r3, r3, r0
0x000110ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ac <Transform_Sha256+1404>:	orr	r3, r1, r3
0x000110b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b0 <Transform_Sha256+1408>:	add	r3, r2, r3
0x000110b4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b4 <Transform_Sha256+1412>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000110b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b8 <Transform_Sha256+1416>:	ldr	r2, [r11, #-300]	; 0xfffffed4
0x000110bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110bc <Transform_Sha256+1420>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000110c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c0 <Transform_Sha256+1424>:	add	r3, r2, r3
0x000110c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c4 <Transform_Sha256+1428>:	str	r3, [r11, #-300]	; 0xfffffed4
0x000110c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c8 <Transform_Sha256+1432>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000110cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110cc <Transform_Sha256+1436>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000110d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d0 <Transform_Sha256+1440>:	add	r3, r2, r3
0x000110d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d4 <Transform_Sha256+1444>:	str	r3, [r11, #-284]	; 0xfffffee4
0x000110d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d8 <Transform_Sha256+1448>:	ldr	r4, [r11, #-288]	; 0xfffffee0
0x000110dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110dc <Transform_Sha256+1452>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e0 <Transform_Sha256+1456>:	mov	r1, #6
0x000110e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e4 <Transform_Sha256+1460>:	mov	r0, r3
0x000110e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e8 <Transform_Sha256+1464>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2929636061, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000110ec in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ec <Transform_Sha256+1468>:	mov	r5, r0
0x000110f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f0 <Transform_Sha256+1472>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f4 <Transform_Sha256+1476>:	mov	r1, #11
0x000110f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f8 <Transform_Sha256+1480>:	mov	r0, r3
0x000110fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110fc <Transform_Sha256+1484>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3835657525, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011100 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11100 <Transform_Sha256+1488>:	mov	r3, r0
0x00011104	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11104 <Transform_Sha256+1492>:	eor	r5, r5, r3
0x00011108	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11108 <Transform_Sha256+1496>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001110c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1110c <Transform_Sha256+1500>:	mov	r1, #25
0x00011110	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11110 <Transform_Sha256+1504>:	mov	r0, r3
0x00011114	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11114 <Transform_Sha256+1508>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3835657525, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011118 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11118 <Transform_Sha256+1512>:	mov	r3, r0
0x0001111c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1111c <Transform_Sha256+1516>:	eor	r3, r3, r5
0x00011120	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11120 <Transform_Sha256+1520>:	add	r2, r4, r3
0x00011124	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11124 <Transform_Sha256+1524>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011128	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11128 <Transform_Sha256+1528>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x0001112c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1112c <Transform_Sha256+1532>:	ldr	r12, [r11, #-296]	; 0xfffffed8
0x00011130	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11130 <Transform_Sha256+1536>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011134	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11134 <Transform_Sha256+1540>:	eor	r3, r3, r12
0x00011138	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11138 <Transform_Sha256+1544>:	and	r3, r3, r0
0x0001113c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1113c <Transform_Sha256+1548>:	eor	r3, r3, r1
0x00011140	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11140 <Transform_Sha256+1552>:	add	r2, r2, r3
0x00011144	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11144 <Transform_Sha256+1556>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011148	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11148 <Transform_Sha256+1560>:	add	r3, r3, #3
0x0001114c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1114c <Transform_Sha256+1564>:	ldr	r1, [pc, #1552]	; 0x11764 <Transform_Sha256+3124>
0x00011150	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11150 <Transform_Sha256+1568>:	ldr	r3, [r1, r3, lsl #2]
0x00011154	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11154 <Transform_Sha256+1572>:	add	r2, r2, r3
0x00011158	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11158 <Transform_Sha256+1576>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001115c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1115c <Transform_Sha256+1580>:	add	r3, r3, #3
0x00011160	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11160 <Transform_Sha256+1584>:	lsl	r3, r3, #2
0x00011164	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11164 <Transform_Sha256+1588>:	sub	r3, r3, #12
0x00011168	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11168 <Transform_Sha256+1592>:	add	r3, r3, r11
0x0001116c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1116c <Transform_Sha256+1596>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011170	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11170 <Transform_Sha256+1600>:	add	r3, r2, r3
0x00011174	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11174 <Transform_Sha256+1604>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011178	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11178 <Transform_Sha256+1608>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001117c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1117c <Transform_Sha256+1612>:	mov	r1, #2
0x00011180	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11180 <Transform_Sha256+1616>:	mov	r0, r3
0x00011184	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11184 <Transform_Sha256+1620>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3835657525, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011188 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11188 <Transform_Sha256+1624>:	mov	r4, r0
0x0001118c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1118c <Transform_Sha256+1628>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011190	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11190 <Transform_Sha256+1632>:	mov	r1, #13
0x00011194	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11194 <Transform_Sha256+1636>:	mov	r0, r3
0x00011198	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11198 <Transform_Sha256+1640>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1160333847, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001119c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1119c <Transform_Sha256+1644>:	mov	r3, r0
0x000111a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a0 <Transform_Sha256+1648>:	eor	r4, r4, r3
0x000111a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a4 <Transform_Sha256+1652>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000111a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a8 <Transform_Sha256+1656>:	mov	r1, #22
0x000111ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ac <Transform_Sha256+1660>:	mov	r0, r3
0x000111b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b0 <Transform_Sha256+1664>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1160333847, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000111b4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b4 <Transform_Sha256+1668>:	mov	r3, r0
0x000111b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b8 <Transform_Sha256+1672>:	eor	r2, r4, r3
0x000111bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111bc <Transform_Sha256+1676>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x000111c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c0 <Transform_Sha256+1680>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c4 <Transform_Sha256+1684>:	orr	r1, r1, r3
0x000111c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c8 <Transform_Sha256+1688>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000111cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111cc <Transform_Sha256+1692>:	and	r1, r1, r3
0x000111d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d0 <Transform_Sha256+1696>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000111d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d4 <Transform_Sha256+1700>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d8 <Transform_Sha256+1704>:	and	r3, r3, r0
0x000111dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111dc <Transform_Sha256+1708>:	orr	r3, r1, r3
0x000111e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e0 <Transform_Sha256+1712>:	add	r3, r2, r3
0x000111e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e4 <Transform_Sha256+1716>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000111e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e8 <Transform_Sha256+1720>:	ldr	r2, [r11, #-304]	; 0xfffffed0
0x000111ec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ec <Transform_Sha256+1724>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000111f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f0 <Transform_Sha256+1728>:	add	r3, r2, r3
0x000111f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f4 <Transform_Sha256+1732>:	str	r3, [r11, #-304]	; 0xfffffed0
0x000111f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f8 <Transform_Sha256+1736>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000111fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111fc <Transform_Sha256+1740>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011200	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11200 <Transform_Sha256+1744>:	add	r3, r2, r3
0x00011204	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11204 <Transform_Sha256+1748>:	str	r3, [r11, #-288]	; 0xfffffee0
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11208 <Transform_Sha256+1752>:	ldr	r4, [r11, #-292]	; 0xfffffedc
0x0001120c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1120c <Transform_Sha256+1756>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011210	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11210 <Transform_Sha256+1760>:	mov	r1, #6
0x00011214	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11214 <Transform_Sha256+1764>:	mov	r0, r3
0x00011218	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11218 <Transform_Sha256+1768>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1160333847, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001121c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1121c <Transform_Sha256+1772>:	mov	r5, r0
0x00011220	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11220 <Transform_Sha256+1776>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011224	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11224 <Transform_Sha256+1780>:	mov	r1, #11
0x00011228	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11228 <Transform_Sha256+1784>:	mov	r0, r3
0x0001122c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1122c <Transform_Sha256+1788>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1791546415, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011230 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11230 <Transform_Sha256+1792>:	mov	r3, r0
0x00011234	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11234 <Transform_Sha256+1796>:	eor	r5, r5, r3
0x00011238	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11238 <Transform_Sha256+1800>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001123c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1123c <Transform_Sha256+1804>:	mov	r1, #25
0x00011240	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11240 <Transform_Sha256+1808>:	mov	r0, r3
0x00011244	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11244 <Transform_Sha256+1812>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1791546415, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011248 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11248 <Transform_Sha256+1816>:	mov	r3, r0
0x0001124c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1124c <Transform_Sha256+1820>:	eor	r3, r3, r5
0x00011250	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11250 <Transform_Sha256+1824>:	add	r2, r4, r3
0x00011254	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11254 <Transform_Sha256+1828>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011258	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11258 <Transform_Sha256+1832>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x0001125c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1125c <Transform_Sha256+1836>:	ldr	r12, [r11, #-300]	; 0xfffffed4
0x00011260	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11260 <Transform_Sha256+1840>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011264	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11264 <Transform_Sha256+1844>:	eor	r3, r3, r12
0x00011268	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11268 <Transform_Sha256+1848>:	and	r3, r3, r0
0x0001126c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1126c <Transform_Sha256+1852>:	eor	r3, r3, r1
0x00011270	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11270 <Transform_Sha256+1856>:	add	r2, r2, r3
0x00011274	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11274 <Transform_Sha256+1860>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011278	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11278 <Transform_Sha256+1864>:	add	r3, r3, #4
0x0001127c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1127c <Transform_Sha256+1868>:	ldr	r1, [pc, #1248]	; 0x11764 <Transform_Sha256+3124>
0x00011280	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11280 <Transform_Sha256+1872>:	ldr	r3, [r1, r3, lsl #2]
0x00011284	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11284 <Transform_Sha256+1876>:	add	r2, r2, r3
0x00011288	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11288 <Transform_Sha256+1880>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001128c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1128c <Transform_Sha256+1884>:	add	r3, r3, #4
0x00011290	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11290 <Transform_Sha256+1888>:	lsl	r3, r3, #2
0x00011294	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11294 <Transform_Sha256+1892>:	sub	r3, r3, #12
0x00011298	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11298 <Transform_Sha256+1896>:	add	r3, r3, r11
0x0001129c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1129c <Transform_Sha256+1900>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000112a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a0 <Transform_Sha256+1904>:	add	r3, r2, r3
0x000112a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a4 <Transform_Sha256+1908>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000112a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a8 <Transform_Sha256+1912>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ac <Transform_Sha256+1916>:	mov	r1, #2
0x000112b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b0 <Transform_Sha256+1920>:	mov	r0, r3
0x000112b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b4 <Transform_Sha256+1924>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1791546415, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112b8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b8 <Transform_Sha256+1928>:	mov	r4, r0
0x000112bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112bc <Transform_Sha256+1932>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c0 <Transform_Sha256+1936>:	mov	r1, #13
0x000112c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c4 <Transform_Sha256+1940>:	mov	r0, r3
0x000112c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c8 <Transform_Sha256+1944>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3562017207, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112cc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112cc <Transform_Sha256+1948>:	mov	r3, r0
0x000112d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d0 <Transform_Sha256+1952>:	eor	r4, r4, r3
0x000112d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d4 <Transform_Sha256+1956>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d8 <Transform_Sha256+1960>:	mov	r1, #22
0x000112dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112dc <Transform_Sha256+1964>:	mov	r0, r3
0x000112e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e0 <Transform_Sha256+1968>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3562017207, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112e4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e4 <Transform_Sha256+1972>:	mov	r3, r0
0x000112e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e8 <Transform_Sha256+1976>:	eor	r2, r4, r3
0x000112ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ec <Transform_Sha256+1980>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x000112f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f0 <Transform_Sha256+1984>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000112f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f4 <Transform_Sha256+1988>:	orr	r1, r1, r3
0x000112f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f8 <Transform_Sha256+1992>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000112fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112fc <Transform_Sha256+1996>:	and	r1, r1, r3
0x00011300	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11300 <Transform_Sha256+2000>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00011304	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11304 <Transform_Sha256+2004>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011308	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11308 <Transform_Sha256+2008>:	and	r3, r3, r0
0x0001130c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1130c <Transform_Sha256+2012>:	orr	r3, r1, r3
0x00011310	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11310 <Transform_Sha256+2016>:	add	r3, r2, r3
0x00011314	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11314 <Transform_Sha256+2020>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011318	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11318 <Transform_Sha256+2024>:	ldr	r2, [r11, #-276]	; 0xfffffeec
0x0001131c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1131c <Transform_Sha256+2028>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011320	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11320 <Transform_Sha256+2032>:	add	r3, r2, r3
0x00011324	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11324 <Transform_Sha256+2036>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00011328	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11328 <Transform_Sha256+2040>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001132c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1132c <Transform_Sha256+2044>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011330	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11330 <Transform_Sha256+2048>:	add	r3, r2, r3
0x00011334	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11334 <Transform_Sha256+2052>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00011338	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11338 <Transform_Sha256+2056>:	ldr	r4, [r11, #-296]	; 0xfffffed8
0x0001133c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1133c <Transform_Sha256+2060>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011340	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11340 <Transform_Sha256+2064>:	mov	r1, #6
0x00011344	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11344 <Transform_Sha256+2068>:	mov	r0, r3
0x00011348	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11348 <Transform_Sha256+2072>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3562017207, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001134c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1134c <Transform_Sha256+2076>:	mov	r5, r0
0x00011350	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11350 <Transform_Sha256+2080>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011354	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11354 <Transform_Sha256+2084>:	mov	r1, #11
0x00011358	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11358 <Transform_Sha256+2088>:	mov	r0, r3
0x0001135c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1135c <Transform_Sha256+2092>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3354130818, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011360 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11360 <Transform_Sha256+2096>:	mov	r3, r0
0x00011364	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11364 <Transform_Sha256+2100>:	eor	r5, r5, r3
0x00011368	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11368 <Transform_Sha256+2104>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x0001136c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1136c <Transform_Sha256+2108>:	mov	r1, #25
0x00011370	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11370 <Transform_Sha256+2112>:	mov	r0, r3
0x00011374	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11374 <Transform_Sha256+2116>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3354130818, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011378 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11378 <Transform_Sha256+2120>:	mov	r3, r0
0x0001137c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1137c <Transform_Sha256+2124>:	eor	r3, r3, r5
0x00011380	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11380 <Transform_Sha256+2128>:	add	r2, r4, r3
0x00011384	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11384 <Transform_Sha256+2132>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011388	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11388 <Transform_Sha256+2136>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x0001138c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1138c <Transform_Sha256+2140>:	ldr	r12, [r11, #-304]	; 0xfffffed0
0x00011390	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11390 <Transform_Sha256+2144>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011394	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11394 <Transform_Sha256+2148>:	eor	r3, r3, r12
0x00011398	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11398 <Transform_Sha256+2152>:	and	r3, r3, r0
0x0001139c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1139c <Transform_Sha256+2156>:	eor	r3, r3, r1
0x000113a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a0 <Transform_Sha256+2160>:	add	r2, r2, r3
0x000113a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a4 <Transform_Sha256+2164>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a8 <Transform_Sha256+2168>:	add	r3, r3, #5
0x000113ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ac <Transform_Sha256+2172>:	ldr	r1, [pc, #944]	; 0x11764 <Transform_Sha256+3124>
0x000113b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b0 <Transform_Sha256+2176>:	ldr	r3, [r1, r3, lsl #2]
0x000113b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b4 <Transform_Sha256+2180>:	add	r2, r2, r3
0x000113b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b8 <Transform_Sha256+2184>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113bc <Transform_Sha256+2188>:	add	r3, r3, #5
0x000113c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c0 <Transform_Sha256+2192>:	lsl	r3, r3, #2
0x000113c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c4 <Transform_Sha256+2196>:	sub	r3, r3, #12
0x000113c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c8 <Transform_Sha256+2200>:	add	r3, r3, r11
0x000113cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113cc <Transform_Sha256+2204>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000113d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d0 <Transform_Sha256+2208>:	add	r3, r2, r3
0x000113d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d4 <Transform_Sha256+2212>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000113d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d8 <Transform_Sha256+2216>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113dc <Transform_Sha256+2220>:	mov	r1, #2
0x000113e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e0 <Transform_Sha256+2224>:	mov	r0, r3
0x000113e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e4 <Transform_Sha256+2228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3354130818, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113e8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e8 <Transform_Sha256+2232>:	mov	r4, r0
0x000113ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ec <Transform_Sha256+2236>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f0 <Transform_Sha256+2240>:	mov	r1, #13
0x000113f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f4 <Transform_Sha256+2244>:	mov	r0, r3
0x000113f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f8 <Transform_Sha256+2248>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1803574598, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113fc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113fc <Transform_Sha256+2252>:	mov	r3, r0
0x00011400	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11400 <Transform_Sha256+2256>:	eor	r4, r4, r3
0x00011404	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11404 <Transform_Sha256+2260>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011408	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11408 <Transform_Sha256+2264>:	mov	r1, #22
0x0001140c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1140c <Transform_Sha256+2268>:	mov	r0, r3
0x00011410	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11410 <Transform_Sha256+2272>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1803574598, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011414 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11414 <Transform_Sha256+2276>:	mov	r3, r0
0x00011418	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11418 <Transform_Sha256+2280>:	eor	r2, r4, r3
0x0001141c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1141c <Transform_Sha256+2284>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011420	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11420 <Transform_Sha256+2288>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011424	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11424 <Transform_Sha256+2292>:	orr	r1, r1, r3
0x00011428	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11428 <Transform_Sha256+2296>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001142c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1142c <Transform_Sha256+2300>:	and	r1, r1, r3
0x00011430	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11430 <Transform_Sha256+2304>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00011434	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11434 <Transform_Sha256+2308>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011438	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11438 <Transform_Sha256+2312>:	and	r3, r3, r0
0x0001143c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1143c <Transform_Sha256+2316>:	orr	r3, r1, r3
0x00011440	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11440 <Transform_Sha256+2320>:	add	r3, r2, r3
0x00011444	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11444 <Transform_Sha256+2324>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011448	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11448 <Transform_Sha256+2328>:	ldr	r2, [r11, #-280]	; 0xfffffee8
0x0001144c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1144c <Transform_Sha256+2332>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011450	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11450 <Transform_Sha256+2336>:	add	r3, r2, r3
0x00011454	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11454 <Transform_Sha256+2340>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00011458	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11458 <Transform_Sha256+2344>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001145c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1145c <Transform_Sha256+2348>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011460	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11460 <Transform_Sha256+2352>:	add	r3, r2, r3
0x00011464	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11464 <Transform_Sha256+2356>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00011468	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11468 <Transform_Sha256+2360>:	ldr	r4, [r11, #-300]	; 0xfffffed4
0x0001146c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1146c <Transform_Sha256+2364>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011470	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11470 <Transform_Sha256+2368>:	mov	r1, #6
0x00011474	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11474 <Transform_Sha256+2372>:	mov	r0, r3
0x00011478	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11478 <Transform_Sha256+2376>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1803574598, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001147c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1147c <Transform_Sha256+2380>:	mov	r5, r0
0x00011480	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11480 <Transform_Sha256+2384>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011484	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11484 <Transform_Sha256+2388>:	mov	r1, #11
0x00011488	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11488 <Transform_Sha256+2392>:	mov	r0, r3
0x0001148c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1148c <Transform_Sha256+2396>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4099778588, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011490 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11490 <Transform_Sha256+2400>:	mov	r3, r0
0x00011494	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11494 <Transform_Sha256+2404>:	eor	r5, r5, r3
0x00011498	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11498 <Transform_Sha256+2408>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001149c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1149c <Transform_Sha256+2412>:	mov	r1, #25
0x000114a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a0 <Transform_Sha256+2416>:	mov	r0, r3
0x000114a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a4 <Transform_Sha256+2420>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4099778588, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000114a8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a8 <Transform_Sha256+2424>:	mov	r3, r0
0x000114ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ac <Transform_Sha256+2428>:	eor	r3, r3, r5
0x000114b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b0 <Transform_Sha256+2432>:	add	r2, r4, r3
0x000114b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b4 <Transform_Sha256+2436>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x000114b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b8 <Transform_Sha256+2440>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000114bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114bc <Transform_Sha256+2444>:	ldr	r12, [r11, #-276]	; 0xfffffeec
0x000114c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c0 <Transform_Sha256+2448>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x000114c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c4 <Transform_Sha256+2452>:	eor	r3, r3, r12
0x000114c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c8 <Transform_Sha256+2456>:	and	r3, r3, r0
0x000114cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114cc <Transform_Sha256+2460>:	eor	r3, r3, r1
0x000114d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d0 <Transform_Sha256+2464>:	add	r2, r2, r3
0x000114d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d4 <Transform_Sha256+2468>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d8 <Transform_Sha256+2472>:	add	r3, r3, #6
0x000114dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114dc <Transform_Sha256+2476>:	ldr	r1, [pc, #640]	; 0x11764 <Transform_Sha256+3124>
0x000114e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e0 <Transform_Sha256+2480>:	ldr	r3, [r1, r3, lsl #2]
0x000114e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e4 <Transform_Sha256+2484>:	add	r2, r2, r3
0x000114e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e8 <Transform_Sha256+2488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ec <Transform_Sha256+2492>:	add	r3, r3, #6
0x000114f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f0 <Transform_Sha256+2496>:	lsl	r3, r3, #2
0x000114f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f4 <Transform_Sha256+2500>:	sub	r3, r3, #12
0x000114f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f8 <Transform_Sha256+2504>:	add	r3, r3, r11
0x000114fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114fc <Transform_Sha256+2508>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011500	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11500 <Transform_Sha256+2512>:	add	r3, r2, r3
0x00011504	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11504 <Transform_Sha256+2516>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011508	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11508 <Transform_Sha256+2520>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x0001150c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1150c <Transform_Sha256+2524>:	mov	r1, #2
0x00011510	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11510 <Transform_Sha256+2528>:	mov	r0, r3
0x00011514	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11514 <Transform_Sha256+2532>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4099778588, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011518 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11518 <Transform_Sha256+2536>:	mov	r4, r0
0x0001151c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1151c <Transform_Sha256+2540>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011520	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11520 <Transform_Sha256+2544>:	mov	r1, #13
0x00011524	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11524 <Transform_Sha256+2548>:	mov	r0, r3
0x00011528	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11528 <Transform_Sha256+2552>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4234518867, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001152c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1152c <Transform_Sha256+2556>:	mov	r3, r0
0x00011530	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11530 <Transform_Sha256+2560>:	eor	r4, r4, r3
0x00011534	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11534 <Transform_Sha256+2564>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011538	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11538 <Transform_Sha256+2568>:	mov	r1, #22
0x0001153c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1153c <Transform_Sha256+2572>:	mov	r0, r3
0x00011540	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11540 <Transform_Sha256+2576>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4234518867, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011544 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11544 <Transform_Sha256+2580>:	mov	r3, r0
0x00011548	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11548 <Transform_Sha256+2584>:	eor	r2, r4, r3
0x0001154c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1154c <Transform_Sha256+2588>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011550	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11550 <Transform_Sha256+2592>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011554	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11554 <Transform_Sha256+2596>:	orr	r1, r1, r3
0x00011558	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11558 <Transform_Sha256+2600>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x0001155c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1155c <Transform_Sha256+2604>:	and	r1, r1, r3
0x00011560	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11560 <Transform_Sha256+2608>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00011564	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11564 <Transform_Sha256+2612>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011568	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11568 <Transform_Sha256+2616>:	and	r3, r3, r0
0x0001156c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1156c <Transform_Sha256+2620>:	orr	r3, r1, r3
0x00011570	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11570 <Transform_Sha256+2624>:	add	r3, r2, r3
0x00011574	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11574 <Transform_Sha256+2628>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011578	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11578 <Transform_Sha256+2632>:	ldr	r2, [r11, #-284]	; 0xfffffee4
0x0001157c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1157c <Transform_Sha256+2636>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011580	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11580 <Transform_Sha256+2640>:	add	r3, r2, r3
0x00011584	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11584 <Transform_Sha256+2644>:	str	r3, [r11, #-284]	; 0xfffffee4
0x00011588	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11588 <Transform_Sha256+2648>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001158c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1158c <Transform_Sha256+2652>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011590	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11590 <Transform_Sha256+2656>:	add	r3, r2, r3
0x00011594	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11594 <Transform_Sha256+2660>:	str	r3, [r11, #-300]	; 0xfffffed4
0x00011598	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11598 <Transform_Sha256+2664>:	ldr	r4, [r11, #-304]	; 0xfffffed0
0x0001159c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1159c <Transform_Sha256+2668>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a0 <Transform_Sha256+2672>:	mov	r1, #6
0x000115a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a4 <Transform_Sha256+2676>:	mov	r0, r3
0x000115a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a8 <Transform_Sha256+2680>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4234518867, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115ac in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ac <Transform_Sha256+2684>:	mov	r5, r0
0x000115b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b0 <Transform_Sha256+2688>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b4 <Transform_Sha256+2692>:	mov	r1, #11
0x000115b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b8 <Transform_Sha256+2696>:	mov	r0, r3
0x000115bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115bc <Transform_Sha256+2700>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4077567365, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115c0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c0 <Transform_Sha256+2704>:	mov	r3, r0
0x000115c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c4 <Transform_Sha256+2708>:	eor	r5, r5, r3
0x000115c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c8 <Transform_Sha256+2712>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115cc <Transform_Sha256+2716>:	mov	r1, #25
0x000115d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d0 <Transform_Sha256+2720>:	mov	r0, r3
0x000115d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d4 <Transform_Sha256+2724>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4077567365, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115d8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d8 <Transform_Sha256+2728>:	mov	r3, r0
0x000115dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115dc <Transform_Sha256+2732>:	eor	r3, r3, r5
0x000115e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e0 <Transform_Sha256+2736>:	add	r2, r4, r3
0x000115e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e4 <Transform_Sha256+2740>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x000115e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e8 <Transform_Sha256+2744>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000115ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ec <Transform_Sha256+2748>:	ldr	r12, [r11, #-280]	; 0xfffffee8
0x000115f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f0 <Transform_Sha256+2752>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000115f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f4 <Transform_Sha256+2756>:	eor	r3, r3, r12
0x000115f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f8 <Transform_Sha256+2760>:	and	r3, r3, r0
0x000115fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115fc <Transform_Sha256+2764>:	eor	r3, r3, r1
0x00011600	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11600 <Transform_Sha256+2768>:	add	r2, r2, r3
0x00011604	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11604 <Transform_Sha256+2772>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011608	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11608 <Transform_Sha256+2776>:	add	r3, r3, #7
0x0001160c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1160c <Transform_Sha256+2780>:	ldr	r1, [pc, #336]	; 0x11764 <Transform_Sha256+3124>
0x00011610	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11610 <Transform_Sha256+2784>:	ldr	r3, [r1, r3, lsl #2]
0x00011614	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11614 <Transform_Sha256+2788>:	add	r2, r2, r3
0x00011618	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11618 <Transform_Sha256+2792>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001161c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1161c <Transform_Sha256+2796>:	add	r3, r3, #7
0x00011620	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11620 <Transform_Sha256+2800>:	lsl	r3, r3, #2
0x00011624	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11624 <Transform_Sha256+2804>:	sub	r3, r3, #12
0x00011628	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11628 <Transform_Sha256+2808>:	add	r3, r3, r11
0x0001162c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1162c <Transform_Sha256+2812>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011630	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11630 <Transform_Sha256+2816>:	add	r3, r2, r3
0x00011634	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11634 <Transform_Sha256+2820>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011638	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11638 <Transform_Sha256+2824>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001163c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1163c <Transform_Sha256+2828>:	mov	r1, #2
0x00011640	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11640 <Transform_Sha256+2832>:	mov	r0, r3
0x00011644	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11644 <Transform_Sha256+2836>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4077567365, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011648 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11648 <Transform_Sha256+2840>:	mov	r4, r0
0x0001164c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1164c <Transform_Sha256+2844>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011650	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11650 <Transform_Sha256+2848>:	mov	r1, #13
0x00011654	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11654 <Transform_Sha256+2852>:	mov	r0, r3
0x00011658	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11658 <Transform_Sha256+2856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=220547405, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001165c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1165c <Transform_Sha256+2860>:	mov	r3, r0
0x00011660	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11660 <Transform_Sha256+2864>:	eor	r4, r4, r3
0x00011664	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11664 <Transform_Sha256+2868>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011668	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11668 <Transform_Sha256+2872>:	mov	r1, #22
0x0001166c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1166c <Transform_Sha256+2876>:	mov	r0, r3
0x00011670	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11670 <Transform_Sha256+2880>:	bl	0x10760 <rotrFixed>
rotrFixed (x=220547405, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011674 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11674 <Transform_Sha256+2884>:	mov	r3, r0
0x00011678	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11678 <Transform_Sha256+2888>:	eor	r2, r4, r3
0x0001167c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1167c <Transform_Sha256+2892>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011680	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11680 <Transform_Sha256+2896>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011684	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11684 <Transform_Sha256+2900>:	orr	r1, r1, r3
0x00011688	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11688 <Transform_Sha256+2904>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x0001168c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1168c <Transform_Sha256+2908>:	and	r1, r1, r3
0x00011690	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11690 <Transform_Sha256+2912>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x00011694	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11694 <Transform_Sha256+2916>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011698	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11698 <Transform_Sha256+2920>:	and	r3, r3, r0
0x0001169c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1169c <Transform_Sha256+2924>:	orr	r3, r1, r3
0x000116a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a0 <Transform_Sha256+2928>:	add	r3, r2, r3
0x000116a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a4 <Transform_Sha256+2932>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000116a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a8 <Transform_Sha256+2936>:	ldr	r2, [r11, #-288]	; 0xfffffee0
0x000116ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116ac <Transform_Sha256+2940>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000116b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b0 <Transform_Sha256+2944>:	add	r3, r2, r3
0x000116b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b4 <Transform_Sha256+2948>:	str	r3, [r11, #-288]	; 0xfffffee0
0x000116b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b8 <Transform_Sha256+2952>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000116bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116bc <Transform_Sha256+2956>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000116c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c0 <Transform_Sha256+2960>:	add	r3, r2, r3
0x000116c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c4 <Transform_Sha256+2964>:	str	r3, [r11, #-304]	; 0xfffffed0
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116c8 <Transform_Sha256+2968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116cc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116cc <Transform_Sha256+2972>:	add	r3, r3, #8
0x000116d0	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d0 <Transform_Sha256+2976>:	str	r3, [r11, #-316]	; 0xfffffec4
0x000116d4	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d4 <Transform_Sha256+2980>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116d8	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d8 <Transform_Sha256+2984>:	cmp	r3, #63	; 0x3f
0x000116dc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116dc <Transform_Sha256+2988>:	ble	0x10d50 <Transform_Sha256+544>
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d50 <Transform_Sha256+544>:	ldr	r4, [r11, #-276]	; 0xfffffeec
0x00010d54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d54 <Transform_Sha256+548>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d58 <Transform_Sha256+552>:	mov	r1, #6
0x00010d5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d5c <Transform_Sha256+556>:	mov	r0, r3
0x00010d60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d60 <Transform_Sha256+560>:	bl	0x10760 <rotrFixed>
rotrFixed (x=220547405, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d64 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d64 <Transform_Sha256+564>:	mov	r5, r0
0x00010d68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d68 <Transform_Sha256+568>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d6c <Transform_Sha256+572>:	mov	r1, #11
0x00010d70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d70 <Transform_Sha256+576>:	mov	r0, r3
0x00010d74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d74 <Transform_Sha256+580>:	bl	0x10760 <rotrFixed>
rotrFixed (x=399198496, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d78 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d78 <Transform_Sha256+584>:	mov	r3, r0
0x00010d7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d7c <Transform_Sha256+588>:	eor	r5, r5, r3
0x00010d80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d80 <Transform_Sha256+592>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d84 <Transform_Sha256+596>:	mov	r1, #25
0x00010d88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d88 <Transform_Sha256+600>:	mov	r0, r3
0x00010d8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d8c <Transform_Sha256+604>:	bl	0x10760 <rotrFixed>
rotrFixed (x=399198496, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d90 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d90 <Transform_Sha256+608>:	mov	r3, r0
0x00010d94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d94 <Transform_Sha256+612>:	eor	r3, r3, r5
0x00010d98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d98 <Transform_Sha256+616>:	add	r2, r4, r3
0x00010d9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d9c <Transform_Sha256+620>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00010da0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da0 <Transform_Sha256+624>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00010da4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da4 <Transform_Sha256+628>:	ldr	r12, [r11, #-284]	; 0xfffffee4
0x00010da8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da8 <Transform_Sha256+632>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00010dac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dac <Transform_Sha256+636>:	eor	r3, r3, r12
0x00010db0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db0 <Transform_Sha256+640>:	and	r3, r3, r0
0x00010db4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db4 <Transform_Sha256+644>:	eor	r3, r3, r1
0x00010db8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db8 <Transform_Sha256+648>:	add	r2, r2, r3
0x00010dbc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dbc <Transform_Sha256+652>:	ldr	r1, [pc, #2464]	; 0x11764 <Transform_Sha256+3124>
0x00010dc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc0 <Transform_Sha256+656>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc4 <Transform_Sha256+660>:	ldr	r3, [r1, r3, lsl #2]
0x00010dc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc8 <Transform_Sha256+664>:	add	r2, r2, r3
0x00010dcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dcc <Transform_Sha256+668>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dd0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd0 <Transform_Sha256+672>:	lsl	r3, r3, #2
0x00010dd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd4 <Transform_Sha256+676>:	sub	r3, r3, #12
0x00010dd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd8 <Transform_Sha256+680>:	add	r3, r3, r11
0x00010ddc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ddc <Transform_Sha256+684>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010de0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de0 <Transform_Sha256+688>:	add	r3, r2, r3
0x00010de4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de4 <Transform_Sha256+692>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010de8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de8 <Transform_Sha256+696>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010dec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dec <Transform_Sha256+700>:	mov	r1, #2
0x00010df0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df0 <Transform_Sha256+704>:	mov	r0, r3
0x00010df4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df4 <Transform_Sha256+708>:	bl	0x10760 <rotrFixed>
rotrFixed (x=399198496, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010df8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df8 <Transform_Sha256+712>:	mov	r4, r0
0x00010dfc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dfc <Transform_Sha256+716>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e00 <Transform_Sha256+720>:	mov	r1, #13
0x00010e04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e04 <Transform_Sha256+724>:	mov	r0, r3
0x00010e08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e08 <Transform_Sha256+728>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1285853181, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e0c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e0c <Transform_Sha256+732>:	mov	r3, r0
0x00010e10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e10 <Transform_Sha256+736>:	eor	r4, r4, r3
0x00010e14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e14 <Transform_Sha256+740>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e18 <Transform_Sha256+744>:	mov	r1, #22
0x00010e1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e1c <Transform_Sha256+748>:	mov	r0, r3
0x00010e20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e20 <Transform_Sha256+752>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1285853181, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e24 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e24 <Transform_Sha256+756>:	mov	r3, r0
0x00010e28	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e28 <Transform_Sha256+760>:	eor	r2, r4, r3
0x00010e2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e2c <Transform_Sha256+764>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x00010e30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e30 <Transform_Sha256+768>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e34 <Transform_Sha256+772>:	orr	r1, r1, r3
0x00010e38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e38 <Transform_Sha256+776>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010e3c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e3c <Transform_Sha256+780>:	and	r1, r1, r3
0x00010e40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e40 <Transform_Sha256+784>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x00010e44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e44 <Transform_Sha256+788>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e48 <Transform_Sha256+792>:	and	r3, r3, r0
0x00010e4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e4c <Transform_Sha256+796>:	orr	r3, r1, r3
0x00010e50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e50 <Transform_Sha256+800>:	add	r3, r2, r3
0x00010e54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e54 <Transform_Sha256+804>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010e58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e58 <Transform_Sha256+808>:	ldr	r2, [r11, #-292]	; 0xfffffedc
0x00010e5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e5c <Transform_Sha256+812>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010e60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e60 <Transform_Sha256+816>:	add	r3, r2, r3
0x00010e64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e64 <Transform_Sha256+820>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00010e68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e68 <Transform_Sha256+824>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010e6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e6c <Transform_Sha256+828>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010e70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e70 <Transform_Sha256+832>:	add	r3, r2, r3
0x00010e74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e74 <Transform_Sha256+836>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00010e78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e78 <Transform_Sha256+840>:	ldr	r4, [r11, #-280]	; 0xfffffee8
0x00010e7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e7c <Transform_Sha256+844>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e80 <Transform_Sha256+848>:	mov	r1, #6
0x00010e84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e84 <Transform_Sha256+852>:	mov	r0, r3
0x00010e88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e88 <Transform_Sha256+856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1285853181, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e8c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e8c <Transform_Sha256+860>:	mov	r5, r0
0x00010e90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e90 <Transform_Sha256+864>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e94 <Transform_Sha256+868>:	mov	r1, #11
0x00010e98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e98 <Transform_Sha256+872>:	mov	r0, r3
0x00010e9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e9c <Transform_Sha256+876>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1085481432, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ea0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea0 <Transform_Sha256+880>:	mov	r3, r0
0x00010ea4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea4 <Transform_Sha256+884>:	eor	r5, r5, r3
0x00010ea8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea8 <Transform_Sha256+888>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010eac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eac <Transform_Sha256+892>:	mov	r1, #25
0x00010eb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb0 <Transform_Sha256+896>:	mov	r0, r3
0x00010eb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb4 <Transform_Sha256+900>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1085481432, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010eb8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb8 <Transform_Sha256+904>:	mov	r3, r0
0x00010ebc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ebc <Transform_Sha256+908>:	eor	r3, r3, r5
0x00010ec0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec0 <Transform_Sha256+912>:	add	r2, r4, r3
0x00010ec4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec4 <Transform_Sha256+916>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x00010ec8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec8 <Transform_Sha256+920>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00010ecc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ecc <Transform_Sha256+924>:	ldr	r12, [r11, #-288]	; 0xfffffee0
0x00010ed0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed0 <Transform_Sha256+928>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00010ed4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed4 <Transform_Sha256+932>:	eor	r3, r3, r12
0x00010ed8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed8 <Transform_Sha256+936>:	and	r3, r3, r0
0x00010edc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10edc <Transform_Sha256+940>:	eor	r3, r3, r1
0x00010ee0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee0 <Transform_Sha256+944>:	add	r2, r2, r3
0x00010ee4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee4 <Transform_Sha256+948>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ee8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee8 <Transform_Sha256+952>:	add	r3, r3, #1
0x00010eec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eec <Transform_Sha256+956>:	ldr	r1, [pc, #2160]	; 0x11764 <Transform_Sha256+3124>
0x00010ef0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef0 <Transform_Sha256+960>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef4 <Transform_Sha256+964>:	add	r2, r2, r3
0x00010ef8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef8 <Transform_Sha256+968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010efc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10efc <Transform_Sha256+972>:	add	r3, r3, #1
0x00010f00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f00 <Transform_Sha256+976>:	lsl	r3, r3, #2
0x00010f04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f04 <Transform_Sha256+980>:	sub	r3, r3, #12
0x00010f08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f08 <Transform_Sha256+984>:	add	r3, r3, r11
0x00010f0c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f0c <Transform_Sha256+988>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010f10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f10 <Transform_Sha256+992>:	add	r3, r2, r3
0x00010f14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f14 <Transform_Sha256+996>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010f18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f18 <Transform_Sha256+1000>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f1c <Transform_Sha256+1004>:	mov	r1, #2
0x00010f20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f20 <Transform_Sha256+1008>:	mov	r0, r3
0x00010f24	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f24 <Transform_Sha256+1012>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1085481432, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f28 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f28 <Transform_Sha256+1016>:	mov	r4, r0
0x00010f2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f2c <Transform_Sha256+1020>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f30 <Transform_Sha256+1024>:	mov	r1, #13
0x00010f34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f34 <Transform_Sha256+1028>:	mov	r0, r3
0x00010f38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f38 <Transform_Sha256+1032>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3763667416, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f3c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f3c <Transform_Sha256+1036>:	mov	r3, r0
0x00010f40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f40 <Transform_Sha256+1040>:	eor	r4, r4, r3
0x00010f44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f44 <Transform_Sha256+1044>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f48 <Transform_Sha256+1048>:	mov	r1, #22
0x00010f4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f4c <Transform_Sha256+1052>:	mov	r0, r3
0x00010f50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f50 <Transform_Sha256+1056>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3763667416, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f54 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f54 <Transform_Sha256+1060>:	mov	r3, r0
0x00010f58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f58 <Transform_Sha256+1064>:	eor	r2, r4, r3
0x00010f5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f5c <Transform_Sha256+1068>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x00010f60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f60 <Transform_Sha256+1072>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f64 <Transform_Sha256+1076>:	orr	r1, r1, r3
0x00010f68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f68 <Transform_Sha256+1080>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010f6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f6c <Transform_Sha256+1084>:	and	r1, r1, r3
0x00010f70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f70 <Transform_Sha256+1088>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x00010f74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f74 <Transform_Sha256+1092>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f78 <Transform_Sha256+1096>:	and	r3, r3, r0
0x00010f7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f7c <Transform_Sha256+1100>:	orr	r3, r1, r3
0x00010f80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f80 <Transform_Sha256+1104>:	add	r3, r2, r3
0x00010f84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f84 <Transform_Sha256+1108>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010f88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f88 <Transform_Sha256+1112>:	ldr	r2, [r11, #-296]	; 0xfffffed8
0x00010f8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f8c <Transform_Sha256+1116>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010f90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f90 <Transform_Sha256+1120>:	add	r3, r2, r3
0x00010f94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f94 <Transform_Sha256+1124>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00010f98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f98 <Transform_Sha256+1128>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010f9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f9c <Transform_Sha256+1132>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010fa0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa0 <Transform_Sha256+1136>:	add	r3, r2, r3
0x00010fa4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa4 <Transform_Sha256+1140>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00010fa8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa8 <Transform_Sha256+1144>:	ldr	r4, [r11, #-284]	; 0xfffffee4
0x00010fac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fac <Transform_Sha256+1148>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb0 <Transform_Sha256+1152>:	mov	r1, #6
0x00010fb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb4 <Transform_Sha256+1156>:	mov	r0, r3
0x00010fb8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb8 <Transform_Sha256+1160>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3763667416, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fbc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fbc <Transform_Sha256+1164>:	mov	r5, r0
0x00010fc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc0 <Transform_Sha256+1168>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc4 <Transform_Sha256+1172>:	mov	r1, #11
0x00010fc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc8 <Transform_Sha256+1176>:	mov	r0, r3
0x00010fcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fcc <Transform_Sha256+1180>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1698051996, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd0 <Transform_Sha256+1184>:	mov	r3, r0
0x00010fd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd4 <Transform_Sha256+1188>:	eor	r5, r5, r3
0x00010fd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd8 <Transform_Sha256+1192>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fdc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fdc <Transform_Sha256+1196>:	mov	r1, #25
0x00010fe0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe0 <Transform_Sha256+1200>:	mov	r0, r3
0x00010fe4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe4 <Transform_Sha256+1204>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1698051996, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fe8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe8 <Transform_Sha256+1208>:	mov	r3, r0
0x00010fec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fec <Transform_Sha256+1212>:	eor	r3, r3, r5
0x00010ff0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff0 <Transform_Sha256+1216>:	add	r2, r4, r3
0x00010ff4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff4 <Transform_Sha256+1220>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x00010ff8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff8 <Transform_Sha256+1224>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00010ffc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ffc <Transform_Sha256+1228>:	ldr	r12, [r11, #-292]	; 0xfffffedc
0x00011000	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11000 <Transform_Sha256+1232>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011004	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11004 <Transform_Sha256+1236>:	eor	r3, r3, r12
0x00011008	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11008 <Transform_Sha256+1240>:	and	r3, r3, r0
0x0001100c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1100c <Transform_Sha256+1244>:	eor	r3, r3, r1
0x00011010	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11010 <Transform_Sha256+1248>:	add	r2, r2, r3
0x00011014	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11014 <Transform_Sha256+1252>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011018	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11018 <Transform_Sha256+1256>:	add	r3, r3, #2
0x0001101c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1101c <Transform_Sha256+1260>:	ldr	r1, [pc, #1856]	; 0x11764 <Transform_Sha256+3124>
0x00011020	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11020 <Transform_Sha256+1264>:	ldr	r3, [r1, r3, lsl #2]
0x00011024	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11024 <Transform_Sha256+1268>:	add	r2, r2, r3
0x00011028	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11028 <Transform_Sha256+1272>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001102c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1102c <Transform_Sha256+1276>:	add	r3, r3, #2
0x00011030	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11030 <Transform_Sha256+1280>:	lsl	r3, r3, #2
0x00011034	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11034 <Transform_Sha256+1284>:	sub	r3, r3, #12
0x00011038	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11038 <Transform_Sha256+1288>:	add	r3, r3, r11
0x0001103c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1103c <Transform_Sha256+1292>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011040	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11040 <Transform_Sha256+1296>:	add	r3, r2, r3
0x00011044	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11044 <Transform_Sha256+1300>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011048	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11048 <Transform_Sha256+1304>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001104c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1104c <Transform_Sha256+1308>:	mov	r1, #2
0x00011050	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11050 <Transform_Sha256+1312>:	mov	r0, r3
0x00011054	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11054 <Transform_Sha256+1316>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1698051996, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011058 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11058 <Transform_Sha256+1320>:	mov	r4, r0
0x0001105c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1105c <Transform_Sha256+1324>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011060	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11060 <Transform_Sha256+1328>:	mov	r1, #13
0x00011064	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11064 <Transform_Sha256+1332>:	mov	r0, r3
0x00011068	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11068 <Transform_Sha256+1336>:	bl	0x10760 <rotrFixed>
rotrFixed (x=399163781, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001106c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1106c <Transform_Sha256+1340>:	mov	r3, r0
0x00011070	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11070 <Transform_Sha256+1344>:	eor	r4, r4, r3
0x00011074	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11074 <Transform_Sha256+1348>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011078	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11078 <Transform_Sha256+1352>:	mov	r1, #22
0x0001107c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1107c <Transform_Sha256+1356>:	mov	r0, r3
0x00011080	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11080 <Transform_Sha256+1360>:	bl	0x10760 <rotrFixed>
rotrFixed (x=399163781, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011084 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11084 <Transform_Sha256+1364>:	mov	r3, r0
0x00011088	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11088 <Transform_Sha256+1368>:	eor	r2, r4, r3
0x0001108c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1108c <Transform_Sha256+1372>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00011090	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11090 <Transform_Sha256+1376>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011094	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11094 <Transform_Sha256+1380>:	orr	r1, r1, r3
0x00011098	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11098 <Transform_Sha256+1384>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001109c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1109c <Transform_Sha256+1388>:	and	r1, r1, r3
0x000110a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a0 <Transform_Sha256+1392>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000110a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a4 <Transform_Sha256+1396>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000110a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a8 <Transform_Sha256+1400>:	and	r3, r3, r0
0x000110ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ac <Transform_Sha256+1404>:	orr	r3, r1, r3
0x000110b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b0 <Transform_Sha256+1408>:	add	r3, r2, r3
0x000110b4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b4 <Transform_Sha256+1412>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000110b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b8 <Transform_Sha256+1416>:	ldr	r2, [r11, #-300]	; 0xfffffed4
0x000110bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110bc <Transform_Sha256+1420>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000110c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c0 <Transform_Sha256+1424>:	add	r3, r2, r3
0x000110c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c4 <Transform_Sha256+1428>:	str	r3, [r11, #-300]	; 0xfffffed4
0x000110c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c8 <Transform_Sha256+1432>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000110cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110cc <Transform_Sha256+1436>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000110d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d0 <Transform_Sha256+1440>:	add	r3, r2, r3
0x000110d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d4 <Transform_Sha256+1444>:	str	r3, [r11, #-284]	; 0xfffffee4
0x000110d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d8 <Transform_Sha256+1448>:	ldr	r4, [r11, #-288]	; 0xfffffee0
0x000110dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110dc <Transform_Sha256+1452>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e0 <Transform_Sha256+1456>:	mov	r1, #6
0x000110e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e4 <Transform_Sha256+1460>:	mov	r0, r3
0x000110e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e8 <Transform_Sha256+1464>:	bl	0x10760 <rotrFixed>
rotrFixed (x=399163781, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000110ec in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ec <Transform_Sha256+1468>:	mov	r5, r0
0x000110f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f0 <Transform_Sha256+1472>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f4 <Transform_Sha256+1476>:	mov	r1, #11
0x000110f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f8 <Transform_Sha256+1480>:	mov	r0, r3
0x000110fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110fc <Transform_Sha256+1484>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3347961509, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011100 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11100 <Transform_Sha256+1488>:	mov	r3, r0
0x00011104	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11104 <Transform_Sha256+1492>:	eor	r5, r5, r3
0x00011108	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11108 <Transform_Sha256+1496>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001110c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1110c <Transform_Sha256+1500>:	mov	r1, #25
0x00011110	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11110 <Transform_Sha256+1504>:	mov	r0, r3
0x00011114	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11114 <Transform_Sha256+1508>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3347961509, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011118 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11118 <Transform_Sha256+1512>:	mov	r3, r0
0x0001111c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1111c <Transform_Sha256+1516>:	eor	r3, r3, r5
0x00011120	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11120 <Transform_Sha256+1520>:	add	r2, r4, r3
0x00011124	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11124 <Transform_Sha256+1524>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011128	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11128 <Transform_Sha256+1528>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x0001112c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1112c <Transform_Sha256+1532>:	ldr	r12, [r11, #-296]	; 0xfffffed8
0x00011130	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11130 <Transform_Sha256+1536>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011134	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11134 <Transform_Sha256+1540>:	eor	r3, r3, r12
0x00011138	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11138 <Transform_Sha256+1544>:	and	r3, r3, r0
0x0001113c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1113c <Transform_Sha256+1548>:	eor	r3, r3, r1
0x00011140	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11140 <Transform_Sha256+1552>:	add	r2, r2, r3
0x00011144	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11144 <Transform_Sha256+1556>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011148	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11148 <Transform_Sha256+1560>:	add	r3, r3, #3
0x0001114c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1114c <Transform_Sha256+1564>:	ldr	r1, [pc, #1552]	; 0x11764 <Transform_Sha256+3124>
0x00011150	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11150 <Transform_Sha256+1568>:	ldr	r3, [r1, r3, lsl #2]
0x00011154	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11154 <Transform_Sha256+1572>:	add	r2, r2, r3
0x00011158	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11158 <Transform_Sha256+1576>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001115c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1115c <Transform_Sha256+1580>:	add	r3, r3, #3
0x00011160	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11160 <Transform_Sha256+1584>:	lsl	r3, r3, #2
0x00011164	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11164 <Transform_Sha256+1588>:	sub	r3, r3, #12
0x00011168	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11168 <Transform_Sha256+1592>:	add	r3, r3, r11
0x0001116c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1116c <Transform_Sha256+1596>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011170	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11170 <Transform_Sha256+1600>:	add	r3, r2, r3
0x00011174	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11174 <Transform_Sha256+1604>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011178	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11178 <Transform_Sha256+1608>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001117c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1117c <Transform_Sha256+1612>:	mov	r1, #2
0x00011180	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11180 <Transform_Sha256+1616>:	mov	r0, r3
0x00011184	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11184 <Transform_Sha256+1620>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3347961509, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011188 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11188 <Transform_Sha256+1624>:	mov	r4, r0
0x0001118c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1118c <Transform_Sha256+1628>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011190	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11190 <Transform_Sha256+1632>:	mov	r1, #13
0x00011194	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11194 <Transform_Sha256+1636>:	mov	r0, r3
0x00011198	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11198 <Transform_Sha256+1640>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1644767645, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001119c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1119c <Transform_Sha256+1644>:	mov	r3, r0
0x000111a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a0 <Transform_Sha256+1648>:	eor	r4, r4, r3
0x000111a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a4 <Transform_Sha256+1652>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000111a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a8 <Transform_Sha256+1656>:	mov	r1, #22
0x000111ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ac <Transform_Sha256+1660>:	mov	r0, r3
0x000111b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b0 <Transform_Sha256+1664>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1644767645, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000111b4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b4 <Transform_Sha256+1668>:	mov	r3, r0
0x000111b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b8 <Transform_Sha256+1672>:	eor	r2, r4, r3
0x000111bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111bc <Transform_Sha256+1676>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x000111c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c0 <Transform_Sha256+1680>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c4 <Transform_Sha256+1684>:	orr	r1, r1, r3
0x000111c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c8 <Transform_Sha256+1688>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000111cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111cc <Transform_Sha256+1692>:	and	r1, r1, r3
0x000111d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d0 <Transform_Sha256+1696>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000111d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d4 <Transform_Sha256+1700>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d8 <Transform_Sha256+1704>:	and	r3, r3, r0
0x000111dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111dc <Transform_Sha256+1708>:	orr	r3, r1, r3
0x000111e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e0 <Transform_Sha256+1712>:	add	r3, r2, r3
0x000111e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e4 <Transform_Sha256+1716>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000111e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e8 <Transform_Sha256+1720>:	ldr	r2, [r11, #-304]	; 0xfffffed0
0x000111ec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ec <Transform_Sha256+1724>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000111f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f0 <Transform_Sha256+1728>:	add	r3, r2, r3
0x000111f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f4 <Transform_Sha256+1732>:	str	r3, [r11, #-304]	; 0xfffffed0
0x000111f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f8 <Transform_Sha256+1736>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000111fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111fc <Transform_Sha256+1740>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011200	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11200 <Transform_Sha256+1744>:	add	r3, r2, r3
0x00011204	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11204 <Transform_Sha256+1748>:	str	r3, [r11, #-288]	; 0xfffffee0
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11208 <Transform_Sha256+1752>:	ldr	r4, [r11, #-292]	; 0xfffffedc
0x0001120c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1120c <Transform_Sha256+1756>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011210	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11210 <Transform_Sha256+1760>:	mov	r1, #6
0x00011214	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11214 <Transform_Sha256+1764>:	mov	r0, r3
0x00011218	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11218 <Transform_Sha256+1768>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1644767645, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001121c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1121c <Transform_Sha256+1772>:	mov	r5, r0
0x00011220	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11220 <Transform_Sha256+1776>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011224	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11224 <Transform_Sha256+1780>:	mov	r1, #11
0x00011228	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11228 <Transform_Sha256+1784>:	mov	r0, r3
0x0001122c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1122c <Transform_Sha256+1788>:	bl	0x10760 <rotrFixed>
rotrFixed (x=663208842, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011230 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11230 <Transform_Sha256+1792>:	mov	r3, r0
0x00011234	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11234 <Transform_Sha256+1796>:	eor	r5, r5, r3
0x00011238	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11238 <Transform_Sha256+1800>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001123c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1123c <Transform_Sha256+1804>:	mov	r1, #25
0x00011240	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11240 <Transform_Sha256+1808>:	mov	r0, r3
0x00011244	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11244 <Transform_Sha256+1812>:	bl	0x10760 <rotrFixed>
rotrFixed (x=663208842, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011248 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11248 <Transform_Sha256+1816>:	mov	r3, r0
0x0001124c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1124c <Transform_Sha256+1820>:	eor	r3, r3, r5
0x00011250	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11250 <Transform_Sha256+1824>:	add	r2, r4, r3
0x00011254	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11254 <Transform_Sha256+1828>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011258	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11258 <Transform_Sha256+1832>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x0001125c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1125c <Transform_Sha256+1836>:	ldr	r12, [r11, #-300]	; 0xfffffed4
0x00011260	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11260 <Transform_Sha256+1840>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011264	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11264 <Transform_Sha256+1844>:	eor	r3, r3, r12
0x00011268	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11268 <Transform_Sha256+1848>:	and	r3, r3, r0
0x0001126c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1126c <Transform_Sha256+1852>:	eor	r3, r3, r1
0x00011270	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11270 <Transform_Sha256+1856>:	add	r2, r2, r3
0x00011274	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11274 <Transform_Sha256+1860>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011278	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11278 <Transform_Sha256+1864>:	add	r3, r3, #4
0x0001127c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1127c <Transform_Sha256+1868>:	ldr	r1, [pc, #1248]	; 0x11764 <Transform_Sha256+3124>
0x00011280	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11280 <Transform_Sha256+1872>:	ldr	r3, [r1, r3, lsl #2]
0x00011284	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11284 <Transform_Sha256+1876>:	add	r2, r2, r3
0x00011288	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11288 <Transform_Sha256+1880>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001128c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1128c <Transform_Sha256+1884>:	add	r3, r3, #4
0x00011290	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11290 <Transform_Sha256+1888>:	lsl	r3, r3, #2
0x00011294	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11294 <Transform_Sha256+1892>:	sub	r3, r3, #12
0x00011298	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11298 <Transform_Sha256+1896>:	add	r3, r3, r11
0x0001129c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1129c <Transform_Sha256+1900>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000112a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a0 <Transform_Sha256+1904>:	add	r3, r2, r3
0x000112a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a4 <Transform_Sha256+1908>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000112a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a8 <Transform_Sha256+1912>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ac <Transform_Sha256+1916>:	mov	r1, #2
0x000112b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b0 <Transform_Sha256+1920>:	mov	r0, r3
0x000112b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b4 <Transform_Sha256+1924>:	bl	0x10760 <rotrFixed>
rotrFixed (x=663208842, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112b8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b8 <Transform_Sha256+1928>:	mov	r4, r0
0x000112bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112bc <Transform_Sha256+1932>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c0 <Transform_Sha256+1936>:	mov	r1, #13
0x000112c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c4 <Transform_Sha256+1940>:	mov	r0, r3
0x000112c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c8 <Transform_Sha256+1944>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1845191888, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112cc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112cc <Transform_Sha256+1948>:	mov	r3, r0
0x000112d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d0 <Transform_Sha256+1952>:	eor	r4, r4, r3
0x000112d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d4 <Transform_Sha256+1956>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d8 <Transform_Sha256+1960>:	mov	r1, #22
0x000112dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112dc <Transform_Sha256+1964>:	mov	r0, r3
0x000112e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e0 <Transform_Sha256+1968>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1845191888, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112e4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e4 <Transform_Sha256+1972>:	mov	r3, r0
0x000112e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e8 <Transform_Sha256+1976>:	eor	r2, r4, r3
0x000112ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ec <Transform_Sha256+1980>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x000112f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f0 <Transform_Sha256+1984>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000112f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f4 <Transform_Sha256+1988>:	orr	r1, r1, r3
0x000112f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f8 <Transform_Sha256+1992>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000112fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112fc <Transform_Sha256+1996>:	and	r1, r1, r3
0x00011300	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11300 <Transform_Sha256+2000>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00011304	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11304 <Transform_Sha256+2004>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011308	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11308 <Transform_Sha256+2008>:	and	r3, r3, r0
0x0001130c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1130c <Transform_Sha256+2012>:	orr	r3, r1, r3
0x00011310	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11310 <Transform_Sha256+2016>:	add	r3, r2, r3
0x00011314	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11314 <Transform_Sha256+2020>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011318	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11318 <Transform_Sha256+2024>:	ldr	r2, [r11, #-276]	; 0xfffffeec
0x0001131c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1131c <Transform_Sha256+2028>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011320	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11320 <Transform_Sha256+2032>:	add	r3, r2, r3
0x00011324	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11324 <Transform_Sha256+2036>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00011328	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11328 <Transform_Sha256+2040>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001132c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1132c <Transform_Sha256+2044>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011330	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11330 <Transform_Sha256+2048>:	add	r3, r2, r3
0x00011334	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11334 <Transform_Sha256+2052>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00011338	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11338 <Transform_Sha256+2056>:	ldr	r4, [r11, #-296]	; 0xfffffed8
0x0001133c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1133c <Transform_Sha256+2060>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011340	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11340 <Transform_Sha256+2064>:	mov	r1, #6
0x00011344	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11344 <Transform_Sha256+2068>:	mov	r0, r3
0x00011348	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11348 <Transform_Sha256+2072>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1845191888, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001134c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1134c <Transform_Sha256+2076>:	mov	r5, r0
0x00011350	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11350 <Transform_Sha256+2080>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011354	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11354 <Transform_Sha256+2084>:	mov	r1, #11
0x00011358	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11358 <Transform_Sha256+2088>:	mov	r0, r3
0x0001135c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1135c <Transform_Sha256+2092>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1608818067, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011360 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11360 <Transform_Sha256+2096>:	mov	r3, r0
0x00011364	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11364 <Transform_Sha256+2100>:	eor	r5, r5, r3
0x00011368	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11368 <Transform_Sha256+2104>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x0001136c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1136c <Transform_Sha256+2108>:	mov	r1, #25
0x00011370	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11370 <Transform_Sha256+2112>:	mov	r0, r3
0x00011374	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11374 <Transform_Sha256+2116>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1608818067, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011378 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11378 <Transform_Sha256+2120>:	mov	r3, r0
0x0001137c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1137c <Transform_Sha256+2124>:	eor	r3, r3, r5
0x00011380	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11380 <Transform_Sha256+2128>:	add	r2, r4, r3
0x00011384	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11384 <Transform_Sha256+2132>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011388	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11388 <Transform_Sha256+2136>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x0001138c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1138c <Transform_Sha256+2140>:	ldr	r12, [r11, #-304]	; 0xfffffed0
0x00011390	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11390 <Transform_Sha256+2144>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011394	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11394 <Transform_Sha256+2148>:	eor	r3, r3, r12
0x00011398	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11398 <Transform_Sha256+2152>:	and	r3, r3, r0
0x0001139c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1139c <Transform_Sha256+2156>:	eor	r3, r3, r1
0x000113a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a0 <Transform_Sha256+2160>:	add	r2, r2, r3
0x000113a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a4 <Transform_Sha256+2164>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a8 <Transform_Sha256+2168>:	add	r3, r3, #5
0x000113ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ac <Transform_Sha256+2172>:	ldr	r1, [pc, #944]	; 0x11764 <Transform_Sha256+3124>
0x000113b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b0 <Transform_Sha256+2176>:	ldr	r3, [r1, r3, lsl #2]
0x000113b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b4 <Transform_Sha256+2180>:	add	r2, r2, r3
0x000113b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b8 <Transform_Sha256+2184>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113bc <Transform_Sha256+2188>:	add	r3, r3, #5
0x000113c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c0 <Transform_Sha256+2192>:	lsl	r3, r3, #2
0x000113c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c4 <Transform_Sha256+2196>:	sub	r3, r3, #12
0x000113c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c8 <Transform_Sha256+2200>:	add	r3, r3, r11
0x000113cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113cc <Transform_Sha256+2204>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000113d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d0 <Transform_Sha256+2208>:	add	r3, r2, r3
0x000113d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d4 <Transform_Sha256+2212>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000113d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d8 <Transform_Sha256+2216>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113dc <Transform_Sha256+2220>:	mov	r1, #2
0x000113e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e0 <Transform_Sha256+2224>:	mov	r0, r3
0x000113e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e4 <Transform_Sha256+2228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1608818067, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113e8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e8 <Transform_Sha256+2232>:	mov	r4, r0
0x000113ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ec <Transform_Sha256+2236>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f0 <Transform_Sha256+2240>:	mov	r1, #13
0x000113f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f4 <Transform_Sha256+2244>:	mov	r0, r3
0x000113f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f8 <Transform_Sha256+2248>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3083465896, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113fc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113fc <Transform_Sha256+2252>:	mov	r3, r0
0x00011400	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11400 <Transform_Sha256+2256>:	eor	r4, r4, r3
0x00011404	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11404 <Transform_Sha256+2260>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011408	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11408 <Transform_Sha256+2264>:	mov	r1, #22
0x0001140c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1140c <Transform_Sha256+2268>:	mov	r0, r3
0x00011410	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11410 <Transform_Sha256+2272>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3083465896, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011414 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11414 <Transform_Sha256+2276>:	mov	r3, r0
0x00011418	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11418 <Transform_Sha256+2280>:	eor	r2, r4, r3
0x0001141c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1141c <Transform_Sha256+2284>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011420	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11420 <Transform_Sha256+2288>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011424	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11424 <Transform_Sha256+2292>:	orr	r1, r1, r3
0x00011428	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11428 <Transform_Sha256+2296>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001142c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1142c <Transform_Sha256+2300>:	and	r1, r1, r3
0x00011430	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11430 <Transform_Sha256+2304>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00011434	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11434 <Transform_Sha256+2308>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011438	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11438 <Transform_Sha256+2312>:	and	r3, r3, r0
0x0001143c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1143c <Transform_Sha256+2316>:	orr	r3, r1, r3
0x00011440	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11440 <Transform_Sha256+2320>:	add	r3, r2, r3
0x00011444	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11444 <Transform_Sha256+2324>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011448	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11448 <Transform_Sha256+2328>:	ldr	r2, [r11, #-280]	; 0xfffffee8
0x0001144c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1144c <Transform_Sha256+2332>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011450	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11450 <Transform_Sha256+2336>:	add	r3, r2, r3
0x00011454	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11454 <Transform_Sha256+2340>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00011458	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11458 <Transform_Sha256+2344>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001145c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1145c <Transform_Sha256+2348>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011460	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11460 <Transform_Sha256+2352>:	add	r3, r2, r3
0x00011464	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11464 <Transform_Sha256+2356>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00011468	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11468 <Transform_Sha256+2360>:	ldr	r4, [r11, #-300]	; 0xfffffed4
0x0001146c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1146c <Transform_Sha256+2364>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011470	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11470 <Transform_Sha256+2368>:	mov	r1, #6
0x00011474	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11474 <Transform_Sha256+2372>:	mov	r0, r3
0x00011478	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11478 <Transform_Sha256+2376>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3083465896, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001147c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1147c <Transform_Sha256+2380>:	mov	r5, r0
0x00011480	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11480 <Transform_Sha256+2384>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011484	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11484 <Transform_Sha256+2388>:	mov	r1, #11
0x00011488	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11488 <Transform_Sha256+2392>:	mov	r0, r3
0x0001148c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1148c <Transform_Sha256+2396>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2921986503, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011490 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11490 <Transform_Sha256+2400>:	mov	r3, r0
0x00011494	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11494 <Transform_Sha256+2404>:	eor	r5, r5, r3
0x00011498	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11498 <Transform_Sha256+2408>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001149c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1149c <Transform_Sha256+2412>:	mov	r1, #25
0x000114a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a0 <Transform_Sha256+2416>:	mov	r0, r3
0x000114a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a4 <Transform_Sha256+2420>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2921986503, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000114a8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a8 <Transform_Sha256+2424>:	mov	r3, r0
0x000114ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ac <Transform_Sha256+2428>:	eor	r3, r3, r5
0x000114b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b0 <Transform_Sha256+2432>:	add	r2, r4, r3
0x000114b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b4 <Transform_Sha256+2436>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x000114b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b8 <Transform_Sha256+2440>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000114bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114bc <Transform_Sha256+2444>:	ldr	r12, [r11, #-276]	; 0xfffffeec
0x000114c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c0 <Transform_Sha256+2448>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x000114c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c4 <Transform_Sha256+2452>:	eor	r3, r3, r12
0x000114c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c8 <Transform_Sha256+2456>:	and	r3, r3, r0
0x000114cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114cc <Transform_Sha256+2460>:	eor	r3, r3, r1
0x000114d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d0 <Transform_Sha256+2464>:	add	r2, r2, r3
0x000114d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d4 <Transform_Sha256+2468>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d8 <Transform_Sha256+2472>:	add	r3, r3, #6
0x000114dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114dc <Transform_Sha256+2476>:	ldr	r1, [pc, #640]	; 0x11764 <Transform_Sha256+3124>
0x000114e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e0 <Transform_Sha256+2480>:	ldr	r3, [r1, r3, lsl #2]
0x000114e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e4 <Transform_Sha256+2484>:	add	r2, r2, r3
0x000114e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e8 <Transform_Sha256+2488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ec <Transform_Sha256+2492>:	add	r3, r3, #6
0x000114f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f0 <Transform_Sha256+2496>:	lsl	r3, r3, #2
0x000114f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f4 <Transform_Sha256+2500>:	sub	r3, r3, #12
0x000114f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f8 <Transform_Sha256+2504>:	add	r3, r3, r11
0x000114fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114fc <Transform_Sha256+2508>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011500	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11500 <Transform_Sha256+2512>:	add	r3, r2, r3
0x00011504	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11504 <Transform_Sha256+2516>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011508	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11508 <Transform_Sha256+2520>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x0001150c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1150c <Transform_Sha256+2524>:	mov	r1, #2
0x00011510	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11510 <Transform_Sha256+2528>:	mov	r0, r3
0x00011514	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11514 <Transform_Sha256+2532>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2921986503, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011518 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11518 <Transform_Sha256+2536>:	mov	r4, r0
0x0001151c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1151c <Transform_Sha256+2540>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011520	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11520 <Transform_Sha256+2544>:	mov	r1, #13
0x00011524	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11524 <Transform_Sha256+2548>:	mov	r0, r3
0x00011528	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11528 <Transform_Sha256+2552>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2911764116, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001152c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1152c <Transform_Sha256+2556>:	mov	r3, r0
0x00011530	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11530 <Transform_Sha256+2560>:	eor	r4, r4, r3
0x00011534	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11534 <Transform_Sha256+2564>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011538	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11538 <Transform_Sha256+2568>:	mov	r1, #22
0x0001153c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1153c <Transform_Sha256+2572>:	mov	r0, r3
0x00011540	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11540 <Transform_Sha256+2576>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2911764116, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011544 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11544 <Transform_Sha256+2580>:	mov	r3, r0
0x00011548	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11548 <Transform_Sha256+2584>:	eor	r2, r4, r3
0x0001154c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1154c <Transform_Sha256+2588>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011550	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11550 <Transform_Sha256+2592>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011554	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11554 <Transform_Sha256+2596>:	orr	r1, r1, r3
0x00011558	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11558 <Transform_Sha256+2600>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x0001155c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1155c <Transform_Sha256+2604>:	and	r1, r1, r3
0x00011560	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11560 <Transform_Sha256+2608>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00011564	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11564 <Transform_Sha256+2612>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011568	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11568 <Transform_Sha256+2616>:	and	r3, r3, r0
0x0001156c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1156c <Transform_Sha256+2620>:	orr	r3, r1, r3
0x00011570	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11570 <Transform_Sha256+2624>:	add	r3, r2, r3
0x00011574	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11574 <Transform_Sha256+2628>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011578	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11578 <Transform_Sha256+2632>:	ldr	r2, [r11, #-284]	; 0xfffffee4
0x0001157c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1157c <Transform_Sha256+2636>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011580	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11580 <Transform_Sha256+2640>:	add	r3, r2, r3
0x00011584	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11584 <Transform_Sha256+2644>:	str	r3, [r11, #-284]	; 0xfffffee4
0x00011588	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11588 <Transform_Sha256+2648>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001158c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1158c <Transform_Sha256+2652>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011590	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11590 <Transform_Sha256+2656>:	add	r3, r2, r3
0x00011594	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11594 <Transform_Sha256+2660>:	str	r3, [r11, #-300]	; 0xfffffed4
0x00011598	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11598 <Transform_Sha256+2664>:	ldr	r4, [r11, #-304]	; 0xfffffed0
0x0001159c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1159c <Transform_Sha256+2668>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a0 <Transform_Sha256+2672>:	mov	r1, #6
0x000115a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a4 <Transform_Sha256+2676>:	mov	r0, r3
0x000115a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a8 <Transform_Sha256+2680>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2911764116, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115ac in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ac <Transform_Sha256+2684>:	mov	r5, r0
0x000115b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b0 <Transform_Sha256+2688>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b4 <Transform_Sha256+2692>:	mov	r1, #11
0x000115b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b8 <Transform_Sha256+2696>:	mov	r0, r3
0x000115bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115bc <Transform_Sha256+2700>:	bl	0x10760 <rotrFixed>
rotrFixed (x=422115851, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115c0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c0 <Transform_Sha256+2704>:	mov	r3, r0
0x000115c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c4 <Transform_Sha256+2708>:	eor	r5, r5, r3
0x000115c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c8 <Transform_Sha256+2712>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115cc <Transform_Sha256+2716>:	mov	r1, #25
0x000115d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d0 <Transform_Sha256+2720>:	mov	r0, r3
0x000115d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d4 <Transform_Sha256+2724>:	bl	0x10760 <rotrFixed>
rotrFixed (x=422115851, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115d8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d8 <Transform_Sha256+2728>:	mov	r3, r0
0x000115dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115dc <Transform_Sha256+2732>:	eor	r3, r3, r5
0x000115e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e0 <Transform_Sha256+2736>:	add	r2, r4, r3
0x000115e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e4 <Transform_Sha256+2740>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x000115e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e8 <Transform_Sha256+2744>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000115ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ec <Transform_Sha256+2748>:	ldr	r12, [r11, #-280]	; 0xfffffee8
0x000115f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f0 <Transform_Sha256+2752>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000115f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f4 <Transform_Sha256+2756>:	eor	r3, r3, r12
0x000115f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f8 <Transform_Sha256+2760>:	and	r3, r3, r0
0x000115fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115fc <Transform_Sha256+2764>:	eor	r3, r3, r1
0x00011600	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11600 <Transform_Sha256+2768>:	add	r2, r2, r3
0x00011604	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11604 <Transform_Sha256+2772>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011608	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11608 <Transform_Sha256+2776>:	add	r3, r3, #7
0x0001160c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1160c <Transform_Sha256+2780>:	ldr	r1, [pc, #336]	; 0x11764 <Transform_Sha256+3124>
0x00011610	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11610 <Transform_Sha256+2784>:	ldr	r3, [r1, r3, lsl #2]
0x00011614	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11614 <Transform_Sha256+2788>:	add	r2, r2, r3
0x00011618	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11618 <Transform_Sha256+2792>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001161c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1161c <Transform_Sha256+2796>:	add	r3, r3, #7
0x00011620	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11620 <Transform_Sha256+2800>:	lsl	r3, r3, #2
0x00011624	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11624 <Transform_Sha256+2804>:	sub	r3, r3, #12
0x00011628	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11628 <Transform_Sha256+2808>:	add	r3, r3, r11
0x0001162c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1162c <Transform_Sha256+2812>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011630	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11630 <Transform_Sha256+2816>:	add	r3, r2, r3
0x00011634	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11634 <Transform_Sha256+2820>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011638	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11638 <Transform_Sha256+2824>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001163c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1163c <Transform_Sha256+2828>:	mov	r1, #2
0x00011640	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11640 <Transform_Sha256+2832>:	mov	r0, r3
0x00011644	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11644 <Transform_Sha256+2836>:	bl	0x10760 <rotrFixed>
rotrFixed (x=422115851, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011648 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11648 <Transform_Sha256+2840>:	mov	r4, r0
0x0001164c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1164c <Transform_Sha256+2844>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011650	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11650 <Transform_Sha256+2848>:	mov	r1, #13
0x00011654	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11654 <Transform_Sha256+2852>:	mov	r0, r3
0x00011658	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11658 <Transform_Sha256+2856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1294337658, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001165c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1165c <Transform_Sha256+2860>:	mov	r3, r0
0x00011660	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11660 <Transform_Sha256+2864>:	eor	r4, r4, r3
0x00011664	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11664 <Transform_Sha256+2868>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011668	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11668 <Transform_Sha256+2872>:	mov	r1, #22
0x0001166c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1166c <Transform_Sha256+2876>:	mov	r0, r3
0x00011670	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11670 <Transform_Sha256+2880>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1294337658, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011674 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11674 <Transform_Sha256+2884>:	mov	r3, r0
0x00011678	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11678 <Transform_Sha256+2888>:	eor	r2, r4, r3
0x0001167c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1167c <Transform_Sha256+2892>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011680	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11680 <Transform_Sha256+2896>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011684	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11684 <Transform_Sha256+2900>:	orr	r1, r1, r3
0x00011688	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11688 <Transform_Sha256+2904>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x0001168c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1168c <Transform_Sha256+2908>:	and	r1, r1, r3
0x00011690	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11690 <Transform_Sha256+2912>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x00011694	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11694 <Transform_Sha256+2916>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011698	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11698 <Transform_Sha256+2920>:	and	r3, r3, r0
0x0001169c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1169c <Transform_Sha256+2924>:	orr	r3, r1, r3
0x000116a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a0 <Transform_Sha256+2928>:	add	r3, r2, r3
0x000116a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a4 <Transform_Sha256+2932>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000116a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a8 <Transform_Sha256+2936>:	ldr	r2, [r11, #-288]	; 0xfffffee0
0x000116ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116ac <Transform_Sha256+2940>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000116b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b0 <Transform_Sha256+2944>:	add	r3, r2, r3
0x000116b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b4 <Transform_Sha256+2948>:	str	r3, [r11, #-288]	; 0xfffffee0
0x000116b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b8 <Transform_Sha256+2952>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000116bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116bc <Transform_Sha256+2956>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000116c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c0 <Transform_Sha256+2960>:	add	r3, r2, r3
0x000116c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c4 <Transform_Sha256+2964>:	str	r3, [r11, #-304]	; 0xfffffed0
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116c8 <Transform_Sha256+2968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116cc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116cc <Transform_Sha256+2972>:	add	r3, r3, #8
0x000116d0	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d0 <Transform_Sha256+2976>:	str	r3, [r11, #-316]	; 0xfffffec4
0x000116d4	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d4 <Transform_Sha256+2980>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116d8	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d8 <Transform_Sha256+2984>:	cmp	r3, #63	; 0x3f
0x000116dc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116dc <Transform_Sha256+2988>:	ble	0x10d50 <Transform_Sha256+544>
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d50 <Transform_Sha256+544>:	ldr	r4, [r11, #-276]	; 0xfffffeec
0x00010d54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d54 <Transform_Sha256+548>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d58 <Transform_Sha256+552>:	mov	r1, #6
0x00010d5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d5c <Transform_Sha256+556>:	mov	r0, r3
0x00010d60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d60 <Transform_Sha256+560>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1294337658, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d64 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d64 <Transform_Sha256+564>:	mov	r5, r0
0x00010d68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d68 <Transform_Sha256+568>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d6c <Transform_Sha256+572>:	mov	r1, #11
0x00010d70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d70 <Transform_Sha256+576>:	mov	r0, r3
0x00010d74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d74 <Transform_Sha256+580>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3542841354, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d78 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d78 <Transform_Sha256+584>:	mov	r3, r0
0x00010d7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d7c <Transform_Sha256+588>:	eor	r5, r5, r3
0x00010d80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d80 <Transform_Sha256+592>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d84 <Transform_Sha256+596>:	mov	r1, #25
0x00010d88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d88 <Transform_Sha256+600>:	mov	r0, r3
0x00010d8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d8c <Transform_Sha256+604>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3542841354, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d90 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d90 <Transform_Sha256+608>:	mov	r3, r0
0x00010d94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d94 <Transform_Sha256+612>:	eor	r3, r3, r5
0x00010d98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d98 <Transform_Sha256+616>:	add	r2, r4, r3
0x00010d9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d9c <Transform_Sha256+620>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00010da0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da0 <Transform_Sha256+624>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00010da4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da4 <Transform_Sha256+628>:	ldr	r12, [r11, #-284]	; 0xfffffee4
0x00010da8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da8 <Transform_Sha256+632>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00010dac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dac <Transform_Sha256+636>:	eor	r3, r3, r12
0x00010db0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db0 <Transform_Sha256+640>:	and	r3, r3, r0
0x00010db4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db4 <Transform_Sha256+644>:	eor	r3, r3, r1
0x00010db8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db8 <Transform_Sha256+648>:	add	r2, r2, r3
0x00010dbc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dbc <Transform_Sha256+652>:	ldr	r1, [pc, #2464]	; 0x11764 <Transform_Sha256+3124>
0x00010dc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc0 <Transform_Sha256+656>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc4 <Transform_Sha256+660>:	ldr	r3, [r1, r3, lsl #2]
0x00010dc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc8 <Transform_Sha256+664>:	add	r2, r2, r3
0x00010dcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dcc <Transform_Sha256+668>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dd0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd0 <Transform_Sha256+672>:	lsl	r3, r3, #2
0x00010dd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd4 <Transform_Sha256+676>:	sub	r3, r3, #12
0x00010dd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd8 <Transform_Sha256+680>:	add	r3, r3, r11
0x00010ddc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ddc <Transform_Sha256+684>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010de0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de0 <Transform_Sha256+688>:	add	r3, r2, r3
0x00010de4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de4 <Transform_Sha256+692>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010de8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de8 <Transform_Sha256+696>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010dec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dec <Transform_Sha256+700>:	mov	r1, #2
0x00010df0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df0 <Transform_Sha256+704>:	mov	r0, r3
0x00010df4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df4 <Transform_Sha256+708>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3542841354, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010df8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df8 <Transform_Sha256+712>:	mov	r4, r0
0x00010dfc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dfc <Transform_Sha256+716>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e00 <Transform_Sha256+720>:	mov	r1, #13
0x00010e04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e04 <Transform_Sha256+724>:	mov	r0, r3
0x00010e08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e08 <Transform_Sha256+728>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1262488460, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e0c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e0c <Transform_Sha256+732>:	mov	r3, r0
0x00010e10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e10 <Transform_Sha256+736>:	eor	r4, r4, r3
0x00010e14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e14 <Transform_Sha256+740>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e18 <Transform_Sha256+744>:	mov	r1, #22
0x00010e1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e1c <Transform_Sha256+748>:	mov	r0, r3
0x00010e20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e20 <Transform_Sha256+752>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1262488460, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e24 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e24 <Transform_Sha256+756>:	mov	r3, r0
0x00010e28	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e28 <Transform_Sha256+760>:	eor	r2, r4, r3
0x00010e2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e2c <Transform_Sha256+764>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x00010e30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e30 <Transform_Sha256+768>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e34 <Transform_Sha256+772>:	orr	r1, r1, r3
0x00010e38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e38 <Transform_Sha256+776>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010e3c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e3c <Transform_Sha256+780>:	and	r1, r1, r3
0x00010e40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e40 <Transform_Sha256+784>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x00010e44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e44 <Transform_Sha256+788>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e48 <Transform_Sha256+792>:	and	r3, r3, r0
0x00010e4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e4c <Transform_Sha256+796>:	orr	r3, r1, r3
0x00010e50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e50 <Transform_Sha256+800>:	add	r3, r2, r3
0x00010e54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e54 <Transform_Sha256+804>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010e58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e58 <Transform_Sha256+808>:	ldr	r2, [r11, #-292]	; 0xfffffedc
0x00010e5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e5c <Transform_Sha256+812>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010e60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e60 <Transform_Sha256+816>:	add	r3, r2, r3
0x00010e64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e64 <Transform_Sha256+820>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00010e68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e68 <Transform_Sha256+824>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010e6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e6c <Transform_Sha256+828>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010e70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e70 <Transform_Sha256+832>:	add	r3, r2, r3
0x00010e74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e74 <Transform_Sha256+836>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00010e78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e78 <Transform_Sha256+840>:	ldr	r4, [r11, #-280]	; 0xfffffee8
0x00010e7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e7c <Transform_Sha256+844>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e80 <Transform_Sha256+848>:	mov	r1, #6
0x00010e84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e84 <Transform_Sha256+852>:	mov	r0, r3
0x00010e88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e88 <Transform_Sha256+856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1262488460, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e8c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e8c <Transform_Sha256+860>:	mov	r5, r0
0x00010e90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e90 <Transform_Sha256+864>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e94 <Transform_Sha256+868>:	mov	r1, #11
0x00010e98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e98 <Transform_Sha256+872>:	mov	r0, r3
0x00010e9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e9c <Transform_Sha256+876>:	bl	0x10760 <rotrFixed>
rotrFixed (x=975658554, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ea0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea0 <Transform_Sha256+880>:	mov	r3, r0
0x00010ea4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea4 <Transform_Sha256+884>:	eor	r5, r5, r3
0x00010ea8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea8 <Transform_Sha256+888>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010eac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eac <Transform_Sha256+892>:	mov	r1, #25
0x00010eb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb0 <Transform_Sha256+896>:	mov	r0, r3
0x00010eb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb4 <Transform_Sha256+900>:	bl	0x10760 <rotrFixed>
rotrFixed (x=975658554, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010eb8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb8 <Transform_Sha256+904>:	mov	r3, r0
0x00010ebc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ebc <Transform_Sha256+908>:	eor	r3, r3, r5
0x00010ec0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec0 <Transform_Sha256+912>:	add	r2, r4, r3
0x00010ec4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec4 <Transform_Sha256+916>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x00010ec8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec8 <Transform_Sha256+920>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00010ecc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ecc <Transform_Sha256+924>:	ldr	r12, [r11, #-288]	; 0xfffffee0
0x00010ed0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed0 <Transform_Sha256+928>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00010ed4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed4 <Transform_Sha256+932>:	eor	r3, r3, r12
0x00010ed8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed8 <Transform_Sha256+936>:	and	r3, r3, r0
0x00010edc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10edc <Transform_Sha256+940>:	eor	r3, r3, r1
0x00010ee0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee0 <Transform_Sha256+944>:	add	r2, r2, r3
0x00010ee4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee4 <Transform_Sha256+948>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ee8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee8 <Transform_Sha256+952>:	add	r3, r3, #1
0x00010eec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eec <Transform_Sha256+956>:	ldr	r1, [pc, #2160]	; 0x11764 <Transform_Sha256+3124>
0x00010ef0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef0 <Transform_Sha256+960>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef4 <Transform_Sha256+964>:	add	r2, r2, r3
0x00010ef8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef8 <Transform_Sha256+968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010efc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10efc <Transform_Sha256+972>:	add	r3, r3, #1
0x00010f00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f00 <Transform_Sha256+976>:	lsl	r3, r3, #2
0x00010f04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f04 <Transform_Sha256+980>:	sub	r3, r3, #12
0x00010f08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f08 <Transform_Sha256+984>:	add	r3, r3, r11
0x00010f0c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f0c <Transform_Sha256+988>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010f10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f10 <Transform_Sha256+992>:	add	r3, r2, r3
0x00010f14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f14 <Transform_Sha256+996>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010f18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f18 <Transform_Sha256+1000>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f1c <Transform_Sha256+1004>:	mov	r1, #2
0x00010f20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f20 <Transform_Sha256+1008>:	mov	r0, r3
0x00010f24	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f24 <Transform_Sha256+1012>:	bl	0x10760 <rotrFixed>
rotrFixed (x=975658554, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f28 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f28 <Transform_Sha256+1016>:	mov	r4, r0
0x00010f2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f2c <Transform_Sha256+1020>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f30 <Transform_Sha256+1024>:	mov	r1, #13
0x00010f34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f34 <Transform_Sha256+1028>:	mov	r0, r3
0x00010f38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f38 <Transform_Sha256+1032>:	bl	0x10760 <rotrFixed>
rotrFixed (x=503177724, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f3c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f3c <Transform_Sha256+1036>:	mov	r3, r0
0x00010f40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f40 <Transform_Sha256+1040>:	eor	r4, r4, r3
0x00010f44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f44 <Transform_Sha256+1044>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f48 <Transform_Sha256+1048>:	mov	r1, #22
0x00010f4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f4c <Transform_Sha256+1052>:	mov	r0, r3
0x00010f50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f50 <Transform_Sha256+1056>:	bl	0x10760 <rotrFixed>
rotrFixed (x=503177724, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f54 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f54 <Transform_Sha256+1060>:	mov	r3, r0
0x00010f58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f58 <Transform_Sha256+1064>:	eor	r2, r4, r3
0x00010f5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f5c <Transform_Sha256+1068>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x00010f60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f60 <Transform_Sha256+1072>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f64 <Transform_Sha256+1076>:	orr	r1, r1, r3
0x00010f68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f68 <Transform_Sha256+1080>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010f6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f6c <Transform_Sha256+1084>:	and	r1, r1, r3
0x00010f70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f70 <Transform_Sha256+1088>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x00010f74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f74 <Transform_Sha256+1092>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f78 <Transform_Sha256+1096>:	and	r3, r3, r0
0x00010f7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f7c <Transform_Sha256+1100>:	orr	r3, r1, r3
0x00010f80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f80 <Transform_Sha256+1104>:	add	r3, r2, r3
0x00010f84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f84 <Transform_Sha256+1108>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010f88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f88 <Transform_Sha256+1112>:	ldr	r2, [r11, #-296]	; 0xfffffed8
0x00010f8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f8c <Transform_Sha256+1116>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010f90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f90 <Transform_Sha256+1120>:	add	r3, r2, r3
0x00010f94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f94 <Transform_Sha256+1124>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00010f98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f98 <Transform_Sha256+1128>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010f9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f9c <Transform_Sha256+1132>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010fa0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa0 <Transform_Sha256+1136>:	add	r3, r2, r3
0x00010fa4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa4 <Transform_Sha256+1140>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00010fa8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa8 <Transform_Sha256+1144>:	ldr	r4, [r11, #-284]	; 0xfffffee4
0x00010fac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fac <Transform_Sha256+1148>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb0 <Transform_Sha256+1152>:	mov	r1, #6
0x00010fb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb4 <Transform_Sha256+1156>:	mov	r0, r3
0x00010fb8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb8 <Transform_Sha256+1160>:	bl	0x10760 <rotrFixed>
rotrFixed (x=503177724, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fbc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fbc <Transform_Sha256+1164>:	mov	r5, r0
0x00010fc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc0 <Transform_Sha256+1168>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc4 <Transform_Sha256+1172>:	mov	r1, #11
0x00010fc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc8 <Transform_Sha256+1176>:	mov	r0, r3
0x00010fcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fcc <Transform_Sha256+1180>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3908449478, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd0 <Transform_Sha256+1184>:	mov	r3, r0
0x00010fd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd4 <Transform_Sha256+1188>:	eor	r5, r5, r3
0x00010fd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd8 <Transform_Sha256+1192>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fdc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fdc <Transform_Sha256+1196>:	mov	r1, #25
0x00010fe0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe0 <Transform_Sha256+1200>:	mov	r0, r3
0x00010fe4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe4 <Transform_Sha256+1204>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3908449478, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fe8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe8 <Transform_Sha256+1208>:	mov	r3, r0
0x00010fec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fec <Transform_Sha256+1212>:	eor	r3, r3, r5
0x00010ff0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff0 <Transform_Sha256+1216>:	add	r2, r4, r3
0x00010ff4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff4 <Transform_Sha256+1220>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x00010ff8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff8 <Transform_Sha256+1224>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00010ffc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ffc <Transform_Sha256+1228>:	ldr	r12, [r11, #-292]	; 0xfffffedc
0x00011000	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11000 <Transform_Sha256+1232>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011004	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11004 <Transform_Sha256+1236>:	eor	r3, r3, r12
0x00011008	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11008 <Transform_Sha256+1240>:	and	r3, r3, r0
0x0001100c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1100c <Transform_Sha256+1244>:	eor	r3, r3, r1
0x00011010	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11010 <Transform_Sha256+1248>:	add	r2, r2, r3
0x00011014	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11014 <Transform_Sha256+1252>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011018	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11018 <Transform_Sha256+1256>:	add	r3, r3, #2
0x0001101c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1101c <Transform_Sha256+1260>:	ldr	r1, [pc, #1856]	; 0x11764 <Transform_Sha256+3124>
0x00011020	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11020 <Transform_Sha256+1264>:	ldr	r3, [r1, r3, lsl #2]
0x00011024	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11024 <Transform_Sha256+1268>:	add	r2, r2, r3
0x00011028	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11028 <Transform_Sha256+1272>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001102c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1102c <Transform_Sha256+1276>:	add	r3, r3, #2
0x00011030	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11030 <Transform_Sha256+1280>:	lsl	r3, r3, #2
0x00011034	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11034 <Transform_Sha256+1284>:	sub	r3, r3, #12
0x00011038	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11038 <Transform_Sha256+1288>:	add	r3, r3, r11
0x0001103c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1103c <Transform_Sha256+1292>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011040	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11040 <Transform_Sha256+1296>:	add	r3, r2, r3
0x00011044	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11044 <Transform_Sha256+1300>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011048	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11048 <Transform_Sha256+1304>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001104c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1104c <Transform_Sha256+1308>:	mov	r1, #2
0x00011050	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11050 <Transform_Sha256+1312>:	mov	r0, r3
0x00011054	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11054 <Transform_Sha256+1316>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3908449478, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011058 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11058 <Transform_Sha256+1320>:	mov	r4, r0
0x0001105c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1105c <Transform_Sha256+1324>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011060	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11060 <Transform_Sha256+1328>:	mov	r1, #13
0x00011064	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11064 <Transform_Sha256+1332>:	mov	r0, r3
0x00011068	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11068 <Transform_Sha256+1336>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2279907861, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001106c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1106c <Transform_Sha256+1340>:	mov	r3, r0
0x00011070	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11070 <Transform_Sha256+1344>:	eor	r4, r4, r3
0x00011074	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11074 <Transform_Sha256+1348>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011078	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11078 <Transform_Sha256+1352>:	mov	r1, #22
0x0001107c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1107c <Transform_Sha256+1356>:	mov	r0, r3
0x00011080	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11080 <Transform_Sha256+1360>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2279907861, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011084 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11084 <Transform_Sha256+1364>:	mov	r3, r0
0x00011088	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11088 <Transform_Sha256+1368>:	eor	r2, r4, r3
0x0001108c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1108c <Transform_Sha256+1372>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00011090	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11090 <Transform_Sha256+1376>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011094	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11094 <Transform_Sha256+1380>:	orr	r1, r1, r3
0x00011098	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11098 <Transform_Sha256+1384>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001109c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1109c <Transform_Sha256+1388>:	and	r1, r1, r3
0x000110a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a0 <Transform_Sha256+1392>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000110a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a4 <Transform_Sha256+1396>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000110a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a8 <Transform_Sha256+1400>:	and	r3, r3, r0
0x000110ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ac <Transform_Sha256+1404>:	orr	r3, r1, r3
0x000110b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b0 <Transform_Sha256+1408>:	add	r3, r2, r3
0x000110b4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b4 <Transform_Sha256+1412>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000110b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b8 <Transform_Sha256+1416>:	ldr	r2, [r11, #-300]	; 0xfffffed4
0x000110bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110bc <Transform_Sha256+1420>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000110c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c0 <Transform_Sha256+1424>:	add	r3, r2, r3
0x000110c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c4 <Transform_Sha256+1428>:	str	r3, [r11, #-300]	; 0xfffffed4
0x000110c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c8 <Transform_Sha256+1432>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000110cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110cc <Transform_Sha256+1436>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000110d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d0 <Transform_Sha256+1440>:	add	r3, r2, r3
0x000110d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d4 <Transform_Sha256+1444>:	str	r3, [r11, #-284]	; 0xfffffee4
0x000110d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d8 <Transform_Sha256+1448>:	ldr	r4, [r11, #-288]	; 0xfffffee0
0x000110dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110dc <Transform_Sha256+1452>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e0 <Transform_Sha256+1456>:	mov	r1, #6
0x000110e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e4 <Transform_Sha256+1460>:	mov	r0, r3
0x000110e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e8 <Transform_Sha256+1464>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2279907861, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000110ec in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ec <Transform_Sha256+1468>:	mov	r5, r0
0x000110f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f0 <Transform_Sha256+1472>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f4 <Transform_Sha256+1476>:	mov	r1, #11
0x000110f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f8 <Transform_Sha256+1480>:	mov	r0, r3
0x000110fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110fc <Transform_Sha256+1484>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2909648173, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011100 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11100 <Transform_Sha256+1488>:	mov	r3, r0
0x00011104	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11104 <Transform_Sha256+1492>:	eor	r5, r5, r3
0x00011108	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11108 <Transform_Sha256+1496>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001110c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1110c <Transform_Sha256+1500>:	mov	r1, #25
0x00011110	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11110 <Transform_Sha256+1504>:	mov	r0, r3
0x00011114	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11114 <Transform_Sha256+1508>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2909648173, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011118 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11118 <Transform_Sha256+1512>:	mov	r3, r0
0x0001111c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1111c <Transform_Sha256+1516>:	eor	r3, r3, r5
0x00011120	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11120 <Transform_Sha256+1520>:	add	r2, r4, r3
0x00011124	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11124 <Transform_Sha256+1524>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011128	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11128 <Transform_Sha256+1528>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x0001112c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1112c <Transform_Sha256+1532>:	ldr	r12, [r11, #-296]	; 0xfffffed8
0x00011130	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11130 <Transform_Sha256+1536>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011134	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11134 <Transform_Sha256+1540>:	eor	r3, r3, r12
0x00011138	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11138 <Transform_Sha256+1544>:	and	r3, r3, r0
0x0001113c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1113c <Transform_Sha256+1548>:	eor	r3, r3, r1
0x00011140	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11140 <Transform_Sha256+1552>:	add	r2, r2, r3
0x00011144	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11144 <Transform_Sha256+1556>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011148	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11148 <Transform_Sha256+1560>:	add	r3, r3, #3
0x0001114c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1114c <Transform_Sha256+1564>:	ldr	r1, [pc, #1552]	; 0x11764 <Transform_Sha256+3124>
0x00011150	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11150 <Transform_Sha256+1568>:	ldr	r3, [r1, r3, lsl #2]
0x00011154	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11154 <Transform_Sha256+1572>:	add	r2, r2, r3
0x00011158	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11158 <Transform_Sha256+1576>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001115c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1115c <Transform_Sha256+1580>:	add	r3, r3, #3
0x00011160	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11160 <Transform_Sha256+1584>:	lsl	r3, r3, #2
0x00011164	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11164 <Transform_Sha256+1588>:	sub	r3, r3, #12
0x00011168	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11168 <Transform_Sha256+1592>:	add	r3, r3, r11
0x0001116c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1116c <Transform_Sha256+1596>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011170	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11170 <Transform_Sha256+1600>:	add	r3, r2, r3
0x00011174	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11174 <Transform_Sha256+1604>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011178	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11178 <Transform_Sha256+1608>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001117c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1117c <Transform_Sha256+1612>:	mov	r1, #2
0x00011180	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11180 <Transform_Sha256+1616>:	mov	r0, r3
0x00011184	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11184 <Transform_Sha256+1620>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2909648173, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011188 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11188 <Transform_Sha256+1624>:	mov	r4, r0
0x0001118c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1118c <Transform_Sha256+1628>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011190	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11190 <Transform_Sha256+1632>:	mov	r1, #13
0x00011194	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11194 <Transform_Sha256+1636>:	mov	r0, r3
0x00011198	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11198 <Transform_Sha256+1640>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1409913870, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001119c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1119c <Transform_Sha256+1644>:	mov	r3, r0
0x000111a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a0 <Transform_Sha256+1648>:	eor	r4, r4, r3
0x000111a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a4 <Transform_Sha256+1652>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000111a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a8 <Transform_Sha256+1656>:	mov	r1, #22
0x000111ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ac <Transform_Sha256+1660>:	mov	r0, r3
0x000111b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b0 <Transform_Sha256+1664>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1409913870, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000111b4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b4 <Transform_Sha256+1668>:	mov	r3, r0
0x000111b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b8 <Transform_Sha256+1672>:	eor	r2, r4, r3
0x000111bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111bc <Transform_Sha256+1676>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x000111c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c0 <Transform_Sha256+1680>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c4 <Transform_Sha256+1684>:	orr	r1, r1, r3
0x000111c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c8 <Transform_Sha256+1688>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000111cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111cc <Transform_Sha256+1692>:	and	r1, r1, r3
0x000111d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d0 <Transform_Sha256+1696>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000111d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d4 <Transform_Sha256+1700>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d8 <Transform_Sha256+1704>:	and	r3, r3, r0
0x000111dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111dc <Transform_Sha256+1708>:	orr	r3, r1, r3
0x000111e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e0 <Transform_Sha256+1712>:	add	r3, r2, r3
0x000111e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e4 <Transform_Sha256+1716>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000111e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e8 <Transform_Sha256+1720>:	ldr	r2, [r11, #-304]	; 0xfffffed0
0x000111ec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ec <Transform_Sha256+1724>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000111f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f0 <Transform_Sha256+1728>:	add	r3, r2, r3
0x000111f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f4 <Transform_Sha256+1732>:	str	r3, [r11, #-304]	; 0xfffffed0
0x000111f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f8 <Transform_Sha256+1736>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000111fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111fc <Transform_Sha256+1740>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011200	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11200 <Transform_Sha256+1744>:	add	r3, r2, r3
0x00011204	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11204 <Transform_Sha256+1748>:	str	r3, [r11, #-288]	; 0xfffffee0
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11208 <Transform_Sha256+1752>:	ldr	r4, [r11, #-292]	; 0xfffffedc
0x0001120c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1120c <Transform_Sha256+1756>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011210	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11210 <Transform_Sha256+1760>:	mov	r1, #6
0x00011214	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11214 <Transform_Sha256+1764>:	mov	r0, r3
0x00011218	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11218 <Transform_Sha256+1768>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1409913870, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001121c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1121c <Transform_Sha256+1772>:	mov	r5, r0
0x00011220	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11220 <Transform_Sha256+1776>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011224	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11224 <Transform_Sha256+1780>:	mov	r1, #11
0x00011228	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11228 <Transform_Sha256+1784>:	mov	r0, r3
0x0001122c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1122c <Transform_Sha256+1788>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2562935516, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011230 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11230 <Transform_Sha256+1792>:	mov	r3, r0
0x00011234	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11234 <Transform_Sha256+1796>:	eor	r5, r5, r3
0x00011238	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11238 <Transform_Sha256+1800>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001123c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1123c <Transform_Sha256+1804>:	mov	r1, #25
0x00011240	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11240 <Transform_Sha256+1808>:	mov	r0, r3
0x00011244	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11244 <Transform_Sha256+1812>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2562935516, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011248 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11248 <Transform_Sha256+1816>:	mov	r3, r0
0x0001124c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1124c <Transform_Sha256+1820>:	eor	r3, r3, r5
0x00011250	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11250 <Transform_Sha256+1824>:	add	r2, r4, r3
0x00011254	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11254 <Transform_Sha256+1828>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011258	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11258 <Transform_Sha256+1832>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x0001125c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1125c <Transform_Sha256+1836>:	ldr	r12, [r11, #-300]	; 0xfffffed4
0x00011260	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11260 <Transform_Sha256+1840>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011264	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11264 <Transform_Sha256+1844>:	eor	r3, r3, r12
0x00011268	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11268 <Transform_Sha256+1848>:	and	r3, r3, r0
0x0001126c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1126c <Transform_Sha256+1852>:	eor	r3, r3, r1
0x00011270	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11270 <Transform_Sha256+1856>:	add	r2, r2, r3
0x00011274	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11274 <Transform_Sha256+1860>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011278	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11278 <Transform_Sha256+1864>:	add	r3, r3, #4
0x0001127c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1127c <Transform_Sha256+1868>:	ldr	r1, [pc, #1248]	; 0x11764 <Transform_Sha256+3124>
0x00011280	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11280 <Transform_Sha256+1872>:	ldr	r3, [r1, r3, lsl #2]
0x00011284	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11284 <Transform_Sha256+1876>:	add	r2, r2, r3
0x00011288	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11288 <Transform_Sha256+1880>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001128c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1128c <Transform_Sha256+1884>:	add	r3, r3, #4
0x00011290	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11290 <Transform_Sha256+1888>:	lsl	r3, r3, #2
0x00011294	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11294 <Transform_Sha256+1892>:	sub	r3, r3, #12
0x00011298	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11298 <Transform_Sha256+1896>:	add	r3, r3, r11
0x0001129c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1129c <Transform_Sha256+1900>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000112a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a0 <Transform_Sha256+1904>:	add	r3, r2, r3
0x000112a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a4 <Transform_Sha256+1908>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000112a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a8 <Transform_Sha256+1912>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ac <Transform_Sha256+1916>:	mov	r1, #2
0x000112b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b0 <Transform_Sha256+1920>:	mov	r0, r3
0x000112b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b4 <Transform_Sha256+1924>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2562935516, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112b8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b8 <Transform_Sha256+1928>:	mov	r4, r0
0x000112bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112bc <Transform_Sha256+1932>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c0 <Transform_Sha256+1936>:	mov	r1, #13
0x000112c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c4 <Transform_Sha256+1940>:	mov	r0, r3
0x000112c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c8 <Transform_Sha256+1944>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1989270411, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112cc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112cc <Transform_Sha256+1948>:	mov	r3, r0
0x000112d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d0 <Transform_Sha256+1952>:	eor	r4, r4, r3
0x000112d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d4 <Transform_Sha256+1956>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d8 <Transform_Sha256+1960>:	mov	r1, #22
0x000112dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112dc <Transform_Sha256+1964>:	mov	r0, r3
0x000112e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e0 <Transform_Sha256+1968>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1989270411, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112e4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e4 <Transform_Sha256+1972>:	mov	r3, r0
0x000112e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e8 <Transform_Sha256+1976>:	eor	r2, r4, r3
0x000112ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ec <Transform_Sha256+1980>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x000112f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f0 <Transform_Sha256+1984>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000112f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f4 <Transform_Sha256+1988>:	orr	r1, r1, r3
0x000112f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f8 <Transform_Sha256+1992>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000112fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112fc <Transform_Sha256+1996>:	and	r1, r1, r3
0x00011300	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11300 <Transform_Sha256+2000>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00011304	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11304 <Transform_Sha256+2004>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011308	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11308 <Transform_Sha256+2008>:	and	r3, r3, r0
0x0001130c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1130c <Transform_Sha256+2012>:	orr	r3, r1, r3
0x00011310	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11310 <Transform_Sha256+2016>:	add	r3, r2, r3
0x00011314	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11314 <Transform_Sha256+2020>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011318	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11318 <Transform_Sha256+2024>:	ldr	r2, [r11, #-276]	; 0xfffffeec
0x0001131c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1131c <Transform_Sha256+2028>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011320	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11320 <Transform_Sha256+2032>:	add	r3, r2, r3
0x00011324	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11324 <Transform_Sha256+2036>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00011328	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11328 <Transform_Sha256+2040>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001132c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1132c <Transform_Sha256+2044>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011330	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11330 <Transform_Sha256+2048>:	add	r3, r2, r3
0x00011334	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11334 <Transform_Sha256+2052>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00011338	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11338 <Transform_Sha256+2056>:	ldr	r4, [r11, #-296]	; 0xfffffed8
0x0001133c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1133c <Transform_Sha256+2060>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011340	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11340 <Transform_Sha256+2064>:	mov	r1, #6
0x00011344	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11344 <Transform_Sha256+2068>:	mov	r0, r3
0x00011348	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11348 <Transform_Sha256+2072>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1989270411, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001134c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1134c <Transform_Sha256+2076>:	mov	r5, r0
0x00011350	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11350 <Transform_Sha256+2080>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011354	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11354 <Transform_Sha256+2084>:	mov	r1, #11
0x00011358	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11358 <Transform_Sha256+2088>:	mov	r0, r3
0x0001135c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1135c <Transform_Sha256+2092>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3597207714, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011360 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11360 <Transform_Sha256+2096>:	mov	r3, r0
0x00011364	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11364 <Transform_Sha256+2100>:	eor	r5, r5, r3
0x00011368	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11368 <Transform_Sha256+2104>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x0001136c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1136c <Transform_Sha256+2108>:	mov	r1, #25
0x00011370	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11370 <Transform_Sha256+2112>:	mov	r0, r3
0x00011374	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11374 <Transform_Sha256+2116>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3597207714, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011378 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11378 <Transform_Sha256+2120>:	mov	r3, r0
0x0001137c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1137c <Transform_Sha256+2124>:	eor	r3, r3, r5
0x00011380	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11380 <Transform_Sha256+2128>:	add	r2, r4, r3
0x00011384	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11384 <Transform_Sha256+2132>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011388	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11388 <Transform_Sha256+2136>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x0001138c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1138c <Transform_Sha256+2140>:	ldr	r12, [r11, #-304]	; 0xfffffed0
0x00011390	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11390 <Transform_Sha256+2144>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011394	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11394 <Transform_Sha256+2148>:	eor	r3, r3, r12
0x00011398	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11398 <Transform_Sha256+2152>:	and	r3, r3, r0
0x0001139c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1139c <Transform_Sha256+2156>:	eor	r3, r3, r1
0x000113a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a0 <Transform_Sha256+2160>:	add	r2, r2, r3
0x000113a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a4 <Transform_Sha256+2164>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a8 <Transform_Sha256+2168>:	add	r3, r3, #5
0x000113ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ac <Transform_Sha256+2172>:	ldr	r1, [pc, #944]	; 0x11764 <Transform_Sha256+3124>
0x000113b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b0 <Transform_Sha256+2176>:	ldr	r3, [r1, r3, lsl #2]
0x000113b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b4 <Transform_Sha256+2180>:	add	r2, r2, r3
0x000113b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b8 <Transform_Sha256+2184>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113bc <Transform_Sha256+2188>:	add	r3, r3, #5
0x000113c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c0 <Transform_Sha256+2192>:	lsl	r3, r3, #2
0x000113c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c4 <Transform_Sha256+2196>:	sub	r3, r3, #12
0x000113c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c8 <Transform_Sha256+2200>:	add	r3, r3, r11
0x000113cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113cc <Transform_Sha256+2204>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000113d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d0 <Transform_Sha256+2208>:	add	r3, r2, r3
0x000113d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d4 <Transform_Sha256+2212>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000113d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d8 <Transform_Sha256+2216>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113dc <Transform_Sha256+2220>:	mov	r1, #2
0x000113e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e0 <Transform_Sha256+2224>:	mov	r0, r3
0x000113e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e4 <Transform_Sha256+2228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3597207714, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113e8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e8 <Transform_Sha256+2232>:	mov	r4, r0
0x000113ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ec <Transform_Sha256+2236>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f0 <Transform_Sha256+2240>:	mov	r1, #13
0x000113f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f4 <Transform_Sha256+2244>:	mov	r0, r3
0x000113f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f8 <Transform_Sha256+2248>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1434364011, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113fc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113fc <Transform_Sha256+2252>:	mov	r3, r0
0x00011400	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11400 <Transform_Sha256+2256>:	eor	r4, r4, r3
0x00011404	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11404 <Transform_Sha256+2260>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011408	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11408 <Transform_Sha256+2264>:	mov	r1, #22
0x0001140c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1140c <Transform_Sha256+2268>:	mov	r0, r3
0x00011410	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11410 <Transform_Sha256+2272>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1434364011, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011414 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11414 <Transform_Sha256+2276>:	mov	r3, r0
0x00011418	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11418 <Transform_Sha256+2280>:	eor	r2, r4, r3
0x0001141c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1141c <Transform_Sha256+2284>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011420	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11420 <Transform_Sha256+2288>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011424	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11424 <Transform_Sha256+2292>:	orr	r1, r1, r3
0x00011428	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11428 <Transform_Sha256+2296>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001142c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1142c <Transform_Sha256+2300>:	and	r1, r1, r3
0x00011430	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11430 <Transform_Sha256+2304>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00011434	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11434 <Transform_Sha256+2308>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011438	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11438 <Transform_Sha256+2312>:	and	r3, r3, r0
0x0001143c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1143c <Transform_Sha256+2316>:	orr	r3, r1, r3
0x00011440	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11440 <Transform_Sha256+2320>:	add	r3, r2, r3
0x00011444	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11444 <Transform_Sha256+2324>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011448	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11448 <Transform_Sha256+2328>:	ldr	r2, [r11, #-280]	; 0xfffffee8
0x0001144c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1144c <Transform_Sha256+2332>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011450	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11450 <Transform_Sha256+2336>:	add	r3, r2, r3
0x00011454	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11454 <Transform_Sha256+2340>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00011458	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11458 <Transform_Sha256+2344>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001145c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1145c <Transform_Sha256+2348>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011460	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11460 <Transform_Sha256+2352>:	add	r3, r2, r3
0x00011464	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11464 <Transform_Sha256+2356>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00011468	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11468 <Transform_Sha256+2360>:	ldr	r4, [r11, #-300]	; 0xfffffed4
0x0001146c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1146c <Transform_Sha256+2364>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011470	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11470 <Transform_Sha256+2368>:	mov	r1, #6
0x00011474	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11474 <Transform_Sha256+2372>:	mov	r0, r3
0x00011478	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11478 <Transform_Sha256+2376>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1434364011, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001147c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1147c <Transform_Sha256+2380>:	mov	r5, r0
0x00011480	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11480 <Transform_Sha256+2384>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011484	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11484 <Transform_Sha256+2388>:	mov	r1, #11
0x00011488	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11488 <Transform_Sha256+2392>:	mov	r0, r3
0x0001148c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1148c <Transform_Sha256+2396>:	bl	0x10760 <rotrFixed>
rotrFixed (x=915618481, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011490 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11490 <Transform_Sha256+2400>:	mov	r3, r0
0x00011494	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11494 <Transform_Sha256+2404>:	eor	r5, r5, r3
0x00011498	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11498 <Transform_Sha256+2408>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001149c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1149c <Transform_Sha256+2412>:	mov	r1, #25
0x000114a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a0 <Transform_Sha256+2416>:	mov	r0, r3
0x000114a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a4 <Transform_Sha256+2420>:	bl	0x10760 <rotrFixed>
rotrFixed (x=915618481, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000114a8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a8 <Transform_Sha256+2424>:	mov	r3, r0
0x000114ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ac <Transform_Sha256+2428>:	eor	r3, r3, r5
0x000114b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b0 <Transform_Sha256+2432>:	add	r2, r4, r3
0x000114b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b4 <Transform_Sha256+2436>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x000114b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b8 <Transform_Sha256+2440>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000114bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114bc <Transform_Sha256+2444>:	ldr	r12, [r11, #-276]	; 0xfffffeec
0x000114c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c0 <Transform_Sha256+2448>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x000114c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c4 <Transform_Sha256+2452>:	eor	r3, r3, r12
0x000114c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c8 <Transform_Sha256+2456>:	and	r3, r3, r0
0x000114cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114cc <Transform_Sha256+2460>:	eor	r3, r3, r1
0x000114d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d0 <Transform_Sha256+2464>:	add	r2, r2, r3
0x000114d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d4 <Transform_Sha256+2468>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d8 <Transform_Sha256+2472>:	add	r3, r3, #6
0x000114dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114dc <Transform_Sha256+2476>:	ldr	r1, [pc, #640]	; 0x11764 <Transform_Sha256+3124>
0x000114e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e0 <Transform_Sha256+2480>:	ldr	r3, [r1, r3, lsl #2]
0x000114e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e4 <Transform_Sha256+2484>:	add	r2, r2, r3
0x000114e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e8 <Transform_Sha256+2488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ec <Transform_Sha256+2492>:	add	r3, r3, #6
0x000114f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f0 <Transform_Sha256+2496>:	lsl	r3, r3, #2
0x000114f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f4 <Transform_Sha256+2500>:	sub	r3, r3, #12
0x000114f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f8 <Transform_Sha256+2504>:	add	r3, r3, r11
0x000114fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114fc <Transform_Sha256+2508>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011500	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11500 <Transform_Sha256+2512>:	add	r3, r2, r3
0x00011504	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11504 <Transform_Sha256+2516>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011508	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11508 <Transform_Sha256+2520>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x0001150c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1150c <Transform_Sha256+2524>:	mov	r1, #2
0x00011510	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11510 <Transform_Sha256+2528>:	mov	r0, r3
0x00011514	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11514 <Transform_Sha256+2532>:	bl	0x10760 <rotrFixed>
rotrFixed (x=915618481, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011518 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11518 <Transform_Sha256+2536>:	mov	r4, r0
0x0001151c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1151c <Transform_Sha256+2540>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011520	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11520 <Transform_Sha256+2544>:	mov	r1, #13
0x00011524	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11524 <Transform_Sha256+2548>:	mov	r0, r3
0x00011528	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11528 <Transform_Sha256+2552>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1869405537, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001152c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1152c <Transform_Sha256+2556>:	mov	r3, r0
0x00011530	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11530 <Transform_Sha256+2560>:	eor	r4, r4, r3
0x00011534	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11534 <Transform_Sha256+2564>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011538	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11538 <Transform_Sha256+2568>:	mov	r1, #22
0x0001153c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1153c <Transform_Sha256+2572>:	mov	r0, r3
0x00011540	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11540 <Transform_Sha256+2576>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1869405537, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011544 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11544 <Transform_Sha256+2580>:	mov	r3, r0
0x00011548	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11548 <Transform_Sha256+2584>:	eor	r2, r4, r3
0x0001154c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1154c <Transform_Sha256+2588>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011550	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11550 <Transform_Sha256+2592>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011554	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11554 <Transform_Sha256+2596>:	orr	r1, r1, r3
0x00011558	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11558 <Transform_Sha256+2600>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x0001155c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1155c <Transform_Sha256+2604>:	and	r1, r1, r3
0x00011560	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11560 <Transform_Sha256+2608>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00011564	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11564 <Transform_Sha256+2612>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011568	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11568 <Transform_Sha256+2616>:	and	r3, r3, r0
0x0001156c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1156c <Transform_Sha256+2620>:	orr	r3, r1, r3
0x00011570	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11570 <Transform_Sha256+2624>:	add	r3, r2, r3
0x00011574	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11574 <Transform_Sha256+2628>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011578	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11578 <Transform_Sha256+2632>:	ldr	r2, [r11, #-284]	; 0xfffffee4
0x0001157c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1157c <Transform_Sha256+2636>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011580	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11580 <Transform_Sha256+2640>:	add	r3, r2, r3
0x00011584	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11584 <Transform_Sha256+2644>:	str	r3, [r11, #-284]	; 0xfffffee4
0x00011588	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11588 <Transform_Sha256+2648>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001158c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1158c <Transform_Sha256+2652>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011590	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11590 <Transform_Sha256+2656>:	add	r3, r2, r3
0x00011594	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11594 <Transform_Sha256+2660>:	str	r3, [r11, #-300]	; 0xfffffed4
0x00011598	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11598 <Transform_Sha256+2664>:	ldr	r4, [r11, #-304]	; 0xfffffed0
0x0001159c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1159c <Transform_Sha256+2668>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a0 <Transform_Sha256+2672>:	mov	r1, #6
0x000115a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a4 <Transform_Sha256+2676>:	mov	r0, r3
0x000115a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a8 <Transform_Sha256+2680>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1869405537, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115ac in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ac <Transform_Sha256+2684>:	mov	r5, r0
0x000115b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b0 <Transform_Sha256+2688>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b4 <Transform_Sha256+2692>:	mov	r1, #11
0x000115b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b8 <Transform_Sha256+2696>:	mov	r0, r3
0x000115bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115bc <Transform_Sha256+2700>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2003490623, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115c0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c0 <Transform_Sha256+2704>:	mov	r3, r0
0x000115c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c4 <Transform_Sha256+2708>:	eor	r5, r5, r3
0x000115c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c8 <Transform_Sha256+2712>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115cc <Transform_Sha256+2716>:	mov	r1, #25
0x000115d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d0 <Transform_Sha256+2720>:	mov	r0, r3
0x000115d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d4 <Transform_Sha256+2724>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2003490623, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115d8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d8 <Transform_Sha256+2728>:	mov	r3, r0
0x000115dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115dc <Transform_Sha256+2732>:	eor	r3, r3, r5
0x000115e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e0 <Transform_Sha256+2736>:	add	r2, r4, r3
0x000115e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e4 <Transform_Sha256+2740>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x000115e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e8 <Transform_Sha256+2744>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000115ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ec <Transform_Sha256+2748>:	ldr	r12, [r11, #-280]	; 0xfffffee8
0x000115f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f0 <Transform_Sha256+2752>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000115f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f4 <Transform_Sha256+2756>:	eor	r3, r3, r12
0x000115f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f8 <Transform_Sha256+2760>:	and	r3, r3, r0
0x000115fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115fc <Transform_Sha256+2764>:	eor	r3, r3, r1
0x00011600	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11600 <Transform_Sha256+2768>:	add	r2, r2, r3
0x00011604	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11604 <Transform_Sha256+2772>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011608	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11608 <Transform_Sha256+2776>:	add	r3, r3, #7
0x0001160c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1160c <Transform_Sha256+2780>:	ldr	r1, [pc, #336]	; 0x11764 <Transform_Sha256+3124>
0x00011610	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11610 <Transform_Sha256+2784>:	ldr	r3, [r1, r3, lsl #2]
0x00011614	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11614 <Transform_Sha256+2788>:	add	r2, r2, r3
0x00011618	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11618 <Transform_Sha256+2792>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001161c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1161c <Transform_Sha256+2796>:	add	r3, r3, #7
0x00011620	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11620 <Transform_Sha256+2800>:	lsl	r3, r3, #2
0x00011624	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11624 <Transform_Sha256+2804>:	sub	r3, r3, #12
0x00011628	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11628 <Transform_Sha256+2808>:	add	r3, r3, r11
0x0001162c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1162c <Transform_Sha256+2812>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011630	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11630 <Transform_Sha256+2816>:	add	r3, r2, r3
0x00011634	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11634 <Transform_Sha256+2820>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011638	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11638 <Transform_Sha256+2824>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001163c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1163c <Transform_Sha256+2828>:	mov	r1, #2
0x00011640	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11640 <Transform_Sha256+2832>:	mov	r0, r3
0x00011644	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11644 <Transform_Sha256+2836>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2003490623, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011648 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11648 <Transform_Sha256+2840>:	mov	r4, r0
0x0001164c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1164c <Transform_Sha256+2844>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011650	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11650 <Transform_Sha256+2848>:	mov	r1, #13
0x00011654	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11654 <Transform_Sha256+2852>:	mov	r0, r3
0x00011658	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11658 <Transform_Sha256+2856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2659444255, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001165c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1165c <Transform_Sha256+2860>:	mov	r3, r0
0x00011660	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11660 <Transform_Sha256+2864>:	eor	r4, r4, r3
0x00011664	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11664 <Transform_Sha256+2868>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011668	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11668 <Transform_Sha256+2872>:	mov	r1, #22
0x0001166c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1166c <Transform_Sha256+2876>:	mov	r0, r3
0x00011670	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11670 <Transform_Sha256+2880>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2659444255, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011674 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11674 <Transform_Sha256+2884>:	mov	r3, r0
0x00011678	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11678 <Transform_Sha256+2888>:	eor	r2, r4, r3
0x0001167c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1167c <Transform_Sha256+2892>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011680	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11680 <Transform_Sha256+2896>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011684	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11684 <Transform_Sha256+2900>:	orr	r1, r1, r3
0x00011688	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11688 <Transform_Sha256+2904>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x0001168c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1168c <Transform_Sha256+2908>:	and	r1, r1, r3
0x00011690	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11690 <Transform_Sha256+2912>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x00011694	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11694 <Transform_Sha256+2916>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011698	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11698 <Transform_Sha256+2920>:	and	r3, r3, r0
0x0001169c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1169c <Transform_Sha256+2924>:	orr	r3, r1, r3
0x000116a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a0 <Transform_Sha256+2928>:	add	r3, r2, r3
0x000116a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a4 <Transform_Sha256+2932>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000116a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a8 <Transform_Sha256+2936>:	ldr	r2, [r11, #-288]	; 0xfffffee0
0x000116ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116ac <Transform_Sha256+2940>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000116b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b0 <Transform_Sha256+2944>:	add	r3, r2, r3
0x000116b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b4 <Transform_Sha256+2948>:	str	r3, [r11, #-288]	; 0xfffffee0
0x000116b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b8 <Transform_Sha256+2952>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000116bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116bc <Transform_Sha256+2956>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000116c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c0 <Transform_Sha256+2960>:	add	r3, r2, r3
0x000116c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c4 <Transform_Sha256+2964>:	str	r3, [r11, #-304]	; 0xfffffed0
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116c8 <Transform_Sha256+2968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116cc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116cc <Transform_Sha256+2972>:	add	r3, r3, #8
0x000116d0	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d0 <Transform_Sha256+2976>:	str	r3, [r11, #-316]	; 0xfffffec4
0x000116d4	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d4 <Transform_Sha256+2980>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116d8	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d8 <Transform_Sha256+2984>:	cmp	r3, #63	; 0x3f
0x000116dc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116dc <Transform_Sha256+2988>:	ble	0x10d50 <Transform_Sha256+544>
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d50 <Transform_Sha256+544>:	ldr	r4, [r11, #-276]	; 0xfffffeec
0x00010d54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d54 <Transform_Sha256+548>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d58 <Transform_Sha256+552>:	mov	r1, #6
0x00010d5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d5c <Transform_Sha256+556>:	mov	r0, r3
0x00010d60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d60 <Transform_Sha256+560>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2659444255, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d64 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d64 <Transform_Sha256+564>:	mov	r5, r0
0x00010d68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d68 <Transform_Sha256+568>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d6c <Transform_Sha256+572>:	mov	r1, #11
0x00010d70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d70 <Transform_Sha256+576>:	mov	r0, r3
0x00010d74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d74 <Transform_Sha256+580>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3316379736, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d78 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d78 <Transform_Sha256+584>:	mov	r3, r0
0x00010d7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d7c <Transform_Sha256+588>:	eor	r5, r5, r3
0x00010d80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d80 <Transform_Sha256+592>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d84 <Transform_Sha256+596>:	mov	r1, #25
0x00010d88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d88 <Transform_Sha256+600>:	mov	r0, r3
0x00010d8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d8c <Transform_Sha256+604>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3316379736, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d90 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d90 <Transform_Sha256+608>:	mov	r3, r0
0x00010d94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d94 <Transform_Sha256+612>:	eor	r3, r3, r5
0x00010d98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d98 <Transform_Sha256+616>:	add	r2, r4, r3
0x00010d9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d9c <Transform_Sha256+620>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00010da0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da0 <Transform_Sha256+624>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00010da4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da4 <Transform_Sha256+628>:	ldr	r12, [r11, #-284]	; 0xfffffee4
0x00010da8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da8 <Transform_Sha256+632>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00010dac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dac <Transform_Sha256+636>:	eor	r3, r3, r12
0x00010db0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db0 <Transform_Sha256+640>:	and	r3, r3, r0
0x00010db4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db4 <Transform_Sha256+644>:	eor	r3, r3, r1
0x00010db8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db8 <Transform_Sha256+648>:	add	r2, r2, r3
0x00010dbc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dbc <Transform_Sha256+652>:	ldr	r1, [pc, #2464]	; 0x11764 <Transform_Sha256+3124>
0x00010dc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc0 <Transform_Sha256+656>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc4 <Transform_Sha256+660>:	ldr	r3, [r1, r3, lsl #2]
0x00010dc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc8 <Transform_Sha256+664>:	add	r2, r2, r3
0x00010dcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dcc <Transform_Sha256+668>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dd0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd0 <Transform_Sha256+672>:	lsl	r3, r3, #2
0x00010dd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd4 <Transform_Sha256+676>:	sub	r3, r3, #12
0x00010dd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd8 <Transform_Sha256+680>:	add	r3, r3, r11
0x00010ddc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ddc <Transform_Sha256+684>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010de0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de0 <Transform_Sha256+688>:	add	r3, r2, r3
0x00010de4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de4 <Transform_Sha256+692>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010de8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de8 <Transform_Sha256+696>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010dec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dec <Transform_Sha256+700>:	mov	r1, #2
0x00010df0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df0 <Transform_Sha256+704>:	mov	r0, r3
0x00010df4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df4 <Transform_Sha256+708>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3316379736, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010df8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df8 <Transform_Sha256+712>:	mov	r4, r0
0x00010dfc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dfc <Transform_Sha256+716>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e00 <Transform_Sha256+720>:	mov	r1, #13
0x00010e04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e04 <Transform_Sha256+724>:	mov	r0, r3
0x00010e08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e08 <Transform_Sha256+728>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2270000410, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e0c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e0c <Transform_Sha256+732>:	mov	r3, r0
0x00010e10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e10 <Transform_Sha256+736>:	eor	r4, r4, r3
0x00010e14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e14 <Transform_Sha256+740>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e18 <Transform_Sha256+744>:	mov	r1, #22
0x00010e1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e1c <Transform_Sha256+748>:	mov	r0, r3
0x00010e20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e20 <Transform_Sha256+752>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2270000410, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e24 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e24 <Transform_Sha256+756>:	mov	r3, r0
0x00010e28	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e28 <Transform_Sha256+760>:	eor	r2, r4, r3
0x00010e2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e2c <Transform_Sha256+764>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x00010e30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e30 <Transform_Sha256+768>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e34 <Transform_Sha256+772>:	orr	r1, r1, r3
0x00010e38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e38 <Transform_Sha256+776>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010e3c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e3c <Transform_Sha256+780>:	and	r1, r1, r3
0x00010e40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e40 <Transform_Sha256+784>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x00010e44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e44 <Transform_Sha256+788>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e48 <Transform_Sha256+792>:	and	r3, r3, r0
0x00010e4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e4c <Transform_Sha256+796>:	orr	r3, r1, r3
0x00010e50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e50 <Transform_Sha256+800>:	add	r3, r2, r3
0x00010e54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e54 <Transform_Sha256+804>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010e58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e58 <Transform_Sha256+808>:	ldr	r2, [r11, #-292]	; 0xfffffedc
0x00010e5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e5c <Transform_Sha256+812>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010e60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e60 <Transform_Sha256+816>:	add	r3, r2, r3
0x00010e64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e64 <Transform_Sha256+820>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00010e68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e68 <Transform_Sha256+824>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010e6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e6c <Transform_Sha256+828>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010e70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e70 <Transform_Sha256+832>:	add	r3, r2, r3
0x00010e74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e74 <Transform_Sha256+836>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00010e78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e78 <Transform_Sha256+840>:	ldr	r4, [r11, #-280]	; 0xfffffee8
0x00010e7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e7c <Transform_Sha256+844>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e80 <Transform_Sha256+848>:	mov	r1, #6
0x00010e84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e84 <Transform_Sha256+852>:	mov	r0, r3
0x00010e88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e88 <Transform_Sha256+856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2270000410, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e8c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e8c <Transform_Sha256+860>:	mov	r5, r0
0x00010e90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e90 <Transform_Sha256+864>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e94 <Transform_Sha256+868>:	mov	r1, #11
0x00010e98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e98 <Transform_Sha256+872>:	mov	r0, r3
0x00010e9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e9c <Transform_Sha256+876>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4084454668, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ea0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea0 <Transform_Sha256+880>:	mov	r3, r0
0x00010ea4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea4 <Transform_Sha256+884>:	eor	r5, r5, r3
0x00010ea8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea8 <Transform_Sha256+888>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010eac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eac <Transform_Sha256+892>:	mov	r1, #25
0x00010eb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb0 <Transform_Sha256+896>:	mov	r0, r3
0x00010eb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb4 <Transform_Sha256+900>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4084454668, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010eb8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb8 <Transform_Sha256+904>:	mov	r3, r0
0x00010ebc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ebc <Transform_Sha256+908>:	eor	r3, r3, r5
0x00010ec0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec0 <Transform_Sha256+912>:	add	r2, r4, r3
0x00010ec4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec4 <Transform_Sha256+916>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x00010ec8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec8 <Transform_Sha256+920>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00010ecc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ecc <Transform_Sha256+924>:	ldr	r12, [r11, #-288]	; 0xfffffee0
0x00010ed0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed0 <Transform_Sha256+928>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00010ed4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed4 <Transform_Sha256+932>:	eor	r3, r3, r12
0x00010ed8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed8 <Transform_Sha256+936>:	and	r3, r3, r0
0x00010edc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10edc <Transform_Sha256+940>:	eor	r3, r3, r1
0x00010ee0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee0 <Transform_Sha256+944>:	add	r2, r2, r3
0x00010ee4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee4 <Transform_Sha256+948>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ee8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee8 <Transform_Sha256+952>:	add	r3, r3, #1
0x00010eec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eec <Transform_Sha256+956>:	ldr	r1, [pc, #2160]	; 0x11764 <Transform_Sha256+3124>
0x00010ef0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef0 <Transform_Sha256+960>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef4 <Transform_Sha256+964>:	add	r2, r2, r3
0x00010ef8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef8 <Transform_Sha256+968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010efc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10efc <Transform_Sha256+972>:	add	r3, r3, #1
0x00010f00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f00 <Transform_Sha256+976>:	lsl	r3, r3, #2
0x00010f04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f04 <Transform_Sha256+980>:	sub	r3, r3, #12
0x00010f08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f08 <Transform_Sha256+984>:	add	r3, r3, r11
0x00010f0c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f0c <Transform_Sha256+988>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010f10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f10 <Transform_Sha256+992>:	add	r3, r2, r3
0x00010f14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f14 <Transform_Sha256+996>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010f18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f18 <Transform_Sha256+1000>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f1c <Transform_Sha256+1004>:	mov	r1, #2
0x00010f20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f20 <Transform_Sha256+1008>:	mov	r0, r3
0x00010f24	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f24 <Transform_Sha256+1012>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4084454668, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f28 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f28 <Transform_Sha256+1016>:	mov	r4, r0
0x00010f2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f2c <Transform_Sha256+1020>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f30 <Transform_Sha256+1024>:	mov	r1, #13
0x00010f34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f34 <Transform_Sha256+1028>:	mov	r0, r3
0x00010f38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f38 <Transform_Sha256+1032>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1779838700, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f3c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f3c <Transform_Sha256+1036>:	mov	r3, r0
0x00010f40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f40 <Transform_Sha256+1040>:	eor	r4, r4, r3
0x00010f44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f44 <Transform_Sha256+1044>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f48 <Transform_Sha256+1048>:	mov	r1, #22
0x00010f4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f4c <Transform_Sha256+1052>:	mov	r0, r3
0x00010f50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f50 <Transform_Sha256+1056>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1779838700, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f54 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f54 <Transform_Sha256+1060>:	mov	r3, r0
0x00010f58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f58 <Transform_Sha256+1064>:	eor	r2, r4, r3
0x00010f5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f5c <Transform_Sha256+1068>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x00010f60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f60 <Transform_Sha256+1072>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f64 <Transform_Sha256+1076>:	orr	r1, r1, r3
0x00010f68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f68 <Transform_Sha256+1080>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010f6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f6c <Transform_Sha256+1084>:	and	r1, r1, r3
0x00010f70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f70 <Transform_Sha256+1088>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x00010f74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f74 <Transform_Sha256+1092>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f78 <Transform_Sha256+1096>:	and	r3, r3, r0
0x00010f7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f7c <Transform_Sha256+1100>:	orr	r3, r1, r3
0x00010f80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f80 <Transform_Sha256+1104>:	add	r3, r2, r3
0x00010f84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f84 <Transform_Sha256+1108>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010f88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f88 <Transform_Sha256+1112>:	ldr	r2, [r11, #-296]	; 0xfffffed8
0x00010f8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f8c <Transform_Sha256+1116>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010f90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f90 <Transform_Sha256+1120>:	add	r3, r2, r3
0x00010f94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f94 <Transform_Sha256+1124>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00010f98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f98 <Transform_Sha256+1128>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010f9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f9c <Transform_Sha256+1132>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010fa0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa0 <Transform_Sha256+1136>:	add	r3, r2, r3
0x00010fa4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa4 <Transform_Sha256+1140>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00010fa8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa8 <Transform_Sha256+1144>:	ldr	r4, [r11, #-284]	; 0xfffffee4
0x00010fac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fac <Transform_Sha256+1148>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb0 <Transform_Sha256+1152>:	mov	r1, #6
0x00010fb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb4 <Transform_Sha256+1156>:	mov	r0, r3
0x00010fb8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb8 <Transform_Sha256+1160>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1779838700, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fbc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fbc <Transform_Sha256+1164>:	mov	r5, r0
0x00010fc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc0 <Transform_Sha256+1168>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc4 <Transform_Sha256+1172>:	mov	r1, #11
0x00010fc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc8 <Transform_Sha256+1176>:	mov	r0, r3
0x00010fcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fcc <Transform_Sha256+1180>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4085746331, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd0 <Transform_Sha256+1184>:	mov	r3, r0
0x00010fd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd4 <Transform_Sha256+1188>:	eor	r5, r5, r3
0x00010fd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd8 <Transform_Sha256+1192>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fdc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fdc <Transform_Sha256+1196>:	mov	r1, #25
0x00010fe0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe0 <Transform_Sha256+1200>:	mov	r0, r3
0x00010fe4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe4 <Transform_Sha256+1204>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4085746331, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fe8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe8 <Transform_Sha256+1208>:	mov	r3, r0
0x00010fec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fec <Transform_Sha256+1212>:	eor	r3, r3, r5
0x00010ff0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff0 <Transform_Sha256+1216>:	add	r2, r4, r3
0x00010ff4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff4 <Transform_Sha256+1220>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x00010ff8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff8 <Transform_Sha256+1224>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00010ffc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ffc <Transform_Sha256+1228>:	ldr	r12, [r11, #-292]	; 0xfffffedc
0x00011000	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11000 <Transform_Sha256+1232>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011004	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11004 <Transform_Sha256+1236>:	eor	r3, r3, r12
0x00011008	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11008 <Transform_Sha256+1240>:	and	r3, r3, r0
0x0001100c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1100c <Transform_Sha256+1244>:	eor	r3, r3, r1
0x00011010	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11010 <Transform_Sha256+1248>:	add	r2, r2, r3
0x00011014	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11014 <Transform_Sha256+1252>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011018	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11018 <Transform_Sha256+1256>:	add	r3, r3, #2
0x0001101c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1101c <Transform_Sha256+1260>:	ldr	r1, [pc, #1856]	; 0x11764 <Transform_Sha256+3124>
0x00011020	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11020 <Transform_Sha256+1264>:	ldr	r3, [r1, r3, lsl #2]
0x00011024	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11024 <Transform_Sha256+1268>:	add	r2, r2, r3
0x00011028	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11028 <Transform_Sha256+1272>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001102c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1102c <Transform_Sha256+1276>:	add	r3, r3, #2
0x00011030	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11030 <Transform_Sha256+1280>:	lsl	r3, r3, #2
0x00011034	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11034 <Transform_Sha256+1284>:	sub	r3, r3, #12
0x00011038	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11038 <Transform_Sha256+1288>:	add	r3, r3, r11
0x0001103c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1103c <Transform_Sha256+1292>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011040	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11040 <Transform_Sha256+1296>:	add	r3, r2, r3
0x00011044	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11044 <Transform_Sha256+1300>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011048	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11048 <Transform_Sha256+1304>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001104c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1104c <Transform_Sha256+1308>:	mov	r1, #2
0x00011050	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11050 <Transform_Sha256+1312>:	mov	r0, r3
0x00011054	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11054 <Transform_Sha256+1316>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4085746331, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011058 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11058 <Transform_Sha256+1320>:	mov	r4, r0
0x0001105c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1105c <Transform_Sha256+1324>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011060	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11060 <Transform_Sha256+1328>:	mov	r1, #13
0x00011064	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11064 <Transform_Sha256+1332>:	mov	r0, r3
0x00011068	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11068 <Transform_Sha256+1336>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1199537658, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001106c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1106c <Transform_Sha256+1340>:	mov	r3, r0
0x00011070	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11070 <Transform_Sha256+1344>:	eor	r4, r4, r3
0x00011074	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11074 <Transform_Sha256+1348>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011078	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11078 <Transform_Sha256+1352>:	mov	r1, #22
0x0001107c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1107c <Transform_Sha256+1356>:	mov	r0, r3
0x00011080	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11080 <Transform_Sha256+1360>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1199537658, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011084 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11084 <Transform_Sha256+1364>:	mov	r3, r0
0x00011088	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11088 <Transform_Sha256+1368>:	eor	r2, r4, r3
0x0001108c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1108c <Transform_Sha256+1372>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00011090	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11090 <Transform_Sha256+1376>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011094	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11094 <Transform_Sha256+1380>:	orr	r1, r1, r3
0x00011098	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11098 <Transform_Sha256+1384>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001109c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1109c <Transform_Sha256+1388>:	and	r1, r1, r3
0x000110a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a0 <Transform_Sha256+1392>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000110a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a4 <Transform_Sha256+1396>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000110a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a8 <Transform_Sha256+1400>:	and	r3, r3, r0
0x000110ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ac <Transform_Sha256+1404>:	orr	r3, r1, r3
0x000110b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b0 <Transform_Sha256+1408>:	add	r3, r2, r3
0x000110b4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b4 <Transform_Sha256+1412>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000110b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b8 <Transform_Sha256+1416>:	ldr	r2, [r11, #-300]	; 0xfffffed4
0x000110bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110bc <Transform_Sha256+1420>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000110c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c0 <Transform_Sha256+1424>:	add	r3, r2, r3
0x000110c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c4 <Transform_Sha256+1428>:	str	r3, [r11, #-300]	; 0xfffffed4
0x000110c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c8 <Transform_Sha256+1432>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000110cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110cc <Transform_Sha256+1436>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000110d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d0 <Transform_Sha256+1440>:	add	r3, r2, r3
0x000110d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d4 <Transform_Sha256+1444>:	str	r3, [r11, #-284]	; 0xfffffee4
0x000110d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d8 <Transform_Sha256+1448>:	ldr	r4, [r11, #-288]	; 0xfffffee0
0x000110dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110dc <Transform_Sha256+1452>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e0 <Transform_Sha256+1456>:	mov	r1, #6
0x000110e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e4 <Transform_Sha256+1460>:	mov	r0, r3
0x000110e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e8 <Transform_Sha256+1464>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1199537658, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000110ec in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ec <Transform_Sha256+1468>:	mov	r5, r0
0x000110f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f0 <Transform_Sha256+1472>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f4 <Transform_Sha256+1476>:	mov	r1, #11
0x000110f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f8 <Transform_Sha256+1480>:	mov	r0, r3
0x000110fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110fc <Transform_Sha256+1484>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3274962923, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011100 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11100 <Transform_Sha256+1488>:	mov	r3, r0
0x00011104	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11104 <Transform_Sha256+1492>:	eor	r5, r5, r3
0x00011108	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11108 <Transform_Sha256+1496>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001110c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1110c <Transform_Sha256+1500>:	mov	r1, #25
0x00011110	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11110 <Transform_Sha256+1504>:	mov	r0, r3
0x00011114	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11114 <Transform_Sha256+1508>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3274962923, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011118 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11118 <Transform_Sha256+1512>:	mov	r3, r0
0x0001111c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1111c <Transform_Sha256+1516>:	eor	r3, r3, r5
0x00011120	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11120 <Transform_Sha256+1520>:	add	r2, r4, r3
0x00011124	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11124 <Transform_Sha256+1524>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011128	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11128 <Transform_Sha256+1528>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x0001112c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1112c <Transform_Sha256+1532>:	ldr	r12, [r11, #-296]	; 0xfffffed8
0x00011130	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11130 <Transform_Sha256+1536>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011134	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11134 <Transform_Sha256+1540>:	eor	r3, r3, r12
0x00011138	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11138 <Transform_Sha256+1544>:	and	r3, r3, r0
0x0001113c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1113c <Transform_Sha256+1548>:	eor	r3, r3, r1
0x00011140	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11140 <Transform_Sha256+1552>:	add	r2, r2, r3
0x00011144	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11144 <Transform_Sha256+1556>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011148	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11148 <Transform_Sha256+1560>:	add	r3, r3, #3
0x0001114c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1114c <Transform_Sha256+1564>:	ldr	r1, [pc, #1552]	; 0x11764 <Transform_Sha256+3124>
0x00011150	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11150 <Transform_Sha256+1568>:	ldr	r3, [r1, r3, lsl #2]
0x00011154	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11154 <Transform_Sha256+1572>:	add	r2, r2, r3
0x00011158	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11158 <Transform_Sha256+1576>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001115c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1115c <Transform_Sha256+1580>:	add	r3, r3, #3
0x00011160	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11160 <Transform_Sha256+1584>:	lsl	r3, r3, #2
0x00011164	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11164 <Transform_Sha256+1588>:	sub	r3, r3, #12
0x00011168	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11168 <Transform_Sha256+1592>:	add	r3, r3, r11
0x0001116c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1116c <Transform_Sha256+1596>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011170	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11170 <Transform_Sha256+1600>:	add	r3, r2, r3
0x00011174	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11174 <Transform_Sha256+1604>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011178	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11178 <Transform_Sha256+1608>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001117c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1117c <Transform_Sha256+1612>:	mov	r1, #2
0x00011180	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11180 <Transform_Sha256+1616>:	mov	r0, r3
0x00011184	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11184 <Transform_Sha256+1620>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3274962923, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011188 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11188 <Transform_Sha256+1624>:	mov	r4, r0
0x0001118c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1118c <Transform_Sha256+1628>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011190	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11190 <Transform_Sha256+1632>:	mov	r1, #13
0x00011194	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11194 <Transform_Sha256+1636>:	mov	r0, r3
0x00011198	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11198 <Transform_Sha256+1640>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4027161950, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001119c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1119c <Transform_Sha256+1644>:	mov	r3, r0
0x000111a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a0 <Transform_Sha256+1648>:	eor	r4, r4, r3
0x000111a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a4 <Transform_Sha256+1652>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000111a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a8 <Transform_Sha256+1656>:	mov	r1, #22
0x000111ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ac <Transform_Sha256+1660>:	mov	r0, r3
0x000111b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b0 <Transform_Sha256+1664>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4027161950, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000111b4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b4 <Transform_Sha256+1668>:	mov	r3, r0
0x000111b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b8 <Transform_Sha256+1672>:	eor	r2, r4, r3
0x000111bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111bc <Transform_Sha256+1676>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x000111c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c0 <Transform_Sha256+1680>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c4 <Transform_Sha256+1684>:	orr	r1, r1, r3
0x000111c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c8 <Transform_Sha256+1688>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000111cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111cc <Transform_Sha256+1692>:	and	r1, r1, r3
0x000111d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d0 <Transform_Sha256+1696>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000111d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d4 <Transform_Sha256+1700>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d8 <Transform_Sha256+1704>:	and	r3, r3, r0
0x000111dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111dc <Transform_Sha256+1708>:	orr	r3, r1, r3
0x000111e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e0 <Transform_Sha256+1712>:	add	r3, r2, r3
0x000111e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e4 <Transform_Sha256+1716>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000111e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e8 <Transform_Sha256+1720>:	ldr	r2, [r11, #-304]	; 0xfffffed0
0x000111ec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ec <Transform_Sha256+1724>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000111f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f0 <Transform_Sha256+1728>:	add	r3, r2, r3
0x000111f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f4 <Transform_Sha256+1732>:	str	r3, [r11, #-304]	; 0xfffffed0
0x000111f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f8 <Transform_Sha256+1736>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000111fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111fc <Transform_Sha256+1740>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011200	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11200 <Transform_Sha256+1744>:	add	r3, r2, r3
0x00011204	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11204 <Transform_Sha256+1748>:	str	r3, [r11, #-288]	; 0xfffffee0
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11208 <Transform_Sha256+1752>:	ldr	r4, [r11, #-292]	; 0xfffffedc
0x0001120c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1120c <Transform_Sha256+1756>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011210	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11210 <Transform_Sha256+1760>:	mov	r1, #6
0x00011214	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11214 <Transform_Sha256+1764>:	mov	r0, r3
0x00011218	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11218 <Transform_Sha256+1768>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4027161950, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001121c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1121c <Transform_Sha256+1772>:	mov	r5, r0
0x00011220	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11220 <Transform_Sha256+1776>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011224	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11224 <Transform_Sha256+1780>:	mov	r1, #11
0x00011228	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11228 <Transform_Sha256+1784>:	mov	r0, r3
0x0001122c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1122c <Transform_Sha256+1788>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1955150241, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011230 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11230 <Transform_Sha256+1792>:	mov	r3, r0
0x00011234	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11234 <Transform_Sha256+1796>:	eor	r5, r5, r3
0x00011238	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11238 <Transform_Sha256+1800>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001123c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1123c <Transform_Sha256+1804>:	mov	r1, #25
0x00011240	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11240 <Transform_Sha256+1808>:	mov	r0, r3
0x00011244	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11244 <Transform_Sha256+1812>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1955150241, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011248 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11248 <Transform_Sha256+1816>:	mov	r3, r0
0x0001124c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1124c <Transform_Sha256+1820>:	eor	r3, r3, r5
0x00011250	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11250 <Transform_Sha256+1824>:	add	r2, r4, r3
0x00011254	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11254 <Transform_Sha256+1828>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011258	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11258 <Transform_Sha256+1832>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x0001125c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1125c <Transform_Sha256+1836>:	ldr	r12, [r11, #-300]	; 0xfffffed4
0x00011260	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11260 <Transform_Sha256+1840>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011264	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11264 <Transform_Sha256+1844>:	eor	r3, r3, r12
0x00011268	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11268 <Transform_Sha256+1848>:	and	r3, r3, r0
0x0001126c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1126c <Transform_Sha256+1852>:	eor	r3, r3, r1
0x00011270	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11270 <Transform_Sha256+1856>:	add	r2, r2, r3
0x00011274	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11274 <Transform_Sha256+1860>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011278	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11278 <Transform_Sha256+1864>:	add	r3, r3, #4
0x0001127c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1127c <Transform_Sha256+1868>:	ldr	r1, [pc, #1248]	; 0x11764 <Transform_Sha256+3124>
0x00011280	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11280 <Transform_Sha256+1872>:	ldr	r3, [r1, r3, lsl #2]
0x00011284	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11284 <Transform_Sha256+1876>:	add	r2, r2, r3
0x00011288	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11288 <Transform_Sha256+1880>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001128c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1128c <Transform_Sha256+1884>:	add	r3, r3, #4
0x00011290	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11290 <Transform_Sha256+1888>:	lsl	r3, r3, #2
0x00011294	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11294 <Transform_Sha256+1892>:	sub	r3, r3, #12
0x00011298	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11298 <Transform_Sha256+1896>:	add	r3, r3, r11
0x0001129c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1129c <Transform_Sha256+1900>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000112a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a0 <Transform_Sha256+1904>:	add	r3, r2, r3
0x000112a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a4 <Transform_Sha256+1908>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000112a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a8 <Transform_Sha256+1912>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ac <Transform_Sha256+1916>:	mov	r1, #2
0x000112b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b0 <Transform_Sha256+1920>:	mov	r0, r3
0x000112b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b4 <Transform_Sha256+1924>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1955150241, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112b8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b8 <Transform_Sha256+1928>:	mov	r4, r0
0x000112bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112bc <Transform_Sha256+1932>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c0 <Transform_Sha256+1936>:	mov	r1, #13
0x000112c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c4 <Transform_Sha256+1940>:	mov	r0, r3
0x000112c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c8 <Transform_Sha256+1944>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3218841440, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112cc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112cc <Transform_Sha256+1948>:	mov	r3, r0
0x000112d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d0 <Transform_Sha256+1952>:	eor	r4, r4, r3
0x000112d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d4 <Transform_Sha256+1956>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d8 <Transform_Sha256+1960>:	mov	r1, #22
0x000112dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112dc <Transform_Sha256+1964>:	mov	r0, r3
0x000112e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e0 <Transform_Sha256+1968>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3218841440, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112e4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e4 <Transform_Sha256+1972>:	mov	r3, r0
0x000112e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e8 <Transform_Sha256+1976>:	eor	r2, r4, r3
0x000112ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ec <Transform_Sha256+1980>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x000112f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f0 <Transform_Sha256+1984>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000112f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f4 <Transform_Sha256+1988>:	orr	r1, r1, r3
0x000112f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f8 <Transform_Sha256+1992>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000112fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112fc <Transform_Sha256+1996>:	and	r1, r1, r3
0x00011300	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11300 <Transform_Sha256+2000>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00011304	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11304 <Transform_Sha256+2004>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011308	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11308 <Transform_Sha256+2008>:	and	r3, r3, r0
0x0001130c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1130c <Transform_Sha256+2012>:	orr	r3, r1, r3
0x00011310	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11310 <Transform_Sha256+2016>:	add	r3, r2, r3
0x00011314	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11314 <Transform_Sha256+2020>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011318	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11318 <Transform_Sha256+2024>:	ldr	r2, [r11, #-276]	; 0xfffffeec
0x0001131c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1131c <Transform_Sha256+2028>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011320	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11320 <Transform_Sha256+2032>:	add	r3, r2, r3
0x00011324	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11324 <Transform_Sha256+2036>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00011328	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11328 <Transform_Sha256+2040>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001132c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1132c <Transform_Sha256+2044>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011330	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11330 <Transform_Sha256+2048>:	add	r3, r2, r3
0x00011334	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11334 <Transform_Sha256+2052>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00011338	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11338 <Transform_Sha256+2056>:	ldr	r4, [r11, #-296]	; 0xfffffed8
0x0001133c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1133c <Transform_Sha256+2060>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011340	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11340 <Transform_Sha256+2064>:	mov	r1, #6
0x00011344	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11344 <Transform_Sha256+2068>:	mov	r0, r3
0x00011348	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11348 <Transform_Sha256+2072>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3218841440, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001134c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1134c <Transform_Sha256+2076>:	mov	r5, r0
0x00011350	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11350 <Transform_Sha256+2080>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011354	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11354 <Transform_Sha256+2084>:	mov	r1, #11
0x00011358	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11358 <Transform_Sha256+2088>:	mov	r0, r3
0x0001135c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1135c <Transform_Sha256+2092>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2009639938, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011360 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11360 <Transform_Sha256+2096>:	mov	r3, r0
0x00011364	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11364 <Transform_Sha256+2100>:	eor	r5, r5, r3
0x00011368	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11368 <Transform_Sha256+2104>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x0001136c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1136c <Transform_Sha256+2108>:	mov	r1, #25
0x00011370	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11370 <Transform_Sha256+2112>:	mov	r0, r3
0x00011374	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11374 <Transform_Sha256+2116>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2009639938, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011378 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11378 <Transform_Sha256+2120>:	mov	r3, r0
0x0001137c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1137c <Transform_Sha256+2124>:	eor	r3, r3, r5
0x00011380	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11380 <Transform_Sha256+2128>:	add	r2, r4, r3
0x00011384	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11384 <Transform_Sha256+2132>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011388	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11388 <Transform_Sha256+2136>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x0001138c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1138c <Transform_Sha256+2140>:	ldr	r12, [r11, #-304]	; 0xfffffed0
0x00011390	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11390 <Transform_Sha256+2144>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011394	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11394 <Transform_Sha256+2148>:	eor	r3, r3, r12
0x00011398	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11398 <Transform_Sha256+2152>:	and	r3, r3, r0
0x0001139c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1139c <Transform_Sha256+2156>:	eor	r3, r3, r1
0x000113a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a0 <Transform_Sha256+2160>:	add	r2, r2, r3
0x000113a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a4 <Transform_Sha256+2164>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a8 <Transform_Sha256+2168>:	add	r3, r3, #5
0x000113ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ac <Transform_Sha256+2172>:	ldr	r1, [pc, #944]	; 0x11764 <Transform_Sha256+3124>
0x000113b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b0 <Transform_Sha256+2176>:	ldr	r3, [r1, r3, lsl #2]
0x000113b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b4 <Transform_Sha256+2180>:	add	r2, r2, r3
0x000113b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b8 <Transform_Sha256+2184>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113bc <Transform_Sha256+2188>:	add	r3, r3, #5
0x000113c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c0 <Transform_Sha256+2192>:	lsl	r3, r3, #2
0x000113c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c4 <Transform_Sha256+2196>:	sub	r3, r3, #12
0x000113c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c8 <Transform_Sha256+2200>:	add	r3, r3, r11
0x000113cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113cc <Transform_Sha256+2204>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000113d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d0 <Transform_Sha256+2208>:	add	r3, r2, r3
0x000113d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d4 <Transform_Sha256+2212>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000113d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d8 <Transform_Sha256+2216>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113dc <Transform_Sha256+2220>:	mov	r1, #2
0x000113e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e0 <Transform_Sha256+2224>:	mov	r0, r3
0x000113e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e4 <Transform_Sha256+2228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2009639938, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113e8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e8 <Transform_Sha256+2232>:	mov	r4, r0
0x000113ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ec <Transform_Sha256+2236>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f0 <Transform_Sha256+2240>:	mov	r1, #13
0x000113f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f4 <Transform_Sha256+2244>:	mov	r0, r3
0x000113f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f8 <Transform_Sha256+2248>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3214718603, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113fc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113fc <Transform_Sha256+2252>:	mov	r3, r0
0x00011400	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11400 <Transform_Sha256+2256>:	eor	r4, r4, r3
0x00011404	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11404 <Transform_Sha256+2260>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011408	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11408 <Transform_Sha256+2264>:	mov	r1, #22
0x0001140c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1140c <Transform_Sha256+2268>:	mov	r0, r3
0x00011410	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11410 <Transform_Sha256+2272>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3214718603, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011414 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11414 <Transform_Sha256+2276>:	mov	r3, r0
0x00011418	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11418 <Transform_Sha256+2280>:	eor	r2, r4, r3
0x0001141c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1141c <Transform_Sha256+2284>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011420	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11420 <Transform_Sha256+2288>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011424	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11424 <Transform_Sha256+2292>:	orr	r1, r1, r3
0x00011428	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11428 <Transform_Sha256+2296>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001142c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1142c <Transform_Sha256+2300>:	and	r1, r1, r3
0x00011430	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11430 <Transform_Sha256+2304>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00011434	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11434 <Transform_Sha256+2308>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011438	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11438 <Transform_Sha256+2312>:	and	r3, r3, r0
0x0001143c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1143c <Transform_Sha256+2316>:	orr	r3, r1, r3
0x00011440	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11440 <Transform_Sha256+2320>:	add	r3, r2, r3
0x00011444	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11444 <Transform_Sha256+2324>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011448	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11448 <Transform_Sha256+2328>:	ldr	r2, [r11, #-280]	; 0xfffffee8
0x0001144c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1144c <Transform_Sha256+2332>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011450	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11450 <Transform_Sha256+2336>:	add	r3, r2, r3
0x00011454	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11454 <Transform_Sha256+2340>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00011458	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11458 <Transform_Sha256+2344>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001145c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1145c <Transform_Sha256+2348>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011460	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11460 <Transform_Sha256+2352>:	add	r3, r2, r3
0x00011464	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11464 <Transform_Sha256+2356>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00011468	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11468 <Transform_Sha256+2360>:	ldr	r4, [r11, #-300]	; 0xfffffed4
0x0001146c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1146c <Transform_Sha256+2364>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011470	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11470 <Transform_Sha256+2368>:	mov	r1, #6
0x00011474	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11474 <Transform_Sha256+2372>:	mov	r0, r3
0x00011478	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11478 <Transform_Sha256+2376>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3214718603, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001147c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1147c <Transform_Sha256+2380>:	mov	r5, r0
0x00011480	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11480 <Transform_Sha256+2384>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011484	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11484 <Transform_Sha256+2388>:	mov	r1, #11
0x00011488	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11488 <Transform_Sha256+2392>:	mov	r0, r3
0x0001148c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1148c <Transform_Sha256+2396>:	bl	0x10760 <rotrFixed>
rotrFixed (x=617988106, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011490 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11490 <Transform_Sha256+2400>:	mov	r3, r0
0x00011494	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11494 <Transform_Sha256+2404>:	eor	r5, r5, r3
0x00011498	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11498 <Transform_Sha256+2408>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001149c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1149c <Transform_Sha256+2412>:	mov	r1, #25
0x000114a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a0 <Transform_Sha256+2416>:	mov	r0, r3
0x000114a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a4 <Transform_Sha256+2420>:	bl	0x10760 <rotrFixed>
rotrFixed (x=617988106, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000114a8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a8 <Transform_Sha256+2424>:	mov	r3, r0
0x000114ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ac <Transform_Sha256+2428>:	eor	r3, r3, r5
0x000114b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b0 <Transform_Sha256+2432>:	add	r2, r4, r3
0x000114b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b4 <Transform_Sha256+2436>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x000114b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b8 <Transform_Sha256+2440>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000114bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114bc <Transform_Sha256+2444>:	ldr	r12, [r11, #-276]	; 0xfffffeec
0x000114c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c0 <Transform_Sha256+2448>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x000114c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c4 <Transform_Sha256+2452>:	eor	r3, r3, r12
0x000114c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c8 <Transform_Sha256+2456>:	and	r3, r3, r0
0x000114cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114cc <Transform_Sha256+2460>:	eor	r3, r3, r1
0x000114d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d0 <Transform_Sha256+2464>:	add	r2, r2, r3
0x000114d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d4 <Transform_Sha256+2468>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d8 <Transform_Sha256+2472>:	add	r3, r3, #6
0x000114dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114dc <Transform_Sha256+2476>:	ldr	r1, [pc, #640]	; 0x11764 <Transform_Sha256+3124>
0x000114e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e0 <Transform_Sha256+2480>:	ldr	r3, [r1, r3, lsl #2]
0x000114e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e4 <Transform_Sha256+2484>:	add	r2, r2, r3
0x000114e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e8 <Transform_Sha256+2488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ec <Transform_Sha256+2492>:	add	r3, r3, #6
0x000114f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f0 <Transform_Sha256+2496>:	lsl	r3, r3, #2
0x000114f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f4 <Transform_Sha256+2500>:	sub	r3, r3, #12
0x000114f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f8 <Transform_Sha256+2504>:	add	r3, r3, r11
0x000114fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114fc <Transform_Sha256+2508>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011500	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11500 <Transform_Sha256+2512>:	add	r3, r2, r3
0x00011504	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11504 <Transform_Sha256+2516>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011508	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11508 <Transform_Sha256+2520>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x0001150c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1150c <Transform_Sha256+2524>:	mov	r1, #2
0x00011510	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11510 <Transform_Sha256+2528>:	mov	r0, r3
0x00011514	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11514 <Transform_Sha256+2532>:	bl	0x10760 <rotrFixed>
rotrFixed (x=617988106, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011518 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11518 <Transform_Sha256+2536>:	mov	r4, r0
0x0001151c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1151c <Transform_Sha256+2540>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011520	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11520 <Transform_Sha256+2544>:	mov	r1, #13
0x00011524	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11524 <Transform_Sha256+2548>:	mov	r0, r3
0x00011528	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11528 <Transform_Sha256+2552>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3327189267, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001152c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1152c <Transform_Sha256+2556>:	mov	r3, r0
0x00011530	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11530 <Transform_Sha256+2560>:	eor	r4, r4, r3
0x00011534	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11534 <Transform_Sha256+2564>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011538	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11538 <Transform_Sha256+2568>:	mov	r1, #22
0x0001153c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1153c <Transform_Sha256+2572>:	mov	r0, r3
0x00011540	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11540 <Transform_Sha256+2576>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3327189267, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011544 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11544 <Transform_Sha256+2580>:	mov	r3, r0
0x00011548	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11548 <Transform_Sha256+2584>:	eor	r2, r4, r3
0x0001154c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1154c <Transform_Sha256+2588>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011550	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11550 <Transform_Sha256+2592>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011554	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11554 <Transform_Sha256+2596>:	orr	r1, r1, r3
0x00011558	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11558 <Transform_Sha256+2600>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x0001155c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1155c <Transform_Sha256+2604>:	and	r1, r1, r3
0x00011560	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11560 <Transform_Sha256+2608>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00011564	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11564 <Transform_Sha256+2612>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011568	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11568 <Transform_Sha256+2616>:	and	r3, r3, r0
0x0001156c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1156c <Transform_Sha256+2620>:	orr	r3, r1, r3
0x00011570	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11570 <Transform_Sha256+2624>:	add	r3, r2, r3
0x00011574	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11574 <Transform_Sha256+2628>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011578	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11578 <Transform_Sha256+2632>:	ldr	r2, [r11, #-284]	; 0xfffffee4
0x0001157c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1157c <Transform_Sha256+2636>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011580	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11580 <Transform_Sha256+2640>:	add	r3, r2, r3
0x00011584	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11584 <Transform_Sha256+2644>:	str	r3, [r11, #-284]	; 0xfffffee4
0x00011588	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11588 <Transform_Sha256+2648>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001158c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1158c <Transform_Sha256+2652>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011590	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11590 <Transform_Sha256+2656>:	add	r3, r2, r3
0x00011594	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11594 <Transform_Sha256+2660>:	str	r3, [r11, #-300]	; 0xfffffed4
0x00011598	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11598 <Transform_Sha256+2664>:	ldr	r4, [r11, #-304]	; 0xfffffed0
0x0001159c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1159c <Transform_Sha256+2668>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a0 <Transform_Sha256+2672>:	mov	r1, #6
0x000115a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a4 <Transform_Sha256+2676>:	mov	r0, r3
0x000115a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a8 <Transform_Sha256+2680>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3327189267, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115ac in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ac <Transform_Sha256+2684>:	mov	r5, r0
0x000115b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b0 <Transform_Sha256+2688>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b4 <Transform_Sha256+2692>:	mov	r1, #11
0x000115b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b8 <Transform_Sha256+2696>:	mov	r0, r3
0x000115bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115bc <Transform_Sha256+2700>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1462865103, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115c0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c0 <Transform_Sha256+2704>:	mov	r3, r0
0x000115c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c4 <Transform_Sha256+2708>:	eor	r5, r5, r3
0x000115c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c8 <Transform_Sha256+2712>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115cc <Transform_Sha256+2716>:	mov	r1, #25
0x000115d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d0 <Transform_Sha256+2720>:	mov	r0, r3
0x000115d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d4 <Transform_Sha256+2724>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1462865103, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115d8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d8 <Transform_Sha256+2728>:	mov	r3, r0
0x000115dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115dc <Transform_Sha256+2732>:	eor	r3, r3, r5
0x000115e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e0 <Transform_Sha256+2736>:	add	r2, r4, r3
0x000115e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e4 <Transform_Sha256+2740>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x000115e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e8 <Transform_Sha256+2744>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000115ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ec <Transform_Sha256+2748>:	ldr	r12, [r11, #-280]	; 0xfffffee8
0x000115f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f0 <Transform_Sha256+2752>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000115f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f4 <Transform_Sha256+2756>:	eor	r3, r3, r12
0x000115f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f8 <Transform_Sha256+2760>:	and	r3, r3, r0
0x000115fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115fc <Transform_Sha256+2764>:	eor	r3, r3, r1
0x00011600	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11600 <Transform_Sha256+2768>:	add	r2, r2, r3
0x00011604	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11604 <Transform_Sha256+2772>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011608	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11608 <Transform_Sha256+2776>:	add	r3, r3, #7
0x0001160c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1160c <Transform_Sha256+2780>:	ldr	r1, [pc, #336]	; 0x11764 <Transform_Sha256+3124>
0x00011610	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11610 <Transform_Sha256+2784>:	ldr	r3, [r1, r3, lsl #2]
0x00011614	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11614 <Transform_Sha256+2788>:	add	r2, r2, r3
0x00011618	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11618 <Transform_Sha256+2792>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001161c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1161c <Transform_Sha256+2796>:	add	r3, r3, #7
0x00011620	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11620 <Transform_Sha256+2800>:	lsl	r3, r3, #2
0x00011624	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11624 <Transform_Sha256+2804>:	sub	r3, r3, #12
0x00011628	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11628 <Transform_Sha256+2808>:	add	r3, r3, r11
0x0001162c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1162c <Transform_Sha256+2812>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011630	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11630 <Transform_Sha256+2816>:	add	r3, r2, r3
0x00011634	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11634 <Transform_Sha256+2820>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011638	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11638 <Transform_Sha256+2824>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001163c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1163c <Transform_Sha256+2828>:	mov	r1, #2
0x00011640	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11640 <Transform_Sha256+2832>:	mov	r0, r3
0x00011644	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11644 <Transform_Sha256+2836>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1462865103, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011648 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11648 <Transform_Sha256+2840>:	mov	r4, r0
0x0001164c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1164c <Transform_Sha256+2844>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011650	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11650 <Transform_Sha256+2848>:	mov	r1, #13
0x00011654	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11654 <Transform_Sha256+2852>:	mov	r0, r3
0x00011658	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11658 <Transform_Sha256+2856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3784240206, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001165c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1165c <Transform_Sha256+2860>:	mov	r3, r0
0x00011660	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11660 <Transform_Sha256+2864>:	eor	r4, r4, r3
0x00011664	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11664 <Transform_Sha256+2868>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011668	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11668 <Transform_Sha256+2872>:	mov	r1, #22
0x0001166c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1166c <Transform_Sha256+2876>:	mov	r0, r3
0x00011670	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11670 <Transform_Sha256+2880>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3784240206, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011674 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11674 <Transform_Sha256+2884>:	mov	r3, r0
0x00011678	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11678 <Transform_Sha256+2888>:	eor	r2, r4, r3
0x0001167c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1167c <Transform_Sha256+2892>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011680	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11680 <Transform_Sha256+2896>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011684	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11684 <Transform_Sha256+2900>:	orr	r1, r1, r3
0x00011688	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11688 <Transform_Sha256+2904>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x0001168c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1168c <Transform_Sha256+2908>:	and	r1, r1, r3
0x00011690	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11690 <Transform_Sha256+2912>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x00011694	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11694 <Transform_Sha256+2916>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011698	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11698 <Transform_Sha256+2920>:	and	r3, r3, r0
0x0001169c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1169c <Transform_Sha256+2924>:	orr	r3, r1, r3
0x000116a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a0 <Transform_Sha256+2928>:	add	r3, r2, r3
0x000116a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a4 <Transform_Sha256+2932>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000116a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a8 <Transform_Sha256+2936>:	ldr	r2, [r11, #-288]	; 0xfffffee0
0x000116ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116ac <Transform_Sha256+2940>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000116b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b0 <Transform_Sha256+2944>:	add	r3, r2, r3
0x000116b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b4 <Transform_Sha256+2948>:	str	r3, [r11, #-288]	; 0xfffffee0
0x000116b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b8 <Transform_Sha256+2952>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000116bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116bc <Transform_Sha256+2956>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000116c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c0 <Transform_Sha256+2960>:	add	r3, r2, r3
0x000116c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c4 <Transform_Sha256+2964>:	str	r3, [r11, #-304]	; 0xfffffed0
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116c8 <Transform_Sha256+2968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116cc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116cc <Transform_Sha256+2972>:	add	r3, r3, #8
0x000116d0	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d0 <Transform_Sha256+2976>:	str	r3, [r11, #-316]	; 0xfffffec4
0x000116d4	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d4 <Transform_Sha256+2980>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116d8	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d8 <Transform_Sha256+2984>:	cmp	r3, #63	; 0x3f
0x000116dc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116dc <Transform_Sha256+2988>:	ble	0x10d50 <Transform_Sha256+544>
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d50 <Transform_Sha256+544>:	ldr	r4, [r11, #-276]	; 0xfffffeec
0x00010d54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d54 <Transform_Sha256+548>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d58 <Transform_Sha256+552>:	mov	r1, #6
0x00010d5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d5c <Transform_Sha256+556>:	mov	r0, r3
0x00010d60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d60 <Transform_Sha256+560>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3784240206, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d64 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d64 <Transform_Sha256+564>:	mov	r5, r0
0x00010d68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d68 <Transform_Sha256+568>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d6c <Transform_Sha256+572>:	mov	r1, #11
0x00010d70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d70 <Transform_Sha256+576>:	mov	r0, r3
0x00010d74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d74 <Transform_Sha256+580>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3740288385, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d78 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d78 <Transform_Sha256+584>:	mov	r3, r0
0x00010d7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d7c <Transform_Sha256+588>:	eor	r5, r5, r3
0x00010d80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d80 <Transform_Sha256+592>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d84 <Transform_Sha256+596>:	mov	r1, #25
0x00010d88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d88 <Transform_Sha256+600>:	mov	r0, r3
0x00010d8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d8c <Transform_Sha256+604>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3740288385, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d90 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d90 <Transform_Sha256+608>:	mov	r3, r0
0x00010d94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d94 <Transform_Sha256+612>:	eor	r3, r3, r5
0x00010d98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d98 <Transform_Sha256+616>:	add	r2, r4, r3
0x00010d9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d9c <Transform_Sha256+620>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00010da0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da0 <Transform_Sha256+624>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00010da4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da4 <Transform_Sha256+628>:	ldr	r12, [r11, #-284]	; 0xfffffee4
0x00010da8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da8 <Transform_Sha256+632>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00010dac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dac <Transform_Sha256+636>:	eor	r3, r3, r12
0x00010db0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db0 <Transform_Sha256+640>:	and	r3, r3, r0
0x00010db4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db4 <Transform_Sha256+644>:	eor	r3, r3, r1
0x00010db8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db8 <Transform_Sha256+648>:	add	r2, r2, r3
0x00010dbc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dbc <Transform_Sha256+652>:	ldr	r1, [pc, #2464]	; 0x11764 <Transform_Sha256+3124>
0x00010dc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc0 <Transform_Sha256+656>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc4 <Transform_Sha256+660>:	ldr	r3, [r1, r3, lsl #2]
0x00010dc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc8 <Transform_Sha256+664>:	add	r2, r2, r3
0x00010dcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dcc <Transform_Sha256+668>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dd0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd0 <Transform_Sha256+672>:	lsl	r3, r3, #2
0x00010dd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd4 <Transform_Sha256+676>:	sub	r3, r3, #12
0x00010dd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd8 <Transform_Sha256+680>:	add	r3, r3, r11
0x00010ddc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ddc <Transform_Sha256+684>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010de0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de0 <Transform_Sha256+688>:	add	r3, r2, r3
0x00010de4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de4 <Transform_Sha256+692>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010de8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de8 <Transform_Sha256+696>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010dec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dec <Transform_Sha256+700>:	mov	r1, #2
0x00010df0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df0 <Transform_Sha256+704>:	mov	r0, r3
0x00010df4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df4 <Transform_Sha256+708>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3740288385, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010df8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df8 <Transform_Sha256+712>:	mov	r4, r0
0x00010dfc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dfc <Transform_Sha256+716>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e00 <Transform_Sha256+720>:	mov	r1, #13
0x00010e04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e04 <Transform_Sha256+724>:	mov	r0, r3
0x00010e08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e08 <Transform_Sha256+728>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3898021646, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e0c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e0c <Transform_Sha256+732>:	mov	r3, r0
0x00010e10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e10 <Transform_Sha256+736>:	eor	r4, r4, r3
0x00010e14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e14 <Transform_Sha256+740>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e18 <Transform_Sha256+744>:	mov	r1, #22
0x00010e1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e1c <Transform_Sha256+748>:	mov	r0, r3
0x00010e20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e20 <Transform_Sha256+752>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3898021646, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e24 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e24 <Transform_Sha256+756>:	mov	r3, r0
0x00010e28	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e28 <Transform_Sha256+760>:	eor	r2, r4, r3
0x00010e2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e2c <Transform_Sha256+764>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x00010e30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e30 <Transform_Sha256+768>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e34 <Transform_Sha256+772>:	orr	r1, r1, r3
0x00010e38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e38 <Transform_Sha256+776>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010e3c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e3c <Transform_Sha256+780>:	and	r1, r1, r3
0x00010e40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e40 <Transform_Sha256+784>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x00010e44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e44 <Transform_Sha256+788>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e48 <Transform_Sha256+792>:	and	r3, r3, r0
0x00010e4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e4c <Transform_Sha256+796>:	orr	r3, r1, r3
0x00010e50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e50 <Transform_Sha256+800>:	add	r3, r2, r3
0x00010e54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e54 <Transform_Sha256+804>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010e58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e58 <Transform_Sha256+808>:	ldr	r2, [r11, #-292]	; 0xfffffedc
0x00010e5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e5c <Transform_Sha256+812>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010e60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e60 <Transform_Sha256+816>:	add	r3, r2, r3
0x00010e64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e64 <Transform_Sha256+820>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00010e68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e68 <Transform_Sha256+824>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010e6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e6c <Transform_Sha256+828>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010e70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e70 <Transform_Sha256+832>:	add	r3, r2, r3
0x00010e74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e74 <Transform_Sha256+836>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00010e78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e78 <Transform_Sha256+840>:	ldr	r4, [r11, #-280]	; 0xfffffee8
0x00010e7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e7c <Transform_Sha256+844>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e80 <Transform_Sha256+848>:	mov	r1, #6
0x00010e84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e84 <Transform_Sha256+852>:	mov	r0, r3
0x00010e88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e88 <Transform_Sha256+856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3898021646, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e8c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e8c <Transform_Sha256+860>:	mov	r5, r0
0x00010e90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e90 <Transform_Sha256+864>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e94 <Transform_Sha256+868>:	mov	r1, #11
0x00010e98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e98 <Transform_Sha256+872>:	mov	r0, r3
0x00010e9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e9c <Transform_Sha256+876>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1460878335, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ea0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea0 <Transform_Sha256+880>:	mov	r3, r0
0x00010ea4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea4 <Transform_Sha256+884>:	eor	r5, r5, r3
0x00010ea8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea8 <Transform_Sha256+888>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010eac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eac <Transform_Sha256+892>:	mov	r1, #25
0x00010eb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb0 <Transform_Sha256+896>:	mov	r0, r3
0x00010eb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb4 <Transform_Sha256+900>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1460878335, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010eb8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb8 <Transform_Sha256+904>:	mov	r3, r0
0x00010ebc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ebc <Transform_Sha256+908>:	eor	r3, r3, r5
0x00010ec0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec0 <Transform_Sha256+912>:	add	r2, r4, r3
0x00010ec4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec4 <Transform_Sha256+916>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x00010ec8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec8 <Transform_Sha256+920>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00010ecc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ecc <Transform_Sha256+924>:	ldr	r12, [r11, #-288]	; 0xfffffee0
0x00010ed0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed0 <Transform_Sha256+928>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00010ed4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed4 <Transform_Sha256+932>:	eor	r3, r3, r12
0x00010ed8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed8 <Transform_Sha256+936>:	and	r3, r3, r0
0x00010edc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10edc <Transform_Sha256+940>:	eor	r3, r3, r1
0x00010ee0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee0 <Transform_Sha256+944>:	add	r2, r2, r3
0x00010ee4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee4 <Transform_Sha256+948>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ee8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee8 <Transform_Sha256+952>:	add	r3, r3, #1
0x00010eec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eec <Transform_Sha256+956>:	ldr	r1, [pc, #2160]	; 0x11764 <Transform_Sha256+3124>
0x00010ef0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef0 <Transform_Sha256+960>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef4 <Transform_Sha256+964>:	add	r2, r2, r3
0x00010ef8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef8 <Transform_Sha256+968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010efc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10efc <Transform_Sha256+972>:	add	r3, r3, #1
0x00010f00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f00 <Transform_Sha256+976>:	lsl	r3, r3, #2
0x00010f04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f04 <Transform_Sha256+980>:	sub	r3, r3, #12
0x00010f08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f08 <Transform_Sha256+984>:	add	r3, r3, r11
0x00010f0c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f0c <Transform_Sha256+988>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010f10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f10 <Transform_Sha256+992>:	add	r3, r2, r3
0x00010f14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f14 <Transform_Sha256+996>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010f18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f18 <Transform_Sha256+1000>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f1c <Transform_Sha256+1004>:	mov	r1, #2
0x00010f20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f20 <Transform_Sha256+1008>:	mov	r0, r3
0x00010f24	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f24 <Transform_Sha256+1012>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1460878335, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f28 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f28 <Transform_Sha256+1016>:	mov	r4, r0
0x00010f2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f2c <Transform_Sha256+1020>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f30 <Transform_Sha256+1024>:	mov	r1, #13
0x00010f34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f34 <Transform_Sha256+1028>:	mov	r0, r3
0x00010f38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f38 <Transform_Sha256+1032>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3591120732, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f3c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f3c <Transform_Sha256+1036>:	mov	r3, r0
0x00010f40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f40 <Transform_Sha256+1040>:	eor	r4, r4, r3
0x00010f44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f44 <Transform_Sha256+1044>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f48 <Transform_Sha256+1048>:	mov	r1, #22
0x00010f4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f4c <Transform_Sha256+1052>:	mov	r0, r3
0x00010f50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f50 <Transform_Sha256+1056>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3591120732, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f54 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f54 <Transform_Sha256+1060>:	mov	r3, r0
0x00010f58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f58 <Transform_Sha256+1064>:	eor	r2, r4, r3
0x00010f5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f5c <Transform_Sha256+1068>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x00010f60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f60 <Transform_Sha256+1072>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f64 <Transform_Sha256+1076>:	orr	r1, r1, r3
0x00010f68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f68 <Transform_Sha256+1080>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010f6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f6c <Transform_Sha256+1084>:	and	r1, r1, r3
0x00010f70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f70 <Transform_Sha256+1088>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x00010f74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f74 <Transform_Sha256+1092>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f78 <Transform_Sha256+1096>:	and	r3, r3, r0
0x00010f7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f7c <Transform_Sha256+1100>:	orr	r3, r1, r3
0x00010f80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f80 <Transform_Sha256+1104>:	add	r3, r2, r3
0x00010f84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f84 <Transform_Sha256+1108>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010f88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f88 <Transform_Sha256+1112>:	ldr	r2, [r11, #-296]	; 0xfffffed8
0x00010f8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f8c <Transform_Sha256+1116>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010f90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f90 <Transform_Sha256+1120>:	add	r3, r2, r3
0x00010f94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f94 <Transform_Sha256+1124>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00010f98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f98 <Transform_Sha256+1128>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010f9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f9c <Transform_Sha256+1132>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010fa0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa0 <Transform_Sha256+1136>:	add	r3, r2, r3
0x00010fa4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa4 <Transform_Sha256+1140>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00010fa8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa8 <Transform_Sha256+1144>:	ldr	r4, [r11, #-284]	; 0xfffffee4
0x00010fac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fac <Transform_Sha256+1148>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb0 <Transform_Sha256+1152>:	mov	r1, #6
0x00010fb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb4 <Transform_Sha256+1156>:	mov	r0, r3
0x00010fb8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb8 <Transform_Sha256+1160>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3591120732, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fbc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fbc <Transform_Sha256+1164>:	mov	r5, r0
0x00010fc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc0 <Transform_Sha256+1168>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc4 <Transform_Sha256+1172>:	mov	r1, #11
0x00010fc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc8 <Transform_Sha256+1176>:	mov	r0, r3
0x00010fcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fcc <Transform_Sha256+1180>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1063253401, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd0 <Transform_Sha256+1184>:	mov	r3, r0
0x00010fd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd4 <Transform_Sha256+1188>:	eor	r5, r5, r3
0x00010fd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd8 <Transform_Sha256+1192>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fdc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fdc <Transform_Sha256+1196>:	mov	r1, #25
0x00010fe0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe0 <Transform_Sha256+1200>:	mov	r0, r3
0x00010fe4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe4 <Transform_Sha256+1204>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1063253401, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fe8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe8 <Transform_Sha256+1208>:	mov	r3, r0
0x00010fec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fec <Transform_Sha256+1212>:	eor	r3, r3, r5
0x00010ff0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff0 <Transform_Sha256+1216>:	add	r2, r4, r3
0x00010ff4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff4 <Transform_Sha256+1220>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x00010ff8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff8 <Transform_Sha256+1224>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00010ffc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ffc <Transform_Sha256+1228>:	ldr	r12, [r11, #-292]	; 0xfffffedc
0x00011000	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11000 <Transform_Sha256+1232>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011004	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11004 <Transform_Sha256+1236>:	eor	r3, r3, r12
0x00011008	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11008 <Transform_Sha256+1240>:	and	r3, r3, r0
0x0001100c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1100c <Transform_Sha256+1244>:	eor	r3, r3, r1
0x00011010	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11010 <Transform_Sha256+1248>:	add	r2, r2, r3
0x00011014	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11014 <Transform_Sha256+1252>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011018	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11018 <Transform_Sha256+1256>:	add	r3, r3, #2
0x0001101c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1101c <Transform_Sha256+1260>:	ldr	r1, [pc, #1856]	; 0x11764 <Transform_Sha256+3124>
0x00011020	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11020 <Transform_Sha256+1264>:	ldr	r3, [r1, r3, lsl #2]
0x00011024	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11024 <Transform_Sha256+1268>:	add	r2, r2, r3
0x00011028	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11028 <Transform_Sha256+1272>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001102c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1102c <Transform_Sha256+1276>:	add	r3, r3, #2
0x00011030	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11030 <Transform_Sha256+1280>:	lsl	r3, r3, #2
0x00011034	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11034 <Transform_Sha256+1284>:	sub	r3, r3, #12
0x00011038	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11038 <Transform_Sha256+1288>:	add	r3, r3, r11
0x0001103c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1103c <Transform_Sha256+1292>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011040	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11040 <Transform_Sha256+1296>:	add	r3, r2, r3
0x00011044	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11044 <Transform_Sha256+1300>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011048	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11048 <Transform_Sha256+1304>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001104c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1104c <Transform_Sha256+1308>:	mov	r1, #2
0x00011050	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11050 <Transform_Sha256+1312>:	mov	r0, r3
0x00011054	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11054 <Transform_Sha256+1316>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1063253401, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011058 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11058 <Transform_Sha256+1320>:	mov	r4, r0
0x0001105c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1105c <Transform_Sha256+1324>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011060	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11060 <Transform_Sha256+1328>:	mov	r1, #13
0x00011064	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11064 <Transform_Sha256+1332>:	mov	r0, r3
0x00011068	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11068 <Transform_Sha256+1336>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2568357570, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001106c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1106c <Transform_Sha256+1340>:	mov	r3, r0
0x00011070	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11070 <Transform_Sha256+1344>:	eor	r4, r4, r3
0x00011074	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11074 <Transform_Sha256+1348>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011078	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11078 <Transform_Sha256+1352>:	mov	r1, #22
0x0001107c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1107c <Transform_Sha256+1356>:	mov	r0, r3
0x00011080	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11080 <Transform_Sha256+1360>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2568357570, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011084 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11084 <Transform_Sha256+1364>:	mov	r3, r0
0x00011088	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11088 <Transform_Sha256+1368>:	eor	r2, r4, r3
0x0001108c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1108c <Transform_Sha256+1372>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00011090	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11090 <Transform_Sha256+1376>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011094	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11094 <Transform_Sha256+1380>:	orr	r1, r1, r3
0x00011098	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11098 <Transform_Sha256+1384>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001109c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1109c <Transform_Sha256+1388>:	and	r1, r1, r3
0x000110a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a0 <Transform_Sha256+1392>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000110a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a4 <Transform_Sha256+1396>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000110a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a8 <Transform_Sha256+1400>:	and	r3, r3, r0
0x000110ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ac <Transform_Sha256+1404>:	orr	r3, r1, r3
0x000110b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b0 <Transform_Sha256+1408>:	add	r3, r2, r3
0x000110b4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b4 <Transform_Sha256+1412>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000110b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b8 <Transform_Sha256+1416>:	ldr	r2, [r11, #-300]	; 0xfffffed4
0x000110bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110bc <Transform_Sha256+1420>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000110c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c0 <Transform_Sha256+1424>:	add	r3, r2, r3
0x000110c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c4 <Transform_Sha256+1428>:	str	r3, [r11, #-300]	; 0xfffffed4
0x000110c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c8 <Transform_Sha256+1432>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000110cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110cc <Transform_Sha256+1436>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000110d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d0 <Transform_Sha256+1440>:	add	r3, r2, r3
0x000110d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d4 <Transform_Sha256+1444>:	str	r3, [r11, #-284]	; 0xfffffee4
0x000110d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d8 <Transform_Sha256+1448>:	ldr	r4, [r11, #-288]	; 0xfffffee0
0x000110dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110dc <Transform_Sha256+1452>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e0 <Transform_Sha256+1456>:	mov	r1, #6
0x000110e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e4 <Transform_Sha256+1460>:	mov	r0, r3
0x000110e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e8 <Transform_Sha256+1464>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2568357570, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000110ec in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ec <Transform_Sha256+1468>:	mov	r5, r0
0x000110f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f0 <Transform_Sha256+1472>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f4 <Transform_Sha256+1476>:	mov	r1, #11
0x000110f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f8 <Transform_Sha256+1480>:	mov	r0, r3
0x000110fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110fc <Transform_Sha256+1484>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1789490800, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011100 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11100 <Transform_Sha256+1488>:	mov	r3, r0
0x00011104	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11104 <Transform_Sha256+1492>:	eor	r5, r5, r3
0x00011108	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11108 <Transform_Sha256+1496>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001110c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1110c <Transform_Sha256+1500>:	mov	r1, #25
0x00011110	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11110 <Transform_Sha256+1504>:	mov	r0, r3
0x00011114	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11114 <Transform_Sha256+1508>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1789490800, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011118 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11118 <Transform_Sha256+1512>:	mov	r3, r0
0x0001111c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1111c <Transform_Sha256+1516>:	eor	r3, r3, r5
0x00011120	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11120 <Transform_Sha256+1520>:	add	r2, r4, r3
0x00011124	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11124 <Transform_Sha256+1524>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011128	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11128 <Transform_Sha256+1528>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x0001112c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1112c <Transform_Sha256+1532>:	ldr	r12, [r11, #-296]	; 0xfffffed8
0x00011130	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11130 <Transform_Sha256+1536>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011134	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11134 <Transform_Sha256+1540>:	eor	r3, r3, r12
0x00011138	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11138 <Transform_Sha256+1544>:	and	r3, r3, r0
0x0001113c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1113c <Transform_Sha256+1548>:	eor	r3, r3, r1
0x00011140	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11140 <Transform_Sha256+1552>:	add	r2, r2, r3
0x00011144	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11144 <Transform_Sha256+1556>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011148	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11148 <Transform_Sha256+1560>:	add	r3, r3, #3
0x0001114c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1114c <Transform_Sha256+1564>:	ldr	r1, [pc, #1552]	; 0x11764 <Transform_Sha256+3124>
0x00011150	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11150 <Transform_Sha256+1568>:	ldr	r3, [r1, r3, lsl #2]
0x00011154	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11154 <Transform_Sha256+1572>:	add	r2, r2, r3
0x00011158	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11158 <Transform_Sha256+1576>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001115c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1115c <Transform_Sha256+1580>:	add	r3, r3, #3
0x00011160	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11160 <Transform_Sha256+1584>:	lsl	r3, r3, #2
0x00011164	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11164 <Transform_Sha256+1588>:	sub	r3, r3, #12
0x00011168	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11168 <Transform_Sha256+1592>:	add	r3, r3, r11
0x0001116c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1116c <Transform_Sha256+1596>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011170	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11170 <Transform_Sha256+1600>:	add	r3, r2, r3
0x00011174	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11174 <Transform_Sha256+1604>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011178	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11178 <Transform_Sha256+1608>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001117c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1117c <Transform_Sha256+1612>:	mov	r1, #2
0x00011180	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11180 <Transform_Sha256+1616>:	mov	r0, r3
0x00011184	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11184 <Transform_Sha256+1620>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1789490800, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011188 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11188 <Transform_Sha256+1624>:	mov	r4, r0
0x0001118c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1118c <Transform_Sha256+1628>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011190	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11190 <Transform_Sha256+1632>:	mov	r1, #13
0x00011194	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11194 <Transform_Sha256+1636>:	mov	r0, r3
0x00011198	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11198 <Transform_Sha256+1640>:	bl	0x10760 <rotrFixed>
rotrFixed (x=695915732, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001119c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1119c <Transform_Sha256+1644>:	mov	r3, r0
0x000111a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a0 <Transform_Sha256+1648>:	eor	r4, r4, r3
0x000111a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a4 <Transform_Sha256+1652>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000111a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a8 <Transform_Sha256+1656>:	mov	r1, #22
0x000111ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ac <Transform_Sha256+1660>:	mov	r0, r3
0x000111b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b0 <Transform_Sha256+1664>:	bl	0x10760 <rotrFixed>
rotrFixed (x=695915732, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000111b4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b4 <Transform_Sha256+1668>:	mov	r3, r0
0x000111b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b8 <Transform_Sha256+1672>:	eor	r2, r4, r3
0x000111bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111bc <Transform_Sha256+1676>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x000111c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c0 <Transform_Sha256+1680>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c4 <Transform_Sha256+1684>:	orr	r1, r1, r3
0x000111c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c8 <Transform_Sha256+1688>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000111cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111cc <Transform_Sha256+1692>:	and	r1, r1, r3
0x000111d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d0 <Transform_Sha256+1696>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000111d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d4 <Transform_Sha256+1700>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d8 <Transform_Sha256+1704>:	and	r3, r3, r0
0x000111dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111dc <Transform_Sha256+1708>:	orr	r3, r1, r3
0x000111e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e0 <Transform_Sha256+1712>:	add	r3, r2, r3
0x000111e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e4 <Transform_Sha256+1716>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000111e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e8 <Transform_Sha256+1720>:	ldr	r2, [r11, #-304]	; 0xfffffed0
0x000111ec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ec <Transform_Sha256+1724>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000111f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f0 <Transform_Sha256+1728>:	add	r3, r2, r3
0x000111f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f4 <Transform_Sha256+1732>:	str	r3, [r11, #-304]	; 0xfffffed0
0x000111f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f8 <Transform_Sha256+1736>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000111fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111fc <Transform_Sha256+1740>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011200	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11200 <Transform_Sha256+1744>:	add	r3, r2, r3
0x00011204	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11204 <Transform_Sha256+1748>:	str	r3, [r11, #-288]	; 0xfffffee0
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11208 <Transform_Sha256+1752>:	ldr	r4, [r11, #-292]	; 0xfffffedc
0x0001120c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1120c <Transform_Sha256+1756>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011210	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11210 <Transform_Sha256+1760>:	mov	r1, #6
0x00011214	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11214 <Transform_Sha256+1764>:	mov	r0, r3
0x00011218	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11218 <Transform_Sha256+1768>:	bl	0x10760 <rotrFixed>
rotrFixed (x=695915732, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001121c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1121c <Transform_Sha256+1772>:	mov	r5, r0
0x00011220	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11220 <Transform_Sha256+1776>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011224	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11224 <Transform_Sha256+1780>:	mov	r1, #11
0x00011228	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11228 <Transform_Sha256+1784>:	mov	r0, r3
0x0001122c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1122c <Transform_Sha256+1788>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1378122459, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011230 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11230 <Transform_Sha256+1792>:	mov	r3, r0
0x00011234	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11234 <Transform_Sha256+1796>:	eor	r5, r5, r3
0x00011238	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11238 <Transform_Sha256+1800>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001123c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1123c <Transform_Sha256+1804>:	mov	r1, #25
0x00011240	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11240 <Transform_Sha256+1808>:	mov	r0, r3
0x00011244	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11244 <Transform_Sha256+1812>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1378122459, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011248 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11248 <Transform_Sha256+1816>:	mov	r3, r0
0x0001124c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1124c <Transform_Sha256+1820>:	eor	r3, r3, r5
0x00011250	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11250 <Transform_Sha256+1824>:	add	r2, r4, r3
0x00011254	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11254 <Transform_Sha256+1828>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011258	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11258 <Transform_Sha256+1832>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x0001125c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1125c <Transform_Sha256+1836>:	ldr	r12, [r11, #-300]	; 0xfffffed4
0x00011260	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11260 <Transform_Sha256+1840>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011264	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11264 <Transform_Sha256+1844>:	eor	r3, r3, r12
0x00011268	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11268 <Transform_Sha256+1848>:	and	r3, r3, r0
0x0001126c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1126c <Transform_Sha256+1852>:	eor	r3, r3, r1
0x00011270	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11270 <Transform_Sha256+1856>:	add	r2, r2, r3
0x00011274	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11274 <Transform_Sha256+1860>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011278	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11278 <Transform_Sha256+1864>:	add	r3, r3, #4
0x0001127c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1127c <Transform_Sha256+1868>:	ldr	r1, [pc, #1248]	; 0x11764 <Transform_Sha256+3124>
0x00011280	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11280 <Transform_Sha256+1872>:	ldr	r3, [r1, r3, lsl #2]
0x00011284	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11284 <Transform_Sha256+1876>:	add	r2, r2, r3
0x00011288	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11288 <Transform_Sha256+1880>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001128c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1128c <Transform_Sha256+1884>:	add	r3, r3, #4
0x00011290	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11290 <Transform_Sha256+1888>:	lsl	r3, r3, #2
0x00011294	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11294 <Transform_Sha256+1892>:	sub	r3, r3, #12
0x00011298	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11298 <Transform_Sha256+1896>:	add	r3, r3, r11
0x0001129c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1129c <Transform_Sha256+1900>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000112a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a0 <Transform_Sha256+1904>:	add	r3, r2, r3
0x000112a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a4 <Transform_Sha256+1908>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000112a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a8 <Transform_Sha256+1912>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ac <Transform_Sha256+1916>:	mov	r1, #2
0x000112b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b0 <Transform_Sha256+1920>:	mov	r0, r3
0x000112b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b4 <Transform_Sha256+1924>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1378122459, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112b8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b8 <Transform_Sha256+1928>:	mov	r4, r0
0x000112bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112bc <Transform_Sha256+1932>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c0 <Transform_Sha256+1936>:	mov	r1, #13
0x000112c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c4 <Transform_Sha256+1940>:	mov	r0, r3
0x000112c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c8 <Transform_Sha256+1944>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1251481831, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112cc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112cc <Transform_Sha256+1948>:	mov	r3, r0
0x000112d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d0 <Transform_Sha256+1952>:	eor	r4, r4, r3
0x000112d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d4 <Transform_Sha256+1956>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d8 <Transform_Sha256+1960>:	mov	r1, #22
0x000112dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112dc <Transform_Sha256+1964>:	mov	r0, r3
0x000112e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e0 <Transform_Sha256+1968>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1251481831, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112e4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e4 <Transform_Sha256+1972>:	mov	r3, r0
0x000112e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e8 <Transform_Sha256+1976>:	eor	r2, r4, r3
0x000112ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ec <Transform_Sha256+1980>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x000112f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f0 <Transform_Sha256+1984>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000112f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f4 <Transform_Sha256+1988>:	orr	r1, r1, r3
0x000112f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f8 <Transform_Sha256+1992>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000112fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112fc <Transform_Sha256+1996>:	and	r1, r1, r3
0x00011300	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11300 <Transform_Sha256+2000>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00011304	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11304 <Transform_Sha256+2004>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011308	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11308 <Transform_Sha256+2008>:	and	r3, r3, r0
0x0001130c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1130c <Transform_Sha256+2012>:	orr	r3, r1, r3
0x00011310	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11310 <Transform_Sha256+2016>:	add	r3, r2, r3
0x00011314	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11314 <Transform_Sha256+2020>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011318	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11318 <Transform_Sha256+2024>:	ldr	r2, [r11, #-276]	; 0xfffffeec
0x0001131c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1131c <Transform_Sha256+2028>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011320	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11320 <Transform_Sha256+2032>:	add	r3, r2, r3
0x00011324	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11324 <Transform_Sha256+2036>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00011328	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11328 <Transform_Sha256+2040>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001132c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1132c <Transform_Sha256+2044>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011330	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11330 <Transform_Sha256+2048>:	add	r3, r2, r3
0x00011334	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11334 <Transform_Sha256+2052>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00011338	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11338 <Transform_Sha256+2056>:	ldr	r4, [r11, #-296]	; 0xfffffed8
0x0001133c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1133c <Transform_Sha256+2060>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011340	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11340 <Transform_Sha256+2064>:	mov	r1, #6
0x00011344	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11344 <Transform_Sha256+2068>:	mov	r0, r3
0x00011348	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11348 <Transform_Sha256+2072>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1251481831, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001134c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1134c <Transform_Sha256+2076>:	mov	r5, r0
0x00011350	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11350 <Transform_Sha256+2080>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011354	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11354 <Transform_Sha256+2084>:	mov	r1, #11
0x00011358	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11358 <Transform_Sha256+2088>:	mov	r0, r3
0x0001135c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1135c <Transform_Sha256+2092>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3428637823, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011360 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11360 <Transform_Sha256+2096>:	mov	r3, r0
0x00011364	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11364 <Transform_Sha256+2100>:	eor	r5, r5, r3
0x00011368	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11368 <Transform_Sha256+2104>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x0001136c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1136c <Transform_Sha256+2108>:	mov	r1, #25
0x00011370	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11370 <Transform_Sha256+2112>:	mov	r0, r3
0x00011374	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11374 <Transform_Sha256+2116>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3428637823, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011378 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11378 <Transform_Sha256+2120>:	mov	r3, r0
0x0001137c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1137c <Transform_Sha256+2124>:	eor	r3, r3, r5
0x00011380	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11380 <Transform_Sha256+2128>:	add	r2, r4, r3
0x00011384	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11384 <Transform_Sha256+2132>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011388	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11388 <Transform_Sha256+2136>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x0001138c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1138c <Transform_Sha256+2140>:	ldr	r12, [r11, #-304]	; 0xfffffed0
0x00011390	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11390 <Transform_Sha256+2144>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011394	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11394 <Transform_Sha256+2148>:	eor	r3, r3, r12
0x00011398	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11398 <Transform_Sha256+2152>:	and	r3, r3, r0
0x0001139c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1139c <Transform_Sha256+2156>:	eor	r3, r3, r1
0x000113a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a0 <Transform_Sha256+2160>:	add	r2, r2, r3
0x000113a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a4 <Transform_Sha256+2164>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a8 <Transform_Sha256+2168>:	add	r3, r3, #5
0x000113ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ac <Transform_Sha256+2172>:	ldr	r1, [pc, #944]	; 0x11764 <Transform_Sha256+3124>
0x000113b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b0 <Transform_Sha256+2176>:	ldr	r3, [r1, r3, lsl #2]
0x000113b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b4 <Transform_Sha256+2180>:	add	r2, r2, r3
0x000113b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b8 <Transform_Sha256+2184>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113bc <Transform_Sha256+2188>:	add	r3, r3, #5
0x000113c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c0 <Transform_Sha256+2192>:	lsl	r3, r3, #2
0x000113c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c4 <Transform_Sha256+2196>:	sub	r3, r3, #12
0x000113c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c8 <Transform_Sha256+2200>:	add	r3, r3, r11
0x000113cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113cc <Transform_Sha256+2204>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000113d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d0 <Transform_Sha256+2208>:	add	r3, r2, r3
0x000113d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d4 <Transform_Sha256+2212>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000113d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d8 <Transform_Sha256+2216>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113dc <Transform_Sha256+2220>:	mov	r1, #2
0x000113e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e0 <Transform_Sha256+2224>:	mov	r0, r3
0x000113e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e4 <Transform_Sha256+2228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3428637823, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113e8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e8 <Transform_Sha256+2232>:	mov	r4, r0
0x000113ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ec <Transform_Sha256+2236>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f0 <Transform_Sha256+2240>:	mov	r1, #13
0x000113f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f4 <Transform_Sha256+2244>:	mov	r0, r3
0x000113f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f8 <Transform_Sha256+2248>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1969920444, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113fc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113fc <Transform_Sha256+2252>:	mov	r3, r0
0x00011400	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11400 <Transform_Sha256+2256>:	eor	r4, r4, r3
0x00011404	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11404 <Transform_Sha256+2260>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011408	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11408 <Transform_Sha256+2264>:	mov	r1, #22
0x0001140c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1140c <Transform_Sha256+2268>:	mov	r0, r3
0x00011410	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11410 <Transform_Sha256+2272>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1969920444, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011414 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11414 <Transform_Sha256+2276>:	mov	r3, r0
0x00011418	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11418 <Transform_Sha256+2280>:	eor	r2, r4, r3
0x0001141c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1141c <Transform_Sha256+2284>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011420	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11420 <Transform_Sha256+2288>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011424	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11424 <Transform_Sha256+2292>:	orr	r1, r1, r3
0x00011428	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11428 <Transform_Sha256+2296>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001142c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1142c <Transform_Sha256+2300>:	and	r1, r1, r3
0x00011430	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11430 <Transform_Sha256+2304>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00011434	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11434 <Transform_Sha256+2308>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011438	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11438 <Transform_Sha256+2312>:	and	r3, r3, r0
0x0001143c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1143c <Transform_Sha256+2316>:	orr	r3, r1, r3
0x00011440	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11440 <Transform_Sha256+2320>:	add	r3, r2, r3
0x00011444	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11444 <Transform_Sha256+2324>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011448	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11448 <Transform_Sha256+2328>:	ldr	r2, [r11, #-280]	; 0xfffffee8
0x0001144c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1144c <Transform_Sha256+2332>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011450	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11450 <Transform_Sha256+2336>:	add	r3, r2, r3
0x00011454	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11454 <Transform_Sha256+2340>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00011458	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11458 <Transform_Sha256+2344>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001145c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1145c <Transform_Sha256+2348>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011460	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11460 <Transform_Sha256+2352>:	add	r3, r2, r3
0x00011464	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11464 <Transform_Sha256+2356>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00011468	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11468 <Transform_Sha256+2360>:	ldr	r4, [r11, #-300]	; 0xfffffed4
0x0001146c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1146c <Transform_Sha256+2364>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011470	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11470 <Transform_Sha256+2368>:	mov	r1, #6
0x00011474	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11474 <Transform_Sha256+2372>:	mov	r0, r3
0x00011478	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11478 <Transform_Sha256+2376>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1969920444, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001147c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1147c <Transform_Sha256+2380>:	mov	r5, r0
0x00011480	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11480 <Transform_Sha256+2384>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011484	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11484 <Transform_Sha256+2388>:	mov	r1, #11
0x00011488	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11488 <Transform_Sha256+2392>:	mov	r0, r3
0x0001148c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1148c <Transform_Sha256+2396>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3043941957, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011490 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11490 <Transform_Sha256+2400>:	mov	r3, r0
0x00011494	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11494 <Transform_Sha256+2404>:	eor	r5, r5, r3
0x00011498	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11498 <Transform_Sha256+2408>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001149c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1149c <Transform_Sha256+2412>:	mov	r1, #25
0x000114a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a0 <Transform_Sha256+2416>:	mov	r0, r3
0x000114a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a4 <Transform_Sha256+2420>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3043941957, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000114a8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a8 <Transform_Sha256+2424>:	mov	r3, r0
0x000114ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ac <Transform_Sha256+2428>:	eor	r3, r3, r5
0x000114b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b0 <Transform_Sha256+2432>:	add	r2, r4, r3
0x000114b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b4 <Transform_Sha256+2436>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x000114b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b8 <Transform_Sha256+2440>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000114bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114bc <Transform_Sha256+2444>:	ldr	r12, [r11, #-276]	; 0xfffffeec
0x000114c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c0 <Transform_Sha256+2448>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x000114c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c4 <Transform_Sha256+2452>:	eor	r3, r3, r12
0x000114c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c8 <Transform_Sha256+2456>:	and	r3, r3, r0
0x000114cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114cc <Transform_Sha256+2460>:	eor	r3, r3, r1
0x000114d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d0 <Transform_Sha256+2464>:	add	r2, r2, r3
0x000114d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d4 <Transform_Sha256+2468>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d8 <Transform_Sha256+2472>:	add	r3, r3, #6
0x000114dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114dc <Transform_Sha256+2476>:	ldr	r1, [pc, #640]	; 0x11764 <Transform_Sha256+3124>
0x000114e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e0 <Transform_Sha256+2480>:	ldr	r3, [r1, r3, lsl #2]
0x000114e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e4 <Transform_Sha256+2484>:	add	r2, r2, r3
0x000114e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e8 <Transform_Sha256+2488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ec <Transform_Sha256+2492>:	add	r3, r3, #6
0x000114f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f0 <Transform_Sha256+2496>:	lsl	r3, r3, #2
0x000114f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f4 <Transform_Sha256+2500>:	sub	r3, r3, #12
0x000114f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f8 <Transform_Sha256+2504>:	add	r3, r3, r11
0x000114fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114fc <Transform_Sha256+2508>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011500	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11500 <Transform_Sha256+2512>:	add	r3, r2, r3
0x00011504	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11504 <Transform_Sha256+2516>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011508	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11508 <Transform_Sha256+2520>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x0001150c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1150c <Transform_Sha256+2524>:	mov	r1, #2
0x00011510	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11510 <Transform_Sha256+2528>:	mov	r0, r3
0x00011514	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11514 <Transform_Sha256+2532>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3043941957, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011518 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11518 <Transform_Sha256+2536>:	mov	r4, r0
0x0001151c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1151c <Transform_Sha256+2540>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011520	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11520 <Transform_Sha256+2544>:	mov	r1, #13
0x00011524	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11524 <Transform_Sha256+2548>:	mov	r0, r3
0x00011528	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11528 <Transform_Sha256+2552>:	bl	0x10760 <rotrFixed>
rotrFixed (x=11758949, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001152c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1152c <Transform_Sha256+2556>:	mov	r3, r0
0x00011530	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11530 <Transform_Sha256+2560>:	eor	r4, r4, r3
0x00011534	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11534 <Transform_Sha256+2564>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011538	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11538 <Transform_Sha256+2568>:	mov	r1, #22
0x0001153c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1153c <Transform_Sha256+2572>:	mov	r0, r3
0x00011540	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11540 <Transform_Sha256+2576>:	bl	0x10760 <rotrFixed>
rotrFixed (x=11758949, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011544 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11544 <Transform_Sha256+2580>:	mov	r3, r0
0x00011548	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11548 <Transform_Sha256+2584>:	eor	r2, r4, r3
0x0001154c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1154c <Transform_Sha256+2588>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011550	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11550 <Transform_Sha256+2592>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011554	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11554 <Transform_Sha256+2596>:	orr	r1, r1, r3
0x00011558	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11558 <Transform_Sha256+2600>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x0001155c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1155c <Transform_Sha256+2604>:	and	r1, r1, r3
0x00011560	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11560 <Transform_Sha256+2608>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00011564	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11564 <Transform_Sha256+2612>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011568	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11568 <Transform_Sha256+2616>:	and	r3, r3, r0
0x0001156c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1156c <Transform_Sha256+2620>:	orr	r3, r1, r3
0x00011570	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11570 <Transform_Sha256+2624>:	add	r3, r2, r3
0x00011574	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11574 <Transform_Sha256+2628>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011578	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11578 <Transform_Sha256+2632>:	ldr	r2, [r11, #-284]	; 0xfffffee4
0x0001157c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1157c <Transform_Sha256+2636>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011580	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11580 <Transform_Sha256+2640>:	add	r3, r2, r3
0x00011584	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11584 <Transform_Sha256+2644>:	str	r3, [r11, #-284]	; 0xfffffee4
0x00011588	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11588 <Transform_Sha256+2648>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001158c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1158c <Transform_Sha256+2652>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011590	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11590 <Transform_Sha256+2656>:	add	r3, r2, r3
0x00011594	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11594 <Transform_Sha256+2660>:	str	r3, [r11, #-300]	; 0xfffffed4
0x00011598	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11598 <Transform_Sha256+2664>:	ldr	r4, [r11, #-304]	; 0xfffffed0
0x0001159c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1159c <Transform_Sha256+2668>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a0 <Transform_Sha256+2672>:	mov	r1, #6
0x000115a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a4 <Transform_Sha256+2676>:	mov	r0, r3
0x000115a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a8 <Transform_Sha256+2680>:	bl	0x10760 <rotrFixed>
rotrFixed (x=11758949, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115ac in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ac <Transform_Sha256+2684>:	mov	r5, r0
0x000115b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b0 <Transform_Sha256+2688>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b4 <Transform_Sha256+2692>:	mov	r1, #11
0x000115b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b8 <Transform_Sha256+2696>:	mov	r0, r3
0x000115bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115bc <Transform_Sha256+2700>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1697257990, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115c0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c0 <Transform_Sha256+2704>:	mov	r3, r0
0x000115c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c4 <Transform_Sha256+2708>:	eor	r5, r5, r3
0x000115c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c8 <Transform_Sha256+2712>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115cc <Transform_Sha256+2716>:	mov	r1, #25
0x000115d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d0 <Transform_Sha256+2720>:	mov	r0, r3
0x000115d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d4 <Transform_Sha256+2724>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1697257990, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115d8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d8 <Transform_Sha256+2728>:	mov	r3, r0
0x000115dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115dc <Transform_Sha256+2732>:	eor	r3, r3, r5
0x000115e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e0 <Transform_Sha256+2736>:	add	r2, r4, r3
0x000115e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e4 <Transform_Sha256+2740>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x000115e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e8 <Transform_Sha256+2744>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000115ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ec <Transform_Sha256+2748>:	ldr	r12, [r11, #-280]	; 0xfffffee8
0x000115f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f0 <Transform_Sha256+2752>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000115f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f4 <Transform_Sha256+2756>:	eor	r3, r3, r12
0x000115f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f8 <Transform_Sha256+2760>:	and	r3, r3, r0
0x000115fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115fc <Transform_Sha256+2764>:	eor	r3, r3, r1
0x00011600	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11600 <Transform_Sha256+2768>:	add	r2, r2, r3
0x00011604	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11604 <Transform_Sha256+2772>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011608	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11608 <Transform_Sha256+2776>:	add	r3, r3, #7
0x0001160c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1160c <Transform_Sha256+2780>:	ldr	r1, [pc, #336]	; 0x11764 <Transform_Sha256+3124>
0x00011610	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11610 <Transform_Sha256+2784>:	ldr	r3, [r1, r3, lsl #2]
0x00011614	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11614 <Transform_Sha256+2788>:	add	r2, r2, r3
0x00011618	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11618 <Transform_Sha256+2792>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001161c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1161c <Transform_Sha256+2796>:	add	r3, r3, #7
0x00011620	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11620 <Transform_Sha256+2800>:	lsl	r3, r3, #2
0x00011624	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11624 <Transform_Sha256+2804>:	sub	r3, r3, #12
0x00011628	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11628 <Transform_Sha256+2808>:	add	r3, r3, r11
0x0001162c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1162c <Transform_Sha256+2812>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011630	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11630 <Transform_Sha256+2816>:	add	r3, r2, r3
0x00011634	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11634 <Transform_Sha256+2820>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011638	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11638 <Transform_Sha256+2824>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001163c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1163c <Transform_Sha256+2828>:	mov	r1, #2
0x00011640	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11640 <Transform_Sha256+2832>:	mov	r0, r3
0x00011644	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11644 <Transform_Sha256+2836>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1697257990, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011648 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11648 <Transform_Sha256+2840>:	mov	r4, r0
0x0001164c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1164c <Transform_Sha256+2844>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011650	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11650 <Transform_Sha256+2848>:	mov	r1, #13
0x00011654	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11654 <Transform_Sha256+2852>:	mov	r0, r3
0x00011658	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11658 <Transform_Sha256+2856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1662691799, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001165c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1165c <Transform_Sha256+2860>:	mov	r3, r0
0x00011660	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11660 <Transform_Sha256+2864>:	eor	r4, r4, r3
0x00011664	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11664 <Transform_Sha256+2868>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011668	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11668 <Transform_Sha256+2872>:	mov	r1, #22
0x0001166c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1166c <Transform_Sha256+2876>:	mov	r0, r3
0x00011670	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11670 <Transform_Sha256+2880>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1662691799, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011674 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11674 <Transform_Sha256+2884>:	mov	r3, r0
0x00011678	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11678 <Transform_Sha256+2888>:	eor	r2, r4, r3
0x0001167c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1167c <Transform_Sha256+2892>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011680	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11680 <Transform_Sha256+2896>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011684	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11684 <Transform_Sha256+2900>:	orr	r1, r1, r3
0x00011688	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11688 <Transform_Sha256+2904>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x0001168c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1168c <Transform_Sha256+2908>:	and	r1, r1, r3
0x00011690	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11690 <Transform_Sha256+2912>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x00011694	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11694 <Transform_Sha256+2916>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011698	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11698 <Transform_Sha256+2920>:	and	r3, r3, r0
0x0001169c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1169c <Transform_Sha256+2924>:	orr	r3, r1, r3
0x000116a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a0 <Transform_Sha256+2928>:	add	r3, r2, r3
0x000116a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a4 <Transform_Sha256+2932>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000116a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a8 <Transform_Sha256+2936>:	ldr	r2, [r11, #-288]	; 0xfffffee0
0x000116ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116ac <Transform_Sha256+2940>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000116b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b0 <Transform_Sha256+2944>:	add	r3, r2, r3
0x000116b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b4 <Transform_Sha256+2948>:	str	r3, [r11, #-288]	; 0xfffffee0
0x000116b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b8 <Transform_Sha256+2952>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000116bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116bc <Transform_Sha256+2956>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000116c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c0 <Transform_Sha256+2960>:	add	r3, r2, r3
0x000116c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c4 <Transform_Sha256+2964>:	str	r3, [r11, #-304]	; 0xfffffed0
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116c8 <Transform_Sha256+2968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116cc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116cc <Transform_Sha256+2972>:	add	r3, r3, #8
0x000116d0	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d0 <Transform_Sha256+2976>:	str	r3, [r11, #-316]	; 0xfffffec4
0x000116d4	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d4 <Transform_Sha256+2980>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116d8	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d8 <Transform_Sha256+2984>:	cmp	r3, #63	; 0x3f
0x000116dc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116dc <Transform_Sha256+2988>:	ble	0x10d50 <Transform_Sha256+544>
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d50 <Transform_Sha256+544>:	ldr	r4, [r11, #-276]	; 0xfffffeec
0x00010d54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d54 <Transform_Sha256+548>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d58 <Transform_Sha256+552>:	mov	r1, #6
0x00010d5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d5c <Transform_Sha256+556>:	mov	r0, r3
0x00010d60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d60 <Transform_Sha256+560>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1662691799, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d64 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d64 <Transform_Sha256+564>:	mov	r5, r0
0x00010d68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d68 <Transform_Sha256+568>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d6c <Transform_Sha256+572>:	mov	r1, #11
0x00010d70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d70 <Transform_Sha256+576>:	mov	r0, r3
0x00010d74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d74 <Transform_Sha256+580>:	bl	0x10760 <rotrFixed>
rotrFixed (x=504380000, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d78 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d78 <Transform_Sha256+584>:	mov	r3, r0
0x00010d7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d7c <Transform_Sha256+588>:	eor	r5, r5, r3
0x00010d80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d80 <Transform_Sha256+592>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d84 <Transform_Sha256+596>:	mov	r1, #25
0x00010d88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d88 <Transform_Sha256+600>:	mov	r0, r3
0x00010d8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d8c <Transform_Sha256+604>:	bl	0x10760 <rotrFixed>
rotrFixed (x=504380000, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d90 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d90 <Transform_Sha256+608>:	mov	r3, r0
0x00010d94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d94 <Transform_Sha256+612>:	eor	r3, r3, r5
0x00010d98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d98 <Transform_Sha256+616>:	add	r2, r4, r3
0x00010d9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d9c <Transform_Sha256+620>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00010da0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da0 <Transform_Sha256+624>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00010da4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da4 <Transform_Sha256+628>:	ldr	r12, [r11, #-284]	; 0xfffffee4
0x00010da8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da8 <Transform_Sha256+632>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00010dac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dac <Transform_Sha256+636>:	eor	r3, r3, r12
0x00010db0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db0 <Transform_Sha256+640>:	and	r3, r3, r0
0x00010db4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db4 <Transform_Sha256+644>:	eor	r3, r3, r1
0x00010db8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db8 <Transform_Sha256+648>:	add	r2, r2, r3
0x00010dbc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dbc <Transform_Sha256+652>:	ldr	r1, [pc, #2464]	; 0x11764 <Transform_Sha256+3124>
0x00010dc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc0 <Transform_Sha256+656>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc4 <Transform_Sha256+660>:	ldr	r3, [r1, r3, lsl #2]
0x00010dc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc8 <Transform_Sha256+664>:	add	r2, r2, r3
0x00010dcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dcc <Transform_Sha256+668>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dd0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd0 <Transform_Sha256+672>:	lsl	r3, r3, #2
0x00010dd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd4 <Transform_Sha256+676>:	sub	r3, r3, #12
0x00010dd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd8 <Transform_Sha256+680>:	add	r3, r3, r11
0x00010ddc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ddc <Transform_Sha256+684>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010de0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de0 <Transform_Sha256+688>:	add	r3, r2, r3
0x00010de4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de4 <Transform_Sha256+692>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010de8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de8 <Transform_Sha256+696>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010dec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dec <Transform_Sha256+700>:	mov	r1, #2
0x00010df0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df0 <Transform_Sha256+704>:	mov	r0, r3
0x00010df4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df4 <Transform_Sha256+708>:	bl	0x10760 <rotrFixed>
rotrFixed (x=504380000, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010df8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df8 <Transform_Sha256+712>:	mov	r4, r0
0x00010dfc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dfc <Transform_Sha256+716>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e00 <Transform_Sha256+720>:	mov	r1, #13
0x00010e04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e04 <Transform_Sha256+724>:	mov	r0, r3
0x00010e08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e08 <Transform_Sha256+728>:	bl	0x10760 <rotrFixed>
rotrFixed (x=831371930, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e0c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e0c <Transform_Sha256+732>:	mov	r3, r0
0x00010e10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e10 <Transform_Sha256+736>:	eor	r4, r4, r3
0x00010e14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e14 <Transform_Sha256+740>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e18 <Transform_Sha256+744>:	mov	r1, #22
0x00010e1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e1c <Transform_Sha256+748>:	mov	r0, r3
0x00010e20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e20 <Transform_Sha256+752>:	bl	0x10760 <rotrFixed>
rotrFixed (x=831371930, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e24 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e24 <Transform_Sha256+756>:	mov	r3, r0
0x00010e28	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e28 <Transform_Sha256+760>:	eor	r2, r4, r3
0x00010e2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e2c <Transform_Sha256+764>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x00010e30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e30 <Transform_Sha256+768>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e34 <Transform_Sha256+772>:	orr	r1, r1, r3
0x00010e38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e38 <Transform_Sha256+776>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010e3c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e3c <Transform_Sha256+780>:	and	r1, r1, r3
0x00010e40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e40 <Transform_Sha256+784>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x00010e44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e44 <Transform_Sha256+788>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e48 <Transform_Sha256+792>:	and	r3, r3, r0
0x00010e4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e4c <Transform_Sha256+796>:	orr	r3, r1, r3
0x00010e50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e50 <Transform_Sha256+800>:	add	r3, r2, r3
0x00010e54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e54 <Transform_Sha256+804>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010e58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e58 <Transform_Sha256+808>:	ldr	r2, [r11, #-292]	; 0xfffffedc
0x00010e5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e5c <Transform_Sha256+812>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010e60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e60 <Transform_Sha256+816>:	add	r3, r2, r3
0x00010e64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e64 <Transform_Sha256+820>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00010e68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e68 <Transform_Sha256+824>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010e6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e6c <Transform_Sha256+828>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010e70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e70 <Transform_Sha256+832>:	add	r3, r2, r3
0x00010e74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e74 <Transform_Sha256+836>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00010e78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e78 <Transform_Sha256+840>:	ldr	r4, [r11, #-280]	; 0xfffffee8
0x00010e7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e7c <Transform_Sha256+844>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e80 <Transform_Sha256+848>:	mov	r1, #6
0x00010e84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e84 <Transform_Sha256+852>:	mov	r0, r3
0x00010e88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e88 <Transform_Sha256+856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=831371930, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e8c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e8c <Transform_Sha256+860>:	mov	r5, r0
0x00010e90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e90 <Transform_Sha256+864>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e94 <Transform_Sha256+868>:	mov	r1, #11
0x00010e98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e98 <Transform_Sha256+872>:	mov	r0, r3
0x00010e9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e9c <Transform_Sha256+876>:	bl	0x10760 <rotrFixed>
rotrFixed (x=674233478, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ea0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea0 <Transform_Sha256+880>:	mov	r3, r0
0x00010ea4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea4 <Transform_Sha256+884>:	eor	r5, r5, r3
0x00010ea8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea8 <Transform_Sha256+888>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010eac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eac <Transform_Sha256+892>:	mov	r1, #25
0x00010eb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb0 <Transform_Sha256+896>:	mov	r0, r3
0x00010eb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb4 <Transform_Sha256+900>:	bl	0x10760 <rotrFixed>
rotrFixed (x=674233478, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010eb8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb8 <Transform_Sha256+904>:	mov	r3, r0
0x00010ebc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ebc <Transform_Sha256+908>:	eor	r3, r3, r5
0x00010ec0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec0 <Transform_Sha256+912>:	add	r2, r4, r3
0x00010ec4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec4 <Transform_Sha256+916>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x00010ec8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec8 <Transform_Sha256+920>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00010ecc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ecc <Transform_Sha256+924>:	ldr	r12, [r11, #-288]	; 0xfffffee0
0x00010ed0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed0 <Transform_Sha256+928>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00010ed4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed4 <Transform_Sha256+932>:	eor	r3, r3, r12
0x00010ed8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed8 <Transform_Sha256+936>:	and	r3, r3, r0
0x00010edc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10edc <Transform_Sha256+940>:	eor	r3, r3, r1
0x00010ee0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee0 <Transform_Sha256+944>:	add	r2, r2, r3
0x00010ee4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee4 <Transform_Sha256+948>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ee8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee8 <Transform_Sha256+952>:	add	r3, r3, #1
0x00010eec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eec <Transform_Sha256+956>:	ldr	r1, [pc, #2160]	; 0x11764 <Transform_Sha256+3124>
0x00010ef0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef0 <Transform_Sha256+960>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef4 <Transform_Sha256+964>:	add	r2, r2, r3
0x00010ef8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef8 <Transform_Sha256+968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010efc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10efc <Transform_Sha256+972>:	add	r3, r3, #1
0x00010f00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f00 <Transform_Sha256+976>:	lsl	r3, r3, #2
0x00010f04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f04 <Transform_Sha256+980>:	sub	r3, r3, #12
0x00010f08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f08 <Transform_Sha256+984>:	add	r3, r3, r11
0x00010f0c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f0c <Transform_Sha256+988>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010f10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f10 <Transform_Sha256+992>:	add	r3, r2, r3
0x00010f14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f14 <Transform_Sha256+996>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010f18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f18 <Transform_Sha256+1000>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f1c <Transform_Sha256+1004>:	mov	r1, #2
0x00010f20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f20 <Transform_Sha256+1008>:	mov	r0, r3
0x00010f24	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f24 <Transform_Sha256+1012>:	bl	0x10760 <rotrFixed>
rotrFixed (x=674233478, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f28 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f28 <Transform_Sha256+1016>:	mov	r4, r0
0x00010f2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f2c <Transform_Sha256+1020>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f30 <Transform_Sha256+1024>:	mov	r1, #13
0x00010f34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f34 <Transform_Sha256+1028>:	mov	r0, r3
0x00010f38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f38 <Transform_Sha256+1032>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1119458990, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f3c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f3c <Transform_Sha256+1036>:	mov	r3, r0
0x00010f40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f40 <Transform_Sha256+1040>:	eor	r4, r4, r3
0x00010f44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f44 <Transform_Sha256+1044>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f48 <Transform_Sha256+1048>:	mov	r1, #22
0x00010f4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f4c <Transform_Sha256+1052>:	mov	r0, r3
0x00010f50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f50 <Transform_Sha256+1056>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1119458990, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f54 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f54 <Transform_Sha256+1060>:	mov	r3, r0
0x00010f58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f58 <Transform_Sha256+1064>:	eor	r2, r4, r3
0x00010f5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f5c <Transform_Sha256+1068>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x00010f60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f60 <Transform_Sha256+1072>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f64 <Transform_Sha256+1076>:	orr	r1, r1, r3
0x00010f68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f68 <Transform_Sha256+1080>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010f6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f6c <Transform_Sha256+1084>:	and	r1, r1, r3
0x00010f70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f70 <Transform_Sha256+1088>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x00010f74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f74 <Transform_Sha256+1092>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f78 <Transform_Sha256+1096>:	and	r3, r3, r0
0x00010f7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f7c <Transform_Sha256+1100>:	orr	r3, r1, r3
0x00010f80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f80 <Transform_Sha256+1104>:	add	r3, r2, r3
0x00010f84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f84 <Transform_Sha256+1108>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010f88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f88 <Transform_Sha256+1112>:	ldr	r2, [r11, #-296]	; 0xfffffed8
0x00010f8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f8c <Transform_Sha256+1116>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010f90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f90 <Transform_Sha256+1120>:	add	r3, r2, r3
0x00010f94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f94 <Transform_Sha256+1124>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00010f98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f98 <Transform_Sha256+1128>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010f9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f9c <Transform_Sha256+1132>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010fa0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa0 <Transform_Sha256+1136>:	add	r3, r2, r3
0x00010fa4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa4 <Transform_Sha256+1140>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00010fa8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa8 <Transform_Sha256+1144>:	ldr	r4, [r11, #-284]	; 0xfffffee4
0x00010fac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fac <Transform_Sha256+1148>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb0 <Transform_Sha256+1152>:	mov	r1, #6
0x00010fb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb4 <Transform_Sha256+1156>:	mov	r0, r3
0x00010fb8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb8 <Transform_Sha256+1160>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1119458990, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fbc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fbc <Transform_Sha256+1164>:	mov	r5, r0
0x00010fc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc0 <Transform_Sha256+1168>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc4 <Transform_Sha256+1172>:	mov	r1, #11
0x00010fc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc8 <Transform_Sha256+1176>:	mov	r0, r3
0x00010fcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fcc <Transform_Sha256+1180>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3971976278, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd0 <Transform_Sha256+1184>:	mov	r3, r0
0x00010fd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd4 <Transform_Sha256+1188>:	eor	r5, r5, r3
0x00010fd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd8 <Transform_Sha256+1192>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fdc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fdc <Transform_Sha256+1196>:	mov	r1, #25
0x00010fe0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe0 <Transform_Sha256+1200>:	mov	r0, r3
0x00010fe4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe4 <Transform_Sha256+1204>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3971976278, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fe8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe8 <Transform_Sha256+1208>:	mov	r3, r0
0x00010fec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fec <Transform_Sha256+1212>:	eor	r3, r3, r5
0x00010ff0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff0 <Transform_Sha256+1216>:	add	r2, r4, r3
0x00010ff4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff4 <Transform_Sha256+1220>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x00010ff8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff8 <Transform_Sha256+1224>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00010ffc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ffc <Transform_Sha256+1228>:	ldr	r12, [r11, #-292]	; 0xfffffedc
0x00011000	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11000 <Transform_Sha256+1232>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011004	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11004 <Transform_Sha256+1236>:	eor	r3, r3, r12
0x00011008	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11008 <Transform_Sha256+1240>:	and	r3, r3, r0
0x0001100c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1100c <Transform_Sha256+1244>:	eor	r3, r3, r1
0x00011010	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11010 <Transform_Sha256+1248>:	add	r2, r2, r3
0x00011014	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11014 <Transform_Sha256+1252>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011018	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11018 <Transform_Sha256+1256>:	add	r3, r3, #2
0x0001101c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1101c <Transform_Sha256+1260>:	ldr	r1, [pc, #1856]	; 0x11764 <Transform_Sha256+3124>
0x00011020	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11020 <Transform_Sha256+1264>:	ldr	r3, [r1, r3, lsl #2]
0x00011024	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11024 <Transform_Sha256+1268>:	add	r2, r2, r3
0x00011028	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11028 <Transform_Sha256+1272>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001102c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1102c <Transform_Sha256+1276>:	add	r3, r3, #2
0x00011030	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11030 <Transform_Sha256+1280>:	lsl	r3, r3, #2
0x00011034	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11034 <Transform_Sha256+1284>:	sub	r3, r3, #12
0x00011038	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11038 <Transform_Sha256+1288>:	add	r3, r3, r11
0x0001103c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1103c <Transform_Sha256+1292>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011040	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11040 <Transform_Sha256+1296>:	add	r3, r2, r3
0x00011044	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11044 <Transform_Sha256+1300>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011048	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11048 <Transform_Sha256+1304>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001104c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1104c <Transform_Sha256+1308>:	mov	r1, #2
0x00011050	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11050 <Transform_Sha256+1312>:	mov	r0, r3
0x00011054	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11054 <Transform_Sha256+1316>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3971976278, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011058 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11058 <Transform_Sha256+1320>:	mov	r4, r0
0x0001105c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1105c <Transform_Sha256+1324>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011060	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11060 <Transform_Sha256+1328>:	mov	r1, #13
0x00011064	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11064 <Transform_Sha256+1332>:	mov	r0, r3
0x00011068	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11068 <Transform_Sha256+1336>:	bl	0x10760 <rotrFixed>
rotrFixed (x=321692412, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001106c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1106c <Transform_Sha256+1340>:	mov	r3, r0
0x00011070	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11070 <Transform_Sha256+1344>:	eor	r4, r4, r3
0x00011074	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11074 <Transform_Sha256+1348>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011078	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11078 <Transform_Sha256+1352>:	mov	r1, #22
0x0001107c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1107c <Transform_Sha256+1356>:	mov	r0, r3
0x00011080	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11080 <Transform_Sha256+1360>:	bl	0x10760 <rotrFixed>
rotrFixed (x=321692412, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011084 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11084 <Transform_Sha256+1364>:	mov	r3, r0
0x00011088	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11088 <Transform_Sha256+1368>:	eor	r2, r4, r3
0x0001108c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1108c <Transform_Sha256+1372>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00011090	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11090 <Transform_Sha256+1376>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011094	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11094 <Transform_Sha256+1380>:	orr	r1, r1, r3
0x00011098	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11098 <Transform_Sha256+1384>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001109c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1109c <Transform_Sha256+1388>:	and	r1, r1, r3
0x000110a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a0 <Transform_Sha256+1392>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000110a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a4 <Transform_Sha256+1396>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000110a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a8 <Transform_Sha256+1400>:	and	r3, r3, r0
0x000110ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ac <Transform_Sha256+1404>:	orr	r3, r1, r3
0x000110b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b0 <Transform_Sha256+1408>:	add	r3, r2, r3
0x000110b4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b4 <Transform_Sha256+1412>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000110b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b8 <Transform_Sha256+1416>:	ldr	r2, [r11, #-300]	; 0xfffffed4
0x000110bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110bc <Transform_Sha256+1420>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000110c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c0 <Transform_Sha256+1424>:	add	r3, r2, r3
0x000110c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c4 <Transform_Sha256+1428>:	str	r3, [r11, #-300]	; 0xfffffed4
0x000110c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c8 <Transform_Sha256+1432>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000110cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110cc <Transform_Sha256+1436>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000110d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d0 <Transform_Sha256+1440>:	add	r3, r2, r3
0x000110d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d4 <Transform_Sha256+1444>:	str	r3, [r11, #-284]	; 0xfffffee4
0x000110d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d8 <Transform_Sha256+1448>:	ldr	r4, [r11, #-288]	; 0xfffffee0
0x000110dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110dc <Transform_Sha256+1452>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e0 <Transform_Sha256+1456>:	mov	r1, #6
0x000110e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e4 <Transform_Sha256+1460>:	mov	r0, r3
0x000110e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e8 <Transform_Sha256+1464>:	bl	0x10760 <rotrFixed>
rotrFixed (x=321692412, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000110ec in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ec <Transform_Sha256+1468>:	mov	r5, r0
0x000110f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f0 <Transform_Sha256+1472>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f4 <Transform_Sha256+1476>:	mov	r1, #11
0x000110f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f8 <Transform_Sha256+1480>:	mov	r0, r3
0x000110fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110fc <Transform_Sha256+1484>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3394646995, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011100 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11100 <Transform_Sha256+1488>:	mov	r3, r0
0x00011104	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11104 <Transform_Sha256+1492>:	eor	r5, r5, r3
0x00011108	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11108 <Transform_Sha256+1496>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001110c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1110c <Transform_Sha256+1500>:	mov	r1, #25
0x00011110	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11110 <Transform_Sha256+1504>:	mov	r0, r3
0x00011114	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11114 <Transform_Sha256+1508>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3394646995, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011118 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11118 <Transform_Sha256+1512>:	mov	r3, r0
0x0001111c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1111c <Transform_Sha256+1516>:	eor	r3, r3, r5
0x00011120	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11120 <Transform_Sha256+1520>:	add	r2, r4, r3
0x00011124	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11124 <Transform_Sha256+1524>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011128	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11128 <Transform_Sha256+1528>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x0001112c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1112c <Transform_Sha256+1532>:	ldr	r12, [r11, #-296]	; 0xfffffed8
0x00011130	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11130 <Transform_Sha256+1536>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011134	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11134 <Transform_Sha256+1540>:	eor	r3, r3, r12
0x00011138	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11138 <Transform_Sha256+1544>:	and	r3, r3, r0
0x0001113c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1113c <Transform_Sha256+1548>:	eor	r3, r3, r1
0x00011140	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11140 <Transform_Sha256+1552>:	add	r2, r2, r3
0x00011144	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11144 <Transform_Sha256+1556>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011148	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11148 <Transform_Sha256+1560>:	add	r3, r3, #3
0x0001114c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1114c <Transform_Sha256+1564>:	ldr	r1, [pc, #1552]	; 0x11764 <Transform_Sha256+3124>
0x00011150	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11150 <Transform_Sha256+1568>:	ldr	r3, [r1, r3, lsl #2]
0x00011154	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11154 <Transform_Sha256+1572>:	add	r2, r2, r3
0x00011158	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11158 <Transform_Sha256+1576>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001115c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1115c <Transform_Sha256+1580>:	add	r3, r3, #3
0x00011160	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11160 <Transform_Sha256+1584>:	lsl	r3, r3, #2
0x00011164	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11164 <Transform_Sha256+1588>:	sub	r3, r3, #12
0x00011168	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11168 <Transform_Sha256+1592>:	add	r3, r3, r11
0x0001116c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1116c <Transform_Sha256+1596>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011170	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11170 <Transform_Sha256+1600>:	add	r3, r2, r3
0x00011174	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11174 <Transform_Sha256+1604>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011178	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11178 <Transform_Sha256+1608>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001117c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1117c <Transform_Sha256+1612>:	mov	r1, #2
0x00011180	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11180 <Transform_Sha256+1616>:	mov	r0, r3
0x00011184	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11184 <Transform_Sha256+1620>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3394646995, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011188 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11188 <Transform_Sha256+1624>:	mov	r4, r0
0x0001118c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1118c <Transform_Sha256+1628>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011190	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11190 <Transform_Sha256+1632>:	mov	r1, #13
0x00011194	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11194 <Transform_Sha256+1636>:	mov	r0, r3
0x00011198	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11198 <Transform_Sha256+1640>:	bl	0x10760 <rotrFixed>
rotrFixed (x=478772816, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001119c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1119c <Transform_Sha256+1644>:	mov	r3, r0
0x000111a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a0 <Transform_Sha256+1648>:	eor	r4, r4, r3
0x000111a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a4 <Transform_Sha256+1652>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000111a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a8 <Transform_Sha256+1656>:	mov	r1, #22
0x000111ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ac <Transform_Sha256+1660>:	mov	r0, r3
0x000111b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b0 <Transform_Sha256+1664>:	bl	0x10760 <rotrFixed>
rotrFixed (x=478772816, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000111b4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b4 <Transform_Sha256+1668>:	mov	r3, r0
0x000111b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b8 <Transform_Sha256+1672>:	eor	r2, r4, r3
0x000111bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111bc <Transform_Sha256+1676>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x000111c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c0 <Transform_Sha256+1680>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c4 <Transform_Sha256+1684>:	orr	r1, r1, r3
0x000111c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c8 <Transform_Sha256+1688>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000111cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111cc <Transform_Sha256+1692>:	and	r1, r1, r3
0x000111d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d0 <Transform_Sha256+1696>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000111d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d4 <Transform_Sha256+1700>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d8 <Transform_Sha256+1704>:	and	r3, r3, r0
0x000111dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111dc <Transform_Sha256+1708>:	orr	r3, r1, r3
0x000111e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e0 <Transform_Sha256+1712>:	add	r3, r2, r3
0x000111e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e4 <Transform_Sha256+1716>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000111e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e8 <Transform_Sha256+1720>:	ldr	r2, [r11, #-304]	; 0xfffffed0
0x000111ec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ec <Transform_Sha256+1724>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000111f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f0 <Transform_Sha256+1728>:	add	r3, r2, r3
0x000111f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f4 <Transform_Sha256+1732>:	str	r3, [r11, #-304]	; 0xfffffed0
0x000111f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f8 <Transform_Sha256+1736>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000111fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111fc <Transform_Sha256+1740>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011200	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11200 <Transform_Sha256+1744>:	add	r3, r2, r3
0x00011204	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11204 <Transform_Sha256+1748>:	str	r3, [r11, #-288]	; 0xfffffee0
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11208 <Transform_Sha256+1752>:	ldr	r4, [r11, #-292]	; 0xfffffedc
0x0001120c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1120c <Transform_Sha256+1756>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011210	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11210 <Transform_Sha256+1760>:	mov	r1, #6
0x00011214	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11214 <Transform_Sha256+1764>:	mov	r0, r3
0x00011218	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11218 <Transform_Sha256+1768>:	bl	0x10760 <rotrFixed>
rotrFixed (x=478772816, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001121c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1121c <Transform_Sha256+1772>:	mov	r5, r0
0x00011220	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11220 <Transform_Sha256+1776>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011224	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11224 <Transform_Sha256+1780>:	mov	r1, #11
0x00011228	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11228 <Transform_Sha256+1784>:	mov	r0, r3
0x0001122c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1122c <Transform_Sha256+1788>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3622464149, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011230 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11230 <Transform_Sha256+1792>:	mov	r3, r0
0x00011234	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11234 <Transform_Sha256+1796>:	eor	r5, r5, r3
0x00011238	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11238 <Transform_Sha256+1800>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001123c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1123c <Transform_Sha256+1804>:	mov	r1, #25
0x00011240	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11240 <Transform_Sha256+1808>:	mov	r0, r3
0x00011244	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11244 <Transform_Sha256+1812>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3622464149, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011248 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11248 <Transform_Sha256+1816>:	mov	r3, r0
0x0001124c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1124c <Transform_Sha256+1820>:	eor	r3, r3, r5
0x00011250	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11250 <Transform_Sha256+1824>:	add	r2, r4, r3
0x00011254	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11254 <Transform_Sha256+1828>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011258	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11258 <Transform_Sha256+1832>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x0001125c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1125c <Transform_Sha256+1836>:	ldr	r12, [r11, #-300]	; 0xfffffed4
0x00011260	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11260 <Transform_Sha256+1840>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011264	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11264 <Transform_Sha256+1844>:	eor	r3, r3, r12
0x00011268	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11268 <Transform_Sha256+1848>:	and	r3, r3, r0
0x0001126c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1126c <Transform_Sha256+1852>:	eor	r3, r3, r1
0x00011270	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11270 <Transform_Sha256+1856>:	add	r2, r2, r3
0x00011274	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11274 <Transform_Sha256+1860>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011278	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11278 <Transform_Sha256+1864>:	add	r3, r3, #4
0x0001127c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1127c <Transform_Sha256+1868>:	ldr	r1, [pc, #1248]	; 0x11764 <Transform_Sha256+3124>
0x00011280	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11280 <Transform_Sha256+1872>:	ldr	r3, [r1, r3, lsl #2]
0x00011284	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11284 <Transform_Sha256+1876>:	add	r2, r2, r3
0x00011288	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11288 <Transform_Sha256+1880>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001128c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1128c <Transform_Sha256+1884>:	add	r3, r3, #4
0x00011290	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11290 <Transform_Sha256+1888>:	lsl	r3, r3, #2
0x00011294	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11294 <Transform_Sha256+1892>:	sub	r3, r3, #12
0x00011298	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11298 <Transform_Sha256+1896>:	add	r3, r3, r11
0x0001129c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1129c <Transform_Sha256+1900>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000112a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a0 <Transform_Sha256+1904>:	add	r3, r2, r3
0x000112a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a4 <Transform_Sha256+1908>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000112a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a8 <Transform_Sha256+1912>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ac <Transform_Sha256+1916>:	mov	r1, #2
0x000112b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b0 <Transform_Sha256+1920>:	mov	r0, r3
0x000112b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b4 <Transform_Sha256+1924>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3622464149, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112b8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b8 <Transform_Sha256+1928>:	mov	r4, r0
0x000112bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112bc <Transform_Sha256+1932>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c0 <Transform_Sha256+1936>:	mov	r1, #13
0x000112c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c4 <Transform_Sha256+1940>:	mov	r0, r3
0x000112c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c8 <Transform_Sha256+1944>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2304926372, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112cc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112cc <Transform_Sha256+1948>:	mov	r3, r0
0x000112d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d0 <Transform_Sha256+1952>:	eor	r4, r4, r3
0x000112d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d4 <Transform_Sha256+1956>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d8 <Transform_Sha256+1960>:	mov	r1, #22
0x000112dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112dc <Transform_Sha256+1964>:	mov	r0, r3
0x000112e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e0 <Transform_Sha256+1968>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2304926372, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112e4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e4 <Transform_Sha256+1972>:	mov	r3, r0
0x000112e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e8 <Transform_Sha256+1976>:	eor	r2, r4, r3
0x000112ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ec <Transform_Sha256+1980>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x000112f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f0 <Transform_Sha256+1984>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000112f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f4 <Transform_Sha256+1988>:	orr	r1, r1, r3
0x000112f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f8 <Transform_Sha256+1992>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000112fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112fc <Transform_Sha256+1996>:	and	r1, r1, r3
0x00011300	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11300 <Transform_Sha256+2000>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00011304	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11304 <Transform_Sha256+2004>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011308	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11308 <Transform_Sha256+2008>:	and	r3, r3, r0
0x0001130c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1130c <Transform_Sha256+2012>:	orr	r3, r1, r3
0x00011310	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11310 <Transform_Sha256+2016>:	add	r3, r2, r3
0x00011314	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11314 <Transform_Sha256+2020>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011318	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11318 <Transform_Sha256+2024>:	ldr	r2, [r11, #-276]	; 0xfffffeec
0x0001131c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1131c <Transform_Sha256+2028>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011320	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11320 <Transform_Sha256+2032>:	add	r3, r2, r3
0x00011324	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11324 <Transform_Sha256+2036>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00011328	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11328 <Transform_Sha256+2040>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001132c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1132c <Transform_Sha256+2044>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011330	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11330 <Transform_Sha256+2048>:	add	r3, r2, r3
0x00011334	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11334 <Transform_Sha256+2052>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00011338	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11338 <Transform_Sha256+2056>:	ldr	r4, [r11, #-296]	; 0xfffffed8
0x0001133c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1133c <Transform_Sha256+2060>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011340	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11340 <Transform_Sha256+2064>:	mov	r1, #6
0x00011344	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11344 <Transform_Sha256+2068>:	mov	r0, r3
0x00011348	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11348 <Transform_Sha256+2072>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2304926372, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001134c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1134c <Transform_Sha256+2076>:	mov	r5, r0
0x00011350	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11350 <Transform_Sha256+2080>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011354	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11354 <Transform_Sha256+2084>:	mov	r1, #11
0x00011358	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11358 <Transform_Sha256+2088>:	mov	r0, r3
0x0001135c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1135c <Transform_Sha256+2092>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4158191662, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011360 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11360 <Transform_Sha256+2096>:	mov	r3, r0
0x00011364	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11364 <Transform_Sha256+2100>:	eor	r5, r5, r3
0x00011368	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11368 <Transform_Sha256+2104>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x0001136c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1136c <Transform_Sha256+2108>:	mov	r1, #25
0x00011370	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11370 <Transform_Sha256+2112>:	mov	r0, r3
0x00011374	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11374 <Transform_Sha256+2116>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4158191662, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011378 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11378 <Transform_Sha256+2120>:	mov	r3, r0
0x0001137c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1137c <Transform_Sha256+2124>:	eor	r3, r3, r5
0x00011380	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11380 <Transform_Sha256+2128>:	add	r2, r4, r3
0x00011384	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11384 <Transform_Sha256+2132>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011388	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11388 <Transform_Sha256+2136>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x0001138c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1138c <Transform_Sha256+2140>:	ldr	r12, [r11, #-304]	; 0xfffffed0
0x00011390	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11390 <Transform_Sha256+2144>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011394	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11394 <Transform_Sha256+2148>:	eor	r3, r3, r12
0x00011398	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11398 <Transform_Sha256+2152>:	and	r3, r3, r0
0x0001139c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1139c <Transform_Sha256+2156>:	eor	r3, r3, r1
0x000113a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a0 <Transform_Sha256+2160>:	add	r2, r2, r3
0x000113a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a4 <Transform_Sha256+2164>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a8 <Transform_Sha256+2168>:	add	r3, r3, #5
0x000113ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ac <Transform_Sha256+2172>:	ldr	r1, [pc, #944]	; 0x11764 <Transform_Sha256+3124>
0x000113b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b0 <Transform_Sha256+2176>:	ldr	r3, [r1, r3, lsl #2]
0x000113b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b4 <Transform_Sha256+2180>:	add	r2, r2, r3
0x000113b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b8 <Transform_Sha256+2184>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113bc <Transform_Sha256+2188>:	add	r3, r3, #5
0x000113c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c0 <Transform_Sha256+2192>:	lsl	r3, r3, #2
0x000113c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c4 <Transform_Sha256+2196>:	sub	r3, r3, #12
0x000113c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c8 <Transform_Sha256+2200>:	add	r3, r3, r11
0x000113cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113cc <Transform_Sha256+2204>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000113d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d0 <Transform_Sha256+2208>:	add	r3, r2, r3
0x000113d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d4 <Transform_Sha256+2212>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000113d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d8 <Transform_Sha256+2216>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113dc <Transform_Sha256+2220>:	mov	r1, #2
0x000113e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e0 <Transform_Sha256+2224>:	mov	r0, r3
0x000113e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e4 <Transform_Sha256+2228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4158191662, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113e8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e8 <Transform_Sha256+2232>:	mov	r4, r0
0x000113ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ec <Transform_Sha256+2236>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f0 <Transform_Sha256+2240>:	mov	r1, #13
0x000113f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f4 <Transform_Sha256+2244>:	mov	r0, r3
0x000113f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f8 <Transform_Sha256+2248>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2369652243, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113fc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113fc <Transform_Sha256+2252>:	mov	r3, r0
0x00011400	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11400 <Transform_Sha256+2256>:	eor	r4, r4, r3
0x00011404	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11404 <Transform_Sha256+2260>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011408	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11408 <Transform_Sha256+2264>:	mov	r1, #22
0x0001140c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1140c <Transform_Sha256+2268>:	mov	r0, r3
0x00011410	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11410 <Transform_Sha256+2272>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2369652243, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011414 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11414 <Transform_Sha256+2276>:	mov	r3, r0
0x00011418	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11418 <Transform_Sha256+2280>:	eor	r2, r4, r3
0x0001141c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1141c <Transform_Sha256+2284>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011420	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11420 <Transform_Sha256+2288>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011424	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11424 <Transform_Sha256+2292>:	orr	r1, r1, r3
0x00011428	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11428 <Transform_Sha256+2296>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001142c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1142c <Transform_Sha256+2300>:	and	r1, r1, r3
0x00011430	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11430 <Transform_Sha256+2304>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00011434	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11434 <Transform_Sha256+2308>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011438	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11438 <Transform_Sha256+2312>:	and	r3, r3, r0
0x0001143c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1143c <Transform_Sha256+2316>:	orr	r3, r1, r3
0x00011440	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11440 <Transform_Sha256+2320>:	add	r3, r2, r3
0x00011444	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11444 <Transform_Sha256+2324>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011448	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11448 <Transform_Sha256+2328>:	ldr	r2, [r11, #-280]	; 0xfffffee8
0x0001144c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1144c <Transform_Sha256+2332>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011450	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11450 <Transform_Sha256+2336>:	add	r3, r2, r3
0x00011454	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11454 <Transform_Sha256+2340>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00011458	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11458 <Transform_Sha256+2344>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001145c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1145c <Transform_Sha256+2348>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011460	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11460 <Transform_Sha256+2352>:	add	r3, r2, r3
0x00011464	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11464 <Transform_Sha256+2356>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00011468	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11468 <Transform_Sha256+2360>:	ldr	r4, [r11, #-300]	; 0xfffffed4
0x0001146c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1146c <Transform_Sha256+2364>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011470	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11470 <Transform_Sha256+2368>:	mov	r1, #6
0x00011474	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11474 <Transform_Sha256+2372>:	mov	r0, r3
0x00011478	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11478 <Transform_Sha256+2376>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2369652243, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001147c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1147c <Transform_Sha256+2380>:	mov	r5, r0
0x00011480	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11480 <Transform_Sha256+2384>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011484	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11484 <Transform_Sha256+2388>:	mov	r1, #11
0x00011488	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11488 <Transform_Sha256+2392>:	mov	r0, r3
0x0001148c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1148c <Transform_Sha256+2396>:	bl	0x10760 <rotrFixed>
rotrFixed (x=913779897, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011490 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11490 <Transform_Sha256+2400>:	mov	r3, r0
0x00011494	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11494 <Transform_Sha256+2404>:	eor	r5, r5, r3
0x00011498	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11498 <Transform_Sha256+2408>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001149c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1149c <Transform_Sha256+2412>:	mov	r1, #25
0x000114a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a0 <Transform_Sha256+2416>:	mov	r0, r3
0x000114a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a4 <Transform_Sha256+2420>:	bl	0x10760 <rotrFixed>
rotrFixed (x=913779897, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000114a8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a8 <Transform_Sha256+2424>:	mov	r3, r0
0x000114ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ac <Transform_Sha256+2428>:	eor	r3, r3, r5
0x000114b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b0 <Transform_Sha256+2432>:	add	r2, r4, r3
0x000114b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b4 <Transform_Sha256+2436>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x000114b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b8 <Transform_Sha256+2440>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000114bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114bc <Transform_Sha256+2444>:	ldr	r12, [r11, #-276]	; 0xfffffeec
0x000114c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c0 <Transform_Sha256+2448>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x000114c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c4 <Transform_Sha256+2452>:	eor	r3, r3, r12
0x000114c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c8 <Transform_Sha256+2456>:	and	r3, r3, r0
0x000114cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114cc <Transform_Sha256+2460>:	eor	r3, r3, r1
0x000114d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d0 <Transform_Sha256+2464>:	add	r2, r2, r3
0x000114d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d4 <Transform_Sha256+2468>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d8 <Transform_Sha256+2472>:	add	r3, r3, #6
0x000114dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114dc <Transform_Sha256+2476>:	ldr	r1, [pc, #640]	; 0x11764 <Transform_Sha256+3124>
0x000114e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e0 <Transform_Sha256+2480>:	ldr	r3, [r1, r3, lsl #2]
0x000114e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e4 <Transform_Sha256+2484>:	add	r2, r2, r3
0x000114e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e8 <Transform_Sha256+2488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ec <Transform_Sha256+2492>:	add	r3, r3, #6
0x000114f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f0 <Transform_Sha256+2496>:	lsl	r3, r3, #2
0x000114f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f4 <Transform_Sha256+2500>:	sub	r3, r3, #12
0x000114f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f8 <Transform_Sha256+2504>:	add	r3, r3, r11
0x000114fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114fc <Transform_Sha256+2508>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011500	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11500 <Transform_Sha256+2512>:	add	r3, r2, r3
0x00011504	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11504 <Transform_Sha256+2516>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011508	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11508 <Transform_Sha256+2520>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x0001150c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1150c <Transform_Sha256+2524>:	mov	r1, #2
0x00011510	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11510 <Transform_Sha256+2528>:	mov	r0, r3
0x00011514	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11514 <Transform_Sha256+2532>:	bl	0x10760 <rotrFixed>
rotrFixed (x=913779897, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011518 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11518 <Transform_Sha256+2536>:	mov	r4, r0
0x0001151c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1151c <Transform_Sha256+2540>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011520	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11520 <Transform_Sha256+2544>:	mov	r1, #13
0x00011524	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11524 <Transform_Sha256+2548>:	mov	r0, r3
0x00011528	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11528 <Transform_Sha256+2552>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3695220237, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001152c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1152c <Transform_Sha256+2556>:	mov	r3, r0
0x00011530	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11530 <Transform_Sha256+2560>:	eor	r4, r4, r3
0x00011534	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11534 <Transform_Sha256+2564>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011538	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11538 <Transform_Sha256+2568>:	mov	r1, #22
0x0001153c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1153c <Transform_Sha256+2572>:	mov	r0, r3
0x00011540	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11540 <Transform_Sha256+2576>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3695220237, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011544 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11544 <Transform_Sha256+2580>:	mov	r3, r0
0x00011548	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11548 <Transform_Sha256+2584>:	eor	r2, r4, r3
0x0001154c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1154c <Transform_Sha256+2588>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011550	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11550 <Transform_Sha256+2592>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011554	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11554 <Transform_Sha256+2596>:	orr	r1, r1, r3
0x00011558	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11558 <Transform_Sha256+2600>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x0001155c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1155c <Transform_Sha256+2604>:	and	r1, r1, r3
0x00011560	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11560 <Transform_Sha256+2608>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00011564	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11564 <Transform_Sha256+2612>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011568	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11568 <Transform_Sha256+2616>:	and	r3, r3, r0
0x0001156c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1156c <Transform_Sha256+2620>:	orr	r3, r1, r3
0x00011570	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11570 <Transform_Sha256+2624>:	add	r3, r2, r3
0x00011574	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11574 <Transform_Sha256+2628>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011578	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11578 <Transform_Sha256+2632>:	ldr	r2, [r11, #-284]	; 0xfffffee4
0x0001157c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1157c <Transform_Sha256+2636>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011580	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11580 <Transform_Sha256+2640>:	add	r3, r2, r3
0x00011584	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11584 <Transform_Sha256+2644>:	str	r3, [r11, #-284]	; 0xfffffee4
0x00011588	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11588 <Transform_Sha256+2648>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001158c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1158c <Transform_Sha256+2652>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011590	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11590 <Transform_Sha256+2656>:	add	r3, r2, r3
0x00011594	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11594 <Transform_Sha256+2660>:	str	r3, [r11, #-300]	; 0xfffffed4
0x00011598	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11598 <Transform_Sha256+2664>:	ldr	r4, [r11, #-304]	; 0xfffffed0
0x0001159c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1159c <Transform_Sha256+2668>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a0 <Transform_Sha256+2672>:	mov	r1, #6
0x000115a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a4 <Transform_Sha256+2676>:	mov	r0, r3
0x000115a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a8 <Transform_Sha256+2680>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3695220237, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115ac in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ac <Transform_Sha256+2684>:	mov	r5, r0
0x000115b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b0 <Transform_Sha256+2688>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b4 <Transform_Sha256+2692>:	mov	r1, #11
0x000115b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b8 <Transform_Sha256+2696>:	mov	r0, r3
0x000115bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115bc <Transform_Sha256+2700>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4050742459, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115c0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c0 <Transform_Sha256+2704>:	mov	r3, r0
0x000115c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c4 <Transform_Sha256+2708>:	eor	r5, r5, r3
0x000115c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c8 <Transform_Sha256+2712>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115cc <Transform_Sha256+2716>:	mov	r1, #25
0x000115d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d0 <Transform_Sha256+2720>:	mov	r0, r3
0x000115d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d4 <Transform_Sha256+2724>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4050742459, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115d8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d8 <Transform_Sha256+2728>:	mov	r3, r0
0x000115dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115dc <Transform_Sha256+2732>:	eor	r3, r3, r5
0x000115e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e0 <Transform_Sha256+2736>:	add	r2, r4, r3
0x000115e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e4 <Transform_Sha256+2740>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x000115e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e8 <Transform_Sha256+2744>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000115ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ec <Transform_Sha256+2748>:	ldr	r12, [r11, #-280]	; 0xfffffee8
0x000115f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f0 <Transform_Sha256+2752>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000115f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f4 <Transform_Sha256+2756>:	eor	r3, r3, r12
0x000115f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f8 <Transform_Sha256+2760>:	and	r3, r3, r0
0x000115fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115fc <Transform_Sha256+2764>:	eor	r3, r3, r1
0x00011600	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11600 <Transform_Sha256+2768>:	add	r2, r2, r3
0x00011604	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11604 <Transform_Sha256+2772>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011608	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11608 <Transform_Sha256+2776>:	add	r3, r3, #7
0x0001160c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1160c <Transform_Sha256+2780>:	ldr	r1, [pc, #336]	; 0x11764 <Transform_Sha256+3124>
0x00011610	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11610 <Transform_Sha256+2784>:	ldr	r3, [r1, r3, lsl #2]
0x00011614	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11614 <Transform_Sha256+2788>:	add	r2, r2, r3
0x00011618	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11618 <Transform_Sha256+2792>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001161c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1161c <Transform_Sha256+2796>:	add	r3, r3, #7
0x00011620	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11620 <Transform_Sha256+2800>:	lsl	r3, r3, #2
0x00011624	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11624 <Transform_Sha256+2804>:	sub	r3, r3, #12
0x00011628	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11628 <Transform_Sha256+2808>:	add	r3, r3, r11
0x0001162c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1162c <Transform_Sha256+2812>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011630	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11630 <Transform_Sha256+2816>:	add	r3, r2, r3
0x00011634	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11634 <Transform_Sha256+2820>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011638	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11638 <Transform_Sha256+2824>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001163c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1163c <Transform_Sha256+2828>:	mov	r1, #2
0x00011640	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11640 <Transform_Sha256+2832>:	mov	r0, r3
0x00011644	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11644 <Transform_Sha256+2836>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4050742459, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011648 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11648 <Transform_Sha256+2840>:	mov	r4, r0
0x0001164c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1164c <Transform_Sha256+2844>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011650	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11650 <Transform_Sha256+2848>:	mov	r1, #13
0x00011654	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11654 <Transform_Sha256+2852>:	mov	r0, r3
0x00011658	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11658 <Transform_Sha256+2856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=661710182, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001165c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1165c <Transform_Sha256+2860>:	mov	r3, r0
0x00011660	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11660 <Transform_Sha256+2864>:	eor	r4, r4, r3
0x00011664	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11664 <Transform_Sha256+2868>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011668	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11668 <Transform_Sha256+2872>:	mov	r1, #22
0x0001166c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1166c <Transform_Sha256+2876>:	mov	r0, r3
0x00011670	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11670 <Transform_Sha256+2880>:	bl	0x10760 <rotrFixed>
rotrFixed (x=661710182, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011674 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11674 <Transform_Sha256+2884>:	mov	r3, r0
0x00011678	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11678 <Transform_Sha256+2888>:	eor	r2, r4, r3
0x0001167c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1167c <Transform_Sha256+2892>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011680	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11680 <Transform_Sha256+2896>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011684	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11684 <Transform_Sha256+2900>:	orr	r1, r1, r3
0x00011688	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11688 <Transform_Sha256+2904>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x0001168c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1168c <Transform_Sha256+2908>:	and	r1, r1, r3
0x00011690	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11690 <Transform_Sha256+2912>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x00011694	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11694 <Transform_Sha256+2916>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011698	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11698 <Transform_Sha256+2920>:	and	r3, r3, r0
0x0001169c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1169c <Transform_Sha256+2924>:	orr	r3, r1, r3
0x000116a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a0 <Transform_Sha256+2928>:	add	r3, r2, r3
0x000116a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a4 <Transform_Sha256+2932>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000116a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a8 <Transform_Sha256+2936>:	ldr	r2, [r11, #-288]	; 0xfffffee0
0x000116ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116ac <Transform_Sha256+2940>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000116b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b0 <Transform_Sha256+2944>:	add	r3, r2, r3
0x000116b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b4 <Transform_Sha256+2948>:	str	r3, [r11, #-288]	; 0xfffffee0
0x000116b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b8 <Transform_Sha256+2952>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000116bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116bc <Transform_Sha256+2956>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000116c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c0 <Transform_Sha256+2960>:	add	r3, r2, r3
0x000116c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c4 <Transform_Sha256+2964>:	str	r3, [r11, #-304]	; 0xfffffed0
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116c8 <Transform_Sha256+2968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116cc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116cc <Transform_Sha256+2972>:	add	r3, r3, #8
0x000116d0	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d0 <Transform_Sha256+2976>:	str	r3, [r11, #-316]	; 0xfffffec4
0x000116d4	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d4 <Transform_Sha256+2980>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116d8	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d8 <Transform_Sha256+2984>:	cmp	r3, #63	; 0x3f
0x000116dc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116dc <Transform_Sha256+2988>:	ble	0x10d50 <Transform_Sha256+544>
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d50 <Transform_Sha256+544>:	ldr	r4, [r11, #-276]	; 0xfffffeec
0x00010d54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d54 <Transform_Sha256+548>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d58 <Transform_Sha256+552>:	mov	r1, #6
0x00010d5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d5c <Transform_Sha256+556>:	mov	r0, r3
0x00010d60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d60 <Transform_Sha256+560>:	bl	0x10760 <rotrFixed>
rotrFixed (x=661710182, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d64 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d64 <Transform_Sha256+564>:	mov	r5, r0
0x00010d68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d68 <Transform_Sha256+568>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d6c <Transform_Sha256+572>:	mov	r1, #11
0x00010d70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d70 <Transform_Sha256+576>:	mov	r0, r3
0x00010d74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d74 <Transform_Sha256+580>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2332633528, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d78 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d78 <Transform_Sha256+584>:	mov	r3, r0
0x00010d7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d7c <Transform_Sha256+588>:	eor	r5, r5, r3
0x00010d80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d80 <Transform_Sha256+592>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00010d84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d84 <Transform_Sha256+596>:	mov	r1, #25
0x00010d88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d88 <Transform_Sha256+600>:	mov	r0, r3
0x00010d8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d8c <Transform_Sha256+604>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2332633528, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010d90 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d90 <Transform_Sha256+608>:	mov	r3, r0
0x00010d94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d94 <Transform_Sha256+612>:	eor	r3, r3, r5
0x00010d98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d98 <Transform_Sha256+616>:	add	r2, r4, r3
0x00010d9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10d9c <Transform_Sha256+620>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00010da0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da0 <Transform_Sha256+624>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00010da4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da4 <Transform_Sha256+628>:	ldr	r12, [r11, #-284]	; 0xfffffee4
0x00010da8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10da8 <Transform_Sha256+632>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00010dac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dac <Transform_Sha256+636>:	eor	r3, r3, r12
0x00010db0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db0 <Transform_Sha256+640>:	and	r3, r3, r0
0x00010db4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db4 <Transform_Sha256+644>:	eor	r3, r3, r1
0x00010db8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10db8 <Transform_Sha256+648>:	add	r2, r2, r3
0x00010dbc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dbc <Transform_Sha256+652>:	ldr	r1, [pc, #2464]	; 0x11764 <Transform_Sha256+3124>
0x00010dc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc0 <Transform_Sha256+656>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc4 <Transform_Sha256+660>:	ldr	r3, [r1, r3, lsl #2]
0x00010dc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dc8 <Transform_Sha256+664>:	add	r2, r2, r3
0x00010dcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dcc <Transform_Sha256+668>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010dd0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd0 <Transform_Sha256+672>:	lsl	r3, r3, #2
0x00010dd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd4 <Transform_Sha256+676>:	sub	r3, r3, #12
0x00010dd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dd8 <Transform_Sha256+680>:	add	r3, r3, r11
0x00010ddc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ddc <Transform_Sha256+684>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010de0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de0 <Transform_Sha256+688>:	add	r3, r2, r3
0x00010de4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de4 <Transform_Sha256+692>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010de8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10de8 <Transform_Sha256+696>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010dec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dec <Transform_Sha256+700>:	mov	r1, #2
0x00010df0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df0 <Transform_Sha256+704>:	mov	r0, r3
0x00010df4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df4 <Transform_Sha256+708>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2332633528, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010df8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10df8 <Transform_Sha256+712>:	mov	r4, r0
0x00010dfc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10dfc <Transform_Sha256+716>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e00 <Transform_Sha256+720>:	mov	r1, #13
0x00010e04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e04 <Transform_Sha256+724>:	mov	r0, r3
0x00010e08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e08 <Transform_Sha256+728>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4035962718, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e0c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e0c <Transform_Sha256+732>:	mov	r3, r0
0x00010e10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e10 <Transform_Sha256+736>:	eor	r4, r4, r3
0x00010e14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e14 <Transform_Sha256+740>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010e18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e18 <Transform_Sha256+744>:	mov	r1, #22
0x00010e1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e1c <Transform_Sha256+748>:	mov	r0, r3
0x00010e20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e20 <Transform_Sha256+752>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4035962718, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e24 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e24 <Transform_Sha256+756>:	mov	r3, r0
0x00010e28	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e28 <Transform_Sha256+760>:	eor	r2, r4, r3
0x00010e2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e2c <Transform_Sha256+764>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x00010e30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e30 <Transform_Sha256+768>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e34 <Transform_Sha256+772>:	orr	r1, r1, r3
0x00010e38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e38 <Transform_Sha256+776>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010e3c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e3c <Transform_Sha256+780>:	and	r1, r1, r3
0x00010e40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e40 <Transform_Sha256+784>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x00010e44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e44 <Transform_Sha256+788>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010e48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e48 <Transform_Sha256+792>:	and	r3, r3, r0
0x00010e4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e4c <Transform_Sha256+796>:	orr	r3, r1, r3
0x00010e50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e50 <Transform_Sha256+800>:	add	r3, r2, r3
0x00010e54	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e54 <Transform_Sha256+804>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010e58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e58 <Transform_Sha256+808>:	ldr	r2, [r11, #-292]	; 0xfffffedc
0x00010e5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e5c <Transform_Sha256+812>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010e60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e60 <Transform_Sha256+816>:	add	r3, r2, r3
0x00010e64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e64 <Transform_Sha256+820>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00010e68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e68 <Transform_Sha256+824>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010e6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e6c <Transform_Sha256+828>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010e70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e70 <Transform_Sha256+832>:	add	r3, r2, r3
0x00010e74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e74 <Transform_Sha256+836>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00010e78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e78 <Transform_Sha256+840>:	ldr	r4, [r11, #-280]	; 0xfffffee8
0x00010e7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e7c <Transform_Sha256+844>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e80 <Transform_Sha256+848>:	mov	r1, #6
0x00010e84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e84 <Transform_Sha256+852>:	mov	r0, r3
0x00010e88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e88 <Transform_Sha256+856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4035962718, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010e8c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e8c <Transform_Sha256+860>:	mov	r5, r0
0x00010e90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e90 <Transform_Sha256+864>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010e94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e94 <Transform_Sha256+868>:	mov	r1, #11
0x00010e98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e98 <Transform_Sha256+872>:	mov	r0, r3
0x00010e9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10e9c <Transform_Sha256+876>:	bl	0x10760 <rotrFixed>
rotrFixed (x=929980990, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010ea0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea0 <Transform_Sha256+880>:	mov	r3, r0
0x00010ea4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea4 <Transform_Sha256+884>:	eor	r5, r5, r3
0x00010ea8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ea8 <Transform_Sha256+888>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00010eac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eac <Transform_Sha256+892>:	mov	r1, #25
0x00010eb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb0 <Transform_Sha256+896>:	mov	r0, r3
0x00010eb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb4 <Transform_Sha256+900>:	bl	0x10760 <rotrFixed>
rotrFixed (x=929980990, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010eb8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eb8 <Transform_Sha256+904>:	mov	r3, r0
0x00010ebc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ebc <Transform_Sha256+908>:	eor	r3, r3, r5
0x00010ec0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec0 <Transform_Sha256+912>:	add	r2, r4, r3
0x00010ec4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec4 <Transform_Sha256+916>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x00010ec8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ec8 <Transform_Sha256+920>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00010ecc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ecc <Transform_Sha256+924>:	ldr	r12, [r11, #-288]	; 0xfffffee0
0x00010ed0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed0 <Transform_Sha256+928>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00010ed4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed4 <Transform_Sha256+932>:	eor	r3, r3, r12
0x00010ed8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ed8 <Transform_Sha256+936>:	and	r3, r3, r0
0x00010edc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10edc <Transform_Sha256+940>:	eor	r3, r3, r1
0x00010ee0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee0 <Transform_Sha256+944>:	add	r2, r2, r3
0x00010ee4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee4 <Transform_Sha256+948>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010ee8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ee8 <Transform_Sha256+952>:	add	r3, r3, #1
0x00010eec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10eec <Transform_Sha256+956>:	ldr	r1, [pc, #2160]	; 0x11764 <Transform_Sha256+3124>
0x00010ef0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef0 <Transform_Sha256+960>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef4 <Transform_Sha256+964>:	add	r2, r2, r3
0x00010ef8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ef8 <Transform_Sha256+968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00010efc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10efc <Transform_Sha256+972>:	add	r3, r3, #1
0x00010f00	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f00 <Transform_Sha256+976>:	lsl	r3, r3, #2
0x00010f04	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f04 <Transform_Sha256+980>:	sub	r3, r3, #12
0x00010f08	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f08 <Transform_Sha256+984>:	add	r3, r3, r11
0x00010f0c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f0c <Transform_Sha256+988>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00010f10	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f10 <Transform_Sha256+992>:	add	r3, r2, r3
0x00010f14	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f14 <Transform_Sha256+996>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00010f18	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f18 <Transform_Sha256+1000>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f1c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f1c <Transform_Sha256+1004>:	mov	r1, #2
0x00010f20	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f20 <Transform_Sha256+1008>:	mov	r0, r3
0x00010f24	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f24 <Transform_Sha256+1012>:	bl	0x10760 <rotrFixed>
rotrFixed (x=929980990, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f28 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f28 <Transform_Sha256+1016>:	mov	r4, r0
0x00010f2c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f2c <Transform_Sha256+1020>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f30	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f30 <Transform_Sha256+1024>:	mov	r1, #13
0x00010f34	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f34 <Transform_Sha256+1028>:	mov	r0, r3
0x00010f38	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f38 <Transform_Sha256+1032>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1471826403, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f3c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f3c <Transform_Sha256+1036>:	mov	r3, r0
0x00010f40	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f40 <Transform_Sha256+1040>:	eor	r4, r4, r3
0x00010f44	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f44 <Transform_Sha256+1044>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00010f48	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f48 <Transform_Sha256+1048>:	mov	r1, #22
0x00010f4c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f4c <Transform_Sha256+1052>:	mov	r0, r3
0x00010f50	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f50 <Transform_Sha256+1056>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1471826403, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010f54 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f54 <Transform_Sha256+1060>:	mov	r3, r0
0x00010f58	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f58 <Transform_Sha256+1064>:	eor	r2, r4, r3
0x00010f5c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f5c <Transform_Sha256+1068>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x00010f60	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f60 <Transform_Sha256+1072>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f64	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f64 <Transform_Sha256+1076>:	orr	r1, r1, r3
0x00010f68	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f68 <Transform_Sha256+1080>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00010f6c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f6c <Transform_Sha256+1084>:	and	r1, r1, r3
0x00010f70	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f70 <Transform_Sha256+1088>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x00010f74	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f74 <Transform_Sha256+1092>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00010f78	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f78 <Transform_Sha256+1096>:	and	r3, r3, r0
0x00010f7c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f7c <Transform_Sha256+1100>:	orr	r3, r1, r3
0x00010f80	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f80 <Transform_Sha256+1104>:	add	r3, r2, r3
0x00010f84	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f84 <Transform_Sha256+1108>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00010f88	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f88 <Transform_Sha256+1112>:	ldr	r2, [r11, #-296]	; 0xfffffed8
0x00010f8c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f8c <Transform_Sha256+1116>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00010f90	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f90 <Transform_Sha256+1120>:	add	r3, r2, r3
0x00010f94	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f94 <Transform_Sha256+1124>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00010f98	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f98 <Transform_Sha256+1128>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x00010f9c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10f9c <Transform_Sha256+1132>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00010fa0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa0 <Transform_Sha256+1136>:	add	r3, r2, r3
0x00010fa4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa4 <Transform_Sha256+1140>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00010fa8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fa8 <Transform_Sha256+1144>:	ldr	r4, [r11, #-284]	; 0xfffffee4
0x00010fac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fac <Transform_Sha256+1148>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fb0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb0 <Transform_Sha256+1152>:	mov	r1, #6
0x00010fb4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb4 <Transform_Sha256+1156>:	mov	r0, r3
0x00010fb8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fb8 <Transform_Sha256+1160>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1471826403, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fbc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fbc <Transform_Sha256+1164>:	mov	r5, r0
0x00010fc0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc0 <Transform_Sha256+1168>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fc4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc4 <Transform_Sha256+1172>:	mov	r1, #11
0x00010fc8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fc8 <Transform_Sha256+1176>:	mov	r0, r3
0x00010fcc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fcc <Transform_Sha256+1180>:	bl	0x10760 <rotrFixed>
rotrFixed (x=52556804, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fd0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd0 <Transform_Sha256+1184>:	mov	r3, r0
0x00010fd4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd4 <Transform_Sha256+1188>:	eor	r5, r5, r3
0x00010fd8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fd8 <Transform_Sha256+1192>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00010fdc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fdc <Transform_Sha256+1196>:	mov	r1, #25
0x00010fe0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe0 <Transform_Sha256+1200>:	mov	r0, r3
0x00010fe4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe4 <Transform_Sha256+1204>:	bl	0x10760 <rotrFixed>
rotrFixed (x=52556804, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00010fe8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fe8 <Transform_Sha256+1208>:	mov	r3, r0
0x00010fec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10fec <Transform_Sha256+1212>:	eor	r3, r3, r5
0x00010ff0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff0 <Transform_Sha256+1216>:	add	r2, r4, r3
0x00010ff4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff4 <Transform_Sha256+1220>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x00010ff8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ff8 <Transform_Sha256+1224>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00010ffc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x10ffc <Transform_Sha256+1228>:	ldr	r12, [r11, #-292]	; 0xfffffedc
0x00011000	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11000 <Transform_Sha256+1232>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011004	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11004 <Transform_Sha256+1236>:	eor	r3, r3, r12
0x00011008	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11008 <Transform_Sha256+1240>:	and	r3, r3, r0
0x0001100c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1100c <Transform_Sha256+1244>:	eor	r3, r3, r1
0x00011010	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11010 <Transform_Sha256+1248>:	add	r2, r2, r3
0x00011014	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11014 <Transform_Sha256+1252>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011018	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11018 <Transform_Sha256+1256>:	add	r3, r3, #2
0x0001101c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1101c <Transform_Sha256+1260>:	ldr	r1, [pc, #1856]	; 0x11764 <Transform_Sha256+3124>
0x00011020	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11020 <Transform_Sha256+1264>:	ldr	r3, [r1, r3, lsl #2]
0x00011024	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11024 <Transform_Sha256+1268>:	add	r2, r2, r3
0x00011028	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11028 <Transform_Sha256+1272>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001102c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1102c <Transform_Sha256+1276>:	add	r3, r3, #2
0x00011030	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11030 <Transform_Sha256+1280>:	lsl	r3, r3, #2
0x00011034	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11034 <Transform_Sha256+1284>:	sub	r3, r3, #12
0x00011038	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11038 <Transform_Sha256+1288>:	add	r3, r3, r11
0x0001103c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1103c <Transform_Sha256+1292>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011040	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11040 <Transform_Sha256+1296>:	add	r3, r2, r3
0x00011044	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11044 <Transform_Sha256+1300>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011048	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11048 <Transform_Sha256+1304>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001104c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1104c <Transform_Sha256+1308>:	mov	r1, #2
0x00011050	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11050 <Transform_Sha256+1312>:	mov	r0, r3
0x00011054	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11054 <Transform_Sha256+1316>:	bl	0x10760 <rotrFixed>
rotrFixed (x=52556804, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011058 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11058 <Transform_Sha256+1320>:	mov	r4, r0
0x0001105c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1105c <Transform_Sha256+1324>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011060	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11060 <Transform_Sha256+1328>:	mov	r1, #13
0x00011064	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11064 <Transform_Sha256+1332>:	mov	r0, r3
0x00011068	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11068 <Transform_Sha256+1336>:	bl	0x10760 <rotrFixed>
rotrFixed (x=309323345, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001106c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1106c <Transform_Sha256+1340>:	mov	r3, r0
0x00011070	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11070 <Transform_Sha256+1344>:	eor	r4, r4, r3
0x00011074	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11074 <Transform_Sha256+1348>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011078	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11078 <Transform_Sha256+1352>:	mov	r1, #22
0x0001107c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1107c <Transform_Sha256+1356>:	mov	r0, r3
0x00011080	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11080 <Transform_Sha256+1360>:	bl	0x10760 <rotrFixed>
rotrFixed (x=309323345, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011084 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11084 <Transform_Sha256+1364>:	mov	r3, r0
0x00011088	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11088 <Transform_Sha256+1368>:	eor	r2, r4, r3
0x0001108c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1108c <Transform_Sha256+1372>:	ldr	r1, [r11, #-280]	; 0xfffffee8
0x00011090	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11090 <Transform_Sha256+1376>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011094	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11094 <Transform_Sha256+1380>:	orr	r1, r1, r3
0x00011098	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11098 <Transform_Sha256+1384>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001109c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1109c <Transform_Sha256+1388>:	and	r1, r1, r3
0x000110a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a0 <Transform_Sha256+1392>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000110a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a4 <Transform_Sha256+1396>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000110a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110a8 <Transform_Sha256+1400>:	and	r3, r3, r0
0x000110ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ac <Transform_Sha256+1404>:	orr	r3, r1, r3
0x000110b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b0 <Transform_Sha256+1408>:	add	r3, r2, r3
0x000110b4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b4 <Transform_Sha256+1412>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000110b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110b8 <Transform_Sha256+1416>:	ldr	r2, [r11, #-300]	; 0xfffffed4
0x000110bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110bc <Transform_Sha256+1420>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000110c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c0 <Transform_Sha256+1424>:	add	r3, r2, r3
0x000110c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c4 <Transform_Sha256+1428>:	str	r3, [r11, #-300]	; 0xfffffed4
0x000110c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110c8 <Transform_Sha256+1432>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000110cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110cc <Transform_Sha256+1436>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000110d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d0 <Transform_Sha256+1440>:	add	r3, r2, r3
0x000110d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d4 <Transform_Sha256+1444>:	str	r3, [r11, #-284]	; 0xfffffee4
0x000110d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110d8 <Transform_Sha256+1448>:	ldr	r4, [r11, #-288]	; 0xfffffee0
0x000110dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110dc <Transform_Sha256+1452>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e0 <Transform_Sha256+1456>:	mov	r1, #6
0x000110e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e4 <Transform_Sha256+1460>:	mov	r0, r3
0x000110e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110e8 <Transform_Sha256+1464>:	bl	0x10760 <rotrFixed>
rotrFixed (x=309323345, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000110ec in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110ec <Transform_Sha256+1468>:	mov	r5, r0
0x000110f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f0 <Transform_Sha256+1472>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x000110f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f4 <Transform_Sha256+1476>:	mov	r1, #11
0x000110f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110f8 <Transform_Sha256+1480>:	mov	r0, r3
0x000110fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x110fc <Transform_Sha256+1484>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3106213347, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011100 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11100 <Transform_Sha256+1488>:	mov	r3, r0
0x00011104	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11104 <Transform_Sha256+1492>:	eor	r5, r5, r3
0x00011108	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11108 <Transform_Sha256+1496>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001110c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1110c <Transform_Sha256+1500>:	mov	r1, #25
0x00011110	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11110 <Transform_Sha256+1504>:	mov	r0, r3
0x00011114	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11114 <Transform_Sha256+1508>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3106213347, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011118 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11118 <Transform_Sha256+1512>:	mov	r3, r0
0x0001111c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1111c <Transform_Sha256+1516>:	eor	r3, r3, r5
0x00011120	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11120 <Transform_Sha256+1520>:	add	r2, r4, r3
0x00011124	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11124 <Transform_Sha256+1524>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011128	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11128 <Transform_Sha256+1528>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x0001112c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1112c <Transform_Sha256+1532>:	ldr	r12, [r11, #-296]	; 0xfffffed8
0x00011130	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11130 <Transform_Sha256+1536>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011134	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11134 <Transform_Sha256+1540>:	eor	r3, r3, r12
0x00011138	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11138 <Transform_Sha256+1544>:	and	r3, r3, r0
0x0001113c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1113c <Transform_Sha256+1548>:	eor	r3, r3, r1
0x00011140	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11140 <Transform_Sha256+1552>:	add	r2, r2, r3
0x00011144	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11144 <Transform_Sha256+1556>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011148	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11148 <Transform_Sha256+1560>:	add	r3, r3, #3
0x0001114c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1114c <Transform_Sha256+1564>:	ldr	r1, [pc, #1552]	; 0x11764 <Transform_Sha256+3124>
0x00011150	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11150 <Transform_Sha256+1568>:	ldr	r3, [r1, r3, lsl #2]
0x00011154	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11154 <Transform_Sha256+1572>:	add	r2, r2, r3
0x00011158	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11158 <Transform_Sha256+1576>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001115c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1115c <Transform_Sha256+1580>:	add	r3, r3, #3
0x00011160	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11160 <Transform_Sha256+1584>:	lsl	r3, r3, #2
0x00011164	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11164 <Transform_Sha256+1588>:	sub	r3, r3, #12
0x00011168	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11168 <Transform_Sha256+1592>:	add	r3, r3, r11
0x0001116c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1116c <Transform_Sha256+1596>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011170	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11170 <Transform_Sha256+1600>:	add	r3, r2, r3
0x00011174	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11174 <Transform_Sha256+1604>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011178	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11178 <Transform_Sha256+1608>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001117c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1117c <Transform_Sha256+1612>:	mov	r1, #2
0x00011180	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11180 <Transform_Sha256+1616>:	mov	r0, r3
0x00011184	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11184 <Transform_Sha256+1620>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3106213347, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011188 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11188 <Transform_Sha256+1624>:	mov	r4, r0
0x0001118c	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1118c <Transform_Sha256+1628>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011190	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11190 <Transform_Sha256+1632>:	mov	r1, #13
0x00011194	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11194 <Transform_Sha256+1636>:	mov	r0, r3
0x00011198	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11198 <Transform_Sha256+1640>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2918071922, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001119c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x1119c <Transform_Sha256+1644>:	mov	r3, r0
0x000111a0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a0 <Transform_Sha256+1648>:	eor	r4, r4, r3
0x000111a4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a4 <Transform_Sha256+1652>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000111a8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111a8 <Transform_Sha256+1656>:	mov	r1, #22
0x000111ac	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ac <Transform_Sha256+1660>:	mov	r0, r3
0x000111b0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b0 <Transform_Sha256+1664>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2918071922, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000111b4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:992
992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b4 <Transform_Sha256+1668>:	mov	r3, r0
0x000111b8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111b8 <Transform_Sha256+1672>:	eor	r2, r4, r3
0x000111bc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111bc <Transform_Sha256+1676>:	ldr	r1, [r11, #-284]	; 0xfffffee4
0x000111c0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c0 <Transform_Sha256+1680>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111c4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c4 <Transform_Sha256+1684>:	orr	r1, r1, r3
0x000111c8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111c8 <Transform_Sha256+1688>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000111cc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111cc <Transform_Sha256+1692>:	and	r1, r1, r3
0x000111d0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d0 <Transform_Sha256+1696>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000111d4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d4 <Transform_Sha256+1700>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000111d8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111d8 <Transform_Sha256+1704>:	and	r3, r3, r0
0x000111dc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111dc <Transform_Sha256+1708>:	orr	r3, r1, r3
0x000111e0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e0 <Transform_Sha256+1712>:	add	r3, r2, r3
0x000111e4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e4 <Transform_Sha256+1716>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000111e8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111e8 <Transform_Sha256+1720>:	ldr	r2, [r11, #-304]	; 0xfffffed0
0x000111ec	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111ec <Transform_Sha256+1724>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000111f0	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f0 <Transform_Sha256+1728>:	add	r3, r2, r3
0x000111f4	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f4 <Transform_Sha256+1732>:	str	r3, [r11, #-304]	; 0xfffffed0
0x000111f8	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111f8 <Transform_Sha256+1736>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000111fc	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x111fc <Transform_Sha256+1740>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011200	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11200 <Transform_Sha256+1744>:	add	r3, r2, r3
0x00011204	992	            RND(0); RND(1); RND(2); RND(3);
=> 0x11204 <Transform_Sha256+1748>:	str	r3, [r11, #-288]	; 0xfffffee0
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11208 <Transform_Sha256+1752>:	ldr	r4, [r11, #-292]	; 0xfffffedc
0x0001120c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1120c <Transform_Sha256+1756>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011210	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11210 <Transform_Sha256+1760>:	mov	r1, #6
0x00011214	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11214 <Transform_Sha256+1764>:	mov	r0, r3
0x00011218	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11218 <Transform_Sha256+1768>:	bl	0x10760 <rotrFixed>
rotrFixed (x=2918071922, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001121c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1121c <Transform_Sha256+1772>:	mov	r5, r0
0x00011220	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11220 <Transform_Sha256+1776>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x00011224	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11224 <Transform_Sha256+1780>:	mov	r1, #11
0x00011228	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11228 <Transform_Sha256+1784>:	mov	r0, r3
0x0001122c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1122c <Transform_Sha256+1788>:	bl	0x10760 <rotrFixed>
rotrFixed (x=890840856, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011230 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11230 <Transform_Sha256+1792>:	mov	r3, r0
0x00011234	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11234 <Transform_Sha256+1796>:	eor	r5, r5, r3
0x00011238	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11238 <Transform_Sha256+1800>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x0001123c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1123c <Transform_Sha256+1804>:	mov	r1, #25
0x00011240	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11240 <Transform_Sha256+1808>:	mov	r0, r3
0x00011244	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11244 <Transform_Sha256+1812>:	bl	0x10760 <rotrFixed>
rotrFixed (x=890840856, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011248 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11248 <Transform_Sha256+1816>:	mov	r3, r0
0x0001124c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1124c <Transform_Sha256+1820>:	eor	r3, r3, r5
0x00011250	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11250 <Transform_Sha256+1824>:	add	r2, r4, r3
0x00011254	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11254 <Transform_Sha256+1828>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011258	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11258 <Transform_Sha256+1832>:	ldr	r0, [r11, #-304]	; 0xfffffed0
0x0001125c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1125c <Transform_Sha256+1836>:	ldr	r12, [r11, #-300]	; 0xfffffed4
0x00011260	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11260 <Transform_Sha256+1840>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011264	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11264 <Transform_Sha256+1844>:	eor	r3, r3, r12
0x00011268	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11268 <Transform_Sha256+1848>:	and	r3, r3, r0
0x0001126c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1126c <Transform_Sha256+1852>:	eor	r3, r3, r1
0x00011270	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11270 <Transform_Sha256+1856>:	add	r2, r2, r3
0x00011274	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11274 <Transform_Sha256+1860>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011278	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11278 <Transform_Sha256+1864>:	add	r3, r3, #4
0x0001127c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1127c <Transform_Sha256+1868>:	ldr	r1, [pc, #1248]	; 0x11764 <Transform_Sha256+3124>
0x00011280	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11280 <Transform_Sha256+1872>:	ldr	r3, [r1, r3, lsl #2]
0x00011284	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11284 <Transform_Sha256+1876>:	add	r2, r2, r3
0x00011288	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11288 <Transform_Sha256+1880>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001128c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1128c <Transform_Sha256+1884>:	add	r3, r3, #4
0x00011290	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11290 <Transform_Sha256+1888>:	lsl	r3, r3, #2
0x00011294	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11294 <Transform_Sha256+1892>:	sub	r3, r3, #12
0x00011298	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11298 <Transform_Sha256+1896>:	add	r3, r3, r11
0x0001129c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1129c <Transform_Sha256+1900>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000112a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a0 <Transform_Sha256+1904>:	add	r3, r2, r3
0x000112a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a4 <Transform_Sha256+1908>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000112a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112a8 <Transform_Sha256+1912>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ac <Transform_Sha256+1916>:	mov	r1, #2
0x000112b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b0 <Transform_Sha256+1920>:	mov	r0, r3
0x000112b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b4 <Transform_Sha256+1924>:	bl	0x10760 <rotrFixed>
rotrFixed (x=890840856, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112b8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112b8 <Transform_Sha256+1928>:	mov	r4, r0
0x000112bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112bc <Transform_Sha256+1932>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c0 <Transform_Sha256+1936>:	mov	r1, #13
0x000112c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c4 <Transform_Sha256+1940>:	mov	r0, r3
0x000112c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112c8 <Transform_Sha256+1944>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1015994503, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112cc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112cc <Transform_Sha256+1948>:	mov	r3, r0
0x000112d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d0 <Transform_Sha256+1952>:	eor	r4, r4, r3
0x000112d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d4 <Transform_Sha256+1956>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x000112d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112d8 <Transform_Sha256+1960>:	mov	r1, #22
0x000112dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112dc <Transform_Sha256+1964>:	mov	r0, r3
0x000112e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e0 <Transform_Sha256+1968>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1015994503, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000112e4 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e4 <Transform_Sha256+1972>:	mov	r3, r0
0x000112e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112e8 <Transform_Sha256+1976>:	eor	r2, r4, r3
0x000112ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112ec <Transform_Sha256+1980>:	ldr	r1, [r11, #-288]	; 0xfffffee0
0x000112f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f0 <Transform_Sha256+1984>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000112f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f4 <Transform_Sha256+1988>:	orr	r1, r1, r3
0x000112f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112f8 <Transform_Sha256+1992>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x000112fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x112fc <Transform_Sha256+1996>:	and	r1, r1, r3
0x00011300	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11300 <Transform_Sha256+2000>:	ldr	r0, [r11, #-288]	; 0xfffffee0
0x00011304	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11304 <Transform_Sha256+2004>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x00011308	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11308 <Transform_Sha256+2008>:	and	r3, r3, r0
0x0001130c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1130c <Transform_Sha256+2012>:	orr	r3, r1, r3
0x00011310	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11310 <Transform_Sha256+2016>:	add	r3, r2, r3
0x00011314	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11314 <Transform_Sha256+2020>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011318	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11318 <Transform_Sha256+2024>:	ldr	r2, [r11, #-276]	; 0xfffffeec
0x0001131c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1131c <Transform_Sha256+2028>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011320	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11320 <Transform_Sha256+2032>:	add	r3, r2, r3
0x00011324	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11324 <Transform_Sha256+2036>:	str	r3, [r11, #-276]	; 0xfffffeec
0x00011328	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11328 <Transform_Sha256+2040>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001132c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1132c <Transform_Sha256+2044>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011330	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11330 <Transform_Sha256+2048>:	add	r3, r2, r3
0x00011334	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11334 <Transform_Sha256+2052>:	str	r3, [r11, #-292]	; 0xfffffedc
0x00011338	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11338 <Transform_Sha256+2056>:	ldr	r4, [r11, #-296]	; 0xfffffed8
0x0001133c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1133c <Transform_Sha256+2060>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011340	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11340 <Transform_Sha256+2064>:	mov	r1, #6
0x00011344	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11344 <Transform_Sha256+2068>:	mov	r0, r3
0x00011348	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11348 <Transform_Sha256+2072>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1015994503, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001134c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1134c <Transform_Sha256+2076>:	mov	r5, r0
0x00011350	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11350 <Transform_Sha256+2080>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x00011354	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11354 <Transform_Sha256+2084>:	mov	r1, #11
0x00011358	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11358 <Transform_Sha256+2088>:	mov	r0, r3
0x0001135c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1135c <Transform_Sha256+2092>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3315714902, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011360 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11360 <Transform_Sha256+2096>:	mov	r3, r0
0x00011364	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11364 <Transform_Sha256+2100>:	eor	r5, r5, r3
0x00011368	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11368 <Transform_Sha256+2104>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x0001136c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1136c <Transform_Sha256+2108>:	mov	r1, #25
0x00011370	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11370 <Transform_Sha256+2112>:	mov	r0, r3
0x00011374	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11374 <Transform_Sha256+2116>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3315714902, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011378 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11378 <Transform_Sha256+2120>:	mov	r3, r0
0x0001137c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1137c <Transform_Sha256+2124>:	eor	r3, r3, r5
0x00011380	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11380 <Transform_Sha256+2128>:	add	r2, r4, r3
0x00011384	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11384 <Transform_Sha256+2132>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011388	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11388 <Transform_Sha256+2136>:	ldr	r0, [r11, #-276]	; 0xfffffeec
0x0001138c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1138c <Transform_Sha256+2140>:	ldr	r12, [r11, #-304]	; 0xfffffed0
0x00011390	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11390 <Transform_Sha256+2144>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011394	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11394 <Transform_Sha256+2148>:	eor	r3, r3, r12
0x00011398	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11398 <Transform_Sha256+2152>:	and	r3, r3, r0
0x0001139c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1139c <Transform_Sha256+2156>:	eor	r3, r3, r1
0x000113a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a0 <Transform_Sha256+2160>:	add	r2, r2, r3
0x000113a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a4 <Transform_Sha256+2164>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113a8 <Transform_Sha256+2168>:	add	r3, r3, #5
0x000113ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ac <Transform_Sha256+2172>:	ldr	r1, [pc, #944]	; 0x11764 <Transform_Sha256+3124>
0x000113b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b0 <Transform_Sha256+2176>:	ldr	r3, [r1, r3, lsl #2]
0x000113b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b4 <Transform_Sha256+2180>:	add	r2, r2, r3
0x000113b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113b8 <Transform_Sha256+2184>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000113bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113bc <Transform_Sha256+2188>:	add	r3, r3, #5
0x000113c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c0 <Transform_Sha256+2192>:	lsl	r3, r3, #2
0x000113c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c4 <Transform_Sha256+2196>:	sub	r3, r3, #12
0x000113c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113c8 <Transform_Sha256+2200>:	add	r3, r3, r11
0x000113cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113cc <Transform_Sha256+2204>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x000113d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d0 <Transform_Sha256+2208>:	add	r3, r2, r3
0x000113d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d4 <Transform_Sha256+2212>:	str	r3, [r11, #-312]	; 0xfffffec8
0x000113d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113d8 <Transform_Sha256+2216>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113dc <Transform_Sha256+2220>:	mov	r1, #2
0x000113e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e0 <Transform_Sha256+2224>:	mov	r0, r3
0x000113e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e4 <Transform_Sha256+2228>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3315714902, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113e8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113e8 <Transform_Sha256+2232>:	mov	r4, r0
0x000113ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113ec <Transform_Sha256+2236>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x000113f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f0 <Transform_Sha256+2240>:	mov	r1, #13
0x000113f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f4 <Transform_Sha256+2244>:	mov	r0, r3
0x000113f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113f8 <Transform_Sha256+2248>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3679374955, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000113fc in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x113fc <Transform_Sha256+2252>:	mov	r3, r0
0x00011400	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11400 <Transform_Sha256+2256>:	eor	r4, r4, r3
0x00011404	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11404 <Transform_Sha256+2260>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011408	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11408 <Transform_Sha256+2264>:	mov	r1, #22
0x0001140c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1140c <Transform_Sha256+2268>:	mov	r0, r3
0x00011410	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11410 <Transform_Sha256+2272>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3679374955, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011414 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11414 <Transform_Sha256+2276>:	mov	r3, r0
0x00011418	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11418 <Transform_Sha256+2280>:	eor	r2, r4, r3
0x0001141c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1141c <Transform_Sha256+2284>:	ldr	r1, [r11, #-292]	; 0xfffffedc
0x00011420	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11420 <Transform_Sha256+2288>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011424	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11424 <Transform_Sha256+2292>:	orr	r1, r1, r3
0x00011428	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11428 <Transform_Sha256+2296>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x0001142c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1142c <Transform_Sha256+2300>:	and	r1, r1, r3
0x00011430	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11430 <Transform_Sha256+2304>:	ldr	r0, [r11, #-292]	; 0xfffffedc
0x00011434	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11434 <Transform_Sha256+2308>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x00011438	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11438 <Transform_Sha256+2312>:	and	r3, r3, r0
0x0001143c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1143c <Transform_Sha256+2316>:	orr	r3, r1, r3
0x00011440	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11440 <Transform_Sha256+2320>:	add	r3, r2, r3
0x00011444	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11444 <Transform_Sha256+2324>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011448	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11448 <Transform_Sha256+2328>:	ldr	r2, [r11, #-280]	; 0xfffffee8
0x0001144c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1144c <Transform_Sha256+2332>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011450	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11450 <Transform_Sha256+2336>:	add	r3, r2, r3
0x00011454	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11454 <Transform_Sha256+2340>:	str	r3, [r11, #-280]	; 0xfffffee8
0x00011458	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11458 <Transform_Sha256+2344>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001145c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1145c <Transform_Sha256+2348>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011460	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11460 <Transform_Sha256+2352>:	add	r3, r2, r3
0x00011464	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11464 <Transform_Sha256+2356>:	str	r3, [r11, #-296]	; 0xfffffed8
0x00011468	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11468 <Transform_Sha256+2360>:	ldr	r4, [r11, #-300]	; 0xfffffed4
0x0001146c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1146c <Transform_Sha256+2364>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011470	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11470 <Transform_Sha256+2368>:	mov	r1, #6
0x00011474	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11474 <Transform_Sha256+2372>:	mov	r0, r3
0x00011478	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11478 <Transform_Sha256+2376>:	bl	0x10760 <rotrFixed>
rotrFixed (x=3679374955, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001147c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1147c <Transform_Sha256+2380>:	mov	r5, r0
0x00011480	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11480 <Transform_Sha256+2384>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x00011484	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11484 <Transform_Sha256+2388>:	mov	r1, #11
0x00011488	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11488 <Transform_Sha256+2392>:	mov	r0, r3
0x0001148c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1148c <Transform_Sha256+2396>:	bl	0x10760 <rotrFixed>
rotrFixed (x=149205131, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011490 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11490 <Transform_Sha256+2400>:	mov	r3, r0
0x00011494	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11494 <Transform_Sha256+2404>:	eor	r5, r5, r3
0x00011498	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11498 <Transform_Sha256+2408>:	ldr	r3, [r11, #-280]	; 0xfffffee8
0x0001149c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1149c <Transform_Sha256+2412>:	mov	r1, #25
0x000114a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a0 <Transform_Sha256+2416>:	mov	r0, r3
0x000114a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a4 <Transform_Sha256+2420>:	bl	0x10760 <rotrFixed>
rotrFixed (x=149205131, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000114a8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114a8 <Transform_Sha256+2424>:	mov	r3, r0
0x000114ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ac <Transform_Sha256+2428>:	eor	r3, r3, r5
0x000114b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b0 <Transform_Sha256+2432>:	add	r2, r4, r3
0x000114b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b4 <Transform_Sha256+2436>:	ldr	r1, [r11, #-304]	; 0xfffffed0
0x000114b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114b8 <Transform_Sha256+2440>:	ldr	r0, [r11, #-280]	; 0xfffffee8
0x000114bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114bc <Transform_Sha256+2444>:	ldr	r12, [r11, #-276]	; 0xfffffeec
0x000114c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c0 <Transform_Sha256+2448>:	ldr	r3, [r11, #-304]	; 0xfffffed0
0x000114c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c4 <Transform_Sha256+2452>:	eor	r3, r3, r12
0x000114c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114c8 <Transform_Sha256+2456>:	and	r3, r3, r0
0x000114cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114cc <Transform_Sha256+2460>:	eor	r3, r3, r1
0x000114d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d0 <Transform_Sha256+2464>:	add	r2, r2, r3
0x000114d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d4 <Transform_Sha256+2468>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114d8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114d8 <Transform_Sha256+2472>:	add	r3, r3, #6
0x000114dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114dc <Transform_Sha256+2476>:	ldr	r1, [pc, #640]	; 0x11764 <Transform_Sha256+3124>
0x000114e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e0 <Transform_Sha256+2480>:	ldr	r3, [r1, r3, lsl #2]
0x000114e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e4 <Transform_Sha256+2484>:	add	r2, r2, r3
0x000114e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114e8 <Transform_Sha256+2488>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000114ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114ec <Transform_Sha256+2492>:	add	r3, r3, #6
0x000114f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f0 <Transform_Sha256+2496>:	lsl	r3, r3, #2
0x000114f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f4 <Transform_Sha256+2500>:	sub	r3, r3, #12
0x000114f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114f8 <Transform_Sha256+2504>:	add	r3, r3, r11
0x000114fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x114fc <Transform_Sha256+2508>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011500	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11500 <Transform_Sha256+2512>:	add	r3, r2, r3
0x00011504	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11504 <Transform_Sha256+2516>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011508	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11508 <Transform_Sha256+2520>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x0001150c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1150c <Transform_Sha256+2524>:	mov	r1, #2
0x00011510	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11510 <Transform_Sha256+2528>:	mov	r0, r3
0x00011514	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11514 <Transform_Sha256+2532>:	bl	0x10760 <rotrFixed>
rotrFixed (x=149205131, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011518 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11518 <Transform_Sha256+2536>:	mov	r4, r0
0x0001151c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1151c <Transform_Sha256+2540>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011520	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11520 <Transform_Sha256+2544>:	mov	r1, #13
0x00011524	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11524 <Transform_Sha256+2548>:	mov	r0, r3
0x00011528	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11528 <Transform_Sha256+2552>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1928883998, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001152c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1152c <Transform_Sha256+2556>:	mov	r3, r0
0x00011530	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11530 <Transform_Sha256+2560>:	eor	r4, r4, r3
0x00011534	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11534 <Transform_Sha256+2564>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011538	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11538 <Transform_Sha256+2568>:	mov	r1, #22
0x0001153c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1153c <Transform_Sha256+2572>:	mov	r0, r3
0x00011540	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11540 <Transform_Sha256+2576>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1928883998, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011544 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11544 <Transform_Sha256+2580>:	mov	r3, r0
0x00011548	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11548 <Transform_Sha256+2584>:	eor	r2, r4, r3
0x0001154c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1154c <Transform_Sha256+2588>:	ldr	r1, [r11, #-296]	; 0xfffffed8
0x00011550	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11550 <Transform_Sha256+2592>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011554	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11554 <Transform_Sha256+2596>:	orr	r1, r1, r3
0x00011558	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11558 <Transform_Sha256+2600>:	ldr	r3, [r11, #-288]	; 0xfffffee0
0x0001155c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1155c <Transform_Sha256+2604>:	and	r1, r1, r3
0x00011560	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11560 <Transform_Sha256+2608>:	ldr	r0, [r11, #-296]	; 0xfffffed8
0x00011564	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11564 <Transform_Sha256+2612>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x00011568	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11568 <Transform_Sha256+2616>:	and	r3, r3, r0
0x0001156c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1156c <Transform_Sha256+2620>:	orr	r3, r1, r3
0x00011570	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11570 <Transform_Sha256+2624>:	add	r3, r2, r3
0x00011574	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11574 <Transform_Sha256+2628>:	str	r3, [r11, #-308]	; 0xfffffecc
0x00011578	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11578 <Transform_Sha256+2632>:	ldr	r2, [r11, #-284]	; 0xfffffee4
0x0001157c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1157c <Transform_Sha256+2636>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x00011580	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11580 <Transform_Sha256+2640>:	add	r3, r2, r3
0x00011584	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11584 <Transform_Sha256+2644>:	str	r3, [r11, #-284]	; 0xfffffee4
0x00011588	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11588 <Transform_Sha256+2648>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x0001158c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1158c <Transform_Sha256+2652>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x00011590	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11590 <Transform_Sha256+2656>:	add	r3, r2, r3
0x00011594	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11594 <Transform_Sha256+2660>:	str	r3, [r11, #-300]	; 0xfffffed4
0x00011598	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11598 <Transform_Sha256+2664>:	ldr	r4, [r11, #-304]	; 0xfffffed0
0x0001159c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1159c <Transform_Sha256+2668>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a0 <Transform_Sha256+2672>:	mov	r1, #6
0x000115a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a4 <Transform_Sha256+2676>:	mov	r0, r3
0x000115a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115a8 <Transform_Sha256+2680>:	bl	0x10760 <rotrFixed>
rotrFixed (x=1928883998, y=22) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115ac in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ac <Transform_Sha256+2684>:	mov	r5, r0
0x000115b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b0 <Transform_Sha256+2688>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b4 <Transform_Sha256+2692>:	mov	r1, #11
0x000115b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115b8 <Transform_Sha256+2696>:	mov	r0, r3
0x000115bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115bc <Transform_Sha256+2700>:	bl	0x10760 <rotrFixed>
rotrFixed (x=754033087, y=6) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115c0 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c0 <Transform_Sha256+2704>:	mov	r3, r0
0x000115c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c4 <Transform_Sha256+2708>:	eor	r5, r5, r3
0x000115c8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115c8 <Transform_Sha256+2712>:	ldr	r3, [r11, #-284]	; 0xfffffee4
0x000115cc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115cc <Transform_Sha256+2716>:	mov	r1, #25
0x000115d0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d0 <Transform_Sha256+2720>:	mov	r0, r3
0x000115d4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d4 <Transform_Sha256+2724>:	bl	0x10760 <rotrFixed>
rotrFixed (x=754033087, y=11) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x000115d8 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115d8 <Transform_Sha256+2728>:	mov	r3, r0
0x000115dc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115dc <Transform_Sha256+2732>:	eor	r3, r3, r5
0x000115e0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e0 <Transform_Sha256+2736>:	add	r2, r4, r3
0x000115e4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e4 <Transform_Sha256+2740>:	ldr	r1, [r11, #-276]	; 0xfffffeec
0x000115e8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115e8 <Transform_Sha256+2744>:	ldr	r0, [r11, #-284]	; 0xfffffee4
0x000115ec	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115ec <Transform_Sha256+2748>:	ldr	r12, [r11, #-280]	; 0xfffffee8
0x000115f0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f0 <Transform_Sha256+2752>:	ldr	r3, [r11, #-276]	; 0xfffffeec
0x000115f4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f4 <Transform_Sha256+2756>:	eor	r3, r3, r12
0x000115f8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115f8 <Transform_Sha256+2760>:	and	r3, r3, r0
0x000115fc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x115fc <Transform_Sha256+2764>:	eor	r3, r3, r1
0x00011600	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11600 <Transform_Sha256+2768>:	add	r2, r2, r3
0x00011604	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11604 <Transform_Sha256+2772>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011608	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11608 <Transform_Sha256+2776>:	add	r3, r3, #7
0x0001160c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1160c <Transform_Sha256+2780>:	ldr	r1, [pc, #336]	; 0x11764 <Transform_Sha256+3124>
0x00011610	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11610 <Transform_Sha256+2784>:	ldr	r3, [r1, r3, lsl #2]
0x00011614	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11614 <Transform_Sha256+2788>:	add	r2, r2, r3
0x00011618	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11618 <Transform_Sha256+2792>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001161c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1161c <Transform_Sha256+2796>:	add	r3, r3, #7
0x00011620	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11620 <Transform_Sha256+2800>:	lsl	r3, r3, #2
0x00011624	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11624 <Transform_Sha256+2804>:	sub	r3, r3, #12
0x00011628	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11628 <Transform_Sha256+2808>:	add	r3, r3, r11
0x0001162c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1162c <Transform_Sha256+2812>:	ldr	r3, [r3, #-260]	; 0xfffffefc
0x00011630	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11630 <Transform_Sha256+2816>:	add	r3, r2, r3
0x00011634	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11634 <Transform_Sha256+2820>:	str	r3, [r11, #-312]	; 0xfffffec8
0x00011638	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11638 <Transform_Sha256+2824>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x0001163c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1163c <Transform_Sha256+2828>:	mov	r1, #2
0x00011640	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11640 <Transform_Sha256+2832>:	mov	r0, r3
0x00011644	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11644 <Transform_Sha256+2836>:	bl	0x10760 <rotrFixed>
rotrFixed (x=754033087, y=25) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011648 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11648 <Transform_Sha256+2840>:	mov	r4, r0
0x0001164c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1164c <Transform_Sha256+2844>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011650	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11650 <Transform_Sha256+2848>:	mov	r1, #13
0x00011654	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11654 <Transform_Sha256+2852>:	mov	r0, r3
0x00011658	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11658 <Transform_Sha256+2856>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4291045163, y=2) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x0001165c in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1165c <Transform_Sha256+2860>:	mov	r3, r0
0x00011660	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11660 <Transform_Sha256+2864>:	eor	r4, r4, r3
0x00011664	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11664 <Transform_Sha256+2868>:	ldr	r3, [r11, #-300]	; 0xfffffed4
0x00011668	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11668 <Transform_Sha256+2872>:	mov	r1, #22
0x0001166c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1166c <Transform_Sha256+2876>:	mov	r0, r3
0x00011670	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11670 <Transform_Sha256+2880>:	bl	0x10760 <rotrFixed>
rotrFixed (x=4291045163, y=13) at ./wolfcrypt/src/misc.c:112
112	    {
=> 0x10760 <rotrFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010764	112	    {
=> 0x10764 <rotrFixed+4>:	add	r11, sp, #0
0x00010768	112	    {
=> 0x10768 <rotrFixed+8>:	sub	sp, sp, #12
0x0001076c	112	    {
=> 0x1076c <rotrFixed+12>:	str	r0, [r11, #-8]
0x00010770	112	    {
=> 0x10770 <rotrFixed+16>:	str	r1, [r11, #-12]
113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10774 <rotrFixed+20>:	ldr	r2, [r11, #-8]
0x00010778	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x10778 <rotrFixed+24>:	ldr	r3, [r11, #-12]
0x0001077c	113	        return (x >> y) | (x << (sizeof(x) * 8 - y));
=> 0x1077c <rotrFixed+28>:	ror	r3, r2, r3
114	    }
=> 0x10780 <rotrFixed+32>:	mov	r0, r3
0x00010784	114	    }
=> 0x10784 <rotrFixed+36>:	add	sp, r11, #0
0x00010788	114	    }
=> 0x10788 <rotrFixed+40>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001078c	114	    }
=> 0x1078c <rotrFixed+44>:	bx	lr
0x00011674 in Transform_Sha256 (sha256=0x40800100, data=0x40800120 "lleHW ,odlro") at wolfcrypt/src/sha256.c:993
993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11674 <Transform_Sha256+2884>:	mov	r3, r0
0x00011678	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11678 <Transform_Sha256+2888>:	eor	r2, r4, r3
0x0001167c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1167c <Transform_Sha256+2892>:	ldr	r1, [r11, #-300]	; 0xfffffed4
0x00011680	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11680 <Transform_Sha256+2896>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011684	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11684 <Transform_Sha256+2900>:	orr	r1, r1, r3
0x00011688	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11688 <Transform_Sha256+2904>:	ldr	r3, [r11, #-292]	; 0xfffffedc
0x0001168c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1168c <Transform_Sha256+2908>:	and	r1, r1, r3
0x00011690	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11690 <Transform_Sha256+2912>:	ldr	r0, [r11, #-300]	; 0xfffffed4
0x00011694	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11694 <Transform_Sha256+2916>:	ldr	r3, [r11, #-296]	; 0xfffffed8
0x00011698	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x11698 <Transform_Sha256+2920>:	and	r3, r3, r0
0x0001169c	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x1169c <Transform_Sha256+2924>:	orr	r3, r1, r3
0x000116a0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a0 <Transform_Sha256+2928>:	add	r3, r2, r3
0x000116a4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a4 <Transform_Sha256+2932>:	str	r3, [r11, #-308]	; 0xfffffecc
0x000116a8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116a8 <Transform_Sha256+2936>:	ldr	r2, [r11, #-288]	; 0xfffffee0
0x000116ac	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116ac <Transform_Sha256+2940>:	ldr	r3, [r11, #-312]	; 0xfffffec8
0x000116b0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b0 <Transform_Sha256+2944>:	add	r3, r2, r3
0x000116b4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b4 <Transform_Sha256+2948>:	str	r3, [r11, #-288]	; 0xfffffee0
0x000116b8	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116b8 <Transform_Sha256+2952>:	ldr	r2, [r11, #-312]	; 0xfffffec8
0x000116bc	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116bc <Transform_Sha256+2956>:	ldr	r3, [r11, #-308]	; 0xfffffecc
0x000116c0	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c0 <Transform_Sha256+2960>:	add	r3, r2, r3
0x000116c4	993	            RND(4); RND(5); RND(6); RND(7);
=> 0x116c4 <Transform_Sha256+2964>:	str	r3, [r11, #-304]	; 0xfffffed0
991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116c8 <Transform_Sha256+2968>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116cc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116cc <Transform_Sha256+2972>:	add	r3, r3, #8
0x000116d0	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d0 <Transform_Sha256+2976>:	str	r3, [r11, #-316]	; 0xfffffec4
0x000116d4	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d4 <Transform_Sha256+2980>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116d8	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116d8 <Transform_Sha256+2984>:	cmp	r3, #63	; 0x3f
0x000116dc	991	        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
=> 0x116dc <Transform_Sha256+2988>:	ble	0x10d50 <Transform_Sha256+544>
998	        for (i = 0; i < 8; i++) {
=> 0x116e0 <Transform_Sha256+2992>:	mov	r3, #0
0x000116e4	998	        for (i = 0; i < 8; i++) {
=> 0x116e4 <Transform_Sha256+2996>:	str	r3, [r11, #-316]	; 0xfffffec4
998	        for (i = 0; i < 8; i++) {
=> 0x116e8 <Transform_Sha256+3000>:	b	0x11728 <Transform_Sha256+3064>
0x00011728	998	        for (i = 0; i < 8; i++) {
=> 0x11728 <Transform_Sha256+3064>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001172c	998	        for (i = 0; i < 8; i++) {
=> 0x1172c <Transform_Sha256+3068>:	cmp	r3, #7
0x00011730	998	        for (i = 0; i < 8; i++) {
=> 0x11730 <Transform_Sha256+3072>:	ble	0x116ec <Transform_Sha256+3004>
999	            sha256->digest[i] += S[i];
=> 0x116ec <Transform_Sha256+3004>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x000116f0	999	            sha256->digest[i] += S[i];
=> 0x116f0 <Transform_Sha256+3008>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x000116f4	999	            sha256->digest[i] += S[i];
=> 0x116f4 <Transform_Sha256+3012>:	ldr	r2, [r3, r2, lsl #2]
0x000116f8	999	            sha256->digest[i] += S[i];
=> 0x116f8 <Transform_Sha256+3016>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116fc	999	            sha256->digest[i] += S[i];
=> 0x116fc <Transform_Sha256+3020>:	lsl	r3, r3, #2
0x00011700	999	            sha256->digest[i] += S[i];
=> 0x11700 <Transform_Sha256+3024>:	sub	r3, r3, #12
0x00011704	999	            sha256->digest[i] += S[i];
=> 0x11704 <Transform_Sha256+3028>:	add	r3, r3, r11
0x00011708	999	            sha256->digest[i] += S[i];
=> 0x11708 <Transform_Sha256+3032>:	ldr	r3, [r3, #-292]	; 0xfffffedc
0x0001170c	999	            sha256->digest[i] += S[i];
=> 0x1170c <Transform_Sha256+3036>:	add	r1, r2, r3
0x00011710	999	            sha256->digest[i] += S[i];
=> 0x11710 <Transform_Sha256+3040>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00011714	999	            sha256->digest[i] += S[i];
=> 0x11714 <Transform_Sha256+3044>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00011718	999	            sha256->digest[i] += S[i];
=> 0x11718 <Transform_Sha256+3048>:	str	r1, [r3, r2, lsl #2]
998	        for (i = 0; i < 8; i++) {
=> 0x1171c <Transform_Sha256+3052>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011720	998	        for (i = 0; i < 8; i++) {
=> 0x11720 <Transform_Sha256+3056>:	add	r3, r3, #1
0x00011724	998	        for (i = 0; i < 8; i++) {
=> 0x11724 <Transform_Sha256+3060>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00011728	998	        for (i = 0; i < 8; i++) {
=> 0x11728 <Transform_Sha256+3064>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001172c	998	        for (i = 0; i < 8; i++) {
=> 0x1172c <Transform_Sha256+3068>:	cmp	r3, #7
0x00011730	998	        for (i = 0; i < 8; i++) {
=> 0x11730 <Transform_Sha256+3072>:	ble	0x116ec <Transform_Sha256+3004>
999	            sha256->digest[i] += S[i];
=> 0x116ec <Transform_Sha256+3004>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x000116f0	999	            sha256->digest[i] += S[i];
=> 0x116f0 <Transform_Sha256+3008>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x000116f4	999	            sha256->digest[i] += S[i];
=> 0x116f4 <Transform_Sha256+3012>:	ldr	r2, [r3, r2, lsl #2]
0x000116f8	999	            sha256->digest[i] += S[i];
=> 0x116f8 <Transform_Sha256+3016>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116fc	999	            sha256->digest[i] += S[i];
=> 0x116fc <Transform_Sha256+3020>:	lsl	r3, r3, #2
0x00011700	999	            sha256->digest[i] += S[i];
=> 0x11700 <Transform_Sha256+3024>:	sub	r3, r3, #12
0x00011704	999	            sha256->digest[i] += S[i];
=> 0x11704 <Transform_Sha256+3028>:	add	r3, r3, r11
0x00011708	999	            sha256->digest[i] += S[i];
=> 0x11708 <Transform_Sha256+3032>:	ldr	r3, [r3, #-292]	; 0xfffffedc
0x0001170c	999	            sha256->digest[i] += S[i];
=> 0x1170c <Transform_Sha256+3036>:	add	r1, r2, r3
0x00011710	999	            sha256->digest[i] += S[i];
=> 0x11710 <Transform_Sha256+3040>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00011714	999	            sha256->digest[i] += S[i];
=> 0x11714 <Transform_Sha256+3044>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00011718	999	            sha256->digest[i] += S[i];
=> 0x11718 <Transform_Sha256+3048>:	str	r1, [r3, r2, lsl #2]
998	        for (i = 0; i < 8; i++) {
=> 0x1171c <Transform_Sha256+3052>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011720	998	        for (i = 0; i < 8; i++) {
=> 0x11720 <Transform_Sha256+3056>:	add	r3, r3, #1
0x00011724	998	        for (i = 0; i < 8; i++) {
=> 0x11724 <Transform_Sha256+3060>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00011728	998	        for (i = 0; i < 8; i++) {
=> 0x11728 <Transform_Sha256+3064>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001172c	998	        for (i = 0; i < 8; i++) {
=> 0x1172c <Transform_Sha256+3068>:	cmp	r3, #7
0x00011730	998	        for (i = 0; i < 8; i++) {
=> 0x11730 <Transform_Sha256+3072>:	ble	0x116ec <Transform_Sha256+3004>
999	            sha256->digest[i] += S[i];
=> 0x116ec <Transform_Sha256+3004>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x000116f0	999	            sha256->digest[i] += S[i];
=> 0x116f0 <Transform_Sha256+3008>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x000116f4	999	            sha256->digest[i] += S[i];
=> 0x116f4 <Transform_Sha256+3012>:	ldr	r2, [r3, r2, lsl #2]
0x000116f8	999	            sha256->digest[i] += S[i];
=> 0x116f8 <Transform_Sha256+3016>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116fc	999	            sha256->digest[i] += S[i];
=> 0x116fc <Transform_Sha256+3020>:	lsl	r3, r3, #2
0x00011700	999	            sha256->digest[i] += S[i];
=> 0x11700 <Transform_Sha256+3024>:	sub	r3, r3, #12
0x00011704	999	            sha256->digest[i] += S[i];
=> 0x11704 <Transform_Sha256+3028>:	add	r3, r3, r11
0x00011708	999	            sha256->digest[i] += S[i];
=> 0x11708 <Transform_Sha256+3032>:	ldr	r3, [r3, #-292]	; 0xfffffedc
0x0001170c	999	            sha256->digest[i] += S[i];
=> 0x1170c <Transform_Sha256+3036>:	add	r1, r2, r3
0x00011710	999	            sha256->digest[i] += S[i];
=> 0x11710 <Transform_Sha256+3040>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00011714	999	            sha256->digest[i] += S[i];
=> 0x11714 <Transform_Sha256+3044>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00011718	999	            sha256->digest[i] += S[i];
=> 0x11718 <Transform_Sha256+3048>:	str	r1, [r3, r2, lsl #2]
998	        for (i = 0; i < 8; i++) {
=> 0x1171c <Transform_Sha256+3052>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011720	998	        for (i = 0; i < 8; i++) {
=> 0x11720 <Transform_Sha256+3056>:	add	r3, r3, #1
0x00011724	998	        for (i = 0; i < 8; i++) {
=> 0x11724 <Transform_Sha256+3060>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00011728	998	        for (i = 0; i < 8; i++) {
=> 0x11728 <Transform_Sha256+3064>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001172c	998	        for (i = 0; i < 8; i++) {
=> 0x1172c <Transform_Sha256+3068>:	cmp	r3, #7
0x00011730	998	        for (i = 0; i < 8; i++) {
=> 0x11730 <Transform_Sha256+3072>:	ble	0x116ec <Transform_Sha256+3004>
999	            sha256->digest[i] += S[i];
=> 0x116ec <Transform_Sha256+3004>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x000116f0	999	            sha256->digest[i] += S[i];
=> 0x116f0 <Transform_Sha256+3008>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x000116f4	999	            sha256->digest[i] += S[i];
=> 0x116f4 <Transform_Sha256+3012>:	ldr	r2, [r3, r2, lsl #2]
0x000116f8	999	            sha256->digest[i] += S[i];
=> 0x116f8 <Transform_Sha256+3016>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116fc	999	            sha256->digest[i] += S[i];
=> 0x116fc <Transform_Sha256+3020>:	lsl	r3, r3, #2
0x00011700	999	            sha256->digest[i] += S[i];
=> 0x11700 <Transform_Sha256+3024>:	sub	r3, r3, #12
0x00011704	999	            sha256->digest[i] += S[i];
=> 0x11704 <Transform_Sha256+3028>:	add	r3, r3, r11
0x00011708	999	            sha256->digest[i] += S[i];
=> 0x11708 <Transform_Sha256+3032>:	ldr	r3, [r3, #-292]	; 0xfffffedc
0x0001170c	999	            sha256->digest[i] += S[i];
=> 0x1170c <Transform_Sha256+3036>:	add	r1, r2, r3
0x00011710	999	            sha256->digest[i] += S[i];
=> 0x11710 <Transform_Sha256+3040>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00011714	999	            sha256->digest[i] += S[i];
=> 0x11714 <Transform_Sha256+3044>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00011718	999	            sha256->digest[i] += S[i];
=> 0x11718 <Transform_Sha256+3048>:	str	r1, [r3, r2, lsl #2]
998	        for (i = 0; i < 8; i++) {
=> 0x1171c <Transform_Sha256+3052>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011720	998	        for (i = 0; i < 8; i++) {
=> 0x11720 <Transform_Sha256+3056>:	add	r3, r3, #1
0x00011724	998	        for (i = 0; i < 8; i++) {
=> 0x11724 <Transform_Sha256+3060>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00011728	998	        for (i = 0; i < 8; i++) {
=> 0x11728 <Transform_Sha256+3064>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001172c	998	        for (i = 0; i < 8; i++) {
=> 0x1172c <Transform_Sha256+3068>:	cmp	r3, #7
0x00011730	998	        for (i = 0; i < 8; i++) {
=> 0x11730 <Transform_Sha256+3072>:	ble	0x116ec <Transform_Sha256+3004>
999	            sha256->digest[i] += S[i];
=> 0x116ec <Transform_Sha256+3004>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x000116f0	999	            sha256->digest[i] += S[i];
=> 0x116f0 <Transform_Sha256+3008>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x000116f4	999	            sha256->digest[i] += S[i];
=> 0x116f4 <Transform_Sha256+3012>:	ldr	r2, [r3, r2, lsl #2]
0x000116f8	999	            sha256->digest[i] += S[i];
=> 0x116f8 <Transform_Sha256+3016>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116fc	999	            sha256->digest[i] += S[i];
=> 0x116fc <Transform_Sha256+3020>:	lsl	r3, r3, #2
0x00011700	999	            sha256->digest[i] += S[i];
=> 0x11700 <Transform_Sha256+3024>:	sub	r3, r3, #12
0x00011704	999	            sha256->digest[i] += S[i];
=> 0x11704 <Transform_Sha256+3028>:	add	r3, r3, r11
0x00011708	999	            sha256->digest[i] += S[i];
=> 0x11708 <Transform_Sha256+3032>:	ldr	r3, [r3, #-292]	; 0xfffffedc
0x0001170c	999	            sha256->digest[i] += S[i];
=> 0x1170c <Transform_Sha256+3036>:	add	r1, r2, r3
0x00011710	999	            sha256->digest[i] += S[i];
=> 0x11710 <Transform_Sha256+3040>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00011714	999	            sha256->digest[i] += S[i];
=> 0x11714 <Transform_Sha256+3044>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00011718	999	            sha256->digest[i] += S[i];
=> 0x11718 <Transform_Sha256+3048>:	str	r1, [r3, r2, lsl #2]
998	        for (i = 0; i < 8; i++) {
=> 0x1171c <Transform_Sha256+3052>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011720	998	        for (i = 0; i < 8; i++) {
=> 0x11720 <Transform_Sha256+3056>:	add	r3, r3, #1
0x00011724	998	        for (i = 0; i < 8; i++) {
=> 0x11724 <Transform_Sha256+3060>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00011728	998	        for (i = 0; i < 8; i++) {
=> 0x11728 <Transform_Sha256+3064>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001172c	998	        for (i = 0; i < 8; i++) {
=> 0x1172c <Transform_Sha256+3068>:	cmp	r3, #7
0x00011730	998	        for (i = 0; i < 8; i++) {
=> 0x11730 <Transform_Sha256+3072>:	ble	0x116ec <Transform_Sha256+3004>
999	            sha256->digest[i] += S[i];
=> 0x116ec <Transform_Sha256+3004>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x000116f0	999	            sha256->digest[i] += S[i];
=> 0x116f0 <Transform_Sha256+3008>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x000116f4	999	            sha256->digest[i] += S[i];
=> 0x116f4 <Transform_Sha256+3012>:	ldr	r2, [r3, r2, lsl #2]
0x000116f8	999	            sha256->digest[i] += S[i];
=> 0x116f8 <Transform_Sha256+3016>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116fc	999	            sha256->digest[i] += S[i];
=> 0x116fc <Transform_Sha256+3020>:	lsl	r3, r3, #2
0x00011700	999	            sha256->digest[i] += S[i];
=> 0x11700 <Transform_Sha256+3024>:	sub	r3, r3, #12
0x00011704	999	            sha256->digest[i] += S[i];
=> 0x11704 <Transform_Sha256+3028>:	add	r3, r3, r11
0x00011708	999	            sha256->digest[i] += S[i];
=> 0x11708 <Transform_Sha256+3032>:	ldr	r3, [r3, #-292]	; 0xfffffedc
0x0001170c	999	            sha256->digest[i] += S[i];
=> 0x1170c <Transform_Sha256+3036>:	add	r1, r2, r3
0x00011710	999	            sha256->digest[i] += S[i];
=> 0x11710 <Transform_Sha256+3040>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00011714	999	            sha256->digest[i] += S[i];
=> 0x11714 <Transform_Sha256+3044>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00011718	999	            sha256->digest[i] += S[i];
=> 0x11718 <Transform_Sha256+3048>:	str	r1, [r3, r2, lsl #2]
998	        for (i = 0; i < 8; i++) {
=> 0x1171c <Transform_Sha256+3052>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011720	998	        for (i = 0; i < 8; i++) {
=> 0x11720 <Transform_Sha256+3056>:	add	r3, r3, #1
0x00011724	998	        for (i = 0; i < 8; i++) {
=> 0x11724 <Transform_Sha256+3060>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00011728	998	        for (i = 0; i < 8; i++) {
=> 0x11728 <Transform_Sha256+3064>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001172c	998	        for (i = 0; i < 8; i++) {
=> 0x1172c <Transform_Sha256+3068>:	cmp	r3, #7
0x00011730	998	        for (i = 0; i < 8; i++) {
=> 0x11730 <Transform_Sha256+3072>:	ble	0x116ec <Transform_Sha256+3004>
999	            sha256->digest[i] += S[i];
=> 0x116ec <Transform_Sha256+3004>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x000116f0	999	            sha256->digest[i] += S[i];
=> 0x116f0 <Transform_Sha256+3008>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x000116f4	999	            sha256->digest[i] += S[i];
=> 0x116f4 <Transform_Sha256+3012>:	ldr	r2, [r3, r2, lsl #2]
0x000116f8	999	            sha256->digest[i] += S[i];
=> 0x116f8 <Transform_Sha256+3016>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116fc	999	            sha256->digest[i] += S[i];
=> 0x116fc <Transform_Sha256+3020>:	lsl	r3, r3, #2
0x00011700	999	            sha256->digest[i] += S[i];
=> 0x11700 <Transform_Sha256+3024>:	sub	r3, r3, #12
0x00011704	999	            sha256->digest[i] += S[i];
=> 0x11704 <Transform_Sha256+3028>:	add	r3, r3, r11
0x00011708	999	            sha256->digest[i] += S[i];
=> 0x11708 <Transform_Sha256+3032>:	ldr	r3, [r3, #-292]	; 0xfffffedc
0x0001170c	999	            sha256->digest[i] += S[i];
=> 0x1170c <Transform_Sha256+3036>:	add	r1, r2, r3
0x00011710	999	            sha256->digest[i] += S[i];
=> 0x11710 <Transform_Sha256+3040>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00011714	999	            sha256->digest[i] += S[i];
=> 0x11714 <Transform_Sha256+3044>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00011718	999	            sha256->digest[i] += S[i];
=> 0x11718 <Transform_Sha256+3048>:	str	r1, [r3, r2, lsl #2]
998	        for (i = 0; i < 8; i++) {
=> 0x1171c <Transform_Sha256+3052>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011720	998	        for (i = 0; i < 8; i++) {
=> 0x11720 <Transform_Sha256+3056>:	add	r3, r3, #1
0x00011724	998	        for (i = 0; i < 8; i++) {
=> 0x11724 <Transform_Sha256+3060>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00011728	998	        for (i = 0; i < 8; i++) {
=> 0x11728 <Transform_Sha256+3064>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001172c	998	        for (i = 0; i < 8; i++) {
=> 0x1172c <Transform_Sha256+3068>:	cmp	r3, #7
0x00011730	998	        for (i = 0; i < 8; i++) {
=> 0x11730 <Transform_Sha256+3072>:	ble	0x116ec <Transform_Sha256+3004>
999	            sha256->digest[i] += S[i];
=> 0x116ec <Transform_Sha256+3004>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x000116f0	999	            sha256->digest[i] += S[i];
=> 0x116f0 <Transform_Sha256+3008>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x000116f4	999	            sha256->digest[i] += S[i];
=> 0x116f4 <Transform_Sha256+3012>:	ldr	r2, [r3, r2, lsl #2]
0x000116f8	999	            sha256->digest[i] += S[i];
=> 0x116f8 <Transform_Sha256+3016>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x000116fc	999	            sha256->digest[i] += S[i];
=> 0x116fc <Transform_Sha256+3020>:	lsl	r3, r3, #2
0x00011700	999	            sha256->digest[i] += S[i];
=> 0x11700 <Transform_Sha256+3024>:	sub	r3, r3, #12
0x00011704	999	            sha256->digest[i] += S[i];
=> 0x11704 <Transform_Sha256+3028>:	add	r3, r3, r11
0x00011708	999	            sha256->digest[i] += S[i];
=> 0x11708 <Transform_Sha256+3032>:	ldr	r3, [r3, #-292]	; 0xfffffedc
0x0001170c	999	            sha256->digest[i] += S[i];
=> 0x1170c <Transform_Sha256+3036>:	add	r1, r2, r3
0x00011710	999	            sha256->digest[i] += S[i];
=> 0x11710 <Transform_Sha256+3040>:	ldr	r3, [r11, #-320]	; 0xfffffec0
0x00011714	999	            sha256->digest[i] += S[i];
=> 0x11714 <Transform_Sha256+3044>:	ldr	r2, [r11, #-316]	; 0xfffffec4
0x00011718	999	            sha256->digest[i] += S[i];
=> 0x11718 <Transform_Sha256+3048>:	str	r1, [r3, r2, lsl #2]
998	        for (i = 0; i < 8; i++) {
=> 0x1171c <Transform_Sha256+3052>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x00011720	998	        for (i = 0; i < 8; i++) {
=> 0x11720 <Transform_Sha256+3056>:	add	r3, r3, #1
0x00011724	998	        for (i = 0; i < 8; i++) {
=> 0x11724 <Transform_Sha256+3060>:	str	r3, [r11, #-316]	; 0xfffffec4
0x00011728	998	        for (i = 0; i < 8; i++) {
=> 0x11728 <Transform_Sha256+3064>:	ldr	r3, [r11, #-316]	; 0xfffffec4
0x0001172c	998	        for (i = 0; i < 8; i++) {
=> 0x1172c <Transform_Sha256+3068>:	cmp	r3, #7
0x00011730	998	        for (i = 0; i < 8; i++) {
=> 0x11730 <Transform_Sha256+3072>:	ble	0x116ec <Transform_Sha256+3004>
1006	        return 0;
=> 0x11734 <Transform_Sha256+3076>:	mov	r3, #0
1007	    }
=> 0x11738 <Transform_Sha256+3080>:	ldr	r2, [pc, #32]	; 0x11760 <Transform_Sha256+3120>
0x0001173c	1007	    }
=> 0x1173c <Transform_Sha256+3084>:	ldr	r1, [r2]
0x00011740	1007	    }
=> 0x11740 <Transform_Sha256+3088>:	ldr	r2, [r11, #-16]
0x00011744	1007	    }
=> 0x11744 <Transform_Sha256+3092>:	eors	r1, r2, r1
0x00011748	1007	    }
=> 0x11748 <Transform_Sha256+3096>:	mov	r2, #0
0x0001174c	1007	    }
=> 0x1174c <Transform_Sha256+3100>:	beq	0x11754 <Transform_Sha256+3108>
0x00011754	1007	    }
=> 0x11754 <Transform_Sha256+3108>:	mov	r0, r3
0x00011758	1007	    }
=> 0x11758 <Transform_Sha256+3112>:	sub	sp, r11, #12
0x0001175c	1007	    }
=> 0x1175c <Transform_Sha256+3116>:	pop	{r4, r5, r11, pc}
0x00011bf4 in Sha256Final (sha256=0x40800100) at wolfcrypt/src/sha256.c:1425
1425	        ret = XTRANSFORM(sha256, (const byte*)local);
=> 0x11bf4 <Sha256Final+428>:	str	r0, [r11, #-8]
1428	        return ret;
=> 0x11bf8 <Sha256Final+432>:	ldr	r3, [r11, #-8]
1429	    }
=> 0x11bfc <Sha256Final+436>:	mov	r0, r3
0x00011c00	1429	    }
=> 0x11c00 <Sha256Final+440>:	sub	sp, r11, #4
0x00011c04	1429	    }
=> 0x11c04 <Sha256Final+444>:	pop	{r11, pc}
0x00011ce0 in wc_Sha256Final (sha256=0x40800100, hash=0x40800184 "") at wolfcrypt/src/sha256.c:1485
1485	        ret = Sha256Final(sha256);
=> 0x11ce0 <wc_Sha256Final+60>:	str	r0, [r11, #-8]
1486	        if (ret != 0) {
=> 0x11ce4 <wc_Sha256Final+64>:	ldr	r3, [r11, #-8]
0x00011ce8	1486	        if (ret != 0) {
=> 0x11ce8 <wc_Sha256Final+68>:	cmp	r3, #0
0x00011cec	1486	        if (ret != 0) {
=> 0x11cec <wc_Sha256Final+72>:	beq	0x11cf8 <wc_Sha256Final+84>
1492	            ByteReverseWords(sha256->digest, sha256->digest,
=> 0x11cf8 <wc_Sha256Final+84>:	ldr	r3, [r11, #-16]
1492	            ByteReverseWords(sha256->digest, sha256->digest,
=> 0x11cfc <wc_Sha256Final+88>:	ldr	r1, [r11, #-16]
1492	            ByteReverseWords(sha256->digest, sha256->digest,
=> 0x11d00 <wc_Sha256Final+92>:	mov	r2, #32
0x00011d04	1492	            ByteReverseWords(sha256->digest, sha256->digest,
=> 0x11d04 <wc_Sha256Final+96>:	mov	r0, r3
0x00011d08	1492	            ByteReverseWords(sha256->digest, sha256->digest,
=> 0x11d08 <wc_Sha256Final+100>:	bl	0x107e4 <ByteReverseWords>
ByteReverseWords (out=0xd0743100, in=0x2b02a082, byteCount=2182110865) at ./wolfcrypt/src/misc.c:183
183	{
=> 0x107e4 <ByteReverseWords>:	push	{r4, r11, lr}
0x000107e8	183	{
=> 0x107e8 <ByteReverseWords+4>:	add	r11, sp, #8
0x000107ec	183	{
=> 0x107ec <ByteReverseWords+8>:	sub	sp, sp, #44	; 0x2c
0x000107f0	183	{
=> 0x107f0 <ByteReverseWords+12>:	str	r0, [r11, #-40]	; 0xffffffd8
0x000107f4	183	{
=> 0x107f4 <ByteReverseWords+16>:	str	r1, [r11, #-44]	; 0xffffffd4
0x000107f8	183	{
=> 0x107f8 <ByteReverseWords+20>:	str	r2, [r11, #-48]	; 0xffffffd0
183	{
=> 0x107fc <ByteReverseWords+24>:	ldr	r3, [pc, #332]	; 0x10950 <ByteReverseWords+364>
0x00010800	183	{
=> 0x10800 <ByteReverseWords+28>:	ldr	r3, [r3]
0x00010804	183	{
=> 0x10804 <ByteReverseWords+32>:	str	r3, [r11, #-16]
0x00010808	183	{
=> 0x10808 <ByteReverseWords+36>:	mov	r3, #0
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1080c <ByteReverseWords+40>:	ldr	r3, [r11, #-44]	; 0xffffffd4
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10810 <ByteReverseWords+44>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10814 <ByteReverseWords+48>:	cmp	r3, #0
0x00010818	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10818 <ByteReverseWords+52>:	bne	0x10898 <ByteReverseWords+180>
188	        (((size_t)out & 0x3) == 0))
=> 0x1081c <ByteReverseWords+56>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010820	188	        (((size_t)out & 0x3) == 0))
=> 0x10820 <ByteReverseWords+60>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10824 <ByteReverseWords+64>:	cmp	r3, #0
0x00010828	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10828 <ByteReverseWords+68>:	bne	0x10898 <ByteReverseWords+180>
191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x1082c <ByteReverseWords+72>:	ldr	r3, [r11, #-48]	; 0xffffffd0
0x00010830	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10830 <ByteReverseWords+76>:	lsr	r3, r3, #2
0x00010834	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10834 <ByteReverseWords+80>:	str	r3, [r11, #-28]	; 0xffffffe4
192	        for (i = 0; i < count; i++)
=> 0x10838 <ByteReverseWords+84>:	mov	r3, #0
0x0001083c	192	        for (i = 0; i < count; i++)
=> 0x1083c <ByteReverseWords+88>:	str	r3, [r11, #-32]	; 0xffffffe0
192	        for (i = 0; i < count; i++)
=> 0x10840 <ByteReverseWords+92>:	b	0x10884 <ByteReverseWords+160>
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=2413492227) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=1857238865, y=3043383236) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=4259258720) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800100, in=0x40800100, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=4259258720) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=4259258720, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=733720789) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800100, in=0x40800100, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=733720789) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=733720789, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=1739559010) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800100, in=0x40800100, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=1739559010) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=1739559010, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=2659231171) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800100, in=0x40800100, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=2659231171) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=2659231171, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=2435940829) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800100, in=0x40800100, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=2435940829) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=2435940829, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=4157033226) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800100, in=0x40800100, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=4157033226) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=4157033226, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=1747465866) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800100, in=0x40800100, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10844 <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010848	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10848 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x0001084c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+108>:	add	r3, r2, r3
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+128>:	add	r4, r2, r3
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+132>:	mov	r0, r1
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+136>:	bl	0x10790 <ByteReverseWord32>
ByteReverseWord32 (value=1747465866) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10790 <ByteReverseWord32>:	push	{r11, lr}
0x00010794	140	{
=> 0x10794 <ByteReverseWord32+4>:	add	r11, sp, #4
0x00010798	140	{
=> 0x10798 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a0 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107a4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a4 <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107a8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107b8	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107c8 <ByteReverseWord32+56>:	mov	r1, #16
0x000107cc	176	    return rotlFixed(value, 16U);
=> 0x107cc <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d0	176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+64>:	bl	0x1072c <rotlFixed>
rotlFixed (x=1747465866, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x1072c <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010730	106	    {
=> 0x10730 <rotlFixed+4>:	add	r11, sp, #0
0x00010734	106	    {
=> 0x10734 <rotlFixed+8>:	sub	sp, sp, #12
0x00010738	106	    {
=> 0x10738 <rotlFixed+12>:	str	r0, [r11, #-8]
0x0001073c	106	    {
=> 0x1073c <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10740 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x00010744	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10744 <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010748	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10748 <rotlFixed+28>:	rsb	r3, r3, #32
0x0001074c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1074c <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10750 <rotlFixed+36>:	mov	r0, r3
0x00010754	108	    }
=> 0x10754 <rotlFixed+40>:	add	sp, r11, #0
0x00010758	108	    }
=> 0x10758 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x0001075c	108	    }
=> 0x1075c <rotlFixed+48>:	bx	lr
0x000107d4 in ByteReverseWord32 (value=2183229336) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107d8 <ByteReverseWord32+72>:	mov	r0, r3
0x000107dc	178	}
=> 0x107dc <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e0	178	}
=> 0x107e0 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010870 in ByteReverseWords (out=0x40800100, in=0x40800100, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+140>:	mov	r3, r0
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10878 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001087c	192	        for (i = 0; i < count; i++)
=> 0x1087c <ByteReverseWords+152>:	add	r3, r3, #1
0x00010880	192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+168>:	cmp	r2, r3
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+172>:	bcc	0x10844 <ByteReverseWords+96>
190	    {
=> 0x10894 <ByteReverseWords+176>:	b	0x10928 <ByteReverseWords+324>
210	}
=> 0x10928 <ByteReverseWords+324>:	nop			; (mov r0, r0)
0x0001092c	210	}
=> 0x1092c <ByteReverseWords+328>:	ldr	r3, [pc, #28]	; 0x10950 <ByteReverseWords+364>
0x00010930	210	}
=> 0x10930 <ByteReverseWords+332>:	ldr	r2, [r3]
0x00010934	210	}
=> 0x10934 <ByteReverseWords+336>:	ldr	r3, [r11, #-16]
0x00010938	210	}
=> 0x10938 <ByteReverseWords+340>:	eors	r2, r3, r2
0x0001093c	210	}
=> 0x1093c <ByteReverseWords+344>:	mov	r3, #0
0x00010940	210	}
=> 0x10940 <ByteReverseWords+348>:	beq	0x10948 <ByteReverseWords+356>
0x00010948	210	}
=> 0x10948 <ByteReverseWords+356>:	sub	sp, r11, #8
0x0001094c	210	}
=> 0x1094c <ByteReverseWords+360>:	pop	{r4, r11, pc}
wc_Sha256Final (sha256=0x40800100, hash=0x40800184 "") at wolfcrypt/src/sha256.c:1496
1496	        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
=> 0x11d0c <wc_Sha256Final+104>:	ldr	r3, [r11, #-16]
0x00011d10	1496	        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
=> 0x11d10 <wc_Sha256Final+108>:	mov	r2, #32
0x00011d14	1496	        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
=> 0x11d14 <wc_Sha256Final+112>:	mov	r1, r3
0x00011d18	1496	        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
=> 0x11d18 <wc_Sha256Final+116>:	ldr	r0, [r11, #-20]	; 0xffffffec
0x00011d1c	1496	        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
=> 0x11d1c <wc_Sha256Final+120>:	bl	0x305a0 <memcpy>
0x000305a0 in memcpy ()
=> 0x305a0 <memcpy>:	push	{r0, r4, lr}
0x000305a4 in memcpy ()
=> 0x305a4 <memcpy+4>:	subs	r2, r2, #4
0x000305a8 in memcpy ()
=> 0x305a8 <memcpy+8>:	bcc	0x30634 <memcpy+148>
0x000305ac in memcpy ()
=> 0x305ac <memcpy+12>:	ands	r12, r0, #3
0x000305b0 in memcpy ()
=> 0x305b0 <memcpy+16>:	bne	0x30654 <memcpy+180>
0x000305b4 in memcpy ()
=> 0x305b4 <memcpy+20>:	ands	r12, r1, #3
0x000305b8 in memcpy ()
=> 0x305b8 <memcpy+24>:	bne	0x30684 <memcpy+228>
0x000305bc in memcpy ()
=> 0x305bc <memcpy+28>:	subs	r2, r2, #28
0x000305c0 in memcpy ()
=> 0x305c0 <memcpy+32>:	push	{r5, r6, r7, r8}
0x000305c4 in memcpy ()
=> 0x305c4 <memcpy+36>:	bcc	0x305d8 <memcpy+56>
0x000305c8 in memcpy ()
=> 0x305c8 <memcpy+40>:	ldm	r1!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x000305cc in memcpy ()
=> 0x305cc <memcpy+44>:	subs	r2, r2, #32
0x000305d0 in memcpy ()
=> 0x305d0 <memcpy+48>:	stmia	r0!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x000305d4 in memcpy ()
=> 0x305d4 <memcpy+52>:	bcs	0x305c8 <memcpy+40>
0x000305d8 in memcpy ()
=> 0x305d8 <memcpy+56>:	ands	r12, r2, #28
0x000305dc in memcpy ()
=> 0x305dc <memcpy+60>:	rsb	r12, r12, #32
0x000305e0 in memcpy ()
=> 0x305e0 <memcpy+64>:	addne	pc, pc, r12
0x000305e4 in memcpy ()
=> 0x305e4 <memcpy+68>:	b	0x30630 <memcpy+144>
0x00030630 in memcpy ()
=> 0x30630 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x00030634 in memcpy ()
=> 0x30634 <memcpy+148>:	lsls	r2, r2, #31
0x00030638 in memcpy ()
=> 0x30638 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003063c in memcpy ()
=> 0x3063c <memcpy+156>:	ldrbcs	r4, [r1], #1
0x00030640 in memcpy ()
=> 0x30640 <memcpy+160>:	ldrbcs	r12, [r1]
0x00030644 in memcpy ()
=> 0x30644 <memcpy+164>:	strbne	r3, [r0], #1
0x00030648 in memcpy ()
=> 0x30648 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003064c in memcpy ()
=> 0x3064c <memcpy+172>:	strbcs	r12, [r0]
0x00030650 in memcpy ()
=> 0x30650 <memcpy+176>:	pop	{r0, r4, pc}
wc_Sha256Final (sha256=0x40800100, hash=0x40800184 "\337\375`!\273+հ\257gb\220\200\236å1\221݁\307\367\nK(h\212\066!\202\230o") at wolfcrypt/src/sha256.c:1498
1498	        return InitSha256(sha256);  /* reset state */
=> 0x11d20 <wc_Sha256Final+124>:	ldr	r0, [r11, #-16]
0x00011d24	1498	        return InitSha256(sha256);  /* reset state */
=> 0x11d24 <wc_Sha256Final+128>:	bl	0x109e8 <InitSha256>
InitSha256 (sha256=0x40800184) at wolfcrypt/src/sha256.c:233
233	{
=> 0x109e8 <InitSha256>:	push	{r11, lr}
0x000109ec	233	{
=> 0x109ec <InitSha256+4>:	add	r11, sp, #4
0x000109f0	233	{
=> 0x109f0 <InitSha256+8>:	sub	sp, sp, #8
0x000109f4	233	{
=> 0x109f4 <InitSha256+12>:	str	r0, [r11, #-8]
234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x109f8 <InitSha256+16>:	ldr	r3, [r11, #-8]
0x000109fc	234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x109fc <InitSha256+20>:	mov	r2, #32
0x00010a00	234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x10a00 <InitSha256+24>:	mov	r1, #0
0x00010a04	234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x10a04 <InitSha256+28>:	mov	r0, r3
0x00010a08	234	    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
=> 0x10a08 <InitSha256+32>:	bl	0x304b0 <memset>
0x000304b0 in memset ()
=> 0x304b0 <memset>:	mov	r3, r0
0x000304b4 in memset ()
=> 0x304b4 <memset+4>:	cmp	r2, #8
0x000304b8 in memset ()
=> 0x304b8 <memset+8>:	bcc	0x30504 <memset+84>
0x000304bc in memset ()
=> 0x304bc <memset+12>:	tst	r3, #3
0x000304c0 in memset ()
=> 0x304c0 <memset+16>:	strbne	r1, [r3], #1
0x000304c4 in memset ()
=> 0x304c4 <memset+20>:	subne	r2, r2, #1
0x000304c8 in memset ()
=> 0x304c8 <memset+24>:	bne	0x304bc <memset+12>
0x000304cc in memset ()
=> 0x304cc <memset+28>:	and	r1, r1, #255	; 0xff
0x000304d0 in memset ()
=> 0x304d0 <memset+32>:	orr	r1, r1, r1, lsl #8
0x000304d4 in memset ()
=> 0x304d4 <memset+36>:	orr	r1, r1, r1, lsl #16
0x000304d8 in memset ()
=> 0x304d8 <memset+40>:	mov	r12, r1
0x000304dc in memset ()
=> 0x304dc <memset+44>:	subs	r2, r2, #8
0x000304e0 in memset ()
=> 0x304e0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000304e4 in memset ()
=> 0x304e4 <memset+52>:	subscs	r2, r2, #8
0x000304e8 in memset ()
=> 0x304e8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000304ec in memset ()
=> 0x304ec <memset+60>:	subscs	r2, r2, #8
0x000304f0 in memset ()
=> 0x304f0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000304f4 in memset ()
=> 0x304f4 <memset+68>:	subscs	r2, r2, #8
0x000304f8 in memset ()
=> 0x304f8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000304fc in memset ()
=> 0x304fc <memset+76>:	bcs	0x304dc <memset+44>
0x000304dc in memset ()
=> 0x304dc <memset+44>:	subs	r2, r2, #8
0x000304e0 in memset ()
=> 0x304e0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000304e4 in memset ()
=> 0x304e4 <memset+52>:	subscs	r2, r2, #8
0x000304e8 in memset ()
=> 0x304e8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000304ec in memset ()
=> 0x304ec <memset+60>:	subscs	r2, r2, #8
0x000304f0 in memset ()
=> 0x304f0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000304f4 in memset ()
=> 0x304f4 <memset+68>:	subscs	r2, r2, #8
0x000304f8 in memset ()
=> 0x304f8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000304fc in memset ()
=> 0x304fc <memset+76>:	bcs	0x304dc <memset+44>
0x00030500 in memset ()
=> 0x30500 <memset+80>:	and	r2, r2, #7
0x00030504 in memset ()
=> 0x30504 <memset+84>:	subs	r2, r2, #1
0x00030508 in memset ()
=> 0x30508 <memset+88>:	strbcs	r1, [r3], #1
0x0003050c in memset ()
=> 0x3050c <memset+92>:	subscs	r2, r2, #1
0x00030510 in memset ()
=> 0x30510 <memset+96>:	strbcs	r1, [r3], #1
0x00030514 in memset ()
=> 0x30514 <memset+100>:	subscs	r2, r2, #1
0x00030518 in memset ()
=> 0x30518 <memset+104>:	strbcs	r1, [r3], #1
0x0003051c in memset ()
=> 0x3051c <memset+108>:	subscs	r2, r2, #1
0x00030520 in memset ()
=> 0x30520 <memset+112>:	strbcs	r1, [r3], #1
0x00030524 in memset ()
=> 0x30524 <memset+116>:	bcs	0x30504 <memset+84>
0x00030528 in memset ()
=> 0x30528 <memset+120>:	bx	lr
InitSha256 (sha256=0x40800100) at wolfcrypt/src/sha256.c:235
235	    sha256->digest[0] = 0x6A09E667L;
=> 0x10a0c <InitSha256+36>:	ldr	r3, [r11, #-8]
0x00010a10	235	    sha256->digest[0] = 0x6A09E667L;
=> 0x10a10 <InitSha256+40>:	ldr	r2, [pc, #136]	; 0x10aa0 <InitSha256+184>
0x00010a14	235	    sha256->digest[0] = 0x6A09E667L;
=> 0x10a14 <InitSha256+44>:	str	r2, [r3]
236	    sha256->digest[1] = 0xBB67AE85L;
=> 0x10a18 <InitSha256+48>:	ldr	r3, [r11, #-8]
0x00010a1c	236	    sha256->digest[1] = 0xBB67AE85L;
=> 0x10a1c <InitSha256+52>:	ldr	r2, [pc, #128]	; 0x10aa4 <InitSha256+188>
0x00010a20	236	    sha256->digest[1] = 0xBB67AE85L;
=> 0x10a20 <InitSha256+56>:	str	r2, [r3, #4]
237	    sha256->digest[2] = 0x3C6EF372L;
=> 0x10a24 <InitSha256+60>:	ldr	r3, [r11, #-8]
0x00010a28	237	    sha256->digest[2] = 0x3C6EF372L;
=> 0x10a28 <InitSha256+64>:	ldr	r2, [pc, #120]	; 0x10aa8 <InitSha256+192>
0x00010a2c	237	    sha256->digest[2] = 0x3C6EF372L;
=> 0x10a2c <InitSha256+68>:	str	r2, [r3, #8]
238	    sha256->digest[3] = 0xA54FF53AL;
=> 0x10a30 <InitSha256+72>:	ldr	r3, [r11, #-8]
0x00010a34	238	    sha256->digest[3] = 0xA54FF53AL;
=> 0x10a34 <InitSha256+76>:	ldr	r2, [pc, #112]	; 0x10aac <InitSha256+196>
0x00010a38	238	    sha256->digest[3] = 0xA54FF53AL;
=> 0x10a38 <InitSha256+80>:	str	r2, [r3, #12]
239	    sha256->digest[4] = 0x510E527FL;
=> 0x10a3c <InitSha256+84>:	ldr	r3, [r11, #-8]
0x00010a40	239	    sha256->digest[4] = 0x510E527FL;
=> 0x10a40 <InitSha256+88>:	ldr	r2, [pc, #104]	; 0x10ab0 <InitSha256+200>
0x00010a44	239	    sha256->digest[4] = 0x510E527FL;
=> 0x10a44 <InitSha256+92>:	str	r2, [r3, #16]
240	    sha256->digest[5] = 0x9B05688CL;
=> 0x10a48 <InitSha256+96>:	ldr	r3, [r11, #-8]
0x00010a4c	240	    sha256->digest[5] = 0x9B05688CL;
=> 0x10a4c <InitSha256+100>:	ldr	r2, [pc, #96]	; 0x10ab4 <InitSha256+204>
0x00010a50	240	    sha256->digest[5] = 0x9B05688CL;
=> 0x10a50 <InitSha256+104>:	str	r2, [r3, #20]
241	    sha256->digest[6] = 0x1F83D9ABL;
=> 0x10a54 <InitSha256+108>:	ldr	r3, [r11, #-8]
0x00010a58	241	    sha256->digest[6] = 0x1F83D9ABL;
=> 0x10a58 <InitSha256+112>:	ldr	r2, [pc, #88]	; 0x10ab8 <InitSha256+208>
0x00010a5c	241	    sha256->digest[6] = 0x1F83D9ABL;
=> 0x10a5c <InitSha256+116>:	str	r2, [r3, #24]
242	    sha256->digest[7] = 0x5BE0CD19L;
=> 0x10a60 <InitSha256+120>:	ldr	r3, [r11, #-8]
0x00010a64	242	    sha256->digest[7] = 0x5BE0CD19L;
=> 0x10a64 <InitSha256+124>:	ldr	r2, [pc, #80]	; 0x10abc <InitSha256+212>
0x00010a68	242	    sha256->digest[7] = 0x5BE0CD19L;
=> 0x10a68 <InitSha256+128>:	str	r2, [r3, #28]
244	    sha256->buffLen = 0;
=> 0x10a6c <InitSha256+132>:	ldr	r3, [r11, #-8]
0x00010a70	244	    sha256->buffLen = 0;
=> 0x10a70 <InitSha256+136>:	mov	r2, #0
0x00010a74	244	    sha256->buffLen = 0;
=> 0x10a74 <InitSha256+140>:	str	r2, [r3, #96]	; 0x60
245	    sha256->loLen   = 0;
=> 0x10a78 <InitSha256+144>:	ldr	r3, [r11, #-8]
0x00010a7c	245	    sha256->loLen   = 0;
=> 0x10a7c <InitSha256+148>:	mov	r2, #0
0x00010a80	245	    sha256->loLen   = 0;
=> 0x10a80 <InitSha256+152>:	str	r2, [r3, #100]	; 0x64
246	    sha256->hiLen   = 0;
=> 0x10a84 <InitSha256+156>:	ldr	r3, [r11, #-8]
0x00010a88	246	    sha256->hiLen   = 0;
=> 0x10a88 <InitSha256+160>:	mov	r2, #0
0x00010a8c	246	    sha256->hiLen   = 0;
=> 0x10a8c <InitSha256+164>:	str	r2, [r3, #104]	; 0x68
268	    return 0;
=> 0x10a90 <InitSha256+168>:	mov	r3, #0
269	}
=> 0x10a94 <InitSha256+172>:	mov	r0, r3
0x00010a98	269	}
=> 0x10a98 <InitSha256+176>:	sub	sp, r11, #4
0x00010a9c	269	}
=> 0x10a9c <InitSha256+180>:	pop	{r11, pc}
0x00011d28 in wc_Sha256Final (sha256=0x40800100, hash=0x40800184 "\337\375`!\273+հ\257gb\220\200\236å1\221݁\307\367\nK(h\212\066!\202\230o") at wolfcrypt/src/sha256.c:1498
1498	        return InitSha256(sha256);  /* reset state */
=> 0x11d28 <wc_Sha256Final+132>:	mov	r3, r0
1499	    }
=> 0x11d2c <wc_Sha256Final+136>:	mov	r0, r3
0x00011d30	1499	    }
=> 0x11d30 <wc_Sha256Final+140>:	sub	sp, r11, #4
0x00011d34	1499	    }
=> 0x11d34 <wc_Sha256Final+144>:	pop	{r11, pc}
0x0001069c in main () at HASH.c:33
33	    ret = wc_Sha256Final(&sha256, hash);
=> 0x1069c <main+208>:	str	r0, [r11, #-192]	; 0xffffff40
34	    if (ret != 0) {
=> 0x106a0 <main+212>:	ldr	r3, [r11, #-192]	; 0xffffff40
0x000106a4	34	    if (ret != 0) {
=> 0x106a4 <main+216>:	cmp	r3, #0
0x000106a8	34	    if (ret != 0) {
=> 0x106a8 <main+220>:	beq	0x106cc <main+256>
40	    printf("SHA-256 Hash: ");
=> 0x106cc <main+256>:	ldr	r0, [pc, #84]	; 0x10728 <main+348>
0x000106d0	40	    printf("SHA-256 Hash: ");
=> 0x106d0 <main+260>:	bl	0x19030 <printf>
0x00019030 in printf ()
=> 0x19030 <printf>:	push	{r0, r1, r2, r3}
0x00019034 in printf ()
=> 0x19034 <printf+4>:	push	{lr}		; (str lr, [sp, #-4]!)
0x00019038 in printf ()
=> 0x19038 <printf+8>:	ldr	r2, [pc, #120]	; 0x190b8 <printf+136>
0x0001903c in printf ()
=> 0x1903c <printf+12>:	ldr	r3, [pc, #120]	; 0x190bc <printf+140>
0x00019040 in printf ()
=> 0x19040 <printf+16>:	add	r2, pc, r2
0x00019044 in printf ()
=> 0x19044 <printf+20>:	ldr	r3, [r2, r3]
0x00019048 in printf ()
=> 0x19048 <printf+24>:	sub	sp, sp, #12
0x0001904c in printf ()
=> 0x1904c <printf+28>:	ldr	r3, [r3]
0x00019050 in printf ()
=> 0x19050 <printf+32>:	str	r3, [sp, #4]
0x00019054 in printf ()
=> 0x19054 <printf+36>:	mov	r3, #0
0x00019058 in printf ()
=> 0x19058 <printf+40>:	ldr	r0, [pc, #96]	; 0x190c0 <printf+144>
0x0001905c in printf ()
=> 0x1905c <printf+44>:	add	r2, sp, #20
0x00019060 in printf ()
=> 0x19060 <printf+48>:	ldr	r12, [pc, #92]	; 0x190c4 <printf+148>
0x00019064 in printf ()
=> 0x19064 <printf+52>:	str	r2, [sp]
0x00019068 in printf ()
=> 0x19068 <printf+56>:	add	r0, pc, r0
0x0001906c in printf ()
=> 0x1906c <printf+60>:	ldr	r0, [r0, r12]
0x00019070 in printf ()
=> 0x19070 <printf+64>:	mov	r3, #0
0x00019074 in printf ()
=> 0x19074 <printf+68>:	ldr	r1, [sp, #16]
0x00019078 in printf ()
=> 0x19078 <printf+72>:	ldr	r0, [r0]
0x0001907c in printf ()
=> 0x1907c <printf+76>:	bl	0x1b924 <__vfprintf_internal>
0x0001b924 in __vfprintf_internal ()
=> 0x1b924 <__vfprintf_internal>:	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
0x0001b928 in __vfprintf_internal ()
=> 0x1b928 <__vfprintf_internal+4>:	
    ldr	r12, [pc, #4044]	; 0x1c8fc <__vfprintf_internal+4056>
0x0001b92c in __vfprintf_internal ()
=> 0x1b92c <__vfprintf_internal+8>:	mov	r6, r0
0x0001b930 in __vfprintf_internal ()
=> 0x1b930 <__vfprintf_internal+12>:	ldr	r0, [pc, #4040]	; 0x1c900 <__vfprintf_internal+4060>
0x0001b934 in __vfprintf_internal ()
=> 0x1b934 <__vfprintf_internal+16>:	add	r12, pc, r12
0x0001b938 in __vfprintf_internal ()
=> 0x1b938 <__vfprintf_internal+20>:	ldr	r0, [r12, r0]
0x0001b93c in __vfprintf_internal ()
=> 0x1b93c <__vfprintf_internal+24>:	sub	sp, sp, #1232	; 0x4d0
0x0001b940 in __vfprintf_internal ()
=> 0x1b940 <__vfprintf_internal+28>:	sub	sp, sp, #4
0x0001b944 in __vfprintf_internal ()
=> 0x1b944 <__vfprintf_internal+32>:	ldr	r0, [r0]
0x0001b948 in __vfprintf_internal ()
=> 0x1b948 <__vfprintf_internal+36>:	str	r0, [sp, #1228]	; 0x4cc
0x0001b94c in __vfprintf_internal ()
=> 0x1b94c <__vfprintf_internal+40>:	mov	r0, #0
0x0001b950 in __vfprintf_internal ()
=> 0x1b950 <__vfprintf_internal+44>:	bl	0x12700 <__aeabi_read_tp>
0x00012700 in __aeabi_read_tp ()
=> 0x12700 <__aeabi_read_tp>:	mvn	r0, #61440	; 0xf000
0x00012704 in __aeabi_read_tp ()
=> 0x12704 <__aeabi_read_tp+4>:	sub	pc, r0, #31
0xffff0fe0 in ?? ()
=> 0xffff0fe0:	./scr.gdb:8: Error in sourced command file:
Cannot access memory at address 0xffff0fe0
[?2004hA program is being debugged already.  Kill it? (y or n) y
[?2004lRemote debugging using localhost:1131
Remote communication error.  Target disconnected.: Connection reset by peer.
[?2004h(gdb) 