GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1
Copyright (C) 2022 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./cfiles/AES...
0x00010418 in _start ()
The target architecture is set to "arm".
Breakpoint 1 at 0x105d8: file AES.c, line 19.

Breakpoint 1, main () at AES.c:19
19	    byte key[KEY_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
0x000105dc	19	    byte key[KEY_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x105dc <main+52>:	sub	r12, r11, #48	; 0x30
0x000105e0	19	    byte key[KEY_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x105e0 <main+56>:	mov	lr, r3
0x000105e4	19	    byte key[KEY_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x105e4 <main+60>:	ldm	lr!, {r0, r1, r2, r3}
0x000105e8	19	    byte key[KEY_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x105e8 <main+64>:	stmia	r12!, {r0, r1, r2, r3}
0x000105ec	19	    byte key[KEY_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x105ec <main+68>:	ldm	lr, {r0, r1, r2, r3}
0x000105f0	19	    byte key[KEY_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x105f0 <main+72>:	stm	r12, {r0, r1, r2, r3}
23	    byte iv[AES_BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x105f4 <main+76>:	ldr	r3, [pc, #332]	; 0x10748 <main+416>
0x000105f8	23	    byte iv[AES_BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x105f8 <main+80>:	sub	r12, r11, #112	; 0x70
0x000105fc	23	    byte iv[AES_BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x105fc <main+84>:	ldm	r3, {r0, r1, r2, r3}
0x00010600	23	    byte iv[AES_BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
=> 0x10600 <main+88>:	stm	r12, {r0, r1, r2, r3}
25	    byte plaintext[AES_BLOCK_SIZE] = "a;sdlkjfei4344@#";
=> 0x10604 <main+92>:	ldr	r3, [pc, #320]	; 0x1074c <main+420>
0x00010608	25	    byte plaintext[AES_BLOCK_SIZE] = "a;sdlkjfei4344@#";
=> 0x10608 <main+96>:	sub	r12, r11, #96	; 0x60
0x0001060c	25	    byte plaintext[AES_BLOCK_SIZE] = "a;sdlkjfei4344@#";
=> 0x1060c <main+100>:	ldm	r3, {r0, r1, r2, r3}
0x00010610	25	    byte plaintext[AES_BLOCK_SIZE] = "a;sdlkjfei4344@#";
=> 0x10610 <main+104>:	stm	r12, {r0, r1, r2, r3}
31	    wc_AesInit(&aes, NULL, INVALID_DEVID);
=> 0x10614 <main+108>:	mvn	r2, #1
0x00010618	31	    wc_AesInit(&aes, NULL, INVALID_DEVID);
=> 0x10618 <main+112>:	mov	r1, #0
0x0001061c	31	    wc_AesInit(&aes, NULL, INVALID_DEVID);
=> 0x1061c <main+116>:	mov	r0, r4
0x00010620	31	    wc_AesInit(&aes, NULL, INVALID_DEVID);
=> 0x10620 <main+120>:	bl	0x17bc4 <wc_AesInit>
wc_AesInit (aes=0x0, heap=0x0, devId=0) at wolfcrypt/src/aes.c:11098
11098	{
=> 0x17bc4 <wc_AesInit>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00017bc8	11098	{
=> 0x17bc8 <wc_AesInit+4>:	add	r11, sp, #0
0x00017bcc	11098	{
=> 0x17bcc <wc_AesInit+8>:	sub	sp, sp, #28
0x00017bd0	11098	{
=> 0x17bd0 <wc_AesInit+12>:	str	r0, [r11, #-16]
0x00017bd4	11098	{
=> 0x17bd4 <wc_AesInit+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00017bd8	11098	{
=> 0x17bd8 <wc_AesInit+20>:	str	r2, [r11, #-24]	; 0xffffffe8
11099	    int ret = 0;
=> 0x17bdc <wc_AesInit+24>:	mov	r3, #0
0x00017be0	11099	    int ret = 0;
=> 0x17be0 <wc_AesInit+28>:	str	r3, [r11, #-8]
11101	    if (aes == NULL)
=> 0x17be4 <wc_AesInit+32>:	ldr	r3, [r11, #-16]
0x00017be8	11101	    if (aes == NULL)
=> 0x17be8 <wc_AesInit+36>:	cmp	r3, #0
0x00017bec	11101	    if (aes == NULL)
=> 0x17bec <wc_AesInit+40>:	bne	0x17bf8 <wc_AesInit+52>
11104	    aes->heap = heap;
=> 0x17bf8 <wc_AesInit+52>:	ldr	r3, [r11, #-16]
0x00017bfc	11104	    aes->heap = heap;
=> 0x17bfc <wc_AesInit+56>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00017c00	11104	    aes->heap = heap;
=> 0x17c00 <wc_AesInit+60>:	str	r2, [r3, #832]	; 0x340
11105	    aes->rounds = 0;
=> 0x17c04 <wc_AesInit+64>:	ldr	r3, [r11, #-16]
0x00017c08	11105	    aes->rounds = 0;
=> 0x17c08 <wc_AesInit+68>:	mov	r2, #0
0x00017c0c	11105	    aes->rounds = 0;
=> 0x17c0c <wc_AesInit+72>:	str	r2, [r3, #240]	; 0xf0
11177	    return ret;
=> 0x17c10 <wc_AesInit+76>:	ldr	r3, [r11, #-8]
11178	}
=> 0x17c14 <wc_AesInit+80>:	mov	r0, r3
0x00017c18	11178	}
=> 0x17c18 <wc_AesInit+84>:	add	sp, r11, #0
0x00017c1c	11178	}
=> 0x17c1c <wc_AesInit+88>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00017c20	11178	}
=> 0x17c20 <wc_AesInit+92>:	bx	lr
main () at AES.c:32
32	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_ENCRYPTION);
=> 0x10624 <main+124>:	sub	r3, r11, #112	; 0x70
0x00010628	32	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_ENCRYPTION);
=> 0x10628 <main+128>:	sub	r1, r11, #48	; 0x30
0x0001062c	32	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_ENCRYPTION);
=> 0x1062c <main+132>:	mov	r2, #0
0x00010630	32	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_ENCRYPTION);
=> 0x10630 <main+136>:	str	r2, [sp]
0x00010634	32	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_ENCRYPTION);
=> 0x10634 <main+140>:	mov	r2, #32
0x00010638	32	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_ENCRYPTION);
=> 0x10638 <main+144>:	mov	r0, r4
0x0001063c	32	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_ENCRYPTION);
=> 0x1063c <main+148>:	bl	0x159d4 <wc_AesSetKey>
wc_AesSetKey (aes=0x0, userKey=0x0, keylen=1082129920, iv=0x0, dir=0) at wolfcrypt/src/aes.c:4590
4590	    {
=> 0x159d4 <wc_AesSetKey>:	push	{r11, lr}
0x000159d8	4590	    {
=> 0x159d8 <wc_AesSetKey+4>:	add	r11, sp, #4
0x000159dc	4590	    {
=> 0x159dc <wc_AesSetKey+8>:	sub	sp, sp, #24
0x000159e0	4590	    {
=> 0x159e0 <wc_AesSetKey+12>:	str	r0, [r11, #-8]
0x000159e4	4590	    {
=> 0x159e4 <wc_AesSetKey+16>:	str	r1, [r11, #-12]
0x000159e8	4590	    {
=> 0x159e8 <wc_AesSetKey+20>:	str	r2, [r11, #-16]
0x000159ec	4590	    {
=> 0x159ec <wc_AesSetKey+24>:	str	r3, [r11, #-20]	; 0xffffffec
4591	        if (aes == NULL) {
=> 0x159f0 <wc_AesSetKey+28>:	ldr	r3, [r11, #-8]
0x000159f4	4591	        if (aes == NULL) {
=> 0x159f4 <wc_AesSetKey+32>:	cmp	r3, #0
0x000159f8	4591	        if (aes == NULL) {
=> 0x159f8 <wc_AesSetKey+36>:	bne	0x15a04 <wc_AesSetKey+48>
4594	        if (keylen > sizeof(aes->key)) {
=> 0x15a04 <wc_AesSetKey+48>:	ldr	r3, [r11, #-16]
0x00015a08	4594	        if (keylen > sizeof(aes->key)) {
=> 0x15a08 <wc_AesSetKey+52>:	cmp	r3, #240	; 0xf0
0x00015a0c	4594	        if (keylen > sizeof(aes->key)) {
=> 0x15a0c <wc_AesSetKey+56>:	bls	0x15a18 <wc_AesSetKey+68>
4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a18 <wc_AesSetKey+68>:	mov	r3, #1
0x00015a1c	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a1c <wc_AesSetKey+72>:	str	r3, [sp, #4]
0x00015a20	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a20 <wc_AesSetKey+76>:	ldr	r3, [r11, #4]
0x00015a24	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a24 <wc_AesSetKey+80>:	str	r3, [sp]
0x00015a28	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a28 <wc_AesSetKey+84>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015a2c	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a2c <wc_AesSetKey+88>:	ldr	r2, [r11, #-16]
0x00015a30	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a30 <wc_AesSetKey+92>:	ldr	r1, [r11, #-12]
0x00015a34	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a34 <wc_AesSetKey+96>:	ldr	r0, [r11, #-8]
0x00015a38	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a38 <wc_AesSetKey+100>:	bl	0x15864 <wc_AesSetKeyLocal>
wc_AesSetKeyLocal (aes=0x0, userKey=0x0, keylen=0, iv=0x0, dir=0, checkKeyLen=1) at wolfcrypt/src/aes.c:4312
4312	    {
=> 0x15864 <wc_AesSetKeyLocal>:	push	{r11, lr}
0x00015868	4312	    {
=> 0x15868 <wc_AesSetKeyLocal+4>:	add	r11, sp, #4
0x0001586c	4312	    {
=> 0x1586c <wc_AesSetKeyLocal+8>:	sub	sp, sp, #24
0x00015870	4312	    {
=> 0x15870 <wc_AesSetKeyLocal+12>:	str	r0, [r11, #-16]
0x00015874	4312	    {
=> 0x15874 <wc_AesSetKeyLocal+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00015878	4312	    {
=> 0x15878 <wc_AesSetKeyLocal+20>:	str	r2, [r11, #-24]	; 0xffffffe8
0x0001587c	4312	    {
=> 0x1587c <wc_AesSetKeyLocal+24>:	str	r3, [r11, #-28]	; 0xffffffe4
4319	        if (aes == NULL)
=> 0x15880 <wc_AesSetKeyLocal+28>:	ldr	r3, [r11, #-16]
0x00015884	4319	        if (aes == NULL)
=> 0x15884 <wc_AesSetKeyLocal+32>:	cmp	r3, #0
0x00015888	4319	        if (aes == NULL)
=> 0x15888 <wc_AesSetKeyLocal+36>:	bne	0x15894 <wc_AesSetKeyLocal+48>
4327	        switch (keylen) {
=> 0x15894 <wc_AesSetKeyLocal+48>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015898	4327	        switch (keylen) {
=> 0x15898 <wc_AesSetKeyLocal+52>:	sub	r3, r3, #16
0x0001589c	4327	        switch (keylen) {
=> 0x1589c <wc_AesSetKeyLocal+56>:	cmp	r3, #16
0x000158a0	4327	        switch (keylen) {
=> 0x158a0 <wc_AesSetKeyLocal+60>:	movhi	r2, #1
0x000158a4	4327	        switch (keylen) {
=> 0x158a4 <wc_AesSetKeyLocal+64>:	movls	r2, #0
0x000158a8	4327	        switch (keylen) {
=> 0x158a8 <wc_AesSetKeyLocal+68>:	and	r2, r2, #255	; 0xff
0x000158ac	4327	        switch (keylen) {
=> 0x158ac <wc_AesSetKeyLocal+72>:	cmp	r2, #0
0x000158b0	4327	        switch (keylen) {
=> 0x158b0 <wc_AesSetKeyLocal+76>:	bne	0x158d8 <wc_AesSetKeyLocal+116>
0x000158b4	4327	        switch (keylen) {
=> 0x158b4 <wc_AesSetKeyLocal+80>:	ldr	r2, [pc, #276]	; 0x159d0 <wc_AesSetKeyLocal+364>
0x000158b8	4327	        switch (keylen) {
=> 0x158b8 <wc_AesSetKeyLocal+84>:	lsr	r3, r2, r3
0x000158bc	4327	        switch (keylen) {
=> 0x158bc <wc_AesSetKeyLocal+88>:	and	r3, r3, #1
0x000158c0	4327	        switch (keylen) {
=> 0x158c0 <wc_AesSetKeyLocal+92>:	cmp	r3, #0
0x000158c4	4327	        switch (keylen) {
=> 0x158c4 <wc_AesSetKeyLocal+96>:	movne	r3, #1
0x000158c8	4327	        switch (keylen) {
=> 0x158c8 <wc_AesSetKeyLocal+100>:	moveq	r3, #0
0x000158cc	4327	        switch (keylen) {
=> 0x158cc <wc_AesSetKeyLocal+104>:	and	r3, r3, #255	; 0xff
0x000158d0	4327	        switch (keylen) {
=> 0x158d0 <wc_AesSetKeyLocal+108>:	cmp	r3, #0
0x000158d4	4327	        switch (keylen) {
=> 0x158d4 <wc_AesSetKeyLocal+112>:	bne	0x158e0 <wc_AesSetKeyLocal+124>
4340	            break;
=> 0x158e0 <wc_AesSetKeyLocal+124>:	nop			; (mov r0, r0)
4422	        if (checkKeyLen) {
=> 0x158e4 <wc_AesSetKeyLocal+128>:	ldr	r3, [r11, #8]
0x000158e8	4422	        if (checkKeyLen) {
=> 0x158e8 <wc_AesSetKeyLocal+132>:	cmp	r3, #0
0x000158ec	4422	        if (checkKeyLen) {
=> 0x158ec <wc_AesSetKeyLocal+136>:	beq	0x1591c <wc_AesSetKeyLocal+184>
4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x158f0 <wc_AesSetKeyLocal+140>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000158f4	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x158f4 <wc_AesSetKeyLocal+144>:	cmp	r3, #16
0x000158f8	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x158f8 <wc_AesSetKeyLocal+148>:	beq	0x1591c <wc_AesSetKeyLocal+184>
0x000158fc	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x158fc <wc_AesSetKeyLocal+152>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015900	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x15900 <wc_AesSetKeyLocal+156>:	cmp	r3, #24
0x00015904	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x15904 <wc_AesSetKeyLocal+160>:	beq	0x1591c <wc_AesSetKeyLocal+184>
0x00015908	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x15908 <wc_AesSetKeyLocal+164>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001590c	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x1590c <wc_AesSetKeyLocal+168>:	cmp	r3, #32
0x00015910	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x15910 <wc_AesSetKeyLocal+172>:	beq	0x1591c <wc_AesSetKeyLocal+184>
4440	        aes->keylen = (int)keylen;
=> 0x1591c <wc_AesSetKeyLocal+184>:	ldr	r2, [r11, #-24]	; 0xffffffe8
4440	        aes->keylen = (int)keylen;
=> 0x15920 <wc_AesSetKeyLocal+188>:	ldr	r3, [r11, #-16]
0x00015924	4440	        aes->keylen = (int)keylen;
=> 0x15924 <wc_AesSetKeyLocal+192>:	str	r2, [r3, #244]	; 0xf4
4441	        aes->rounds = (keylen/4) + 6;
=> 0x15928 <wc_AesSetKeyLocal+196>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001592c	4441	        aes->rounds = (keylen/4) + 6;
=> 0x1592c <wc_AesSetKeyLocal+200>:	lsr	r3, r3, #2
4441	        aes->rounds = (keylen/4) + 6;
=> 0x15930 <wc_AesSetKeyLocal+204>:	add	r2, r3, #6
4441	        aes->rounds = (keylen/4) + 6;
=> 0x15934 <wc_AesSetKeyLocal+208>:	ldr	r3, [r11, #-16]
0x00015938	4441	        aes->rounds = (keylen/4) + 6;
=> 0x15938 <wc_AesSetKeyLocal+212>:	str	r2, [r3, #240]	; 0xf0
4442	        ret = wc_AesSetIV(aes, iv);
=> 0x1593c <wc_AesSetKeyLocal+216>:	ldr	r1, [r11, #-28]	; 0xffffffe4
0x00015940	4442	        ret = wc_AesSetIV(aes, iv);
=> 0x15940 <wc_AesSetKeyLocal+220>:	ldr	r0, [r11, #-16]
0x00015944	4442	        ret = wc_AesSetIV(aes, iv);
=> 0x15944 <wc_AesSetKeyLocal+224>:	bl	0x15a4c <wc_AesSetIV>
wc_AesSetIV (aes=0x0, iv=0x0) at wolfcrypt/src/aes.c:4643
4643	{
=> 0x15a4c <wc_AesSetIV>:	push	{r11, lr}
0x00015a50	4643	{
=> 0x15a50 <wc_AesSetIV+4>:	add	r11, sp, #4
0x00015a54	4643	{
=> 0x15a54 <wc_AesSetIV+8>:	sub	sp, sp, #8
0x00015a58	4643	{
=> 0x15a58 <wc_AesSetIV+12>:	str	r0, [r11, #-8]
0x00015a5c	4643	{
=> 0x15a5c <wc_AesSetIV+16>:	str	r1, [r11, #-12]
4644	    if (aes == NULL)
=> 0x15a60 <wc_AesSetIV+20>:	ldr	r3, [r11, #-8]
0x00015a64	4644	    if (aes == NULL)
=> 0x15a64 <wc_AesSetIV+24>:	cmp	r3, #0
0x00015a68	4644	    if (aes == NULL)
=> 0x15a68 <wc_AesSetIV+28>:	bne	0x15a74 <wc_AesSetIV+40>
4655	    if (iv)
=> 0x15a74 <wc_AesSetIV+40>:	ldr	r3, [r11, #-12]
0x00015a78	4655	    if (iv)
=> 0x15a78 <wc_AesSetIV+44>:	cmp	r3, #0
0x00015a7c	4655	    if (iv)
=> 0x15a7c <wc_AesSetIV+48>:	beq	0x15a9c <wc_AesSetIV+80>
4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a80 <wc_AesSetIV+52>:	ldr	r3, [r11, #-8]
0x00015a84	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a84 <wc_AesSetIV+56>:	add	r3, r3, #256	; 0x100
0x00015a88	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a88 <wc_AesSetIV+60>:	mov	r2, #16
0x00015a8c	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a8c <wc_AesSetIV+64>:	ldr	r1, [r11, #-12]
0x00015a90	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a90 <wc_AesSetIV+68>:	mov	r0, r3
0x00015a94	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a94 <wc_AesSetIV+72>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af78 in memcpy ()
=> 0x3af78 <memcpy+88>:	ldr	r6, [r1], #4
0x0003af7c in memcpy ()
=> 0x3af7c <memcpy+92>:	ldr	r7, [r1], #4
0x0003af80 in memcpy ()
=> 0x3af80 <memcpy+96>:	ldr	r8, [r1], #4
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afa0 in memcpy ()
=> 0x3afa0 <memcpy+128>:	str	r6, [r0], #4
0x0003afa4 in memcpy ()
=> 0x3afa4 <memcpy+132>:	str	r7, [r0], #4
0x0003afa8 in memcpy ()
=> 0x3afa8 <memcpy+136>:	str	r8, [r0], #4
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
0x00015a98 in wc_AesSetIV (aes=0x407ffe00, iv=0x40800154 "") at wolfcrypt/src/aes.c:4656
4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a98 <wc_AesSetIV+76>:	b	0x15ab4 <wc_AesSetIV+104>
4666	    return 0;
=> 0x15ab4 <wc_AesSetIV+104>:	mov	r3, #0
4667	}
=> 0x15ab8 <wc_AesSetIV+108>:	mov	r0, r3
0x00015abc	4667	}
=> 0x15abc <wc_AesSetIV+112>:	sub	sp, r11, #4
0x00015ac0	4667	}
=> 0x15ac0 <wc_AesSetIV+116>:	pop	{r11, pc}
0x00015948 in wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=0, checkKeyLen=1) at wolfcrypt/src/aes.c:4442
4442	        ret = wc_AesSetIV(aes, iv);
=> 0x15948 <wc_AesSetKeyLocal+228>:	str	r0, [r11, #-8]
4443	        if (ret != 0)
=> 0x1594c <wc_AesSetKeyLocal+232>:	ldr	r3, [r11, #-8]
0x00015950	4443	        if (ret != 0)
=> 0x15950 <wc_AesSetKeyLocal+236>:	cmp	r3, #0
0x00015954	4443	        if (ret != 0)
=> 0x15954 <wc_AesSetKeyLocal+240>:	beq	0x15960 <wc_AesSetKeyLocal+252>
4504	        if (keylen > sizeof(aes->key)) {
=> 0x15960 <wc_AesSetKeyLocal+252>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015964	4504	        if (keylen > sizeof(aes->key)) {
=> 0x15964 <wc_AesSetKeyLocal+256>:	cmp	r3, #240	; 0xf0
0x00015968	4504	        if (keylen > sizeof(aes->key)) {
=> 0x15968 <wc_AesSetKeyLocal+260>:	bls	0x15974 <wc_AesSetKeyLocal+272>
4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x15974 <wc_AesSetKeyLocal+272>:	ldr	r3, [r11, #-16]
0x00015978	4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x15978 <wc_AesSetKeyLocal+276>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x0001597c	4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x1597c <wc_AesSetKeyLocal+280>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015980	4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x15980 <wc_AesSetKeyLocal+284>:	mov	r0, r3
0x00015984	4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x15984 <wc_AesSetKeyLocal+288>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af48 in memcpy ()
=> 0x3af48 <memcpy+40>:	ldm	r1!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x0003af4c in memcpy ()
=> 0x3af4c <memcpy+44>:	subs	r2, r2, #32
0x0003af50 in memcpy ()
=> 0x3af50 <memcpy+48>:	stmia	r0!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x0003af54 in memcpy ()
=> 0x3af54 <memcpy+52>:	bcs	0x3af48 <memcpy+40>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af64 in memcpy ()
=> 0x3af64 <memcpy+68>:	b	0x3afb0 <memcpy+144>
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=0, checkKeyLen=1) at wolfcrypt/src/aes.c:4532
4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x15988 <wc_AesSetKeyLocal+292>:	ldr	r3, [r11, #-16]
4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x1598c <wc_AesSetKeyLocal+296>:	ldr	r1, [r11, #-16]
4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x15990 <wc_AesSetKeyLocal+300>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015994	4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x15994 <wc_AesSetKeyLocal+304>:	mov	r0, r3
0x00015998	4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x15998 <wc_AesSetKeyLocal+308>:	bl	0x107ec <ByteReverseWords>
ByteReverseWords (out=0xa60ac, in=0x0, byteCount=0) at ./wolfcrypt/src/misc.c:183
183	{
=> 0x107ec <ByteReverseWords>:	push	{r4, r11, lr}
0x000107f0	183	{
=> 0x107f0 <ByteReverseWords+4>:	add	r11, sp, #8
0x000107f4	183	{
=> 0x107f4 <ByteReverseWords+8>:	sub	sp, sp, #44	; 0x2c
0x000107f8	183	{
=> 0x107f8 <ByteReverseWords+12>:	str	r0, [r11, #-40]	; 0xffffffd8
0x000107fc	183	{
=> 0x107fc <ByteReverseWords+16>:	str	r1, [r11, #-44]	; 0xffffffd4
0x00010800	183	{
=> 0x10800 <ByteReverseWords+20>:	str	r2, [r11, #-48]	; 0xffffffd0
183	{
=> 0x10804 <ByteReverseWords+24>:	ldr	r3, [pc, #332]	; 0x10958 <ByteReverseWords+364>
0x00010808	183	{
=> 0x10808 <ByteReverseWords+28>:	ldr	r3, [r3]
0x0001080c	183	{
=> 0x1080c <ByteReverseWords+32>:	str	r3, [r11, #-16]
0x00010810	183	{
=> 0x10810 <ByteReverseWords+36>:	mov	r3, #0
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10814 <ByteReverseWords+40>:	ldr	r3, [r11, #-44]	; 0xffffffd4
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10818 <ByteReverseWords+44>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1081c <ByteReverseWords+48>:	cmp	r3, #0
0x00010820	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10820 <ByteReverseWords+52>:	bne	0x108a0 <ByteReverseWords+180>
188	        (((size_t)out & 0x3) == 0))
=> 0x10824 <ByteReverseWords+56>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010828	188	        (((size_t)out & 0x3) == 0))
=> 0x10828 <ByteReverseWords+60>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1082c <ByteReverseWords+64>:	cmp	r3, #0
0x00010830	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10830 <ByteReverseWords+68>:	bne	0x108a0 <ByteReverseWords+180>
191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10834 <ByteReverseWords+72>:	ldr	r3, [r11, #-48]	; 0xffffffd0
0x00010838	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10838 <ByteReverseWords+76>:	lsr	r3, r3, #2
0x0001083c	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x1083c <ByteReverseWords+80>:	str	r3, [r11, #-28]	; 0xffffffe4
192	        for (i = 0; i < count; i++)
=> 0x10840 <ByteReverseWords+84>:	mov	r3, #0
0x00010844	192	        for (i = 0; i < count; i++)
=> 0x10844 <ByteReverseWords+88>:	str	r3, [r11, #-32]	; 0xffffffe0
192	        for (i = 0; i < count; i++)
=> 0x10848 <ByteReverseWords+92>:	b	0x1088c <ByteReverseWords+160>
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=0, y=0) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=33751041) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=33751041) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=33751041, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=101123077) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=101123077) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=101123077, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=168495113) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=168495113) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=168495113, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=235867149) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=235867149) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=235867149, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=303239185) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=303239185) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=303239185, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=370611221) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=370611221) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=370611221, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=437983257) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=437983257) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=437983257, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=505355293) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
190	    {
=> 0x1089c <ByteReverseWords+176>:	b	0x10930 <ByteReverseWords+324>
210	}
=> 0x10930 <ByteReverseWords+324>:	nop			; (mov r0, r0)
0x00010934	210	}
=> 0x10934 <ByteReverseWords+328>:	ldr	r3, [pc, #28]	; 0x10958 <ByteReverseWords+364>
0x00010938	210	}
=> 0x10938 <ByteReverseWords+332>:	ldr	r2, [r3]
0x0001093c	210	}
=> 0x1093c <ByteReverseWords+336>:	ldr	r3, [r11, #-16]
0x00010940	210	}
=> 0x10940 <ByteReverseWords+340>:	eors	r2, r3, r2
0x00010944	210	}
=> 0x10944 <ByteReverseWords+344>:	mov	r3, #0
0x00010948	210	}
=> 0x10948 <ByteReverseWords+348>:	beq	0x10950 <ByteReverseWords+356>
0x00010950	210	}
=> 0x10950 <ByteReverseWords+356>:	sub	sp, r11, #8
0x00010954	210	}
=> 0x10954 <ByteReverseWords+360>:	pop	{r4, r11, pc}
wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=0, checkKeyLen=1) at wolfcrypt/src/aes.c:4566
4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x1599c <wc_AesSetKeyLocal+312>:	ldr	r3, [r11, #4]
0x000159a0	4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x159a0 <wc_AesSetKeyLocal+316>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000159a4	4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x159a4 <wc_AesSetKeyLocal+320>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x000159a8	4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x159a8 <wc_AesSetKeyLocal+324>:	ldr	r0, [r11, #-16]
0x000159ac	4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x159ac <wc_AesSetKeyLocal+328>:	bl	0x14ccc <AesSetKey_C>
AesSetKey_C (aes=0x8, key=0x1 <error: Cannot access memory at address 0x1>, keySz=1082129920, dir=1082129920) at wolfcrypt/src/aes.c:4075
4075	{
=> 0x14ccc <AesSetKey_C>:	push	{r11, lr}
0x00014cd0	4075	{
=> 0x14cd0 <AesSetKey_C+4>:	add	r11, sp, #4
0x00014cd4	4075	{
=> 0x14cd4 <AesSetKey_C+8>:	sub	sp, sp, #40	; 0x28
0x00014cd8	4075	{
=> 0x14cd8 <AesSetKey_C+12>:	str	r0, [r11, #-32]	; 0xffffffe0
0x00014cdc	4075	{
=> 0x14cdc <AesSetKey_C+16>:	str	r1, [r11, #-36]	; 0xffffffdc
0x00014ce0	4075	{
=> 0x14ce0 <AesSetKey_C+20>:	str	r2, [r11, #-40]	; 0xffffffd8
0x00014ce4	4075	{
=> 0x14ce4 <AesSetKey_C+24>:	str	r3, [r11, #-44]	; 0xffffffd4
4075	{
=> 0x14ce8 <AesSetKey_C+28>:	ldr	r3, [pc, #2916]	; 0x15854 <AesSetKey_C+2952>
0x00014cec	4075	{
=> 0x14cec <AesSetKey_C+32>:	ldr	r3, [r3]
0x00014cf0	4075	{
=> 0x14cf0 <AesSetKey_C+36>:	str	r3, [r11, #-8]
0x00014cf4	4075	{
=> 0x14cf4 <AesSetKey_C+40>:	mov	r3, #0
4079	    word32* rk = aes->key;
=> 0x14cf8 <AesSetKey_C+44>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00014cfc	4079	    word32* rk = aes->key;
=> 0x14cfc <AesSetKey_C+48>:	str	r3, [r11, #-20]	; 0xffffffec
4082	    unsigned int i = 0;
=> 0x14d00 <AesSetKey_C+52>:	mov	r3, #0
0x00014d04	4082	    unsigned int i = 0;
=> 0x14d04 <AesSetKey_C+56>:	str	r3, [r11, #-16]
4084	    XMEMCPY(rk, key, keySz);
=> 0x14d08 <AesSetKey_C+60>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00014d0c	4084	    XMEMCPY(rk, key, keySz);
=> 0x14d0c <AesSetKey_C+64>:	ldr	r1, [r11, #-36]	; 0xffffffdc
0x00014d10	4084	    XMEMCPY(rk, key, keySz);
=> 0x14d10 <AesSetKey_C+68>:	ldr	r0, [r11, #-20]	; 0xffffffec
0x00014d14	4084	    XMEMCPY(rk, key, keySz);
=> 0x14d14 <AesSetKey_C+72>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af48 in memcpy ()
=> 0x3af48 <memcpy+40>:	ldm	r1!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x0003af4c in memcpy ()
=> 0x3af4c <memcpy+44>:	subs	r2, r2, #32
0x0003af50 in memcpy ()
=> 0x3af50 <memcpy+48>:	stmia	r0!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x0003af54 in memcpy ()
=> 0x3af54 <memcpy+52>:	bcs	0x3af48 <memcpy+40>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af64 in memcpy ()
=> 0x3af64 <memcpy+68>:	b	0x3afb0 <memcpy+144>
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesSetKey_C (aes=0x407ffe00, key=0x40800194 "", keySz=32, dir=0) at wolfcrypt/src/aes.c:4089
4089	        ByteReverseWords(rk, rk, keySz);
=> 0x14d18 <AesSetKey_C+76>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00014d1c	4089	        ByteReverseWords(rk, rk, keySz);
=> 0x14d1c <AesSetKey_C+80>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00014d20	4089	        ByteReverseWords(rk, rk, keySz);
=> 0x14d20 <AesSetKey_C+84>:	ldr	r0, [r11, #-20]	; 0xffffffec
0x00014d24	4089	        ByteReverseWords(rk, rk, keySz);
=> 0x14d24 <AesSetKey_C+88>:	bl	0x107ec <ByteReverseWords>
ByteReverseWords (out=0x0, in=0x0, byteCount=0) at ./wolfcrypt/src/misc.c:183
183	{
=> 0x107ec <ByteReverseWords>:	push	{r4, r11, lr}
0x000107f0	183	{
=> 0x107f0 <ByteReverseWords+4>:	add	r11, sp, #8
0x000107f4	183	{
=> 0x107f4 <ByteReverseWords+8>:	sub	sp, sp, #44	; 0x2c
0x000107f8	183	{
=> 0x107f8 <ByteReverseWords+12>:	str	r0, [r11, #-40]	; 0xffffffd8
0x000107fc	183	{
=> 0x107fc <ByteReverseWords+16>:	str	r1, [r11, #-44]	; 0xffffffd4
0x00010800	183	{
=> 0x10800 <ByteReverseWords+20>:	str	r2, [r11, #-48]	; 0xffffffd0
183	{
=> 0x10804 <ByteReverseWords+24>:	ldr	r3, [pc, #332]	; 0x10958 <ByteReverseWords+364>
0x00010808	183	{
=> 0x10808 <ByteReverseWords+28>:	ldr	r3, [r3]
0x0001080c	183	{
=> 0x1080c <ByteReverseWords+32>:	str	r3, [r11, #-16]
0x00010810	183	{
=> 0x10810 <ByteReverseWords+36>:	mov	r3, #0
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10814 <ByteReverseWords+40>:	ldr	r3, [r11, #-44]	; 0xffffffd4
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10818 <ByteReverseWords+44>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1081c <ByteReverseWords+48>:	cmp	r3, #0
0x00010820	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10820 <ByteReverseWords+52>:	bne	0x108a0 <ByteReverseWords+180>
188	        (((size_t)out & 0x3) == 0))
=> 0x10824 <ByteReverseWords+56>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010828	188	        (((size_t)out & 0x3) == 0))
=> 0x10828 <ByteReverseWords+60>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1082c <ByteReverseWords+64>:	cmp	r3, #0
0x00010830	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10830 <ByteReverseWords+68>:	bne	0x108a0 <ByteReverseWords+180>
191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10834 <ByteReverseWords+72>:	ldr	r3, [r11, #-48]	; 0xffffffd0
0x00010838	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10838 <ByteReverseWords+76>:	lsr	r3, r3, #2
0x0001083c	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x1083c <ByteReverseWords+80>:	str	r3, [r11, #-28]	; 0xffffffe4
192	        for (i = 0; i < count; i++)
=> 0x10840 <ByteReverseWords+84>:	mov	r3, #0
0x00010844	192	        for (i = 0; i < count; i++)
=> 0x10844 <ByteReverseWords+88>:	str	r3, [r11, #-32]	; 0xffffffe0
192	        for (i = 0; i < count; i++)
=> 0x10848 <ByteReverseWords+92>:	b	0x1088c <ByteReverseWords+160>
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=0) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=0, y=0) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=33751041) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=33751041) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=33751041, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=101123077) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=101123077) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=101123077, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=168495113) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=168495113) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=168495113, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=235867149) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=235867149) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=235867149, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=303239185) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=303239185) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=303239185, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=370611221) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=370611221) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=370611221, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=437983257) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=437983257) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=437983257, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=505355293) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
190	    {
=> 0x1089c <ByteReverseWords+176>:	b	0x10930 <ByteReverseWords+324>
210	}
=> 0x10930 <ByteReverseWords+324>:	nop			; (mov r0, r0)
0x00010934	210	}
=> 0x10934 <ByteReverseWords+328>:	ldr	r3, [pc, #28]	; 0x10958 <ByteReverseWords+364>
0x00010938	210	}
=> 0x10938 <ByteReverseWords+332>:	ldr	r2, [r3]
0x0001093c	210	}
=> 0x1093c <ByteReverseWords+336>:	ldr	r3, [r11, #-16]
0x00010940	210	}
=> 0x10940 <ByteReverseWords+340>:	eors	r2, r3, r2
0x00010944	210	}
=> 0x10944 <ByteReverseWords+344>:	mov	r3, #0
0x00010948	210	}
=> 0x10948 <ByteReverseWords+348>:	beq	0x10950 <ByteReverseWords+356>
0x00010950	210	}
=> 0x10950 <ByteReverseWords+356>:	sub	sp, r11, #8
0x00010954	210	}
=> 0x10954 <ByteReverseWords+360>:	pop	{r4, r11, pc}
AesSetKey_C (aes=0x407ffe00, key=0x40800194 "", keySz=32, dir=0) at wolfcrypt/src/aes.c:4111
4111	    switch (keySz) {
=> 0x14d28 <AesSetKey_C+92>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00014d2c	4111	    switch (keySz) {
=> 0x14d2c <AesSetKey_C+96>:	cmp	r3, #32
0x00014d30	4111	    switch (keySz) {
=> 0x14d30 <AesSetKey_C+100>:	beq	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4208	                break;
=> 0x152b8 <AesSetKey_C+1516>:	nop			; (mov r0, r0)
4228	        break;
=> 0x152bc <AesSetKey_C+1520>:	nop			; (mov r0, r0)
4231	    ForceZero(&temp, sizeof(temp));
=> 0x152c0 <AesSetKey_C+1524>:	sub	r3, r11, #24
0x000152c4	4231	    ForceZero(&temp, sizeof(temp));
=> 0x152c4 <AesSetKey_C+1528>:	mov	r1, #4
0x000152c8	4231	    ForceZero(&temp, sizeof(temp));
=> 0x152c8 <AesSetKey_C+1532>:	mov	r0, r3
0x000152cc	4231	    ForceZero(&temp, sizeof(temp));
=> 0x152cc <AesSetKey_C+1536>:	bl	0x10dbc <ForceZero>
ForceZero (mem=0x9eb56b00, len=1) at ./wolfcrypt/src/misc.c:376
376	{
=> 0x10dbc <ForceZero>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010dc0	376	{
=> 0x10dc0 <ForceZero+4>:	add	r11, sp, #0
0x00010dc4	376	{
=> 0x10dc4 <ForceZero+8>:	sub	sp, sp, #20
0x00010dc8	376	{
=> 0x10dc8 <ForceZero+12>:	str	r0, [r11, #-16]
0x00010dcc	376	{
=> 0x10dcc <ForceZero+16>:	str	r1, [r11, #-20]	; 0xffffffec
377	    volatile byte* z = (volatile byte*)mem;
=> 0x10dd0 <ForceZero+20>:	ldr	r3, [r11, #-16]
0x00010dd4	377	    volatile byte* z = (volatile byte*)mem;
=> 0x10dd4 <ForceZero+24>:	str	r3, [r11, #-8]
399	    while (len--) *z++ = 0;
=> 0x10dd8 <ForceZero+28>:	b	0x10df0 <ForceZero+52>
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
400	}
=> 0x10e04 <ForceZero+72>:	nop			; (mov r0, r0)
0x00010e08	400	}
=> 0x10e08 <ForceZero+76>:	nop			; (mov r0, r0)
0x00010e0c	400	}
=> 0x10e0c <ForceZero+80>:	add	sp, r11, #0
0x00010e10	400	}
=> 0x10e10 <ForceZero+84>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010e14	400	}
=> 0x10e14 <ForceZero+88>:	bx	lr
AesSetKey_C (aes=0x407ffe00, key=0x40800194 "", keySz=32, dir=0) at wolfcrypt/src/aes.c:4234
4234	    if (dir == AES_DECRYPTION) {
=> 0x152d0 <AesSetKey_C+1540>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000152d4	4234	    if (dir == AES_DECRYPTION) {
=> 0x152d4 <AesSetKey_C+1544>:	cmp	r3, #1
0x000152d8	4234	    if (dir == AES_DECRYPTION) {
=> 0x152d8 <AesSetKey_C+1548>:	bne	0x1582c <AesSetKey_C+2912>
4288	}
=> 0x1582c <AesSetKey_C+2912>:	nop			; (mov r0, r0)
0x00015830	4288	}
=> 0x15830 <AesSetKey_C+2916>:	ldr	r3, [pc, #28]	; 0x15854 <AesSetKey_C+2952>
0x00015834	4288	}
=> 0x15834 <AesSetKey_C+2920>:	ldr	r2, [r3]
0x00015838	4288	}
=> 0x15838 <AesSetKey_C+2924>:	ldr	r3, [r11, #-8]
0x0001583c	4288	}
=> 0x1583c <AesSetKey_C+2928>:	eors	r2, r3, r2
0x00015840	4288	}
=> 0x15840 <AesSetKey_C+2932>:	mov	r3, #0
0x00015844	4288	}
=> 0x15844 <AesSetKey_C+2936>:	beq	0x1584c <AesSetKey_C+2944>
0x0001584c	4288	}
=> 0x1584c <AesSetKey_C+2944>:	sub	sp, r11, #4
0x00015850	4288	}
=> 0x15850 <AesSetKey_C+2948>:	pop	{r11, pc}
wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=0, checkKeyLen=1) at wolfcrypt/src/aes.c:4576
4576	        ret = wc_AesSetIV(aes, iv);
=> 0x159b0 <wc_AesSetKeyLocal+332>:	ldr	r1, [r11, #-28]	; 0xffffffe4
0x000159b4	4576	        ret = wc_AesSetIV(aes, iv);
=> 0x159b4 <wc_AesSetKeyLocal+336>:	ldr	r0, [r11, #-16]
0x000159b8	4576	        ret = wc_AesSetIV(aes, iv);
=> 0x159b8 <wc_AesSetKeyLocal+340>:	bl	0x15a4c <wc_AesSetIV>
wc_AesSetIV (aes=0x9eb56b00, iv=0x4080032c "J\004\200@^\004\200@o\004\200@\227\004\200@\247\004\200@\335\004\200@S\b\200@\224\b\200@\234\b\200@\274\b\200@\304\b\200@\317\b\200@\330\b\200@\370\b\200@\f\t\200@.\t\200@H\t\200@7\017\200@Y\017\200@f\017\200@u\017\200@\201\017\200@\236\017\200@\263\017\200@\312\017\200@\342\017\200@") at wolfcrypt/src/aes.c:4643
4643	{
=> 0x15a4c <wc_AesSetIV>:	push	{r11, lr}
0x00015a50	4643	{
=> 0x15a50 <wc_AesSetIV+4>:	add	r11, sp, #4
0x00015a54	4643	{
=> 0x15a54 <wc_AesSetIV+8>:	sub	sp, sp, #8
0x00015a58	4643	{
=> 0x15a58 <wc_AesSetIV+12>:	str	r0, [r11, #-8]
0x00015a5c	4643	{
=> 0x15a5c <wc_AesSetIV+16>:	str	r1, [r11, #-12]
4644	    if (aes == NULL)
=> 0x15a60 <wc_AesSetIV+20>:	ldr	r3, [r11, #-8]
0x00015a64	4644	    if (aes == NULL)
=> 0x15a64 <wc_AesSetIV+24>:	cmp	r3, #0
0x00015a68	4644	    if (aes == NULL)
=> 0x15a68 <wc_AesSetIV+28>:	bne	0x15a74 <wc_AesSetIV+40>
4655	    if (iv)
=> 0x15a74 <wc_AesSetIV+40>:	ldr	r3, [r11, #-12]
0x00015a78	4655	    if (iv)
=> 0x15a78 <wc_AesSetIV+44>:	cmp	r3, #0
0x00015a7c	4655	    if (iv)
=> 0x15a7c <wc_AesSetIV+48>:	beq	0x15a9c <wc_AesSetIV+80>
4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a80 <wc_AesSetIV+52>:	ldr	r3, [r11, #-8]
0x00015a84	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a84 <wc_AesSetIV+56>:	add	r3, r3, #256	; 0x100
0x00015a88	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a88 <wc_AesSetIV+60>:	mov	r2, #16
0x00015a8c	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a8c <wc_AesSetIV+64>:	ldr	r1, [r11, #-12]
0x00015a90	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a90 <wc_AesSetIV+68>:	mov	r0, r3
0x00015a94	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a94 <wc_AesSetIV+72>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af78 in memcpy ()
=> 0x3af78 <memcpy+88>:	ldr	r6, [r1], #4
0x0003af7c in memcpy ()
=> 0x3af7c <memcpy+92>:	ldr	r7, [r1], #4
0x0003af80 in memcpy ()
=> 0x3af80 <memcpy+96>:	ldr	r8, [r1], #4
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afa0 in memcpy ()
=> 0x3afa0 <memcpy+128>:	str	r6, [r0], #4
0x0003afa4 in memcpy ()
=> 0x3afa4 <memcpy+132>:	str	r7, [r0], #4
0x0003afa8 in memcpy ()
=> 0x3afa8 <memcpy+136>:	str	r8, [r0], #4
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
0x00015a98 in wc_AesSetIV (aes=0x407ffe00, iv=0x40800154 "") at wolfcrypt/src/aes.c:4656
4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a98 <wc_AesSetIV+76>:	b	0x15ab4 <wc_AesSetIV+104>
4666	    return 0;
=> 0x15ab4 <wc_AesSetIV+104>:	mov	r3, #0
4667	}
=> 0x15ab8 <wc_AesSetIV+108>:	mov	r0, r3
0x00015abc	4667	}
=> 0x15abc <wc_AesSetIV+112>:	sub	sp, r11, #4
0x00015ac0	4667	}
=> 0x15ac0 <wc_AesSetIV+116>:	pop	{r11, pc}
0x000159bc in wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=0, checkKeyLen=1) at wolfcrypt/src/aes.c:4576
4576	        ret = wc_AesSetIV(aes, iv);
=> 0x159bc <wc_AesSetKeyLocal+344>:	str	r0, [r11, #-8]
4585	        return ret;
=> 0x159c0 <wc_AesSetKeyLocal+348>:	ldr	r3, [r11, #-8]
4586	    } /* wc_AesSetKeyLocal */
=> 0x159c4 <wc_AesSetKeyLocal+352>:	mov	r0, r3
0x000159c8	4586	    } /* wc_AesSetKeyLocal */
=> 0x159c8 <wc_AesSetKeyLocal+356>:	sub	sp, r11, #4
0x000159cc	4586	    } /* wc_AesSetKeyLocal */
=> 0x159cc <wc_AesSetKeyLocal+360>:	pop	{r11, pc}
0x00015a3c in wc_AesSetKey (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=0) at wolfcrypt/src/aes.c:4618
4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a3c <wc_AesSetKey+104>:	mov	r3, r0
4620	    } /* wc_AesSetKey() */
=> 0x15a40 <wc_AesSetKey+108>:	mov	r0, r3
0x00015a44	4620	    } /* wc_AesSetKey() */
=> 0x15a44 <wc_AesSetKey+112>:	sub	sp, r11, #4
0x00015a48	4620	    } /* wc_AesSetKey() */
=> 0x15a48 <wc_AesSetKey+116>:	pop	{r11, pc}
0x00010640 in main () at AES.c:32
32	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_ENCRYPTION);
=> 0x10640 <main+152>:	str	r0, [r11, #-976]	; 0xfffffc30
33	    check_wolfssl_result(ret, "wc_AesSetKey (encrypt)");
=> 0x10644 <main+156>:	ldr	r1, [pc, #260]	; 0x10750 <main+424>
0x00010648	33	    check_wolfssl_result(ret, "wc_AesSetKey (encrypt)");
=> 0x10648 <main+160>:	ldr	r0, [r11, #-976]	; 0xfffffc30
0x0001064c	33	    check_wolfssl_result(ret, "wc_AesSetKey (encrypt)");
=> 0x1064c <main+164>:	bl	0x1055c <check_wolfssl_result>
check_wolfssl_result (ret=1082129920, func=0x40800194 "") at AES.c:11
11	void check_wolfssl_result(int ret, const char* func) {
=> 0x1055c <check_wolfssl_result>:	push	{r11, lr}
0x00010560	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10560 <check_wolfssl_result+4>:	add	r11, sp, #4
0x00010564	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10564 <check_wolfssl_result+8>:	sub	sp, sp, #8
0x00010568	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10568 <check_wolfssl_result+12>:	str	r0, [r11, #-8]
0x0001056c	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x1056c <check_wolfssl_result+16>:	str	r1, [r11, #-12]
12	    if (ret != 0) {
=> 0x10570 <check_wolfssl_result+20>:	ldr	r3, [r11, #-8]
0x00010574	12	    if (ret != 0) {
=> 0x10574 <check_wolfssl_result+24>:	cmp	r3, #0
0x00010578	12	    if (ret != 0) {
=> 0x10578 <check_wolfssl_result+28>:	beq	0x10598 <check_wolfssl_result+60>
15	}
=> 0x10598 <check_wolfssl_result+60>:	nop			; (mov r0, r0)
0x0001059c	15	}
=> 0x1059c <check_wolfssl_result+64>:	sub	sp, r11, #4
0x000105a0	15	}
=> 0x105a0 <check_wolfssl_result+68>:	pop	{r11, pc}
main () at AES.c:36
36	    ret = wc_AesCbcEncrypt(&aes, ciphertext, plaintext, sizeof(plaintext));
=> 0x10650 <main+168>:	sub	r2, r11, #96	; 0x60
0x00010654	36	    ret = wc_AesCbcEncrypt(&aes, ciphertext, plaintext, sizeof(plaintext));
=> 0x10654 <main+172>:	sub	r1, r11, #80	; 0x50
0x00010658	36	    ret = wc_AesCbcEncrypt(&aes, ciphertext, plaintext, sizeof(plaintext));
=> 0x10658 <main+176>:	mov	r3, #16
0x0001065c	36	    ret = wc_AesCbcEncrypt(&aes, ciphertext, plaintext, sizeof(plaintext));
=> 0x1065c <main+180>:	mov	r0, r4
0x00010660	36	    ret = wc_AesCbcEncrypt(&aes, ciphertext, plaintext, sizeof(plaintext));
=> 0x10660 <main+184>:	bl	0x15ac4 <wc_AesCbcEncrypt>
wc_AesCbcEncrypt (aes=0x20, out=0x40800154 "", in=0x1 <error: Cannot access memory at address 0x1>, sz=0) at wolfcrypt/src/aes.c:5468
5468	    {
=> 0x15ac4 <wc_AesCbcEncrypt>:	push	{r11, lr}
0x00015ac8	5468	    {
=> 0x15ac8 <wc_AesCbcEncrypt+4>:	add	r11, sp, #4
0x00015acc	5468	    {
=> 0x15acc <wc_AesCbcEncrypt+8>:	sub	sp, sp, #24
0x00015ad0	5468	    {
=> 0x15ad0 <wc_AesCbcEncrypt+12>:	str	r0, [r11, #-16]
0x00015ad4	5468	    {
=> 0x15ad4 <wc_AesCbcEncrypt+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00015ad8	5468	    {
=> 0x15ad8 <wc_AesCbcEncrypt+20>:	str	r2, [r11, #-24]	; 0xffffffe8
0x00015adc	5468	    {
=> 0x15adc <wc_AesCbcEncrypt+24>:	str	r3, [r11, #-28]	; 0xffffffe4
5472	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15ae0 <wc_AesCbcEncrypt+28>:	ldr	r3, [r11, #-16]
0x00015ae4	5472	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15ae4 <wc_AesCbcEncrypt+32>:	cmp	r3, #0
0x00015ae8	5472	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15ae8 <wc_AesCbcEncrypt+36>:	beq	0x15b04 <wc_AesCbcEncrypt+64>
0x00015aec	5472	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15aec <wc_AesCbcEncrypt+40>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015af0	5472	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15af0 <wc_AesCbcEncrypt+44>:	cmp	r3, #0
0x00015af4	5472	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15af4 <wc_AesCbcEncrypt+48>:	beq	0x15b04 <wc_AesCbcEncrypt+64>
0x00015af8	5472	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15af8 <wc_AesCbcEncrypt+52>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015afc	5472	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15afc <wc_AesCbcEncrypt+56>:	cmp	r3, #0
0x00015b00	5472	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15b00 <wc_AesCbcEncrypt+60>:	bne	0x15b0c <wc_AesCbcEncrypt+72>
5476	        if (sz == 0) {
=> 0x15b0c <wc_AesCbcEncrypt+72>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00015b10	5476	        if (sz == 0) {
=> 0x15b10 <wc_AesCbcEncrypt+76>:	cmp	r3, #0
0x00015b14	5476	        if (sz == 0) {
=> 0x15b14 <wc_AesCbcEncrypt+80>:	bne	0x15b20 <wc_AesCbcEncrypt+92>
5480	        blocks = sz / AES_BLOCK_SIZE;
=> 0x15b20 <wc_AesCbcEncrypt+92>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00015b24	5480	        blocks = sz / AES_BLOCK_SIZE;
=> 0x15b24 <wc_AesCbcEncrypt+96>:	lsr	r3, r3, #4
0x00015b28	5480	        blocks = sz / AES_BLOCK_SIZE;
=> 0x15b28 <wc_AesCbcEncrypt+100>:	str	r3, [r11, #-12]
5598	            ret = 0;
=> 0x15b2c <wc_AesCbcEncrypt+104>:	mov	r3, #0
0x00015b30	5598	            ret = 0;
=> 0x15b30 <wc_AesCbcEncrypt+108>:	str	r3, [r11, #-8]
5599	            while (blocks--) {
=> 0x15b34 <wc_AesCbcEncrypt+112>:	b	0x15bac <wc_AesCbcEncrypt+232>
5599	            while (blocks--) {
=> 0x15bac <wc_AesCbcEncrypt+232>:	ldr	r3, [r11, #-12]
0x00015bb0	5599	            while (blocks--) {
=> 0x15bb0 <wc_AesCbcEncrypt+236>:	sub	r2, r3, #1
0x00015bb4	5599	            while (blocks--) {
=> 0x15bb4 <wc_AesCbcEncrypt+240>:	str	r2, [r11, #-12]
5599	            while (blocks--) {
=> 0x15bb8 <wc_AesCbcEncrypt+244>:	cmp	r3, #0
0x00015bbc	5599	            while (blocks--) {
=> 0x15bbc <wc_AesCbcEncrypt+248>:	bne	0x15b38 <wc_AesCbcEncrypt+116>
5600	                xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
=> 0x15b38 <wc_AesCbcEncrypt+116>:	ldr	r3, [r11, #-16]
0x00015b3c	5600	                xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
=> 0x15b3c <wc_AesCbcEncrypt+120>:	add	r3, r3, #256	; 0x100
5600	                xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
=> 0x15b40 <wc_AesCbcEncrypt+124>:	mov	r2, #16
0x00015b44	5600	                xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
=> 0x15b44 <wc_AesCbcEncrypt+128>:	ldr	r1, [r11, #-24]	; 0xffffffe8
0x00015b48	5600	                xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
=> 0x15b48 <wc_AesCbcEncrypt+132>:	mov	r0, r3
0x00015b4c	5600	                xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
=> 0x15b4c <wc_AesCbcEncrypt+136>:	bl	0x10c44 <xorbuf>
xorbuf (buf=0x159bc <wc_AesSetKeyLocal+344>, mask=0x407ffdc4, count=1082129920) at ./wolfcrypt/src/misc.c:333
333	{
=> 0x10c44 <xorbuf>:	push	{r11, lr}
0x00010c48	333	{
=> 0x10c48 <xorbuf+4>:	add	r11, sp, #4
0x00010c4c	333	{
=> 0x10c4c <xorbuf+8>:	sub	sp, sp, #40	; 0x28
0x00010c50	333	{
=> 0x10c50 <xorbuf+12>:	str	r0, [r11, #-32]	; 0xffffffe0
0x00010c54	333	{
=> 0x10c54 <xorbuf+16>:	str	r1, [r11, #-36]	; 0xffffffdc
0x00010c58	333	{
=> 0x10c58 <xorbuf+20>:	str	r2, [r11, #-40]	; 0xffffffd8
333	{
=> 0x10c5c <xorbuf+24>:	ldr	r3, [pc, #340]	; 0x10db8 <xorbuf+372>
0x00010c60	333	{
=> 0x10c60 <xorbuf+28>:	ldr	r3, [r3]
0x00010c64	333	{
=> 0x10c64 <xorbuf+32>:	str	r3, [r11, #-8]
0x00010c68	333	{
=> 0x10c68 <xorbuf+36>:	mov	r3, #0
338	    b = (byte*)buf;
=> 0x10c6c <xorbuf+40>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010c70	338	    b = (byte*)buf;
=> 0x10c70 <xorbuf+44>:	str	r3, [r11, #-16]
339	    m = (const byte*)mask;
=> 0x10c74 <xorbuf+48>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00010c78	339	    m = (const byte*)mask;
=> 0x10c78 <xorbuf+52>:	str	r3, [r11, #-12]
341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c7c <xorbuf+56>:	ldr	r2, [r11, #-16]
342	            ((wc_ptr_t)m) % WOLFSSL_WORD_SIZE) {
=> 0x10c80 <xorbuf+60>:	ldr	r3, [r11, #-12]
341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c84 <xorbuf+64>:	eor	r3, r3, r2
0x00010c88	341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c88 <xorbuf+68>:	and	r3, r3, #3
341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c8c <xorbuf+72>:	cmp	r3, #0
0x00010c90	341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c90 <xorbuf+76>:	bne	0x10d30 <xorbuf+236>
355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10c94 <xorbuf+80>:	b	0x10cd0 <xorbuf+140>
355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10cd0 <xorbuf+140>:	ldr	r3, [r11, #-32]	; 0xffffffe0
355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10cd4 <xorbuf+144>:	and	r3, r3, #3
355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10cd8 <xorbuf+148>:	cmp	r3, #0
0x00010cdc	355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10cdc <xorbuf+152>:	beq	0x10cec <xorbuf+168>
359	        tpb.bp = b;
=> 0x10cec <xorbuf+168>:	ldr	r3, [r11, #-16]
0x00010cf0	359	        tpb.bp = b;
=> 0x10cf0 <xorbuf+172>:	str	r3, [r11, #-28]	; 0xffffffe4
360	        tpm.bp = m;
=> 0x10cf4 <xorbuf+176>:	ldr	r3, [r11, #-12]
0x00010cf8	360	        tpm.bp = m;
=> 0x10cf8 <xorbuf+180>:	str	r3, [r11, #-24]	; 0xffffffe8
361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10cfc <xorbuf+184>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010d00	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d00 <xorbuf+188>:	lsr	r2, r3, #2
0x00010d04	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d04 <xorbuf+192>:	sub	r1, r11, #24
0x00010d08	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d08 <xorbuf+196>:	sub	r3, r11, #28
0x00010d0c	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d0c <xorbuf+200>:	mov	r0, r3
0x00010d10	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d10 <xorbuf+204>:	bl	0x10bb8 <XorWords>
XorWords (r=0x40800324, a=0x1, n=680108) at ./wolfcrypt/src/misc.c:322
322	{
=> 0x10bb8 <XorWords>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010bbc	322	{
=> 0x10bbc <XorWords+4>:	add	r11, sp, #0
0x00010bc0	322	{
=> 0x10bc0 <XorWords+8>:	sub	sp, sp, #28
0x00010bc4	322	{
=> 0x10bc4 <XorWords+12>:	str	r0, [r11, #-16]
0x00010bc8	322	{
=> 0x10bc8 <XorWords+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00010bcc	322	{
=> 0x10bcc <XorWords+20>:	str	r2, [r11, #-24]	; 0xffffffe8
325	    for (i = 0; i < n; i++)
=> 0x10bd0 <XorWords+24>:	mov	r3, #0
0x00010bd4	325	    for (i = 0; i < n; i++)
=> 0x10bd4 <XorWords+28>:	str	r3, [r11, #-8]
325	    for (i = 0; i < n; i++)
=> 0x10bd8 <XorWords+32>:	b	0x10c20 <XorWords+104>
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
326	        *((*r)++) ^= *((*a)++);
=> 0x10bdc <XorWords+36>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010be0	326	        *((*r)++) ^= *((*a)++);
=> 0x10be0 <XorWords+40>:	ldr	r3, [r3]
0x00010be4	326	        *((*r)++) ^= *((*a)++);
=> 0x10be4 <XorWords+44>:	add	r1, r3, #4
0x00010be8	326	        *((*r)++) ^= *((*a)++);
=> 0x10be8 <XorWords+48>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010bec	326	        *((*r)++) ^= *((*a)++);
=> 0x10bec <XorWords+52>:	str	r1, [r2]
0x00010bf0	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf0 <XorWords+56>:	ldr	r1, [r3]
0x00010bf4	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf4 <XorWords+60>:	ldr	r3, [r11, #-16]
0x00010bf8	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf8 <XorWords+64>:	ldr	r3, [r3]
0x00010bfc	326	        *((*r)++) ^= *((*a)++);
=> 0x10bfc <XorWords+68>:	add	r0, r3, #4
0x00010c00	326	        *((*r)++) ^= *((*a)++);
=> 0x10c00 <XorWords+72>:	ldr	r2, [r11, #-16]
0x00010c04	326	        *((*r)++) ^= *((*a)++);
=> 0x10c04 <XorWords+76>:	str	r0, [r2]
0x00010c08	326	        *((*r)++) ^= *((*a)++);
=> 0x10c08 <XorWords+80>:	ldr	r2, [r3]
0x00010c0c	326	        *((*r)++) ^= *((*a)++);
=> 0x10c0c <XorWords+84>:	eor	r2, r2, r1
0x00010c10	326	        *((*r)++) ^= *((*a)++);
=> 0x10c10 <XorWords+88>:	str	r2, [r3]
325	    for (i = 0; i < n; i++)
=> 0x10c14 <XorWords+92>:	ldr	r3, [r11, #-8]
0x00010c18	325	    for (i = 0; i < n; i++)
=> 0x10c18 <XorWords+96>:	add	r3, r3, #1
0x00010c1c	325	    for (i = 0; i < n; i++)
=> 0x10c1c <XorWords+100>:	str	r3, [r11, #-8]
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
326	        *((*r)++) ^= *((*a)++);
=> 0x10bdc <XorWords+36>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010be0	326	        *((*r)++) ^= *((*a)++);
=> 0x10be0 <XorWords+40>:	ldr	r3, [r3]
0x00010be4	326	        *((*r)++) ^= *((*a)++);
=> 0x10be4 <XorWords+44>:	add	r1, r3, #4
0x00010be8	326	        *((*r)++) ^= *((*a)++);
=> 0x10be8 <XorWords+48>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010bec	326	        *((*r)++) ^= *((*a)++);
=> 0x10bec <XorWords+52>:	str	r1, [r2]
0x00010bf0	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf0 <XorWords+56>:	ldr	r1, [r3]
0x00010bf4	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf4 <XorWords+60>:	ldr	r3, [r11, #-16]
0x00010bf8	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf8 <XorWords+64>:	ldr	r3, [r3]
0x00010bfc	326	        *((*r)++) ^= *((*a)++);
=> 0x10bfc <XorWords+68>:	add	r0, r3, #4
0x00010c00	326	        *((*r)++) ^= *((*a)++);
=> 0x10c00 <XorWords+72>:	ldr	r2, [r11, #-16]
0x00010c04	326	        *((*r)++) ^= *((*a)++);
=> 0x10c04 <XorWords+76>:	str	r0, [r2]
0x00010c08	326	        *((*r)++) ^= *((*a)++);
=> 0x10c08 <XorWords+80>:	ldr	r2, [r3]
0x00010c0c	326	        *((*r)++) ^= *((*a)++);
=> 0x10c0c <XorWords+84>:	eor	r2, r2, r1
0x00010c10	326	        *((*r)++) ^= *((*a)++);
=> 0x10c10 <XorWords+88>:	str	r2, [r3]
325	    for (i = 0; i < n; i++)
=> 0x10c14 <XorWords+92>:	ldr	r3, [r11, #-8]
0x00010c18	325	    for (i = 0; i < n; i++)
=> 0x10c18 <XorWords+96>:	add	r3, r3, #1
0x00010c1c	325	    for (i = 0; i < n; i++)
=> 0x10c1c <XorWords+100>:	str	r3, [r11, #-8]
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
326	        *((*r)++) ^= *((*a)++);
=> 0x10bdc <XorWords+36>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010be0	326	        *((*r)++) ^= *((*a)++);
=> 0x10be0 <XorWords+40>:	ldr	r3, [r3]
0x00010be4	326	        *((*r)++) ^= *((*a)++);
=> 0x10be4 <XorWords+44>:	add	r1, r3, #4
0x00010be8	326	        *((*r)++) ^= *((*a)++);
=> 0x10be8 <XorWords+48>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010bec	326	        *((*r)++) ^= *((*a)++);
=> 0x10bec <XorWords+52>:	str	r1, [r2]
0x00010bf0	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf0 <XorWords+56>:	ldr	r1, [r3]
0x00010bf4	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf4 <XorWords+60>:	ldr	r3, [r11, #-16]
0x00010bf8	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf8 <XorWords+64>:	ldr	r3, [r3]
0x00010bfc	326	        *((*r)++) ^= *((*a)++);
=> 0x10bfc <XorWords+68>:	add	r0, r3, #4
0x00010c00	326	        *((*r)++) ^= *((*a)++);
=> 0x10c00 <XorWords+72>:	ldr	r2, [r11, #-16]
0x00010c04	326	        *((*r)++) ^= *((*a)++);
=> 0x10c04 <XorWords+76>:	str	r0, [r2]
0x00010c08	326	        *((*r)++) ^= *((*a)++);
=> 0x10c08 <XorWords+80>:	ldr	r2, [r3]
0x00010c0c	326	        *((*r)++) ^= *((*a)++);
=> 0x10c0c <XorWords+84>:	eor	r2, r2, r1
0x00010c10	326	        *((*r)++) ^= *((*a)++);
=> 0x10c10 <XorWords+88>:	str	r2, [r3]
325	    for (i = 0; i < n; i++)
=> 0x10c14 <XorWords+92>:	ldr	r3, [r11, #-8]
0x00010c18	325	    for (i = 0; i < n; i++)
=> 0x10c18 <XorWords+96>:	add	r3, r3, #1
0x00010c1c	325	    for (i = 0; i < n; i++)
=> 0x10c1c <XorWords+100>:	str	r3, [r11, #-8]
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
326	        *((*r)++) ^= *((*a)++);
=> 0x10bdc <XorWords+36>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010be0	326	        *((*r)++) ^= *((*a)++);
=> 0x10be0 <XorWords+40>:	ldr	r3, [r3]
0x00010be4	326	        *((*r)++) ^= *((*a)++);
=> 0x10be4 <XorWords+44>:	add	r1, r3, #4
0x00010be8	326	        *((*r)++) ^= *((*a)++);
=> 0x10be8 <XorWords+48>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010bec	326	        *((*r)++) ^= *((*a)++);
=> 0x10bec <XorWords+52>:	str	r1, [r2]
0x00010bf0	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf0 <XorWords+56>:	ldr	r1, [r3]
0x00010bf4	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf4 <XorWords+60>:	ldr	r3, [r11, #-16]
0x00010bf8	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf8 <XorWords+64>:	ldr	r3, [r3]
0x00010bfc	326	        *((*r)++) ^= *((*a)++);
=> 0x10bfc <XorWords+68>:	add	r0, r3, #4
0x00010c00	326	        *((*r)++) ^= *((*a)++);
=> 0x10c00 <XorWords+72>:	ldr	r2, [r11, #-16]
0x00010c04	326	        *((*r)++) ^= *((*a)++);
=> 0x10c04 <XorWords+76>:	str	r0, [r2]
0x00010c08	326	        *((*r)++) ^= *((*a)++);
=> 0x10c08 <XorWords+80>:	ldr	r2, [r3]
0x00010c0c	326	        *((*r)++) ^= *((*a)++);
=> 0x10c0c <XorWords+84>:	eor	r2, r2, r1
0x00010c10	326	        *((*r)++) ^= *((*a)++);
=> 0x10c10 <XorWords+88>:	str	r2, [r3]
325	    for (i = 0; i < n; i++)
=> 0x10c14 <XorWords+92>:	ldr	r3, [r11, #-8]
0x00010c18	325	    for (i = 0; i < n; i++)
=> 0x10c18 <XorWords+96>:	add	r3, r3, #1
0x00010c1c	325	    for (i = 0; i < n; i++)
=> 0x10c1c <XorWords+100>:	str	r3, [r11, #-8]
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
327	}
=> 0x10c30 <XorWords+120>:	nop			; (mov r0, r0)
0x00010c34	327	}
=> 0x10c34 <XorWords+124>:	nop			; (mov r0, r0)
0x00010c38	327	}
=> 0x10c38 <XorWords+128>:	add	sp, r11, #0
0x00010c3c	327	}
=> 0x10c3c <XorWords+132>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010c40	327	}
=> 0x10c40 <XorWords+136>:	bx	lr
xorbuf (buf=0x407fff00, mask=0x40800164, count=16) at ./wolfcrypt/src/misc.c:362
362	        b = tpb.bp;
=> 0x10d14 <xorbuf+208>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010d18	362	        b = tpb.bp;
=> 0x10d18 <xorbuf+212>:	str	r3, [r11, #-16]
363	        m = tpm.bp;
=> 0x10d1c <xorbuf+216>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010d20	363	        m = tpm.bp;
=> 0x10d20 <xorbuf+220>:	str	r3, [r11, #-12]
364	        count %= WOLFSSL_WORD_SIZE;
=> 0x10d24 <xorbuf+224>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010d28	364	        count %= WOLFSSL_WORD_SIZE;
=> 0x10d28 <xorbuf+228>:	and	r3, r3, #3
0x00010d2c	364	        count %= WOLFSSL_WORD_SIZE;
=> 0x10d2c <xorbuf+232>:	str	r3, [r11, #-40]	; 0xffffffd8
367	    for (i = 0; i < count; i++)
=> 0x10d30 <xorbuf+236>:	mov	r3, #0
0x00010d34	367	    for (i = 0; i < count; i++)
=> 0x10d34 <xorbuf+240>:	str	r3, [r11, #-20]	; 0xffffffec
367	    for (i = 0; i < count; i++)
=> 0x10d38 <xorbuf+244>:	b	0x10d80 <xorbuf+316>
0x00010d80	367	    for (i = 0; i < count; i++)
=> 0x10d80 <xorbuf+316>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010d84	367	    for (i = 0; i < count; i++)
=> 0x10d84 <xorbuf+320>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010d88	367	    for (i = 0; i < count; i++)
=> 0x10d88 <xorbuf+324>:	cmp	r2, r3
0x00010d8c	367	    for (i = 0; i < count; i++)
=> 0x10d8c <xorbuf+328>:	bcc	0x10d3c <xorbuf+248>
369	}
=> 0x10d90 <xorbuf+332>:	nop			; (mov r0, r0)
0x00010d94	369	}
=> 0x10d94 <xorbuf+336>:	ldr	r3, [pc, #28]	; 0x10db8 <xorbuf+372>
0x00010d98	369	}
=> 0x10d98 <xorbuf+340>:	ldr	r2, [r3]
0x00010d9c	369	}
=> 0x10d9c <xorbuf+344>:	ldr	r3, [r11, #-8]
0x00010da0	369	}
=> 0x10da0 <xorbuf+348>:	eors	r2, r3, r2
0x00010da4	369	}
=> 0x10da4 <xorbuf+352>:	mov	r3, #0
0x00010da8	369	}
=> 0x10da8 <xorbuf+356>:	beq	0x10db0 <xorbuf+364>
0x00010db0	369	}
=> 0x10db0 <xorbuf+364>:	sub	sp, r11, #4
0x00010db4	369	}
=> 0x10db4 <xorbuf+368>:	pop	{r11, pc}
wc_AesCbcEncrypt (aes=0x407ffe00, out=0x40800174 "", in=0x40800164 "a;sdlkjfei4344@#", sz=16) at wolfcrypt/src/aes.c:5601
5601	                ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
=> 0x15b50 <wc_AesCbcEncrypt+140>:	ldr	r3, [r11, #-16]
0x00015b54	5601	                ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
=> 0x15b54 <wc_AesCbcEncrypt+144>:	add	r1, r3, #256	; 0x100
5601	                ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
=> 0x15b58 <wc_AesCbcEncrypt+148>:	ldr	r3, [r11, #-16]
0x00015b5c	5601	                ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
=> 0x15b5c <wc_AesCbcEncrypt+152>:	add	r3, r3, #256	; 0x100
5601	                ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
=> 0x15b60 <wc_AesCbcEncrypt+156>:	mov	r2, r3
0x00015b64	5601	                ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
=> 0x15b64 <wc_AesCbcEncrypt+160>:	ldr	r0, [r11, #-16]
0x00015b68	5601	                ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
=> 0x15b68 <wc_AesCbcEncrypt+164>:	bl	0x12d00 <wc_AesEncrypt>
wc_AesEncrypt (aes=0x407fff10, inBlock=0x0, outBlock=0x40800174 "") at wolfcrypt/src/aes.c:2771
2771	{
=> 0x12d00 <wc_AesEncrypt>:	push	{r11, lr}
0x00012d04	2771	{
=> 0x12d04 <wc_AesEncrypt+4>:	add	r11, sp, #4
0x00012d08	2771	{
=> 0x12d08 <wc_AesEncrypt+8>:	sub	sp, sp, #24
0x00012d0c	2771	{
=> 0x12d0c <wc_AesEncrypt+12>:	str	r0, [r11, #-16]
0x00012d10	2771	{
=> 0x12d10 <wc_AesEncrypt+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00012d14	2771	{
=> 0x12d14 <wc_AesEncrypt+20>:	str	r2, [r11, #-24]	; 0xffffffe8
2774	    if (aes == NULL) {
=> 0x12d18 <wc_AesEncrypt+24>:	ldr	r3, [r11, #-16]
0x00012d1c	2774	    if (aes == NULL) {
=> 0x12d1c <wc_AesEncrypt+28>:	cmp	r3, #0
0x00012d20	2774	    if (aes == NULL) {
=> 0x12d20 <wc_AesEncrypt+32>:	bne	0x12d2c <wc_AesEncrypt+44>
2786	    r = aes->rounds >> 1;
=> 0x12d2c <wc_AesEncrypt+44>:	ldr	r3, [r11, #-16]
0x00012d30	2786	    r = aes->rounds >> 1;
=> 0x12d30 <wc_AesEncrypt+48>:	ldr	r3, [r3, #240]	; 0xf0
2786	    r = aes->rounds >> 1;
=> 0x12d34 <wc_AesEncrypt+52>:	lsr	r3, r3, #1
0x00012d38	2786	    r = aes->rounds >> 1;
=> 0x12d38 <wc_AesEncrypt+56>:	str	r3, [r11, #-8]
2788	    if (r > 7 || r == 0) {
=> 0x12d3c <wc_AesEncrypt+60>:	ldr	r3, [r11, #-8]
0x00012d40	2788	    if (r > 7 || r == 0) {
=> 0x12d40 <wc_AesEncrypt+64>:	cmp	r3, #7
0x00012d44	2788	    if (r > 7 || r == 0) {
=> 0x12d44 <wc_AesEncrypt+68>:	bhi	0x12d54 <wc_AesEncrypt+84>
0x00012d48	2788	    if (r > 7 || r == 0) {
=> 0x12d48 <wc_AesEncrypt+72>:	ldr	r3, [r11, #-8]
0x00012d4c	2788	    if (r > 7 || r == 0) {
=> 0x12d4c <wc_AesEncrypt+76>:	cmp	r3, #0
0x00012d50	2788	    if (r > 7 || r == 0) {
=> 0x12d50 <wc_AesEncrypt+80>:	bne	0x12d5c <wc_AesEncrypt+92>
2875	    AesEncrypt_C(aes, inBlock, outBlock, r);
=> 0x12d5c <wc_AesEncrypt+92>:	ldr	r3, [r11, #-8]
0x00012d60	2875	    AesEncrypt_C(aes, inBlock, outBlock, r);
=> 0x12d60 <wc_AesEncrypt+96>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00012d64	2875	    AesEncrypt_C(aes, inBlock, outBlock, r);
=> 0x12d64 <wc_AesEncrypt+100>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00012d68	2875	    AesEncrypt_C(aes, inBlock, outBlock, r);
=> 0x12d68 <wc_AesEncrypt+104>:	ldr	r0, [r11, #-16]
0x00012d6c	2875	    AesEncrypt_C(aes, inBlock, outBlock, r);
=> 0x12d6c <wc_AesEncrypt+108>:	bl	0x10f44 <AesEncrypt_C>
AesEncrypt_C (aes=0x407ffda4, inBlock=0x407ffda4 "", outBlock=0x407ffd90 "", r=1082131244) at wolfcrypt/src/aes.c:1927
1927	{
=> 0x10f44 <AesEncrypt_C>:	push	{r11, lr}
0x00010f48	1927	{
=> 0x10f48 <AesEncrypt_C+4>:	add	r11, sp, #4
0x00010f4c	1927	{
=> 0x10f4c <AesEncrypt_C+8>:	sub	sp, sp, #56	; 0x38
0x00010f50	1927	{
=> 0x10f50 <AesEncrypt_C+12>:	str	r0, [r11, #-48]	; 0xffffffd0
0x00010f54	1927	{
=> 0x10f54 <AesEncrypt_C+16>:	str	r1, [r11, #-52]	; 0xffffffcc
0x00010f58	1927	{
=> 0x10f58 <AesEncrypt_C+20>:	str	r2, [r11, #-56]	; 0xffffffc8
0x00010f5c	1927	{
=> 0x10f5c <AesEncrypt_C+24>:	str	r3, [r11, #-60]	; 0xffffffc4
1927	{
=> 0x10f60 <AesEncrypt_C+28>:	ldr	r3, [pc, #4088]	; 0x11f60 <AesEncrypt_C+4124>
0x00010f64	1927	{
=> 0x10f64 <AesEncrypt_C+32>:	ldr	r3, [r3]
0x00010f68	1927	{
=> 0x10f68 <AesEncrypt_C+36>:	str	r3, [r11, #-8]
0x00010f6c	1927	{
=> 0x10f6c <AesEncrypt_C+40>:	mov	r3, #0
1935	    rk = aes->key;
=> 0x10f70 <AesEncrypt_C+44>:	ldr	r3, [r11, #-48]	; 0xffffffd0
0x00010f74	1935	    rk = aes->key;
=> 0x10f74 <AesEncrypt_C+48>:	str	r3, [r11, #-12]
1942	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x10f78 <AesEncrypt_C+52>:	sub	r3, r11, #44	; 0x2c
0x00010f7c	1942	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x10f7c <AesEncrypt_C+56>:	mov	r2, #4
0x00010f80	1942	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x10f80 <AesEncrypt_C+60>:	ldr	r1, [r11, #-52]	; 0xffffffcc
0x00010f84	1942	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x10f84 <AesEncrypt_C+64>:	mov	r0, r3
0x00010f88	1942	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x10f88 <AesEncrypt_C+68>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:1943
1943	    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
=> 0x10f8c <AesEncrypt_C+72>:	ldr	r3, [r11, #-52]	; 0xffffffcc
0x00010f90	1943	    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
=> 0x10f90 <AesEncrypt_C+76>:	add	r1, r3, #4
0x00010f94	1943	    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
=> 0x10f94 <AesEncrypt_C+80>:	sub	r3, r11, #40	; 0x28
0x00010f98	1943	    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
=> 0x10f98 <AesEncrypt_C+84>:	mov	r2, #4
0x00010f9c	1943	    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
=> 0x10f9c <AesEncrypt_C+88>:	mov	r0, r3
0x00010fa0	1943	    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
=> 0x10fa0 <AesEncrypt_C+92>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:1944
1944	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x10fa4 <AesEncrypt_C+96>:	ldr	r3, [r11, #-52]	; 0xffffffcc
0x00010fa8	1944	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x10fa8 <AesEncrypt_C+100>:	add	r1, r3, #8
0x00010fac	1944	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x10fac <AesEncrypt_C+104>:	sub	r3, r11, #36	; 0x24
0x00010fb0	1944	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x10fb0 <AesEncrypt_C+108>:	mov	r2, #4
0x00010fb4	1944	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x10fb4 <AesEncrypt_C+112>:	mov	r0, r3
0x00010fb8	1944	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x10fb8 <AesEncrypt_C+116>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:1945
1945	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x10fbc <AesEncrypt_C+120>:	ldr	r3, [r11, #-52]	; 0xffffffcc
0x00010fc0	1945	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x10fc0 <AesEncrypt_C+124>:	add	r1, r3, #12
0x00010fc4	1945	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x10fc4 <AesEncrypt_C+128>:	sub	r3, r11, #32
0x00010fc8	1945	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x10fc8 <AesEncrypt_C+132>:	mov	r2, #4
0x00010fcc	1945	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x10fcc <AesEncrypt_C+136>:	mov	r0, r3
0x00010fd0	1945	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x10fd0 <AesEncrypt_C+140>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:1948
1948	    s0 = ByteReverseWord32(s0);
=> 0x10fd4 <AesEncrypt_C+144>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00010fd8	1948	    s0 = ByteReverseWord32(s0);
=> 0x10fd8 <AesEncrypt_C+148>:	mov	r0, r3
0x00010fdc	1948	    s0 = ByteReverseWord32(s0);
=> 0x10fdc <AesEncrypt_C+152>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=1082129796) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=680108, y=1082129920) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=1902600506) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010fe0 in AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:1948
1948	    s0 = ByteReverseWord32(s0);
=> 0x10fe0 <AesEncrypt_C+156>:	mov	r3, r0
1948	    s0 = ByteReverseWord32(s0);
=> 0x10fe4 <AesEncrypt_C+160>:	str	r3, [r11, #-44]	; 0xffffffd4
1949	    s1 = ByteReverseWord32(s1);
=> 0x10fe8 <AesEncrypt_C+164>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010fec	1949	    s1 = ByteReverseWord32(s1);
=> 0x10fec <AesEncrypt_C+168>:	mov	r0, r3
0x00010ff0	1949	    s1 = ByteReverseWord32(s1);
=> 0x10ff0 <AesEncrypt_C+172>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=1902600506) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=1902600506, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=1818323054) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010ff4 in AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:1949
1949	    s1 = ByteReverseWord32(s1);
=> 0x10ff4 <AesEncrypt_C+176>:	mov	r3, r0
1949	    s1 = ByteReverseWord32(s1);
=> 0x10ff8 <AesEncrypt_C+180>:	str	r3, [r11, #-40]	; 0xffffffd8
1950	    s2 = ByteReverseWord32(s2);
=> 0x10ffc <AesEncrypt_C+184>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011000	1950	    s2 = ByteReverseWord32(s2);
=> 0x11000 <AesEncrypt_C+188>:	mov	r0, r3
0x00011004	1950	    s2 = ByteReverseWord32(s2);
=> 0x11004 <AesEncrypt_C+192>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=1818323054) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=1818323054, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=1043885408) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00011008 in AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:1950
1950	    s2 = ByteReverseWord32(s2);
=> 0x11008 <AesEncrypt_C+196>:	mov	r3, r0
1950	    s2 = ByteReverseWord32(s2);
=> 0x1100c <AesEncrypt_C+200>:	str	r3, [r11, #-36]	; 0xffffffdc
1951	    s3 = ByteReverseWord32(s3);
=> 0x11010 <AesEncrypt_C+204>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011014	1951	    s3 = ByteReverseWord32(s3);
=> 0x11014 <AesEncrypt_C+208>:	mov	r0, r3
0x00011018	1951	    s3 = ByteReverseWord32(s3);
=> 0x11018 <AesEncrypt_C+212>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=1043885408) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=1043885408, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=1311520825) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x0001101c in AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:1951
1951	    s3 = ByteReverseWord32(s3);
=> 0x1101c <AesEncrypt_C+216>:	mov	r3, r0
1951	    s3 = ByteReverseWord32(s3);
=> 0x11020 <AesEncrypt_C+220>:	str	r3, [r11, #-32]	; 0xffffffe0
1955	    s0 ^= rk[0];
=> 0x11024 <AesEncrypt_C+224>:	ldr	r3, [r11, #-12]
0x00011028	1955	    s0 ^= rk[0];
=> 0x11028 <AesEncrypt_C+228>:	ldr	r2, [r3]
1955	    s0 ^= rk[0];
=> 0x1102c <AesEncrypt_C+232>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011030	1955	    s0 ^= rk[0];
=> 0x11030 <AesEncrypt_C+236>:	eor	r3, r3, r2
0x00011034	1955	    s0 ^= rk[0];
=> 0x11034 <AesEncrypt_C+240>:	str	r3, [r11, #-44]	; 0xffffffd4
1956	    s1 ^= rk[1];
=> 0x11038 <AesEncrypt_C+244>:	ldr	r3, [r11, #-12]
0x0001103c	1956	    s1 ^= rk[1];
=> 0x1103c <AesEncrypt_C+248>:	add	r3, r3, #4
0x00011040	1956	    s1 ^= rk[1];
=> 0x11040 <AesEncrypt_C+252>:	ldr	r2, [r3]
1956	    s1 ^= rk[1];
=> 0x11044 <AesEncrypt_C+256>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011048	1956	    s1 ^= rk[1];
=> 0x11048 <AesEncrypt_C+260>:	eor	r3, r3, r2
0x0001104c	1956	    s1 ^= rk[1];
=> 0x1104c <AesEncrypt_C+264>:	str	r3, [r11, #-40]	; 0xffffffd8
1957	    s2 ^= rk[2];
=> 0x11050 <AesEncrypt_C+268>:	ldr	r3, [r11, #-12]
0x00011054	1957	    s2 ^= rk[2];
=> 0x11054 <AesEncrypt_C+272>:	add	r3, r3, #8
0x00011058	1957	    s2 ^= rk[2];
=> 0x11058 <AesEncrypt_C+276>:	ldr	r2, [r3]
1957	    s2 ^= rk[2];
=> 0x1105c <AesEncrypt_C+280>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011060	1957	    s2 ^= rk[2];
=> 0x11060 <AesEncrypt_C+284>:	eor	r3, r3, r2
0x00011064	1957	    s2 ^= rk[2];
=> 0x11064 <AesEncrypt_C+288>:	str	r3, [r11, #-36]	; 0xffffffdc
1958	    s3 ^= rk[3];
=> 0x11068 <AesEncrypt_C+292>:	ldr	r3, [r11, #-12]
0x0001106c	1958	    s3 ^= rk[3];
=> 0x1106c <AesEncrypt_C+296>:	add	r3, r3, #12
0x00011070	1958	    s3 ^= rk[3];
=> 0x11070 <AesEncrypt_C+300>:	ldr	r2, [r3]
1958	    s3 ^= rk[3];
=> 0x11074 <AesEncrypt_C+304>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011078	1958	    s3 ^= rk[3];
=> 0x11078 <AesEncrypt_C+308>:	eor	r3, r3, r2
0x0001107c	1958	    s3 ^= rk[3];
=> 0x1107c <AesEncrypt_C+312>:	str	r3, [r11, #-32]	; 0xffffffe0
1962	    s0 |= PreFetchTe();
=> 0x11080 <AesEncrypt_C+316>:	bl	0x10eac <PreFetchTe>
PreFetchTe () at wolfcrypt/src/aes.c:1665
1665	{
=> 0x10eac <PreFetchTe>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010eb0	1665	{
=> 0x10eb0 <PreFetchTe+4>:	add	r11, sp, #0
0x00010eb4	1665	{
=> 0x10eb4 <PreFetchTe+8>:	sub	sp, sp, #20
1667	    word32 x = 0;
=> 0x10eb8 <PreFetchTe+12>:	mov	r3, #0
0x00010ebc	1667	    word32 x = 0;
=> 0x10ebc <PreFetchTe+16>:	str	r3, [r11, #-16]
1670	    for (i = 0; i < 4; i++) {
=> 0x10ec0 <PreFetchTe+20>:	mov	r3, #0
0x00010ec4	1670	    for (i = 0; i < 4; i++) {
=> 0x10ec4 <PreFetchTe+24>:	str	r3, [r11, #-12]
1670	    for (i = 0; i < 4; i++) {
=> 0x10ec8 <PreFetchTe+28>:	b	0x10f20 <PreFetchTe+116>
0x00010f20	1670	    for (i = 0; i < 4; i++) {
=> 0x10f20 <PreFetchTe+116>:	ldr	r3, [r11, #-12]
0x00010f24	1670	    for (i = 0; i < 4; i++) {
=> 0x10f24 <PreFetchTe+120>:	cmp	r3, #3
0x00010f28	1670	    for (i = 0; i < 4; i++) {
=> 0x10f28 <PreFetchTe+124>:	ble	0x10ecc <PreFetchTe+32>
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ecc <PreFetchTe+32>:	mov	r3, #0
0x00010ed0	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ed0 <PreFetchTe+36>:	str	r3, [r11, #-8]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ed4 <PreFetchTe+40>:	b	0x10f08 <PreFetchTe+92>
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1670	    for (i = 0; i < 4; i++) {
=> 0x10f14 <PreFetchTe+104>:	ldr	r3, [r11, #-12]
0x00010f18	1670	    for (i = 0; i < 4; i++) {
=> 0x10f18 <PreFetchTe+108>:	add	r3, r3, #1
0x00010f1c	1670	    for (i = 0; i < 4; i++) {
=> 0x10f1c <PreFetchTe+112>:	str	r3, [r11, #-12]
0x00010f20	1670	    for (i = 0; i < 4; i++) {
=> 0x10f20 <PreFetchTe+116>:	ldr	r3, [r11, #-12]
0x00010f24	1670	    for (i = 0; i < 4; i++) {
=> 0x10f24 <PreFetchTe+120>:	cmp	r3, #3
0x00010f28	1670	    for (i = 0; i < 4; i++) {
=> 0x10f28 <PreFetchTe+124>:	ble	0x10ecc <PreFetchTe+32>
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ecc <PreFetchTe+32>:	mov	r3, #0
0x00010ed0	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ed0 <PreFetchTe+36>:	str	r3, [r11, #-8]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ed4 <PreFetchTe+40>:	b	0x10f08 <PreFetchTe+92>
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1670	    for (i = 0; i < 4; i++) {
=> 0x10f14 <PreFetchTe+104>:	ldr	r3, [r11, #-12]
0x00010f18	1670	    for (i = 0; i < 4; i++) {
=> 0x10f18 <PreFetchTe+108>:	add	r3, r3, #1
0x00010f1c	1670	    for (i = 0; i < 4; i++) {
=> 0x10f1c <PreFetchTe+112>:	str	r3, [r11, #-12]
0x00010f20	1670	    for (i = 0; i < 4; i++) {
=> 0x10f20 <PreFetchTe+116>:	ldr	r3, [r11, #-12]
0x00010f24	1670	    for (i = 0; i < 4; i++) {
=> 0x10f24 <PreFetchTe+120>:	cmp	r3, #3
0x00010f28	1670	    for (i = 0; i < 4; i++) {
=> 0x10f28 <PreFetchTe+124>:	ble	0x10ecc <PreFetchTe+32>
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ecc <PreFetchTe+32>:	mov	r3, #0
0x00010ed0	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ed0 <PreFetchTe+36>:	str	r3, [r11, #-8]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ed4 <PreFetchTe+40>:	b	0x10f08 <PreFetchTe+92>
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1670	    for (i = 0; i < 4; i++) {
=> 0x10f14 <PreFetchTe+104>:	ldr	r3, [r11, #-12]
0x00010f18	1670	    for (i = 0; i < 4; i++) {
=> 0x10f18 <PreFetchTe+108>:	add	r3, r3, #1
0x00010f1c	1670	    for (i = 0; i < 4; i++) {
=> 0x10f1c <PreFetchTe+112>:	str	r3, [r11, #-12]
0x00010f20	1670	    for (i = 0; i < 4; i++) {
=> 0x10f20 <PreFetchTe+116>:	ldr	r3, [r11, #-12]
0x00010f24	1670	    for (i = 0; i < 4; i++) {
=> 0x10f24 <PreFetchTe+120>:	cmp	r3, #3
0x00010f28	1670	    for (i = 0; i < 4; i++) {
=> 0x10f28 <PreFetchTe+124>:	ble	0x10ecc <PreFetchTe+32>
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ecc <PreFetchTe+32>:	mov	r3, #0
0x00010ed0	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ed0 <PreFetchTe+36>:	str	r3, [r11, #-8]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10ed4 <PreFetchTe+40>:	b	0x10f08 <PreFetchTe+92>
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1673	            x &= Te[i][j];
=> 0x10ed8 <PreFetchTe+44>:	ldr	r1, [pc, #96]	; 0x10f40 <PreFetchTe+148>
0x00010edc	1673	            x &= Te[i][j];
=> 0x10edc <PreFetchTe+48>:	ldr	r3, [r11, #-12]
0x00010ee0	1673	            x &= Te[i][j];
=> 0x10ee0 <PreFetchTe+52>:	lsl	r2, r3, #8
0x00010ee4	1673	            x &= Te[i][j];
=> 0x10ee4 <PreFetchTe+56>:	ldr	r3, [r11, #-8]
0x00010ee8	1673	            x &= Te[i][j];
=> 0x10ee8 <PreFetchTe+60>:	add	r3, r2, r3
0x00010eec	1673	            x &= Te[i][j];
=> 0x10eec <PreFetchTe+64>:	ldr	r3, [r1, r3, lsl #2]
0x00010ef0	1673	            x &= Te[i][j];
=> 0x10ef0 <PreFetchTe+68>:	ldr	r2, [r11, #-16]
0x00010ef4	1673	            x &= Te[i][j];
=> 0x10ef4 <PreFetchTe+72>:	and	r3, r3, r2
0x00010ef8	1673	            x &= Te[i][j];
=> 0x10ef8 <PreFetchTe+76>:	str	r3, [r11, #-16]
1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10efc <PreFetchTe+80>:	ldr	r3, [r11, #-8]
0x00010f00	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f00 <PreFetchTe+84>:	add	r3, r3, #8
0x00010f04	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f04 <PreFetchTe+88>:	str	r3, [r11, #-8]
0x00010f08	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f08 <PreFetchTe+92>:	ldr	r3, [r11, #-8]
0x00010f0c	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f0c <PreFetchTe+96>:	cmp	r3, #255	; 0xff
0x00010f10	1672	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x10f10 <PreFetchTe+100>:	ble	0x10ed8 <PreFetchTe+44>
1670	    for (i = 0; i < 4; i++) {
=> 0x10f14 <PreFetchTe+104>:	ldr	r3, [r11, #-12]
0x00010f18	1670	    for (i = 0; i < 4; i++) {
=> 0x10f18 <PreFetchTe+108>:	add	r3, r3, #1
0x00010f1c	1670	    for (i = 0; i < 4; i++) {
=> 0x10f1c <PreFetchTe+112>:	str	r3, [r11, #-12]
0x00010f20	1670	    for (i = 0; i < 4; i++) {
=> 0x10f20 <PreFetchTe+116>:	ldr	r3, [r11, #-12]
0x00010f24	1670	    for (i = 0; i < 4; i++) {
=> 0x10f24 <PreFetchTe+120>:	cmp	r3, #3
0x00010f28	1670	    for (i = 0; i < 4; i++) {
=> 0x10f28 <PreFetchTe+124>:	ble	0x10ecc <PreFetchTe+32>
1676	    return x;
=> 0x10f2c <PreFetchTe+128>:	ldr	r3, [r11, #-16]
1680	}
=> 0x10f30 <PreFetchTe+132>:	mov	r0, r3
0x00010f34	1680	}
=> 0x10f34 <PreFetchTe+136>:	add	sp, r11, #0
0x00010f38	1680	}
=> 0x10f38 <PreFetchTe+140>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010f3c	1680	}
=> 0x10f3c <PreFetchTe+144>:	bx	lr
0x00011084 in AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:1962
1962	    s0 |= PreFetchTe();
=> 0x11084 <AesEncrypt_C+320>:	mov	r2, r0
1962	    s0 |= PreFetchTe();
=> 0x11088 <AesEncrypt_C+324>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x0001108c	1962	    s0 |= PreFetchTe();
=> 0x1108c <AesEncrypt_C+328>:	orr	r3, r2, r3
0x00011090	1962	    s0 |= PreFetchTe();
=> 0x11090 <AesEncrypt_C+332>:	str	r3, [r11, #-44]	; 0xffffffd4
2018	                       ENC_ROUND_T_S( 0);
=> 0x11094 <AesEncrypt_C+336>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011098	2018	                       ENC_ROUND_T_S( 0);
=> 0x11098 <AesEncrypt_C+340>:	lsr	r3, r3, #24
0x0001109c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1109c <AesEncrypt_C+344>:	and	r3, r3, #255	; 0xff
0x000110a0	2018	                       ENC_ROUND_T_S( 0);
=> 0x110a0 <AesEncrypt_C+348>:	mov	r2, r3
0x000110a4	2018	                       ENC_ROUND_T_S( 0);
=> 0x110a4 <AesEncrypt_C+352>:	ldr	r3, [pc, #3768]	; 0x11f64 <AesEncrypt_C+4128>
0x000110a8	2018	                       ENC_ROUND_T_S( 0);
=> 0x110a8 <AesEncrypt_C+356>:	ldr	r2, [r3, r2, lsl #2]
0x000110ac	2018	                       ENC_ROUND_T_S( 0);
=> 0x110ac <AesEncrypt_C+360>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000110b0	2018	                       ENC_ROUND_T_S( 0);
=> 0x110b0 <AesEncrypt_C+364>:	lsr	r3, r3, #16
0x000110b4	2018	                       ENC_ROUND_T_S( 0);
=> 0x110b4 <AesEncrypt_C+368>:	and	r3, r3, #255	; 0xff
0x000110b8	2018	                       ENC_ROUND_T_S( 0);
=> 0x110b8 <AesEncrypt_C+372>:	ldr	r1, [pc, #3748]	; 0x11f64 <AesEncrypt_C+4128>
0x000110bc	2018	                       ENC_ROUND_T_S( 0);
=> 0x110bc <AesEncrypt_C+376>:	add	r3, r3, #256	; 0x100
0x000110c0	2018	                       ENC_ROUND_T_S( 0);
=> 0x110c0 <AesEncrypt_C+380>:	ldr	r3, [r1, r3, lsl #2]
0x000110c4	2018	                       ENC_ROUND_T_S( 0);
=> 0x110c4 <AesEncrypt_C+384>:	eor	r2, r2, r3
0x000110c8	2018	                       ENC_ROUND_T_S( 0);
=> 0x110c8 <AesEncrypt_C+388>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000110cc	2018	                       ENC_ROUND_T_S( 0);
=> 0x110cc <AesEncrypt_C+392>:	lsr	r3, r3, #8
0x000110d0	2018	                       ENC_ROUND_T_S( 0);
=> 0x110d0 <AesEncrypt_C+396>:	and	r3, r3, #255	; 0xff
0x000110d4	2018	                       ENC_ROUND_T_S( 0);
=> 0x110d4 <AesEncrypt_C+400>:	ldr	r1, [pc, #3720]	; 0x11f64 <AesEncrypt_C+4128>
0x000110d8	2018	                       ENC_ROUND_T_S( 0);
=> 0x110d8 <AesEncrypt_C+404>:	add	r3, r3, #512	; 0x200
0x000110dc	2018	                       ENC_ROUND_T_S( 0);
=> 0x110dc <AesEncrypt_C+408>:	ldr	r3, [r1, r3, lsl #2]
0x000110e0	2018	                       ENC_ROUND_T_S( 0);
=> 0x110e0 <AesEncrypt_C+412>:	eor	r2, r2, r3
0x000110e4	2018	                       ENC_ROUND_T_S( 0);
=> 0x110e4 <AesEncrypt_C+416>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000110e8	2018	                       ENC_ROUND_T_S( 0);
=> 0x110e8 <AesEncrypt_C+420>:	and	r3, r3, #255	; 0xff
0x000110ec	2018	                       ENC_ROUND_T_S( 0);
=> 0x110ec <AesEncrypt_C+424>:	ldr	r1, [pc, #3696]	; 0x11f64 <AesEncrypt_C+4128>
0x000110f0	2018	                       ENC_ROUND_T_S( 0);
=> 0x110f0 <AesEncrypt_C+428>:	add	r3, r3, #768	; 0x300
0x000110f4	2018	                       ENC_ROUND_T_S( 0);
=> 0x110f4 <AesEncrypt_C+432>:	ldr	r3, [r1, r3, lsl #2]
0x000110f8	2018	                       ENC_ROUND_T_S( 0);
=> 0x110f8 <AesEncrypt_C+436>:	eor	r2, r2, r3
0x000110fc	2018	                       ENC_ROUND_T_S( 0);
=> 0x110fc <AesEncrypt_C+440>:	ldr	r3, [r11, #-12]
0x00011100	2018	                       ENC_ROUND_T_S( 0);
=> 0x11100 <AesEncrypt_C+444>:	add	r3, r3, #16
0x00011104	2018	                       ENC_ROUND_T_S( 0);
=> 0x11104 <AesEncrypt_C+448>:	ldr	r3, [r3]
0x00011108	2018	                       ENC_ROUND_T_S( 0);
=> 0x11108 <AesEncrypt_C+452>:	eor	r3, r3, r2
0x0001110c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1110c <AesEncrypt_C+456>:	str	r3, [r11, #-28]	; 0xffffffe4
0x00011110	2018	                       ENC_ROUND_T_S( 0);
=> 0x11110 <AesEncrypt_C+460>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011114	2018	                       ENC_ROUND_T_S( 0);
=> 0x11114 <AesEncrypt_C+464>:	lsr	r3, r3, #24
0x00011118	2018	                       ENC_ROUND_T_S( 0);
=> 0x11118 <AesEncrypt_C+468>:	and	r3, r3, #255	; 0xff
0x0001111c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1111c <AesEncrypt_C+472>:	mov	r2, r3
0x00011120	2018	                       ENC_ROUND_T_S( 0);
=> 0x11120 <AesEncrypt_C+476>:	ldr	r3, [pc, #3644]	; 0x11f64 <AesEncrypt_C+4128>
0x00011124	2018	                       ENC_ROUND_T_S( 0);
=> 0x11124 <AesEncrypt_C+480>:	ldr	r2, [r3, r2, lsl #2]
0x00011128	2018	                       ENC_ROUND_T_S( 0);
=> 0x11128 <AesEncrypt_C+484>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x0001112c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1112c <AesEncrypt_C+488>:	lsr	r3, r3, #16
0x00011130	2018	                       ENC_ROUND_T_S( 0);
=> 0x11130 <AesEncrypt_C+492>:	and	r3, r3, #255	; 0xff
0x00011134	2018	                       ENC_ROUND_T_S( 0);
=> 0x11134 <AesEncrypt_C+496>:	ldr	r1, [pc, #3624]	; 0x11f64 <AesEncrypt_C+4128>
0x00011138	2018	                       ENC_ROUND_T_S( 0);
=> 0x11138 <AesEncrypt_C+500>:	add	r3, r3, #256	; 0x100
0x0001113c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1113c <AesEncrypt_C+504>:	ldr	r3, [r1, r3, lsl #2]
0x00011140	2018	                       ENC_ROUND_T_S( 0);
=> 0x11140 <AesEncrypt_C+508>:	eor	r2, r2, r3
0x00011144	2018	                       ENC_ROUND_T_S( 0);
=> 0x11144 <AesEncrypt_C+512>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011148	2018	                       ENC_ROUND_T_S( 0);
=> 0x11148 <AesEncrypt_C+516>:	lsr	r3, r3, #8
0x0001114c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1114c <AesEncrypt_C+520>:	and	r3, r3, #255	; 0xff
0x00011150	2018	                       ENC_ROUND_T_S( 0);
=> 0x11150 <AesEncrypt_C+524>:	ldr	r1, [pc, #3596]	; 0x11f64 <AesEncrypt_C+4128>
0x00011154	2018	                       ENC_ROUND_T_S( 0);
=> 0x11154 <AesEncrypt_C+528>:	add	r3, r3, #512	; 0x200
0x00011158	2018	                       ENC_ROUND_T_S( 0);
=> 0x11158 <AesEncrypt_C+532>:	ldr	r3, [r1, r3, lsl #2]
0x0001115c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1115c <AesEncrypt_C+536>:	eor	r2, r2, r3
0x00011160	2018	                       ENC_ROUND_T_S( 0);
=> 0x11160 <AesEncrypt_C+540>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011164	2018	                       ENC_ROUND_T_S( 0);
=> 0x11164 <AesEncrypt_C+544>:	and	r3, r3, #255	; 0xff
0x00011168	2018	                       ENC_ROUND_T_S( 0);
=> 0x11168 <AesEncrypt_C+548>:	ldr	r1, [pc, #3572]	; 0x11f64 <AesEncrypt_C+4128>
0x0001116c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1116c <AesEncrypt_C+552>:	add	r3, r3, #768	; 0x300
0x00011170	2018	                       ENC_ROUND_T_S( 0);
=> 0x11170 <AesEncrypt_C+556>:	ldr	r3, [r1, r3, lsl #2]
0x00011174	2018	                       ENC_ROUND_T_S( 0);
=> 0x11174 <AesEncrypt_C+560>:	eor	r2, r2, r3
0x00011178	2018	                       ENC_ROUND_T_S( 0);
=> 0x11178 <AesEncrypt_C+564>:	ldr	r3, [r11, #-12]
0x0001117c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1117c <AesEncrypt_C+568>:	add	r3, r3, #20
0x00011180	2018	                       ENC_ROUND_T_S( 0);
=> 0x11180 <AesEncrypt_C+572>:	ldr	r3, [r3]
0x00011184	2018	                       ENC_ROUND_T_S( 0);
=> 0x11184 <AesEncrypt_C+576>:	eor	r3, r3, r2
0x00011188	2018	                       ENC_ROUND_T_S( 0);
=> 0x11188 <AesEncrypt_C+580>:	str	r3, [r11, #-24]	; 0xffffffe8
0x0001118c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1118c <AesEncrypt_C+584>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011190	2018	                       ENC_ROUND_T_S( 0);
=> 0x11190 <AesEncrypt_C+588>:	lsr	r3, r3, #24
0x00011194	2018	                       ENC_ROUND_T_S( 0);
=> 0x11194 <AesEncrypt_C+592>:	and	r3, r3, #255	; 0xff
0x00011198	2018	                       ENC_ROUND_T_S( 0);
=> 0x11198 <AesEncrypt_C+596>:	mov	r2, r3
0x0001119c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1119c <AesEncrypt_C+600>:	ldr	r3, [pc, #3520]	; 0x11f64 <AesEncrypt_C+4128>
0x000111a0	2018	                       ENC_ROUND_T_S( 0);
=> 0x111a0 <AesEncrypt_C+604>:	ldr	r2, [r3, r2, lsl #2]
0x000111a4	2018	                       ENC_ROUND_T_S( 0);
=> 0x111a4 <AesEncrypt_C+608>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000111a8	2018	                       ENC_ROUND_T_S( 0);
=> 0x111a8 <AesEncrypt_C+612>:	lsr	r3, r3, #16
0x000111ac	2018	                       ENC_ROUND_T_S( 0);
=> 0x111ac <AesEncrypt_C+616>:	and	r3, r3, #255	; 0xff
0x000111b0	2018	                       ENC_ROUND_T_S( 0);
=> 0x111b0 <AesEncrypt_C+620>:	ldr	r1, [pc, #3500]	; 0x11f64 <AesEncrypt_C+4128>
0x000111b4	2018	                       ENC_ROUND_T_S( 0);
=> 0x111b4 <AesEncrypt_C+624>:	add	r3, r3, #256	; 0x100
0x000111b8	2018	                       ENC_ROUND_T_S( 0);
=> 0x111b8 <AesEncrypt_C+628>:	ldr	r3, [r1, r3, lsl #2]
0x000111bc	2018	                       ENC_ROUND_T_S( 0);
=> 0x111bc <AesEncrypt_C+632>:	eor	r2, r2, r3
0x000111c0	2018	                       ENC_ROUND_T_S( 0);
=> 0x111c0 <AesEncrypt_C+636>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000111c4	2018	                       ENC_ROUND_T_S( 0);
=> 0x111c4 <AesEncrypt_C+640>:	lsr	r3, r3, #8
0x000111c8	2018	                       ENC_ROUND_T_S( 0);
=> 0x111c8 <AesEncrypt_C+644>:	and	r3, r3, #255	; 0xff
0x000111cc	2018	                       ENC_ROUND_T_S( 0);
=> 0x111cc <AesEncrypt_C+648>:	ldr	r1, [pc, #3472]	; 0x11f64 <AesEncrypt_C+4128>
0x000111d0	2018	                       ENC_ROUND_T_S( 0);
=> 0x111d0 <AesEncrypt_C+652>:	add	r3, r3, #512	; 0x200
0x000111d4	2018	                       ENC_ROUND_T_S( 0);
=> 0x111d4 <AesEncrypt_C+656>:	ldr	r3, [r1, r3, lsl #2]
0x000111d8	2018	                       ENC_ROUND_T_S( 0);
=> 0x111d8 <AesEncrypt_C+660>:	eor	r2, r2, r3
0x000111dc	2018	                       ENC_ROUND_T_S( 0);
=> 0x111dc <AesEncrypt_C+664>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000111e0	2018	                       ENC_ROUND_T_S( 0);
=> 0x111e0 <AesEncrypt_C+668>:	and	r3, r3, #255	; 0xff
0x000111e4	2018	                       ENC_ROUND_T_S( 0);
=> 0x111e4 <AesEncrypt_C+672>:	ldr	r1, [pc, #3448]	; 0x11f64 <AesEncrypt_C+4128>
0x000111e8	2018	                       ENC_ROUND_T_S( 0);
=> 0x111e8 <AesEncrypt_C+676>:	add	r3, r3, #768	; 0x300
0x000111ec	2018	                       ENC_ROUND_T_S( 0);
=> 0x111ec <AesEncrypt_C+680>:	ldr	r3, [r1, r3, lsl #2]
0x000111f0	2018	                       ENC_ROUND_T_S( 0);
=> 0x111f0 <AesEncrypt_C+684>:	eor	r2, r2, r3
0x000111f4	2018	                       ENC_ROUND_T_S( 0);
=> 0x111f4 <AesEncrypt_C+688>:	ldr	r3, [r11, #-12]
0x000111f8	2018	                       ENC_ROUND_T_S( 0);
=> 0x111f8 <AesEncrypt_C+692>:	add	r3, r3, #24
0x000111fc	2018	                       ENC_ROUND_T_S( 0);
=> 0x111fc <AesEncrypt_C+696>:	ldr	r3, [r3]
0x00011200	2018	                       ENC_ROUND_T_S( 0);
=> 0x11200 <AesEncrypt_C+700>:	eor	r3, r3, r2
0x00011204	2018	                       ENC_ROUND_T_S( 0);
=> 0x11204 <AesEncrypt_C+704>:	str	r3, [r11, #-20]	; 0xffffffec
0x00011208	2018	                       ENC_ROUND_T_S( 0);
=> 0x11208 <AesEncrypt_C+708>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001120c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1120c <AesEncrypt_C+712>:	lsr	r3, r3, #24
0x00011210	2018	                       ENC_ROUND_T_S( 0);
=> 0x11210 <AesEncrypt_C+716>:	and	r3, r3, #255	; 0xff
0x00011214	2018	                       ENC_ROUND_T_S( 0);
=> 0x11214 <AesEncrypt_C+720>:	mov	r2, r3
0x00011218	2018	                       ENC_ROUND_T_S( 0);
=> 0x11218 <AesEncrypt_C+724>:	ldr	r3, [pc, #3396]	; 0x11f64 <AesEncrypt_C+4128>
0x0001121c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1121c <AesEncrypt_C+728>:	ldr	r2, [r3, r2, lsl #2]
0x00011220	2018	                       ENC_ROUND_T_S( 0);
=> 0x11220 <AesEncrypt_C+732>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011224	2018	                       ENC_ROUND_T_S( 0);
=> 0x11224 <AesEncrypt_C+736>:	lsr	r3, r3, #16
0x00011228	2018	                       ENC_ROUND_T_S( 0);
=> 0x11228 <AesEncrypt_C+740>:	and	r3, r3, #255	; 0xff
0x0001122c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1122c <AesEncrypt_C+744>:	ldr	r1, [pc, #3376]	; 0x11f64 <AesEncrypt_C+4128>
0x00011230	2018	                       ENC_ROUND_T_S( 0);
=> 0x11230 <AesEncrypt_C+748>:	add	r3, r3, #256	; 0x100
0x00011234	2018	                       ENC_ROUND_T_S( 0);
=> 0x11234 <AesEncrypt_C+752>:	ldr	r3, [r1, r3, lsl #2]
0x00011238	2018	                       ENC_ROUND_T_S( 0);
=> 0x11238 <AesEncrypt_C+756>:	eor	r2, r2, r3
0x0001123c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1123c <AesEncrypt_C+760>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011240	2018	                       ENC_ROUND_T_S( 0);
=> 0x11240 <AesEncrypt_C+764>:	lsr	r3, r3, #8
0x00011244	2018	                       ENC_ROUND_T_S( 0);
=> 0x11244 <AesEncrypt_C+768>:	and	r3, r3, #255	; 0xff
0x00011248	2018	                       ENC_ROUND_T_S( 0);
=> 0x11248 <AesEncrypt_C+772>:	ldr	r1, [pc, #3348]	; 0x11f64 <AesEncrypt_C+4128>
0x0001124c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1124c <AesEncrypt_C+776>:	add	r3, r3, #512	; 0x200
0x00011250	2018	                       ENC_ROUND_T_S( 0);
=> 0x11250 <AesEncrypt_C+780>:	ldr	r3, [r1, r3, lsl #2]
0x00011254	2018	                       ENC_ROUND_T_S( 0);
=> 0x11254 <AesEncrypt_C+784>:	eor	r2, r2, r3
0x00011258	2018	                       ENC_ROUND_T_S( 0);
=> 0x11258 <AesEncrypt_C+788>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x0001125c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1125c <AesEncrypt_C+792>:	and	r3, r3, #255	; 0xff
0x00011260	2018	                       ENC_ROUND_T_S( 0);
=> 0x11260 <AesEncrypt_C+796>:	ldr	r1, [pc, #3324]	; 0x11f64 <AesEncrypt_C+4128>
0x00011264	2018	                       ENC_ROUND_T_S( 0);
=> 0x11264 <AesEncrypt_C+800>:	add	r3, r3, #768	; 0x300
0x00011268	2018	                       ENC_ROUND_T_S( 0);
=> 0x11268 <AesEncrypt_C+804>:	ldr	r3, [r1, r3, lsl #2]
0x0001126c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1126c <AesEncrypt_C+808>:	eor	r2, r2, r3
0x00011270	2018	                       ENC_ROUND_T_S( 0);
=> 0x11270 <AesEncrypt_C+812>:	ldr	r3, [r11, #-12]
0x00011274	2018	                       ENC_ROUND_T_S( 0);
=> 0x11274 <AesEncrypt_C+816>:	add	r3, r3, #28
0x00011278	2018	                       ENC_ROUND_T_S( 0);
=> 0x11278 <AesEncrypt_C+820>:	ldr	r3, [r3]
0x0001127c	2018	                       ENC_ROUND_T_S( 0);
=> 0x1127c <AesEncrypt_C+824>:	eor	r3, r3, r2
0x00011280	2018	                       ENC_ROUND_T_S( 0);
=> 0x11280 <AesEncrypt_C+828>:	str	r3, [r11, #-16]
2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11284 <AesEncrypt_C+832>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011288	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11288 <AesEncrypt_C+836>:	lsr	r3, r3, #24
0x0001128c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1128c <AesEncrypt_C+840>:	and	r3, r3, #255	; 0xff
0x00011290	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11290 <AesEncrypt_C+844>:	mov	r2, r3
0x00011294	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11294 <AesEncrypt_C+848>:	ldr	r3, [pc, #3272]	; 0x11f64 <AesEncrypt_C+4128>
0x00011298	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11298 <AesEncrypt_C+852>:	ldr	r2, [r3, r2, lsl #2]
0x0001129c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1129c <AesEncrypt_C+856>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000112a0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112a0 <AesEncrypt_C+860>:	lsr	r3, r3, #16
0x000112a4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112a4 <AesEncrypt_C+864>:	and	r3, r3, #255	; 0xff
0x000112a8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112a8 <AesEncrypt_C+868>:	ldr	r1, [pc, #3252]	; 0x11f64 <AesEncrypt_C+4128>
0x000112ac	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112ac <AesEncrypt_C+872>:	add	r3, r3, #256	; 0x100
0x000112b0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112b0 <AesEncrypt_C+876>:	ldr	r3, [r1, r3, lsl #2]
0x000112b4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112b4 <AesEncrypt_C+880>:	eor	r2, r2, r3
0x000112b8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112b8 <AesEncrypt_C+884>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000112bc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112bc <AesEncrypt_C+888>:	lsr	r3, r3, #8
0x000112c0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112c0 <AesEncrypt_C+892>:	and	r3, r3, #255	; 0xff
0x000112c4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112c4 <AesEncrypt_C+896>:	ldr	r1, [pc, #3224]	; 0x11f64 <AesEncrypt_C+4128>
0x000112c8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112c8 <AesEncrypt_C+900>:	add	r3, r3, #512	; 0x200
0x000112cc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112cc <AesEncrypt_C+904>:	ldr	r3, [r1, r3, lsl #2]
0x000112d0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112d0 <AesEncrypt_C+908>:	eor	r2, r2, r3
0x000112d4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112d4 <AesEncrypt_C+912>:	ldr	r3, [r11, #-16]
0x000112d8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112d8 <AesEncrypt_C+916>:	and	r3, r3, #255	; 0xff
0x000112dc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112dc <AesEncrypt_C+920>:	ldr	r1, [pc, #3200]	; 0x11f64 <AesEncrypt_C+4128>
0x000112e0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112e0 <AesEncrypt_C+924>:	add	r3, r3, #768	; 0x300
0x000112e4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112e4 <AesEncrypt_C+928>:	ldr	r3, [r1, r3, lsl #2]
0x000112e8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112e8 <AesEncrypt_C+932>:	eor	r2, r2, r3
0x000112ec	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112ec <AesEncrypt_C+936>:	ldr	r3, [r11, #-12]
0x000112f0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112f0 <AesEncrypt_C+940>:	add	r3, r3, #32
0x000112f4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112f4 <AesEncrypt_C+944>:	ldr	r3, [r3]
0x000112f8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112f8 <AesEncrypt_C+948>:	eor	r3, r3, r2
0x000112fc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x112fc <AesEncrypt_C+952>:	str	r3, [r11, #-44]	; 0xffffffd4
0x00011300	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11300 <AesEncrypt_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011304	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11304 <AesEncrypt_C+960>:	lsr	r3, r3, #24
0x00011308	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11308 <AesEncrypt_C+964>:	and	r3, r3, #255	; 0xff
0x0001130c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1130c <AesEncrypt_C+968>:	mov	r2, r3
0x00011310	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11310 <AesEncrypt_C+972>:	ldr	r3, [pc, #3148]	; 0x11f64 <AesEncrypt_C+4128>
0x00011314	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11314 <AesEncrypt_C+976>:	ldr	r2, [r3, r2, lsl #2]
0x00011318	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11318 <AesEncrypt_C+980>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001131c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1131c <AesEncrypt_C+984>:	lsr	r3, r3, #16
0x00011320	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11320 <AesEncrypt_C+988>:	and	r3, r3, #255	; 0xff
0x00011324	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11324 <AesEncrypt_C+992>:	ldr	r1, [pc, #3128]	; 0x11f64 <AesEncrypt_C+4128>
0x00011328	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11328 <AesEncrypt_C+996>:	add	r3, r3, #256	; 0x100
0x0001132c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1132c <AesEncrypt_C+1000>:	ldr	r3, [r1, r3, lsl #2]
0x00011330	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11330 <AesEncrypt_C+1004>:	eor	r2, r2, r3
0x00011334	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11334 <AesEncrypt_C+1008>:	ldr	r3, [r11, #-16]
0x00011338	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11338 <AesEncrypt_C+1012>:	lsr	r3, r3, #8
0x0001133c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1133c <AesEncrypt_C+1016>:	and	r3, r3, #255	; 0xff
0x00011340	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11340 <AesEncrypt_C+1020>:	ldr	r1, [pc, #3100]	; 0x11f64 <AesEncrypt_C+4128>
0x00011344	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11344 <AesEncrypt_C+1024>:	add	r3, r3, #512	; 0x200
0x00011348	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11348 <AesEncrypt_C+1028>:	ldr	r3, [r1, r3, lsl #2]
0x0001134c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1134c <AesEncrypt_C+1032>:	eor	r2, r2, r3
0x00011350	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11350 <AesEncrypt_C+1036>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011354	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11354 <AesEncrypt_C+1040>:	and	r3, r3, #255	; 0xff
0x00011358	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11358 <AesEncrypt_C+1044>:	ldr	r1, [pc, #3076]	; 0x11f64 <AesEncrypt_C+4128>
0x0001135c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1135c <AesEncrypt_C+1048>:	add	r3, r3, #768	; 0x300
0x00011360	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11360 <AesEncrypt_C+1052>:	ldr	r3, [r1, r3, lsl #2]
0x00011364	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11364 <AesEncrypt_C+1056>:	eor	r2, r2, r3
0x00011368	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11368 <AesEncrypt_C+1060>:	ldr	r3, [r11, #-12]
0x0001136c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1136c <AesEncrypt_C+1064>:	add	r3, r3, #36	; 0x24
0x00011370	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11370 <AesEncrypt_C+1068>:	ldr	r3, [r3]
0x00011374	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11374 <AesEncrypt_C+1072>:	eor	r3, r3, r2
0x00011378	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11378 <AesEncrypt_C+1076>:	str	r3, [r11, #-40]	; 0xffffffd8
0x0001137c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1137c <AesEncrypt_C+1080>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011380	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11380 <AesEncrypt_C+1084>:	lsr	r3, r3, #24
0x00011384	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11384 <AesEncrypt_C+1088>:	and	r3, r3, #255	; 0xff
0x00011388	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11388 <AesEncrypt_C+1092>:	mov	r2, r3
0x0001138c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1138c <AesEncrypt_C+1096>:	ldr	r3, [pc, #3024]	; 0x11f64 <AesEncrypt_C+4128>
0x00011390	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11390 <AesEncrypt_C+1100>:	ldr	r2, [r3, r2, lsl #2]
0x00011394	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11394 <AesEncrypt_C+1104>:	ldr	r3, [r11, #-16]
0x00011398	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11398 <AesEncrypt_C+1108>:	lsr	r3, r3, #16
0x0001139c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1139c <AesEncrypt_C+1112>:	and	r3, r3, #255	; 0xff
0x000113a0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113a0 <AesEncrypt_C+1116>:	ldr	r1, [pc, #3004]	; 0x11f64 <AesEncrypt_C+4128>
0x000113a4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113a4 <AesEncrypt_C+1120>:	add	r3, r3, #256	; 0x100
0x000113a8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113a8 <AesEncrypt_C+1124>:	ldr	r3, [r1, r3, lsl #2]
0x000113ac	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113ac <AesEncrypt_C+1128>:	eor	r2, r2, r3
0x000113b0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113b0 <AesEncrypt_C+1132>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000113b4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113b4 <AesEncrypt_C+1136>:	lsr	r3, r3, #8
0x000113b8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113b8 <AesEncrypt_C+1140>:	and	r3, r3, #255	; 0xff
0x000113bc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113bc <AesEncrypt_C+1144>:	ldr	r1, [pc, #2976]	; 0x11f64 <AesEncrypt_C+4128>
0x000113c0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113c0 <AesEncrypt_C+1148>:	add	r3, r3, #512	; 0x200
0x000113c4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113c4 <AesEncrypt_C+1152>:	ldr	r3, [r1, r3, lsl #2]
0x000113c8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113c8 <AesEncrypt_C+1156>:	eor	r2, r2, r3
0x000113cc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113cc <AesEncrypt_C+1160>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000113d0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113d0 <AesEncrypt_C+1164>:	and	r3, r3, #255	; 0xff
0x000113d4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113d4 <AesEncrypt_C+1168>:	ldr	r1, [pc, #2952]	; 0x11f64 <AesEncrypt_C+4128>
0x000113d8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113d8 <AesEncrypt_C+1172>:	add	r3, r3, #768	; 0x300
0x000113dc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113dc <AesEncrypt_C+1176>:	ldr	r3, [r1, r3, lsl #2]
0x000113e0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113e0 <AesEncrypt_C+1180>:	eor	r2, r2, r3
0x000113e4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113e4 <AesEncrypt_C+1184>:	ldr	r3, [r11, #-12]
0x000113e8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113e8 <AesEncrypt_C+1188>:	add	r3, r3, #40	; 0x28
0x000113ec	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113ec <AesEncrypt_C+1192>:	ldr	r3, [r3]
0x000113f0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113f0 <AesEncrypt_C+1196>:	eor	r3, r3, r2
0x000113f4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113f4 <AesEncrypt_C+1200>:	str	r3, [r11, #-36]	; 0xffffffdc
0x000113f8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113f8 <AesEncrypt_C+1204>:	ldr	r3, [r11, #-16]
0x000113fc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x113fc <AesEncrypt_C+1208>:	lsr	r3, r3, #24
0x00011400	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11400 <AesEncrypt_C+1212>:	and	r3, r3, #255	; 0xff
0x00011404	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11404 <AesEncrypt_C+1216>:	mov	r2, r3
0x00011408	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11408 <AesEncrypt_C+1220>:	ldr	r3, [pc, #2900]	; 0x11f64 <AesEncrypt_C+4128>
0x0001140c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1140c <AesEncrypt_C+1224>:	ldr	r2, [r3, r2, lsl #2]
0x00011410	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11410 <AesEncrypt_C+1228>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011414	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11414 <AesEncrypt_C+1232>:	lsr	r3, r3, #16
0x00011418	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11418 <AesEncrypt_C+1236>:	and	r3, r3, #255	; 0xff
0x0001141c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1141c <AesEncrypt_C+1240>:	ldr	r1, [pc, #2880]	; 0x11f64 <AesEncrypt_C+4128>
0x00011420	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11420 <AesEncrypt_C+1244>:	add	r3, r3, #256	; 0x100
0x00011424	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11424 <AesEncrypt_C+1248>:	ldr	r3, [r1, r3, lsl #2]
0x00011428	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11428 <AesEncrypt_C+1252>:	eor	r2, r2, r3
0x0001142c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1142c <AesEncrypt_C+1256>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011430	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11430 <AesEncrypt_C+1260>:	lsr	r3, r3, #8
0x00011434	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11434 <AesEncrypt_C+1264>:	and	r3, r3, #255	; 0xff
0x00011438	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11438 <AesEncrypt_C+1268>:	ldr	r1, [pc, #2852]	; 0x11f64 <AesEncrypt_C+4128>
0x0001143c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1143c <AesEncrypt_C+1272>:	add	r3, r3, #512	; 0x200
0x00011440	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11440 <AesEncrypt_C+1276>:	ldr	r3, [r1, r3, lsl #2]
0x00011444	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11444 <AesEncrypt_C+1280>:	eor	r2, r2, r3
0x00011448	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11448 <AesEncrypt_C+1284>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001144c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1144c <AesEncrypt_C+1288>:	and	r3, r3, #255	; 0xff
0x00011450	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11450 <AesEncrypt_C+1292>:	ldr	r1, [pc, #2828]	; 0x11f64 <AesEncrypt_C+4128>
0x00011454	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11454 <AesEncrypt_C+1296>:	add	r3, r3, #768	; 0x300
0x00011458	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11458 <AesEncrypt_C+1300>:	ldr	r3, [r1, r3, lsl #2]
0x0001145c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1145c <AesEncrypt_C+1304>:	eor	r2, r2, r3
0x00011460	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11460 <AesEncrypt_C+1308>:	ldr	r3, [r11, #-12]
0x00011464	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11464 <AesEncrypt_C+1312>:	add	r3, r3, #44	; 0x2c
0x00011468	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11468 <AesEncrypt_C+1316>:	ldr	r3, [r3]
0x0001146c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1146c <AesEncrypt_C+1320>:	eor	r3, r3, r2
0x00011470	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11470 <AesEncrypt_C+1324>:	str	r3, [r11, #-32]	; 0xffffffe0
2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11474 <AesEncrypt_C+1328>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011478	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11478 <AesEncrypt_C+1332>:	lsr	r3, r3, #24
0x0001147c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1147c <AesEncrypt_C+1336>:	and	r3, r3, #255	; 0xff
0x00011480	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11480 <AesEncrypt_C+1340>:	mov	r2, r3
0x00011484	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11484 <AesEncrypt_C+1344>:	ldr	r3, [pc, #2776]	; 0x11f64 <AesEncrypt_C+4128>
0x00011488	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11488 <AesEncrypt_C+1348>:	ldr	r2, [r3, r2, lsl #2]
0x0001148c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1148c <AesEncrypt_C+1352>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011490	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11490 <AesEncrypt_C+1356>:	lsr	r3, r3, #16
0x00011494	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11494 <AesEncrypt_C+1360>:	and	r3, r3, #255	; 0xff
0x00011498	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11498 <AesEncrypt_C+1364>:	ldr	r1, [pc, #2756]	; 0x11f64 <AesEncrypt_C+4128>
0x0001149c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1149c <AesEncrypt_C+1368>:	add	r3, r3, #256	; 0x100
0x000114a0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114a0 <AesEncrypt_C+1372>:	ldr	r3, [r1, r3, lsl #2]
0x000114a4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114a4 <AesEncrypt_C+1376>:	eor	r2, r2, r3
0x000114a8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114a8 <AesEncrypt_C+1380>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000114ac	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114ac <AesEncrypt_C+1384>:	lsr	r3, r3, #8
0x000114b0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114b0 <AesEncrypt_C+1388>:	and	r3, r3, #255	; 0xff
0x000114b4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114b4 <AesEncrypt_C+1392>:	ldr	r1, [pc, #2728]	; 0x11f64 <AesEncrypt_C+4128>
0x000114b8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114b8 <AesEncrypt_C+1396>:	add	r3, r3, #512	; 0x200
0x000114bc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114bc <AesEncrypt_C+1400>:	ldr	r3, [r1, r3, lsl #2]
0x000114c0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114c0 <AesEncrypt_C+1404>:	eor	r2, r2, r3
0x000114c4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114c4 <AesEncrypt_C+1408>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000114c8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114c8 <AesEncrypt_C+1412>:	and	r3, r3, #255	; 0xff
0x000114cc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114cc <AesEncrypt_C+1416>:	ldr	r1, [pc, #2704]	; 0x11f64 <AesEncrypt_C+4128>
0x000114d0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114d0 <AesEncrypt_C+1420>:	add	r3, r3, #768	; 0x300
0x000114d4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114d4 <AesEncrypt_C+1424>:	ldr	r3, [r1, r3, lsl #2]
0x000114d8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114d8 <AesEncrypt_C+1428>:	eor	r2, r2, r3
0x000114dc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114dc <AesEncrypt_C+1432>:	ldr	r3, [r11, #-12]
0x000114e0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114e0 <AesEncrypt_C+1436>:	add	r3, r3, #48	; 0x30
0x000114e4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114e4 <AesEncrypt_C+1440>:	ldr	r3, [r3]
0x000114e8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114e8 <AesEncrypt_C+1444>:	eor	r3, r3, r2
0x000114ec	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114ec <AesEncrypt_C+1448>:	str	r3, [r11, #-28]	; 0xffffffe4
0x000114f0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114f0 <AesEncrypt_C+1452>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000114f4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114f4 <AesEncrypt_C+1456>:	lsr	r3, r3, #24
0x000114f8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114f8 <AesEncrypt_C+1460>:	and	r3, r3, #255	; 0xff
0x000114fc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x114fc <AesEncrypt_C+1464>:	mov	r2, r3
0x00011500	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11500 <AesEncrypt_C+1468>:	ldr	r3, [pc, #2652]	; 0x11f64 <AesEncrypt_C+4128>
0x00011504	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11504 <AesEncrypt_C+1472>:	ldr	r2, [r3, r2, lsl #2]
0x00011508	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11508 <AesEncrypt_C+1476>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x0001150c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1150c <AesEncrypt_C+1480>:	lsr	r3, r3, #16
0x00011510	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11510 <AesEncrypt_C+1484>:	and	r3, r3, #255	; 0xff
0x00011514	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11514 <AesEncrypt_C+1488>:	ldr	r1, [pc, #2632]	; 0x11f64 <AesEncrypt_C+4128>
0x00011518	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11518 <AesEncrypt_C+1492>:	add	r3, r3, #256	; 0x100
0x0001151c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1151c <AesEncrypt_C+1496>:	ldr	r3, [r1, r3, lsl #2]
0x00011520	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11520 <AesEncrypt_C+1500>:	eor	r2, r2, r3
0x00011524	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11524 <AesEncrypt_C+1504>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011528	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11528 <AesEncrypt_C+1508>:	lsr	r3, r3, #8
0x0001152c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1152c <AesEncrypt_C+1512>:	and	r3, r3, #255	; 0xff
0x00011530	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11530 <AesEncrypt_C+1516>:	ldr	r1, [pc, #2604]	; 0x11f64 <AesEncrypt_C+4128>
0x00011534	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11534 <AesEncrypt_C+1520>:	add	r3, r3, #512	; 0x200
0x00011538	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11538 <AesEncrypt_C+1524>:	ldr	r3, [r1, r3, lsl #2]
0x0001153c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1153c <AesEncrypt_C+1528>:	eor	r2, r2, r3
0x00011540	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11540 <AesEncrypt_C+1532>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011544	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11544 <AesEncrypt_C+1536>:	and	r3, r3, #255	; 0xff
0x00011548	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11548 <AesEncrypt_C+1540>:	ldr	r1, [pc, #2580]	; 0x11f64 <AesEncrypt_C+4128>
0x0001154c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1154c <AesEncrypt_C+1544>:	add	r3, r3, #768	; 0x300
0x00011550	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11550 <AesEncrypt_C+1548>:	ldr	r3, [r1, r3, lsl #2]
0x00011554	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11554 <AesEncrypt_C+1552>:	eor	r2, r2, r3
0x00011558	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11558 <AesEncrypt_C+1556>:	ldr	r3, [r11, #-12]
0x0001155c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1155c <AesEncrypt_C+1560>:	add	r3, r3, #52	; 0x34
0x00011560	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11560 <AesEncrypt_C+1564>:	ldr	r3, [r3]
0x00011564	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11564 <AesEncrypt_C+1568>:	eor	r3, r3, r2
0x00011568	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11568 <AesEncrypt_C+1572>:	str	r3, [r11, #-24]	; 0xffffffe8
0x0001156c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1156c <AesEncrypt_C+1576>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011570	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11570 <AesEncrypt_C+1580>:	lsr	r3, r3, #24
0x00011574	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11574 <AesEncrypt_C+1584>:	and	r3, r3, #255	; 0xff
0x00011578	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11578 <AesEncrypt_C+1588>:	mov	r2, r3
0x0001157c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1157c <AesEncrypt_C+1592>:	ldr	r3, [pc, #2528]	; 0x11f64 <AesEncrypt_C+4128>
0x00011580	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11580 <AesEncrypt_C+1596>:	ldr	r2, [r3, r2, lsl #2]
0x00011584	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11584 <AesEncrypt_C+1600>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011588	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11588 <AesEncrypt_C+1604>:	lsr	r3, r3, #16
0x0001158c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1158c <AesEncrypt_C+1608>:	and	r3, r3, #255	; 0xff
0x00011590	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11590 <AesEncrypt_C+1612>:	ldr	r1, [pc, #2508]	; 0x11f64 <AesEncrypt_C+4128>
0x00011594	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11594 <AesEncrypt_C+1616>:	add	r3, r3, #256	; 0x100
0x00011598	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11598 <AesEncrypt_C+1620>:	ldr	r3, [r1, r3, lsl #2]
0x0001159c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1159c <AesEncrypt_C+1624>:	eor	r2, r2, r3
0x000115a0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115a0 <AesEncrypt_C+1628>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000115a4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115a4 <AesEncrypt_C+1632>:	lsr	r3, r3, #8
0x000115a8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115a8 <AesEncrypt_C+1636>:	and	r3, r3, #255	; 0xff
0x000115ac	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115ac <AesEncrypt_C+1640>:	ldr	r1, [pc, #2480]	; 0x11f64 <AesEncrypt_C+4128>
0x000115b0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115b0 <AesEncrypt_C+1644>:	add	r3, r3, #512	; 0x200
0x000115b4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115b4 <AesEncrypt_C+1648>:	ldr	r3, [r1, r3, lsl #2]
0x000115b8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115b8 <AesEncrypt_C+1652>:	eor	r2, r2, r3
0x000115bc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115bc <AesEncrypt_C+1656>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000115c0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115c0 <AesEncrypt_C+1660>:	and	r3, r3, #255	; 0xff
0x000115c4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115c4 <AesEncrypt_C+1664>:	ldr	r1, [pc, #2456]	; 0x11f64 <AesEncrypt_C+4128>
0x000115c8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115c8 <AesEncrypt_C+1668>:	add	r3, r3, #768	; 0x300
0x000115cc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115cc <AesEncrypt_C+1672>:	ldr	r3, [r1, r3, lsl #2]
0x000115d0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115d0 <AesEncrypt_C+1676>:	eor	r2, r2, r3
0x000115d4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115d4 <AesEncrypt_C+1680>:	ldr	r3, [r11, #-12]
0x000115d8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115d8 <AesEncrypt_C+1684>:	add	r3, r3, #56	; 0x38
0x000115dc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115dc <AesEncrypt_C+1688>:	ldr	r3, [r3]
0x000115e0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115e0 <AesEncrypt_C+1692>:	eor	r3, r3, r2
0x000115e4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115e4 <AesEncrypt_C+1696>:	str	r3, [r11, #-20]	; 0xffffffec
0x000115e8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115e8 <AesEncrypt_C+1700>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000115ec	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115ec <AesEncrypt_C+1704>:	lsr	r3, r3, #24
0x000115f0	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115f0 <AesEncrypt_C+1708>:	and	r3, r3, #255	; 0xff
0x000115f4	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115f4 <AesEncrypt_C+1712>:	mov	r2, r3
0x000115f8	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115f8 <AesEncrypt_C+1716>:	ldr	r3, [pc, #2404]	; 0x11f64 <AesEncrypt_C+4128>
0x000115fc	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x115fc <AesEncrypt_C+1720>:	ldr	r2, [r3, r2, lsl #2]
0x00011600	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11600 <AesEncrypt_C+1724>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011604	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11604 <AesEncrypt_C+1728>:	lsr	r3, r3, #16
0x00011608	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11608 <AesEncrypt_C+1732>:	and	r3, r3, #255	; 0xff
0x0001160c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1160c <AesEncrypt_C+1736>:	ldr	r1, [pc, #2384]	; 0x11f64 <AesEncrypt_C+4128>
0x00011610	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11610 <AesEncrypt_C+1740>:	add	r3, r3, #256	; 0x100
0x00011614	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11614 <AesEncrypt_C+1744>:	ldr	r3, [r1, r3, lsl #2]
0x00011618	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11618 <AesEncrypt_C+1748>:	eor	r2, r2, r3
0x0001161c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1161c <AesEncrypt_C+1752>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011620	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11620 <AesEncrypt_C+1756>:	lsr	r3, r3, #8
0x00011624	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11624 <AesEncrypt_C+1760>:	and	r3, r3, #255	; 0xff
0x00011628	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11628 <AesEncrypt_C+1764>:	ldr	r1, [pc, #2356]	; 0x11f64 <AesEncrypt_C+4128>
0x0001162c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1162c <AesEncrypt_C+1768>:	add	r3, r3, #512	; 0x200
0x00011630	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11630 <AesEncrypt_C+1772>:	ldr	r3, [r1, r3, lsl #2]
0x00011634	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11634 <AesEncrypt_C+1776>:	eor	r2, r2, r3
0x00011638	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11638 <AesEncrypt_C+1780>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x0001163c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1163c <AesEncrypt_C+1784>:	and	r3, r3, #255	; 0xff
0x00011640	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11640 <AesEncrypt_C+1788>:	ldr	r1, [pc, #2332]	; 0x11f64 <AesEncrypt_C+4128>
0x00011644	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11644 <AesEncrypt_C+1792>:	add	r3, r3, #768	; 0x300
0x00011648	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11648 <AesEncrypt_C+1796>:	ldr	r3, [r1, r3, lsl #2]
0x0001164c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1164c <AesEncrypt_C+1800>:	eor	r2, r2, r3
0x00011650	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11650 <AesEncrypt_C+1804>:	ldr	r3, [r11, #-12]
0x00011654	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11654 <AesEncrypt_C+1808>:	add	r3, r3, #60	; 0x3c
0x00011658	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11658 <AesEncrypt_C+1812>:	ldr	r3, [r3]
0x0001165c	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x1165c <AesEncrypt_C+1816>:	eor	r3, r3, r2
0x00011660	2019	    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
=> 0x11660 <AesEncrypt_C+1820>:	str	r3, [r11, #-16]
2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11664 <AesEncrypt_C+1824>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011668	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11668 <AesEncrypt_C+1828>:	lsr	r3, r3, #24
0x0001166c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1166c <AesEncrypt_C+1832>:	and	r3, r3, #255	; 0xff
0x00011670	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11670 <AesEncrypt_C+1836>:	mov	r2, r3
0x00011674	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11674 <AesEncrypt_C+1840>:	ldr	r3, [pc, #2280]	; 0x11f64 <AesEncrypt_C+4128>
0x00011678	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11678 <AesEncrypt_C+1844>:	ldr	r2, [r3, r2, lsl #2]
0x0001167c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1167c <AesEncrypt_C+1848>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011680	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11680 <AesEncrypt_C+1852>:	lsr	r3, r3, #16
0x00011684	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11684 <AesEncrypt_C+1856>:	and	r3, r3, #255	; 0xff
0x00011688	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11688 <AesEncrypt_C+1860>:	ldr	r1, [pc, #2260]	; 0x11f64 <AesEncrypt_C+4128>
0x0001168c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1168c <AesEncrypt_C+1864>:	add	r3, r3, #256	; 0x100
0x00011690	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11690 <AesEncrypt_C+1868>:	ldr	r3, [r1, r3, lsl #2]
0x00011694	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11694 <AesEncrypt_C+1872>:	eor	r2, r2, r3
0x00011698	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11698 <AesEncrypt_C+1876>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001169c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1169c <AesEncrypt_C+1880>:	lsr	r3, r3, #8
0x000116a0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116a0 <AesEncrypt_C+1884>:	and	r3, r3, #255	; 0xff
0x000116a4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116a4 <AesEncrypt_C+1888>:	ldr	r1, [pc, #2232]	; 0x11f64 <AesEncrypt_C+4128>
0x000116a8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116a8 <AesEncrypt_C+1892>:	add	r3, r3, #512	; 0x200
0x000116ac	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116ac <AesEncrypt_C+1896>:	ldr	r3, [r1, r3, lsl #2]
0x000116b0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116b0 <AesEncrypt_C+1900>:	eor	r2, r2, r3
0x000116b4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116b4 <AesEncrypt_C+1904>:	ldr	r3, [r11, #-16]
0x000116b8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116b8 <AesEncrypt_C+1908>:	and	r3, r3, #255	; 0xff
0x000116bc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116bc <AesEncrypt_C+1912>:	ldr	r1, [pc, #2208]	; 0x11f64 <AesEncrypt_C+4128>
0x000116c0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116c0 <AesEncrypt_C+1916>:	add	r3, r3, #768	; 0x300
0x000116c4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116c4 <AesEncrypt_C+1920>:	ldr	r3, [r1, r3, lsl #2]
0x000116c8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116c8 <AesEncrypt_C+1924>:	eor	r2, r2, r3
0x000116cc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116cc <AesEncrypt_C+1928>:	ldr	r3, [r11, #-12]
0x000116d0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116d0 <AesEncrypt_C+1932>:	add	r3, r3, #64	; 0x40
0x000116d4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116d4 <AesEncrypt_C+1936>:	ldr	r3, [r3]
0x000116d8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116d8 <AesEncrypt_C+1940>:	eor	r3, r3, r2
0x000116dc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116dc <AesEncrypt_C+1944>:	str	r3, [r11, #-44]	; 0xffffffd4
0x000116e0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116e0 <AesEncrypt_C+1948>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000116e4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116e4 <AesEncrypt_C+1952>:	lsr	r3, r3, #24
0x000116e8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116e8 <AesEncrypt_C+1956>:	and	r3, r3, #255	; 0xff
0x000116ec	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116ec <AesEncrypt_C+1960>:	mov	r2, r3
0x000116f0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116f0 <AesEncrypt_C+1964>:	ldr	r3, [pc, #2156]	; 0x11f64 <AesEncrypt_C+4128>
0x000116f4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116f4 <AesEncrypt_C+1968>:	ldr	r2, [r3, r2, lsl #2]
0x000116f8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116f8 <AesEncrypt_C+1972>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000116fc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x116fc <AesEncrypt_C+1976>:	lsr	r3, r3, #16
0x00011700	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11700 <AesEncrypt_C+1980>:	and	r3, r3, #255	; 0xff
0x00011704	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11704 <AesEncrypt_C+1984>:	ldr	r1, [pc, #2136]	; 0x11f64 <AesEncrypt_C+4128>
0x00011708	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11708 <AesEncrypt_C+1988>:	add	r3, r3, #256	; 0x100
0x0001170c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1170c <AesEncrypt_C+1992>:	ldr	r3, [r1, r3, lsl #2]
0x00011710	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11710 <AesEncrypt_C+1996>:	eor	r2, r2, r3
0x00011714	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11714 <AesEncrypt_C+2000>:	ldr	r3, [r11, #-16]
0x00011718	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11718 <AesEncrypt_C+2004>:	lsr	r3, r3, #8
0x0001171c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1171c <AesEncrypt_C+2008>:	and	r3, r3, #255	; 0xff
0x00011720	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11720 <AesEncrypt_C+2012>:	ldr	r1, [pc, #2108]	; 0x11f64 <AesEncrypt_C+4128>
0x00011724	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11724 <AesEncrypt_C+2016>:	add	r3, r3, #512	; 0x200
0x00011728	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11728 <AesEncrypt_C+2020>:	ldr	r3, [r1, r3, lsl #2]
0x0001172c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1172c <AesEncrypt_C+2024>:	eor	r2, r2, r3
0x00011730	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11730 <AesEncrypt_C+2028>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011734	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11734 <AesEncrypt_C+2032>:	and	r3, r3, #255	; 0xff
0x00011738	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11738 <AesEncrypt_C+2036>:	ldr	r1, [pc, #2084]	; 0x11f64 <AesEncrypt_C+4128>
0x0001173c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1173c <AesEncrypt_C+2040>:	add	r3, r3, #768	; 0x300
0x00011740	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11740 <AesEncrypt_C+2044>:	ldr	r3, [r1, r3, lsl #2]
0x00011744	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11744 <AesEncrypt_C+2048>:	eor	r2, r2, r3
0x00011748	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11748 <AesEncrypt_C+2052>:	ldr	r3, [r11, #-12]
0x0001174c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1174c <AesEncrypt_C+2056>:	add	r3, r3, #68	; 0x44
0x00011750	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11750 <AesEncrypt_C+2060>:	ldr	r3, [r3]
0x00011754	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11754 <AesEncrypt_C+2064>:	eor	r3, r3, r2
0x00011758	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11758 <AesEncrypt_C+2068>:	str	r3, [r11, #-40]	; 0xffffffd8
0x0001175c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1175c <AesEncrypt_C+2072>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011760	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11760 <AesEncrypt_C+2076>:	lsr	r3, r3, #24
0x00011764	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11764 <AesEncrypt_C+2080>:	and	r3, r3, #255	; 0xff
0x00011768	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11768 <AesEncrypt_C+2084>:	mov	r2, r3
0x0001176c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1176c <AesEncrypt_C+2088>:	ldr	r3, [pc, #2032]	; 0x11f64 <AesEncrypt_C+4128>
0x00011770	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11770 <AesEncrypt_C+2092>:	ldr	r2, [r3, r2, lsl #2]
0x00011774	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11774 <AesEncrypt_C+2096>:	ldr	r3, [r11, #-16]
0x00011778	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11778 <AesEncrypt_C+2100>:	lsr	r3, r3, #16
0x0001177c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1177c <AesEncrypt_C+2104>:	and	r3, r3, #255	; 0xff
0x00011780	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11780 <AesEncrypt_C+2108>:	ldr	r1, [pc, #2012]	; 0x11f64 <AesEncrypt_C+4128>
0x00011784	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11784 <AesEncrypt_C+2112>:	add	r3, r3, #256	; 0x100
0x00011788	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11788 <AesEncrypt_C+2116>:	ldr	r3, [r1, r3, lsl #2]
0x0001178c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1178c <AesEncrypt_C+2120>:	eor	r2, r2, r3
0x00011790	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11790 <AesEncrypt_C+2124>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011794	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11794 <AesEncrypt_C+2128>:	lsr	r3, r3, #8
0x00011798	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11798 <AesEncrypt_C+2132>:	and	r3, r3, #255	; 0xff
0x0001179c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1179c <AesEncrypt_C+2136>:	ldr	r1, [pc, #1984]	; 0x11f64 <AesEncrypt_C+4128>
0x000117a0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117a0 <AesEncrypt_C+2140>:	add	r3, r3, #512	; 0x200
0x000117a4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117a4 <AesEncrypt_C+2144>:	ldr	r3, [r1, r3, lsl #2]
0x000117a8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117a8 <AesEncrypt_C+2148>:	eor	r2, r2, r3
0x000117ac	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117ac <AesEncrypt_C+2152>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000117b0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117b0 <AesEncrypt_C+2156>:	and	r3, r3, #255	; 0xff
0x000117b4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117b4 <AesEncrypt_C+2160>:	ldr	r1, [pc, #1960]	; 0x11f64 <AesEncrypt_C+4128>
0x000117b8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117b8 <AesEncrypt_C+2164>:	add	r3, r3, #768	; 0x300
0x000117bc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117bc <AesEncrypt_C+2168>:	ldr	r3, [r1, r3, lsl #2]
0x000117c0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117c0 <AesEncrypt_C+2172>:	eor	r2, r2, r3
0x000117c4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117c4 <AesEncrypt_C+2176>:	ldr	r3, [r11, #-12]
0x000117c8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117c8 <AesEncrypt_C+2180>:	add	r3, r3, #72	; 0x48
0x000117cc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117cc <AesEncrypt_C+2184>:	ldr	r3, [r3]
0x000117d0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117d0 <AesEncrypt_C+2188>:	eor	r3, r3, r2
0x000117d4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117d4 <AesEncrypt_C+2192>:	str	r3, [r11, #-36]	; 0xffffffdc
0x000117d8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117d8 <AesEncrypt_C+2196>:	ldr	r3, [r11, #-16]
0x000117dc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117dc <AesEncrypt_C+2200>:	lsr	r3, r3, #24
0x000117e0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117e0 <AesEncrypt_C+2204>:	and	r3, r3, #255	; 0xff
0x000117e4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117e4 <AesEncrypt_C+2208>:	mov	r2, r3
0x000117e8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117e8 <AesEncrypt_C+2212>:	ldr	r3, [pc, #1908]	; 0x11f64 <AesEncrypt_C+4128>
0x000117ec	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117ec <AesEncrypt_C+2216>:	ldr	r2, [r3, r2, lsl #2]
0x000117f0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117f0 <AesEncrypt_C+2220>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000117f4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117f4 <AesEncrypt_C+2224>:	lsr	r3, r3, #16
0x000117f8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117f8 <AesEncrypt_C+2228>:	and	r3, r3, #255	; 0xff
0x000117fc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x117fc <AesEncrypt_C+2232>:	ldr	r1, [pc, #1888]	; 0x11f64 <AesEncrypt_C+4128>
0x00011800	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11800 <AesEncrypt_C+2236>:	add	r3, r3, #256	; 0x100
0x00011804	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11804 <AesEncrypt_C+2240>:	ldr	r3, [r1, r3, lsl #2]
0x00011808	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11808 <AesEncrypt_C+2244>:	eor	r2, r2, r3
0x0001180c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1180c <AesEncrypt_C+2248>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011810	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11810 <AesEncrypt_C+2252>:	lsr	r3, r3, #8
0x00011814	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11814 <AesEncrypt_C+2256>:	and	r3, r3, #255	; 0xff
0x00011818	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11818 <AesEncrypt_C+2260>:	ldr	r1, [pc, #1860]	; 0x11f64 <AesEncrypt_C+4128>
0x0001181c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1181c <AesEncrypt_C+2264>:	add	r3, r3, #512	; 0x200
0x00011820	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11820 <AesEncrypt_C+2268>:	ldr	r3, [r1, r3, lsl #2]
0x00011824	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11824 <AesEncrypt_C+2272>:	eor	r2, r2, r3
0x00011828	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11828 <AesEncrypt_C+2276>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001182c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1182c <AesEncrypt_C+2280>:	and	r3, r3, #255	; 0xff
0x00011830	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11830 <AesEncrypt_C+2284>:	ldr	r1, [pc, #1836]	; 0x11f64 <AesEncrypt_C+4128>
0x00011834	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11834 <AesEncrypt_C+2288>:	add	r3, r3, #768	; 0x300
0x00011838	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11838 <AesEncrypt_C+2292>:	ldr	r3, [r1, r3, lsl #2]
0x0001183c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1183c <AesEncrypt_C+2296>:	eor	r2, r2, r3
0x00011840	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11840 <AesEncrypt_C+2300>:	ldr	r3, [r11, #-12]
0x00011844	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11844 <AesEncrypt_C+2304>:	add	r3, r3, #76	; 0x4c
0x00011848	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11848 <AesEncrypt_C+2308>:	ldr	r3, [r3]
0x0001184c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1184c <AesEncrypt_C+2312>:	eor	r3, r3, r2
0x00011850	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11850 <AesEncrypt_C+2316>:	str	r3, [r11, #-32]	; 0xffffffe0
2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11854 <AesEncrypt_C+2320>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011858	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11858 <AesEncrypt_C+2324>:	lsr	r3, r3, #24
0x0001185c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1185c <AesEncrypt_C+2328>:	and	r3, r3, #255	; 0xff
0x00011860	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11860 <AesEncrypt_C+2332>:	mov	r2, r3
0x00011864	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11864 <AesEncrypt_C+2336>:	ldr	r3, [pc, #1784]	; 0x11f64 <AesEncrypt_C+4128>
0x00011868	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11868 <AesEncrypt_C+2340>:	ldr	r2, [r3, r2, lsl #2]
0x0001186c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1186c <AesEncrypt_C+2344>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011870	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11870 <AesEncrypt_C+2348>:	lsr	r3, r3, #16
0x00011874	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11874 <AesEncrypt_C+2352>:	and	r3, r3, #255	; 0xff
0x00011878	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11878 <AesEncrypt_C+2356>:	ldr	r1, [pc, #1764]	; 0x11f64 <AesEncrypt_C+4128>
0x0001187c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1187c <AesEncrypt_C+2360>:	add	r3, r3, #256	; 0x100
0x00011880	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11880 <AesEncrypt_C+2364>:	ldr	r3, [r1, r3, lsl #2]
0x00011884	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11884 <AesEncrypt_C+2368>:	eor	r2, r2, r3
0x00011888	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11888 <AesEncrypt_C+2372>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x0001188c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1188c <AesEncrypt_C+2376>:	lsr	r3, r3, #8
0x00011890	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11890 <AesEncrypt_C+2380>:	and	r3, r3, #255	; 0xff
0x00011894	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11894 <AesEncrypt_C+2384>:	ldr	r1, [pc, #1736]	; 0x11f64 <AesEncrypt_C+4128>
0x00011898	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11898 <AesEncrypt_C+2388>:	add	r3, r3, #512	; 0x200
0x0001189c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1189c <AesEncrypt_C+2392>:	ldr	r3, [r1, r3, lsl #2]
0x000118a0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118a0 <AesEncrypt_C+2396>:	eor	r2, r2, r3
0x000118a4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118a4 <AesEncrypt_C+2400>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000118a8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118a8 <AesEncrypt_C+2404>:	and	r3, r3, #255	; 0xff
0x000118ac	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118ac <AesEncrypt_C+2408>:	ldr	r1, [pc, #1712]	; 0x11f64 <AesEncrypt_C+4128>
0x000118b0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118b0 <AesEncrypt_C+2412>:	add	r3, r3, #768	; 0x300
0x000118b4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118b4 <AesEncrypt_C+2416>:	ldr	r3, [r1, r3, lsl #2]
0x000118b8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118b8 <AesEncrypt_C+2420>:	eor	r2, r2, r3
0x000118bc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118bc <AesEncrypt_C+2424>:	ldr	r3, [r11, #-12]
0x000118c0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118c0 <AesEncrypt_C+2428>:	add	r3, r3, #80	; 0x50
0x000118c4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118c4 <AesEncrypt_C+2432>:	ldr	r3, [r3]
0x000118c8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118c8 <AesEncrypt_C+2436>:	eor	r3, r3, r2
0x000118cc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118cc <AesEncrypt_C+2440>:	str	r3, [r11, #-28]	; 0xffffffe4
0x000118d0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118d0 <AesEncrypt_C+2444>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000118d4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118d4 <AesEncrypt_C+2448>:	lsr	r3, r3, #24
0x000118d8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118d8 <AesEncrypt_C+2452>:	and	r3, r3, #255	; 0xff
0x000118dc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118dc <AesEncrypt_C+2456>:	mov	r2, r3
0x000118e0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118e0 <AesEncrypt_C+2460>:	ldr	r3, [pc, #1660]	; 0x11f64 <AesEncrypt_C+4128>
0x000118e4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118e4 <AesEncrypt_C+2464>:	ldr	r2, [r3, r2, lsl #2]
0x000118e8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118e8 <AesEncrypt_C+2468>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000118ec	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118ec <AesEncrypt_C+2472>:	lsr	r3, r3, #16
0x000118f0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118f0 <AesEncrypt_C+2476>:	and	r3, r3, #255	; 0xff
0x000118f4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118f4 <AesEncrypt_C+2480>:	ldr	r1, [pc, #1640]	; 0x11f64 <AesEncrypt_C+4128>
0x000118f8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118f8 <AesEncrypt_C+2484>:	add	r3, r3, #256	; 0x100
0x000118fc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x118fc <AesEncrypt_C+2488>:	ldr	r3, [r1, r3, lsl #2]
0x00011900	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11900 <AesEncrypt_C+2492>:	eor	r2, r2, r3
0x00011904	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11904 <AesEncrypt_C+2496>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011908	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11908 <AesEncrypt_C+2500>:	lsr	r3, r3, #8
0x0001190c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1190c <AesEncrypt_C+2504>:	and	r3, r3, #255	; 0xff
0x00011910	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11910 <AesEncrypt_C+2508>:	ldr	r1, [pc, #1612]	; 0x11f64 <AesEncrypt_C+4128>
0x00011914	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11914 <AesEncrypt_C+2512>:	add	r3, r3, #512	; 0x200
0x00011918	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11918 <AesEncrypt_C+2516>:	ldr	r3, [r1, r3, lsl #2]
0x0001191c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1191c <AesEncrypt_C+2520>:	eor	r2, r2, r3
0x00011920	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11920 <AesEncrypt_C+2524>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011924	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11924 <AesEncrypt_C+2528>:	and	r3, r3, #255	; 0xff
0x00011928	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11928 <AesEncrypt_C+2532>:	ldr	r1, [pc, #1588]	; 0x11f64 <AesEncrypt_C+4128>
0x0001192c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1192c <AesEncrypt_C+2536>:	add	r3, r3, #768	; 0x300
0x00011930	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11930 <AesEncrypt_C+2540>:	ldr	r3, [r1, r3, lsl #2]
0x00011934	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11934 <AesEncrypt_C+2544>:	eor	r2, r2, r3
0x00011938	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11938 <AesEncrypt_C+2548>:	ldr	r3, [r11, #-12]
0x0001193c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1193c <AesEncrypt_C+2552>:	add	r3, r3, #84	; 0x54
0x00011940	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11940 <AesEncrypt_C+2556>:	ldr	r3, [r3]
0x00011944	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11944 <AesEncrypt_C+2560>:	eor	r3, r3, r2
0x00011948	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11948 <AesEncrypt_C+2564>:	str	r3, [r11, #-24]	; 0xffffffe8
0x0001194c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1194c <AesEncrypt_C+2568>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011950	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11950 <AesEncrypt_C+2572>:	lsr	r3, r3, #24
0x00011954	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11954 <AesEncrypt_C+2576>:	and	r3, r3, #255	; 0xff
0x00011958	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11958 <AesEncrypt_C+2580>:	mov	r2, r3
0x0001195c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1195c <AesEncrypt_C+2584>:	ldr	r3, [pc, #1536]	; 0x11f64 <AesEncrypt_C+4128>
0x00011960	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11960 <AesEncrypt_C+2588>:	ldr	r2, [r3, r2, lsl #2]
0x00011964	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11964 <AesEncrypt_C+2592>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011968	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11968 <AesEncrypt_C+2596>:	lsr	r3, r3, #16
0x0001196c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1196c <AesEncrypt_C+2600>:	and	r3, r3, #255	; 0xff
0x00011970	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11970 <AesEncrypt_C+2604>:	ldr	r1, [pc, #1516]	; 0x11f64 <AesEncrypt_C+4128>
0x00011974	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11974 <AesEncrypt_C+2608>:	add	r3, r3, #256	; 0x100
0x00011978	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11978 <AesEncrypt_C+2612>:	ldr	r3, [r1, r3, lsl #2]
0x0001197c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1197c <AesEncrypt_C+2616>:	eor	r2, r2, r3
0x00011980	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11980 <AesEncrypt_C+2620>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011984	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11984 <AesEncrypt_C+2624>:	lsr	r3, r3, #8
0x00011988	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11988 <AesEncrypt_C+2628>:	and	r3, r3, #255	; 0xff
0x0001198c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1198c <AesEncrypt_C+2632>:	ldr	r1, [pc, #1488]	; 0x11f64 <AesEncrypt_C+4128>
0x00011990	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11990 <AesEncrypt_C+2636>:	add	r3, r3, #512	; 0x200
0x00011994	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11994 <AesEncrypt_C+2640>:	ldr	r3, [r1, r3, lsl #2]
0x00011998	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11998 <AesEncrypt_C+2644>:	eor	r2, r2, r3
0x0001199c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x1199c <AesEncrypt_C+2648>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000119a0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119a0 <AesEncrypt_C+2652>:	and	r3, r3, #255	; 0xff
0x000119a4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119a4 <AesEncrypt_C+2656>:	ldr	r1, [pc, #1464]	; 0x11f64 <AesEncrypt_C+4128>
0x000119a8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119a8 <AesEncrypt_C+2660>:	add	r3, r3, #768	; 0x300
0x000119ac	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119ac <AesEncrypt_C+2664>:	ldr	r3, [r1, r3, lsl #2]
0x000119b0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119b0 <AesEncrypt_C+2668>:	eor	r2, r2, r3
0x000119b4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119b4 <AesEncrypt_C+2672>:	ldr	r3, [r11, #-12]
0x000119b8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119b8 <AesEncrypt_C+2676>:	add	r3, r3, #88	; 0x58
0x000119bc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119bc <AesEncrypt_C+2680>:	ldr	r3, [r3]
0x000119c0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119c0 <AesEncrypt_C+2684>:	eor	r3, r3, r2
0x000119c4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119c4 <AesEncrypt_C+2688>:	str	r3, [r11, #-20]	; 0xffffffec
0x000119c8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119c8 <AesEncrypt_C+2692>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000119cc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119cc <AesEncrypt_C+2696>:	lsr	r3, r3, #24
0x000119d0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119d0 <AesEncrypt_C+2700>:	and	r3, r3, #255	; 0xff
0x000119d4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119d4 <AesEncrypt_C+2704>:	mov	r2, r3
0x000119d8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119d8 <AesEncrypt_C+2708>:	ldr	r3, [pc, #1412]	; 0x11f64 <AesEncrypt_C+4128>
0x000119dc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119dc <AesEncrypt_C+2712>:	ldr	r2, [r3, r2, lsl #2]
0x000119e0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119e0 <AesEncrypt_C+2716>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000119e4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119e4 <AesEncrypt_C+2720>:	lsr	r3, r3, #16
0x000119e8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119e8 <AesEncrypt_C+2724>:	and	r3, r3, #255	; 0xff
0x000119ec	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119ec <AesEncrypt_C+2728>:	ldr	r1, [pc, #1392]	; 0x11f64 <AesEncrypt_C+4128>
0x000119f0	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119f0 <AesEncrypt_C+2732>:	add	r3, r3, #256	; 0x100
0x000119f4	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119f4 <AesEncrypt_C+2736>:	ldr	r3, [r1, r3, lsl #2]
0x000119f8	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119f8 <AesEncrypt_C+2740>:	eor	r2, r2, r3
0x000119fc	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x119fc <AesEncrypt_C+2744>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011a00	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a00 <AesEncrypt_C+2748>:	lsr	r3, r3, #8
0x00011a04	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a04 <AesEncrypt_C+2752>:	and	r3, r3, #255	; 0xff
0x00011a08	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a08 <AesEncrypt_C+2756>:	ldr	r1, [pc, #1364]	; 0x11f64 <AesEncrypt_C+4128>
0x00011a0c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a0c <AesEncrypt_C+2760>:	add	r3, r3, #512	; 0x200
0x00011a10	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a10 <AesEncrypt_C+2764>:	ldr	r3, [r1, r3, lsl #2]
0x00011a14	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a14 <AesEncrypt_C+2768>:	eor	r2, r2, r3
0x00011a18	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a18 <AesEncrypt_C+2772>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011a1c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a1c <AesEncrypt_C+2776>:	and	r3, r3, #255	; 0xff
0x00011a20	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a20 <AesEncrypt_C+2780>:	ldr	r1, [pc, #1340]	; 0x11f64 <AesEncrypt_C+4128>
0x00011a24	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a24 <AesEncrypt_C+2784>:	add	r3, r3, #768	; 0x300
0x00011a28	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a28 <AesEncrypt_C+2788>:	ldr	r3, [r1, r3, lsl #2]
0x00011a2c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a2c <AesEncrypt_C+2792>:	eor	r2, r2, r3
0x00011a30	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a30 <AesEncrypt_C+2796>:	ldr	r3, [r11, #-12]
0x00011a34	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a34 <AesEncrypt_C+2800>:	add	r3, r3, #92	; 0x5c
0x00011a38	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a38 <AesEncrypt_C+2804>:	ldr	r3, [r3]
0x00011a3c	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a3c <AesEncrypt_C+2808>:	eor	r3, r3, r2
0x00011a40	2020	    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
=> 0x11a40 <AesEncrypt_C+2812>:	str	r3, [r11, #-16]
2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a44 <AesEncrypt_C+2816>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011a48	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a48 <AesEncrypt_C+2820>:	lsr	r3, r3, #24
0x00011a4c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a4c <AesEncrypt_C+2824>:	and	r3, r3, #255	; 0xff
0x00011a50	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a50 <AesEncrypt_C+2828>:	mov	r2, r3
0x00011a54	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a54 <AesEncrypt_C+2832>:	ldr	r3, [pc, #1288]	; 0x11f64 <AesEncrypt_C+4128>
0x00011a58	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a58 <AesEncrypt_C+2836>:	ldr	r2, [r3, r2, lsl #2]
0x00011a5c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a5c <AesEncrypt_C+2840>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011a60	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a60 <AesEncrypt_C+2844>:	lsr	r3, r3, #16
0x00011a64	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a64 <AesEncrypt_C+2848>:	and	r3, r3, #255	; 0xff
0x00011a68	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a68 <AesEncrypt_C+2852>:	ldr	r1, [pc, #1268]	; 0x11f64 <AesEncrypt_C+4128>
0x00011a6c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a6c <AesEncrypt_C+2856>:	add	r3, r3, #256	; 0x100
0x00011a70	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a70 <AesEncrypt_C+2860>:	ldr	r3, [r1, r3, lsl #2]
0x00011a74	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a74 <AesEncrypt_C+2864>:	eor	r2, r2, r3
0x00011a78	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a78 <AesEncrypt_C+2868>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011a7c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a7c <AesEncrypt_C+2872>:	lsr	r3, r3, #8
0x00011a80	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a80 <AesEncrypt_C+2876>:	and	r3, r3, #255	; 0xff
0x00011a84	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a84 <AesEncrypt_C+2880>:	ldr	r1, [pc, #1240]	; 0x11f64 <AesEncrypt_C+4128>
0x00011a88	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a88 <AesEncrypt_C+2884>:	add	r3, r3, #512	; 0x200
0x00011a8c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a8c <AesEncrypt_C+2888>:	ldr	r3, [r1, r3, lsl #2]
0x00011a90	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a90 <AesEncrypt_C+2892>:	eor	r2, r2, r3
0x00011a94	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a94 <AesEncrypt_C+2896>:	ldr	r3, [r11, #-16]
0x00011a98	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a98 <AesEncrypt_C+2900>:	and	r3, r3, #255	; 0xff
0x00011a9c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11a9c <AesEncrypt_C+2904>:	ldr	r1, [pc, #1216]	; 0x11f64 <AesEncrypt_C+4128>
0x00011aa0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11aa0 <AesEncrypt_C+2908>:	add	r3, r3, #768	; 0x300
0x00011aa4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11aa4 <AesEncrypt_C+2912>:	ldr	r3, [r1, r3, lsl #2]
0x00011aa8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11aa8 <AesEncrypt_C+2916>:	eor	r2, r2, r3
0x00011aac	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11aac <AesEncrypt_C+2920>:	ldr	r3, [r11, #-12]
0x00011ab0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ab0 <AesEncrypt_C+2924>:	add	r3, r3, #96	; 0x60
0x00011ab4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ab4 <AesEncrypt_C+2928>:	ldr	r3, [r3]
0x00011ab8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ab8 <AesEncrypt_C+2932>:	eor	r3, r3, r2
0x00011abc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11abc <AesEncrypt_C+2936>:	str	r3, [r11, #-44]	; 0xffffffd4
0x00011ac0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ac0 <AesEncrypt_C+2940>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011ac4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ac4 <AesEncrypt_C+2944>:	lsr	r3, r3, #24
0x00011ac8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ac8 <AesEncrypt_C+2948>:	and	r3, r3, #255	; 0xff
0x00011acc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11acc <AesEncrypt_C+2952>:	mov	r2, r3
0x00011ad0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ad0 <AesEncrypt_C+2956>:	ldr	r3, [pc, #1164]	; 0x11f64 <AesEncrypt_C+4128>
0x00011ad4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ad4 <AesEncrypt_C+2960>:	ldr	r2, [r3, r2, lsl #2]
0x00011ad8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ad8 <AesEncrypt_C+2964>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011adc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11adc <AesEncrypt_C+2968>:	lsr	r3, r3, #16
0x00011ae0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ae0 <AesEncrypt_C+2972>:	and	r3, r3, #255	; 0xff
0x00011ae4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ae4 <AesEncrypt_C+2976>:	ldr	r1, [pc, #1144]	; 0x11f64 <AesEncrypt_C+4128>
0x00011ae8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ae8 <AesEncrypt_C+2980>:	add	r3, r3, #256	; 0x100
0x00011aec	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11aec <AesEncrypt_C+2984>:	ldr	r3, [r1, r3, lsl #2]
0x00011af0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11af0 <AesEncrypt_C+2988>:	eor	r2, r2, r3
0x00011af4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11af4 <AesEncrypt_C+2992>:	ldr	r3, [r11, #-16]
0x00011af8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11af8 <AesEncrypt_C+2996>:	lsr	r3, r3, #8
0x00011afc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11afc <AesEncrypt_C+3000>:	and	r3, r3, #255	; 0xff
0x00011b00	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b00 <AesEncrypt_C+3004>:	ldr	r1, [pc, #1116]	; 0x11f64 <AesEncrypt_C+4128>
0x00011b04	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b04 <AesEncrypt_C+3008>:	add	r3, r3, #512	; 0x200
0x00011b08	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b08 <AesEncrypt_C+3012>:	ldr	r3, [r1, r3, lsl #2]
0x00011b0c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b0c <AesEncrypt_C+3016>:	eor	r2, r2, r3
0x00011b10	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b10 <AesEncrypt_C+3020>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011b14	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b14 <AesEncrypt_C+3024>:	and	r3, r3, #255	; 0xff
0x00011b18	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b18 <AesEncrypt_C+3028>:	ldr	r1, [pc, #1092]	; 0x11f64 <AesEncrypt_C+4128>
0x00011b1c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b1c <AesEncrypt_C+3032>:	add	r3, r3, #768	; 0x300
0x00011b20	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b20 <AesEncrypt_C+3036>:	ldr	r3, [r1, r3, lsl #2]
0x00011b24	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b24 <AesEncrypt_C+3040>:	eor	r2, r2, r3
0x00011b28	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b28 <AesEncrypt_C+3044>:	ldr	r3, [r11, #-12]
0x00011b2c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b2c <AesEncrypt_C+3048>:	add	r3, r3, #100	; 0x64
0x00011b30	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b30 <AesEncrypt_C+3052>:	ldr	r3, [r3]
0x00011b34	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b34 <AesEncrypt_C+3056>:	eor	r3, r3, r2
0x00011b38	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b38 <AesEncrypt_C+3060>:	str	r3, [r11, #-40]	; 0xffffffd8
0x00011b3c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b3c <AesEncrypt_C+3064>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011b40	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b40 <AesEncrypt_C+3068>:	lsr	r3, r3, #24
0x00011b44	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b44 <AesEncrypt_C+3072>:	and	r3, r3, #255	; 0xff
0x00011b48	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b48 <AesEncrypt_C+3076>:	mov	r2, r3
0x00011b4c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b4c <AesEncrypt_C+3080>:	ldr	r3, [pc, #1040]	; 0x11f64 <AesEncrypt_C+4128>
0x00011b50	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b50 <AesEncrypt_C+3084>:	ldr	r2, [r3, r2, lsl #2]
0x00011b54	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b54 <AesEncrypt_C+3088>:	ldr	r3, [r11, #-16]
0x00011b58	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b58 <AesEncrypt_C+3092>:	lsr	r3, r3, #16
0x00011b5c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b5c <AesEncrypt_C+3096>:	and	r3, r3, #255	; 0xff
0x00011b60	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b60 <AesEncrypt_C+3100>:	ldr	r1, [pc, #1020]	; 0x11f64 <AesEncrypt_C+4128>
0x00011b64	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b64 <AesEncrypt_C+3104>:	add	r3, r3, #256	; 0x100
0x00011b68	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b68 <AesEncrypt_C+3108>:	ldr	r3, [r1, r3, lsl #2]
0x00011b6c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b6c <AesEncrypt_C+3112>:	eor	r2, r2, r3
0x00011b70	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b70 <AesEncrypt_C+3116>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011b74	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b74 <AesEncrypt_C+3120>:	lsr	r3, r3, #8
0x00011b78	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b78 <AesEncrypt_C+3124>:	and	r3, r3, #255	; 0xff
0x00011b7c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b7c <AesEncrypt_C+3128>:	ldr	r1, [pc, #992]	; 0x11f64 <AesEncrypt_C+4128>
0x00011b80	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b80 <AesEncrypt_C+3132>:	add	r3, r3, #512	; 0x200
0x00011b84	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b84 <AesEncrypt_C+3136>:	ldr	r3, [r1, r3, lsl #2]
0x00011b88	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b88 <AesEncrypt_C+3140>:	eor	r2, r2, r3
0x00011b8c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b8c <AesEncrypt_C+3144>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011b90	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b90 <AesEncrypt_C+3148>:	and	r3, r3, #255	; 0xff
0x00011b94	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b94 <AesEncrypt_C+3152>:	ldr	r1, [pc, #968]	; 0x11f64 <AesEncrypt_C+4128>
0x00011b98	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b98 <AesEncrypt_C+3156>:	add	r3, r3, #768	; 0x300
0x00011b9c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11b9c <AesEncrypt_C+3160>:	ldr	r3, [r1, r3, lsl #2]
0x00011ba0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ba0 <AesEncrypt_C+3164>:	eor	r2, r2, r3
0x00011ba4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ba4 <AesEncrypt_C+3168>:	ldr	r3, [r11, #-12]
0x00011ba8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ba8 <AesEncrypt_C+3172>:	add	r3, r3, #104	; 0x68
0x00011bac	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bac <AesEncrypt_C+3176>:	ldr	r3, [r3]
0x00011bb0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bb0 <AesEncrypt_C+3180>:	eor	r3, r3, r2
0x00011bb4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bb4 <AesEncrypt_C+3184>:	str	r3, [r11, #-36]	; 0xffffffdc
0x00011bb8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bb8 <AesEncrypt_C+3188>:	ldr	r3, [r11, #-16]
0x00011bbc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bbc <AesEncrypt_C+3192>:	lsr	r3, r3, #24
0x00011bc0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bc0 <AesEncrypt_C+3196>:	and	r3, r3, #255	; 0xff
0x00011bc4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bc4 <AesEncrypt_C+3200>:	mov	r2, r3
0x00011bc8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bc8 <AesEncrypt_C+3204>:	ldr	r3, [pc, #916]	; 0x11f64 <AesEncrypt_C+4128>
0x00011bcc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bcc <AesEncrypt_C+3208>:	ldr	r2, [r3, r2, lsl #2]
0x00011bd0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bd0 <AesEncrypt_C+3212>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011bd4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bd4 <AesEncrypt_C+3216>:	lsr	r3, r3, #16
0x00011bd8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bd8 <AesEncrypt_C+3220>:	and	r3, r3, #255	; 0xff
0x00011bdc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bdc <AesEncrypt_C+3224>:	ldr	r1, [pc, #896]	; 0x11f64 <AesEncrypt_C+4128>
0x00011be0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11be0 <AesEncrypt_C+3228>:	add	r3, r3, #256	; 0x100
0x00011be4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11be4 <AesEncrypt_C+3232>:	ldr	r3, [r1, r3, lsl #2]
0x00011be8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11be8 <AesEncrypt_C+3236>:	eor	r2, r2, r3
0x00011bec	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bec <AesEncrypt_C+3240>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011bf0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bf0 <AesEncrypt_C+3244>:	lsr	r3, r3, #8
0x00011bf4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bf4 <AesEncrypt_C+3248>:	and	r3, r3, #255	; 0xff
0x00011bf8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bf8 <AesEncrypt_C+3252>:	ldr	r1, [pc, #868]	; 0x11f64 <AesEncrypt_C+4128>
0x00011bfc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11bfc <AesEncrypt_C+3256>:	add	r3, r3, #512	; 0x200
0x00011c00	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c00 <AesEncrypt_C+3260>:	ldr	r3, [r1, r3, lsl #2]
0x00011c04	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c04 <AesEncrypt_C+3264>:	eor	r2, r2, r3
0x00011c08	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c08 <AesEncrypt_C+3268>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011c0c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c0c <AesEncrypt_C+3272>:	and	r3, r3, #255	; 0xff
0x00011c10	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c10 <AesEncrypt_C+3276>:	ldr	r1, [pc, #844]	; 0x11f64 <AesEncrypt_C+4128>
0x00011c14	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c14 <AesEncrypt_C+3280>:	add	r3, r3, #768	; 0x300
0x00011c18	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c18 <AesEncrypt_C+3284>:	ldr	r3, [r1, r3, lsl #2]
0x00011c1c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c1c <AesEncrypt_C+3288>:	eor	r2, r2, r3
0x00011c20	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c20 <AesEncrypt_C+3292>:	ldr	r3, [r11, #-12]
0x00011c24	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c24 <AesEncrypt_C+3296>:	add	r3, r3, #108	; 0x6c
0x00011c28	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c28 <AesEncrypt_C+3300>:	ldr	r3, [r3]
0x00011c2c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c2c <AesEncrypt_C+3304>:	eor	r3, r3, r2
0x00011c30	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c30 <AesEncrypt_C+3308>:	str	r3, [r11, #-32]	; 0xffffffe0
2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c34 <AesEncrypt_C+3312>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011c38	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c38 <AesEncrypt_C+3316>:	lsr	r3, r3, #24
0x00011c3c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c3c <AesEncrypt_C+3320>:	and	r3, r3, #255	; 0xff
0x00011c40	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c40 <AesEncrypt_C+3324>:	mov	r2, r3
0x00011c44	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c44 <AesEncrypt_C+3328>:	ldr	r3, [pc, #792]	; 0x11f64 <AesEncrypt_C+4128>
0x00011c48	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c48 <AesEncrypt_C+3332>:	ldr	r2, [r3, r2, lsl #2]
0x00011c4c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c4c <AesEncrypt_C+3336>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011c50	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c50 <AesEncrypt_C+3340>:	lsr	r3, r3, #16
0x00011c54	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c54 <AesEncrypt_C+3344>:	and	r3, r3, #255	; 0xff
0x00011c58	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c58 <AesEncrypt_C+3348>:	ldr	r1, [pc, #772]	; 0x11f64 <AesEncrypt_C+4128>
0x00011c5c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c5c <AesEncrypt_C+3352>:	add	r3, r3, #256	; 0x100
0x00011c60	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c60 <AesEncrypt_C+3356>:	ldr	r3, [r1, r3, lsl #2]
0x00011c64	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c64 <AesEncrypt_C+3360>:	eor	r2, r2, r3
0x00011c68	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c68 <AesEncrypt_C+3364>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011c6c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c6c <AesEncrypt_C+3368>:	lsr	r3, r3, #8
0x00011c70	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c70 <AesEncrypt_C+3372>:	and	r3, r3, #255	; 0xff
0x00011c74	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c74 <AesEncrypt_C+3376>:	ldr	r1, [pc, #744]	; 0x11f64 <AesEncrypt_C+4128>
0x00011c78	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c78 <AesEncrypt_C+3380>:	add	r3, r3, #512	; 0x200
0x00011c7c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c7c <AesEncrypt_C+3384>:	ldr	r3, [r1, r3, lsl #2]
0x00011c80	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c80 <AesEncrypt_C+3388>:	eor	r2, r2, r3
0x00011c84	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c84 <AesEncrypt_C+3392>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011c88	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c88 <AesEncrypt_C+3396>:	and	r3, r3, #255	; 0xff
0x00011c8c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c8c <AesEncrypt_C+3400>:	ldr	r1, [pc, #720]	; 0x11f64 <AesEncrypt_C+4128>
0x00011c90	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c90 <AesEncrypt_C+3404>:	add	r3, r3, #768	; 0x300
0x00011c94	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c94 <AesEncrypt_C+3408>:	ldr	r3, [r1, r3, lsl #2]
0x00011c98	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c98 <AesEncrypt_C+3412>:	eor	r2, r2, r3
0x00011c9c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11c9c <AesEncrypt_C+3416>:	ldr	r3, [r11, #-12]
0x00011ca0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ca0 <AesEncrypt_C+3420>:	add	r3, r3, #112	; 0x70
0x00011ca4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ca4 <AesEncrypt_C+3424>:	ldr	r3, [r3]
0x00011ca8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ca8 <AesEncrypt_C+3428>:	eor	r3, r3, r2
0x00011cac	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cac <AesEncrypt_C+3432>:	str	r3, [r11, #-28]	; 0xffffffe4
0x00011cb0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cb0 <AesEncrypt_C+3436>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011cb4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cb4 <AesEncrypt_C+3440>:	lsr	r3, r3, #24
0x00011cb8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cb8 <AesEncrypt_C+3444>:	and	r3, r3, #255	; 0xff
0x00011cbc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cbc <AesEncrypt_C+3448>:	mov	r2, r3
0x00011cc0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cc0 <AesEncrypt_C+3452>:	ldr	r3, [pc, #668]	; 0x11f64 <AesEncrypt_C+4128>
0x00011cc4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cc4 <AesEncrypt_C+3456>:	ldr	r2, [r3, r2, lsl #2]
0x00011cc8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cc8 <AesEncrypt_C+3460>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011ccc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ccc <AesEncrypt_C+3464>:	lsr	r3, r3, #16
0x00011cd0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cd0 <AesEncrypt_C+3468>:	and	r3, r3, #255	; 0xff
0x00011cd4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cd4 <AesEncrypt_C+3472>:	ldr	r1, [pc, #648]	; 0x11f64 <AesEncrypt_C+4128>
0x00011cd8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cd8 <AesEncrypt_C+3476>:	add	r3, r3, #256	; 0x100
0x00011cdc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cdc <AesEncrypt_C+3480>:	ldr	r3, [r1, r3, lsl #2]
0x00011ce0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ce0 <AesEncrypt_C+3484>:	eor	r2, r2, r3
0x00011ce4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ce4 <AesEncrypt_C+3488>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011ce8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ce8 <AesEncrypt_C+3492>:	lsr	r3, r3, #8
0x00011cec	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cec <AesEncrypt_C+3496>:	and	r3, r3, #255	; 0xff
0x00011cf0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cf0 <AesEncrypt_C+3500>:	ldr	r1, [pc, #620]	; 0x11f64 <AesEncrypt_C+4128>
0x00011cf4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cf4 <AesEncrypt_C+3504>:	add	r3, r3, #512	; 0x200
0x00011cf8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cf8 <AesEncrypt_C+3508>:	ldr	r3, [r1, r3, lsl #2]
0x00011cfc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11cfc <AesEncrypt_C+3512>:	eor	r2, r2, r3
0x00011d00	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d00 <AesEncrypt_C+3516>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011d04	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d04 <AesEncrypt_C+3520>:	and	r3, r3, #255	; 0xff
0x00011d08	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d08 <AesEncrypt_C+3524>:	ldr	r1, [pc, #596]	; 0x11f64 <AesEncrypt_C+4128>
0x00011d0c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d0c <AesEncrypt_C+3528>:	add	r3, r3, #768	; 0x300
0x00011d10	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d10 <AesEncrypt_C+3532>:	ldr	r3, [r1, r3, lsl #2]
0x00011d14	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d14 <AesEncrypt_C+3536>:	eor	r2, r2, r3
0x00011d18	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d18 <AesEncrypt_C+3540>:	ldr	r3, [r11, #-12]
0x00011d1c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d1c <AesEncrypt_C+3544>:	add	r3, r3, #116	; 0x74
0x00011d20	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d20 <AesEncrypt_C+3548>:	ldr	r3, [r3]
0x00011d24	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d24 <AesEncrypt_C+3552>:	eor	r3, r3, r2
0x00011d28	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d28 <AesEncrypt_C+3556>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00011d2c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d2c <AesEncrypt_C+3560>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011d30	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d30 <AesEncrypt_C+3564>:	lsr	r3, r3, #24
0x00011d34	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d34 <AesEncrypt_C+3568>:	and	r3, r3, #255	; 0xff
0x00011d38	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d38 <AesEncrypt_C+3572>:	mov	r2, r3
0x00011d3c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d3c <AesEncrypt_C+3576>:	ldr	r3, [pc, #544]	; 0x11f64 <AesEncrypt_C+4128>
0x00011d40	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d40 <AesEncrypt_C+3580>:	ldr	r2, [r3, r2, lsl #2]
0x00011d44	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d44 <AesEncrypt_C+3584>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011d48	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d48 <AesEncrypt_C+3588>:	lsr	r3, r3, #16
0x00011d4c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d4c <AesEncrypt_C+3592>:	and	r3, r3, #255	; 0xff
0x00011d50	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d50 <AesEncrypt_C+3596>:	ldr	r1, [pc, #524]	; 0x11f64 <AesEncrypt_C+4128>
0x00011d54	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d54 <AesEncrypt_C+3600>:	add	r3, r3, #256	; 0x100
0x00011d58	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d58 <AesEncrypt_C+3604>:	ldr	r3, [r1, r3, lsl #2]
0x00011d5c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d5c <AesEncrypt_C+3608>:	eor	r2, r2, r3
0x00011d60	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d60 <AesEncrypt_C+3612>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011d64	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d64 <AesEncrypt_C+3616>:	lsr	r3, r3, #8
0x00011d68	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d68 <AesEncrypt_C+3620>:	and	r3, r3, #255	; 0xff
0x00011d6c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d6c <AesEncrypt_C+3624>:	ldr	r1, [pc, #496]	; 0x11f64 <AesEncrypt_C+4128>
0x00011d70	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d70 <AesEncrypt_C+3628>:	add	r3, r3, #512	; 0x200
0x00011d74	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d74 <AesEncrypt_C+3632>:	ldr	r3, [r1, r3, lsl #2]
0x00011d78	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d78 <AesEncrypt_C+3636>:	eor	r2, r2, r3
0x00011d7c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d7c <AesEncrypt_C+3640>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011d80	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d80 <AesEncrypt_C+3644>:	and	r3, r3, #255	; 0xff
0x00011d84	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d84 <AesEncrypt_C+3648>:	ldr	r1, [pc, #472]	; 0x11f64 <AesEncrypt_C+4128>
0x00011d88	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d88 <AesEncrypt_C+3652>:	add	r3, r3, #768	; 0x300
0x00011d8c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d8c <AesEncrypt_C+3656>:	ldr	r3, [r1, r3, lsl #2]
0x00011d90	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d90 <AesEncrypt_C+3660>:	eor	r2, r2, r3
0x00011d94	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d94 <AesEncrypt_C+3664>:	ldr	r3, [r11, #-12]
0x00011d98	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d98 <AesEncrypt_C+3668>:	add	r3, r3, #120	; 0x78
0x00011d9c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11d9c <AesEncrypt_C+3672>:	ldr	r3, [r3]
0x00011da0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11da0 <AesEncrypt_C+3676>:	eor	r3, r3, r2
0x00011da4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11da4 <AesEncrypt_C+3680>:	str	r3, [r11, #-20]	; 0xffffffec
0x00011da8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11da8 <AesEncrypt_C+3684>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00011dac	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dac <AesEncrypt_C+3688>:	lsr	r3, r3, #24
0x00011db0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11db0 <AesEncrypt_C+3692>:	and	r3, r3, #255	; 0xff
0x00011db4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11db4 <AesEncrypt_C+3696>:	mov	r2, r3
0x00011db8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11db8 <AesEncrypt_C+3700>:	ldr	r3, [pc, #420]	; 0x11f64 <AesEncrypt_C+4128>
0x00011dbc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dbc <AesEncrypt_C+3704>:	ldr	r2, [r3, r2, lsl #2]
0x00011dc0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dc0 <AesEncrypt_C+3708>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00011dc4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dc4 <AesEncrypt_C+3712>:	lsr	r3, r3, #16
0x00011dc8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dc8 <AesEncrypt_C+3716>:	and	r3, r3, #255	; 0xff
0x00011dcc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dcc <AesEncrypt_C+3720>:	ldr	r1, [pc, #400]	; 0x11f64 <AesEncrypt_C+4128>
0x00011dd0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dd0 <AesEncrypt_C+3724>:	add	r3, r3, #256	; 0x100
0x00011dd4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dd4 <AesEncrypt_C+3728>:	ldr	r3, [r1, r3, lsl #2]
0x00011dd8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dd8 <AesEncrypt_C+3732>:	eor	r2, r2, r3
0x00011ddc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11ddc <AesEncrypt_C+3736>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00011de0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11de0 <AesEncrypt_C+3740>:	lsr	r3, r3, #8
0x00011de4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11de4 <AesEncrypt_C+3744>:	and	r3, r3, #255	; 0xff
0x00011de8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11de8 <AesEncrypt_C+3748>:	ldr	r1, [pc, #372]	; 0x11f64 <AesEncrypt_C+4128>
0x00011dec	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dec <AesEncrypt_C+3752>:	add	r3, r3, #512	; 0x200
0x00011df0	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11df0 <AesEncrypt_C+3756>:	ldr	r3, [r1, r3, lsl #2]
0x00011df4	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11df4 <AesEncrypt_C+3760>:	eor	r2, r2, r3
0x00011df8	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11df8 <AesEncrypt_C+3764>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00011dfc	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11dfc <AesEncrypt_C+3768>:	and	r3, r3, #255	; 0xff
0x00011e00	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11e00 <AesEncrypt_C+3772>:	ldr	r1, [pc, #348]	; 0x11f64 <AesEncrypt_C+4128>
0x00011e04	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11e04 <AesEncrypt_C+3776>:	add	r3, r3, #768	; 0x300
0x00011e08	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11e08 <AesEncrypt_C+3780>:	ldr	r3, [r1, r3, lsl #2]
0x00011e0c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11e0c <AesEncrypt_C+3784>:	eor	r2, r2, r3
0x00011e10	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11e10 <AesEncrypt_C+3788>:	ldr	r3, [r11, #-12]
0x00011e14	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11e14 <AesEncrypt_C+3792>:	add	r3, r3, #124	; 0x7c
0x00011e18	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11e18 <AesEncrypt_C+3796>:	ldr	r3, [r3]
0x00011e1c	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11e1c <AesEncrypt_C+3800>:	eor	r3, r3, r2
0x00011e20	2021	    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
=> 0x11e20 <AesEncrypt_C+3804>:	str	r3, [r11, #-16]
2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e24 <AesEncrypt_C+3808>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011e28	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e28 <AesEncrypt_C+3812>:	lsr	r3, r3, #24
0x00011e2c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e2c <AesEncrypt_C+3816>:	and	r3, r3, #255	; 0xff
0x00011e30	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e30 <AesEncrypt_C+3820>:	mov	r2, r3
0x00011e34	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e34 <AesEncrypt_C+3824>:	ldr	r3, [pc, #296]	; 0x11f64 <AesEncrypt_C+4128>
0x00011e38	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e38 <AesEncrypt_C+3828>:	ldr	r2, [r3, r2, lsl #2]
0x00011e3c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e3c <AesEncrypt_C+3832>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011e40	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e40 <AesEncrypt_C+3836>:	lsr	r3, r3, #16
0x00011e44	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e44 <AesEncrypt_C+3840>:	and	r3, r3, #255	; 0xff
0x00011e48	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e48 <AesEncrypt_C+3844>:	ldr	r1, [pc, #276]	; 0x11f64 <AesEncrypt_C+4128>
0x00011e4c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e4c <AesEncrypt_C+3848>:	add	r3, r3, #256	; 0x100
0x00011e50	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e50 <AesEncrypt_C+3852>:	ldr	r3, [r1, r3, lsl #2]
0x00011e54	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e54 <AesEncrypt_C+3856>:	eor	r2, r2, r3
0x00011e58	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e58 <AesEncrypt_C+3860>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011e5c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e5c <AesEncrypt_C+3864>:	lsr	r3, r3, #8
0x00011e60	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e60 <AesEncrypt_C+3868>:	and	r3, r3, #255	; 0xff
0x00011e64	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e64 <AesEncrypt_C+3872>:	ldr	r1, [pc, #248]	; 0x11f64 <AesEncrypt_C+4128>
0x00011e68	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e68 <AesEncrypt_C+3876>:	add	r3, r3, #512	; 0x200
0x00011e6c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e6c <AesEncrypt_C+3880>:	ldr	r3, [r1, r3, lsl #2]
0x00011e70	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e70 <AesEncrypt_C+3884>:	eor	r2, r2, r3
0x00011e74	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e74 <AesEncrypt_C+3888>:	ldr	r3, [r11, #-16]
0x00011e78	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e78 <AesEncrypt_C+3892>:	and	r3, r3, #255	; 0xff
0x00011e7c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e7c <AesEncrypt_C+3896>:	ldr	r1, [pc, #224]	; 0x11f64 <AesEncrypt_C+4128>
0x00011e80	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e80 <AesEncrypt_C+3900>:	add	r3, r3, #768	; 0x300
0x00011e84	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e84 <AesEncrypt_C+3904>:	ldr	r3, [r1, r3, lsl #2]
0x00011e88	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e88 <AesEncrypt_C+3908>:	eor	r2, r2, r3
0x00011e8c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e8c <AesEncrypt_C+3912>:	ldr	r3, [r11, #-12]
0x00011e90	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e90 <AesEncrypt_C+3916>:	add	r3, r3, #128	; 0x80
0x00011e94	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e94 <AesEncrypt_C+3920>:	ldr	r3, [r3]
0x00011e98	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e98 <AesEncrypt_C+3924>:	eor	r3, r3, r2
0x00011e9c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11e9c <AesEncrypt_C+3928>:	str	r3, [r11, #-44]	; 0xffffffd4
0x00011ea0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ea0 <AesEncrypt_C+3932>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011ea4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ea4 <AesEncrypt_C+3936>:	lsr	r3, r3, #24
0x00011ea8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ea8 <AesEncrypt_C+3940>:	and	r3, r3, #255	; 0xff
0x00011eac	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11eac <AesEncrypt_C+3944>:	mov	r2, r3
0x00011eb0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11eb0 <AesEncrypt_C+3948>:	ldr	r3, [pc, #172]	; 0x11f64 <AesEncrypt_C+4128>
0x00011eb4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11eb4 <AesEncrypt_C+3952>:	ldr	r2, [r3, r2, lsl #2]
0x00011eb8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11eb8 <AesEncrypt_C+3956>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011ebc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ebc <AesEncrypt_C+3960>:	lsr	r3, r3, #16
0x00011ec0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ec0 <AesEncrypt_C+3964>:	and	r3, r3, #255	; 0xff
0x00011ec4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ec4 <AesEncrypt_C+3968>:	ldr	r1, [pc, #152]	; 0x11f64 <AesEncrypt_C+4128>
0x00011ec8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ec8 <AesEncrypt_C+3972>:	add	r3, r3, #256	; 0x100
0x00011ecc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ecc <AesEncrypt_C+3976>:	ldr	r3, [r1, r3, lsl #2]
0x00011ed0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ed0 <AesEncrypt_C+3980>:	eor	r2, r2, r3
0x00011ed4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ed4 <AesEncrypt_C+3984>:	ldr	r3, [r11, #-16]
0x00011ed8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ed8 <AesEncrypt_C+3988>:	lsr	r3, r3, #8
0x00011edc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11edc <AesEncrypt_C+3992>:	and	r3, r3, #255	; 0xff
0x00011ee0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ee0 <AesEncrypt_C+3996>:	ldr	r1, [pc, #124]	; 0x11f64 <AesEncrypt_C+4128>
0x00011ee4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ee4 <AesEncrypt_C+4000>:	add	r3, r3, #512	; 0x200
0x00011ee8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ee8 <AesEncrypt_C+4004>:	ldr	r3, [r1, r3, lsl #2]
0x00011eec	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11eec <AesEncrypt_C+4008>:	eor	r2, r2, r3
0x00011ef0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ef0 <AesEncrypt_C+4012>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011ef4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ef4 <AesEncrypt_C+4016>:	and	r3, r3, #255	; 0xff
0x00011ef8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ef8 <AesEncrypt_C+4020>:	ldr	r1, [pc, #100]	; 0x11f64 <AesEncrypt_C+4128>
0x00011efc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11efc <AesEncrypt_C+4024>:	add	r3, r3, #768	; 0x300
0x00011f00	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f00 <AesEncrypt_C+4028>:	ldr	r3, [r1, r3, lsl #2]
0x00011f04	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f04 <AesEncrypt_C+4032>:	eor	r2, r2, r3
0x00011f08	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f08 <AesEncrypt_C+4036>:	ldr	r3, [r11, #-12]
0x00011f0c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f0c <AesEncrypt_C+4040>:	add	r3, r3, #132	; 0x84
0x00011f10	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f10 <AesEncrypt_C+4044>:	ldr	r3, [r3]
0x00011f14	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f14 <AesEncrypt_C+4048>:	eor	r3, r3, r2
0x00011f18	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f18 <AesEncrypt_C+4052>:	str	r3, [r11, #-40]	; 0xffffffd8
0x00011f1c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f1c <AesEncrypt_C+4056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011f20	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f20 <AesEncrypt_C+4060>:	lsr	r3, r3, #24
0x00011f24	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f24 <AesEncrypt_C+4064>:	and	r3, r3, #255	; 0xff
0x00011f28	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f28 <AesEncrypt_C+4068>:	mov	r2, r3
0x00011f2c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f2c <AesEncrypt_C+4072>:	ldr	r3, [pc, #48]	; 0x11f64 <AesEncrypt_C+4128>
0x00011f30	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f30 <AesEncrypt_C+4076>:	ldr	r2, [r3, r2, lsl #2]
0x00011f34	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f34 <AesEncrypt_C+4080>:	ldr	r3, [r11, #-16]
0x00011f38	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f38 <AesEncrypt_C+4084>:	lsr	r3, r3, #16
0x00011f3c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f3c <AesEncrypt_C+4088>:	and	r3, r3, #255	; 0xff
0x00011f40	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f40 <AesEncrypt_C+4092>:	ldr	r1, [pc, #28]	; 0x11f64 <AesEncrypt_C+4128>
0x00011f44	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f44 <AesEncrypt_C+4096>:	add	r3, r3, #256	; 0x100
0x00011f48	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f48 <AesEncrypt_C+4100>:	ldr	r3, [r1, r3, lsl #2]
0x00011f4c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f4c <AesEncrypt_C+4104>:	eor	r2, r2, r3
0x00011f50	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f50 <AesEncrypt_C+4108>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011f54	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f54 <AesEncrypt_C+4112>:	lsr	r3, r3, #8
0x00011f58	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f58 <AesEncrypt_C+4116>:	and	r3, r3, #255	; 0xff
0x00011f5c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f5c <AesEncrypt_C+4120>:	b	0x11f6c <AesEncrypt_C+4136>
0x00011f6c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f6c <AesEncrypt_C+4136>:	ldr	r1, [pc, #-16]	; 0x11f64 <AesEncrypt_C+4128>
0x00011f70	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f70 <AesEncrypt_C+4140>:	add	r3, r3, #512	; 0x200
0x00011f74	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f74 <AesEncrypt_C+4144>:	ldr	r3, [r1, r3, lsl #2]
0x00011f78	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f78 <AesEncrypt_C+4148>:	eor	r2, r2, r3
0x00011f7c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f7c <AesEncrypt_C+4152>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011f80	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f80 <AesEncrypt_C+4156>:	and	r3, r3, #255	; 0xff
0x00011f84	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f84 <AesEncrypt_C+4160>:	ldr	r1, [pc, #-40]	; 0x11f64 <AesEncrypt_C+4128>
0x00011f88	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f88 <AesEncrypt_C+4164>:	add	r3, r3, #768	; 0x300
0x00011f8c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f8c <AesEncrypt_C+4168>:	ldr	r3, [r1, r3, lsl #2]
0x00011f90	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f90 <AesEncrypt_C+4172>:	eor	r2, r2, r3
0x00011f94	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f94 <AesEncrypt_C+4176>:	ldr	r3, [r11, #-12]
0x00011f98	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f98 <AesEncrypt_C+4180>:	add	r3, r3, #136	; 0x88
0x00011f9c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11f9c <AesEncrypt_C+4184>:	ldr	r3, [r3]
0x00011fa0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fa0 <AesEncrypt_C+4188>:	eor	r3, r3, r2
0x00011fa4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fa4 <AesEncrypt_C+4192>:	str	r3, [r11, #-36]	; 0xffffffdc
0x00011fa8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fa8 <AesEncrypt_C+4196>:	ldr	r3, [r11, #-16]
0x00011fac	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fac <AesEncrypt_C+4200>:	lsr	r3, r3, #24
0x00011fb0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fb0 <AesEncrypt_C+4204>:	and	r3, r3, #255	; 0xff
0x00011fb4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fb4 <AesEncrypt_C+4208>:	mov	r2, r3
0x00011fb8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fb8 <AesEncrypt_C+4212>:	ldr	r3, [pc, #-92]	; 0x11f64 <AesEncrypt_C+4128>
0x00011fbc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fbc <AesEncrypt_C+4216>:	ldr	r2, [r3, r2, lsl #2]
0x00011fc0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fc0 <AesEncrypt_C+4220>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011fc4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fc4 <AesEncrypt_C+4224>:	lsr	r3, r3, #16
0x00011fc8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fc8 <AesEncrypt_C+4228>:	and	r3, r3, #255	; 0xff
0x00011fcc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fcc <AesEncrypt_C+4232>:	ldr	r1, [pc, #-112]	; 0x11f64 <AesEncrypt_C+4128>
0x00011fd0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fd0 <AesEncrypt_C+4236>:	add	r3, r3, #256	; 0x100
0x00011fd4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fd4 <AesEncrypt_C+4240>:	ldr	r3, [r1, r3, lsl #2]
0x00011fd8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fd8 <AesEncrypt_C+4244>:	eor	r2, r2, r3
0x00011fdc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fdc <AesEncrypt_C+4248>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00011fe0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fe0 <AesEncrypt_C+4252>:	lsr	r3, r3, #8
0x00011fe4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fe4 <AesEncrypt_C+4256>:	and	r3, r3, #255	; 0xff
0x00011fe8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fe8 <AesEncrypt_C+4260>:	ldr	r1, [pc, #-140]	; 0x11f64 <AesEncrypt_C+4128>
0x00011fec	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11fec <AesEncrypt_C+4264>:	add	r3, r3, #512	; 0x200
0x00011ff0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ff0 <AesEncrypt_C+4268>:	ldr	r3, [r1, r3, lsl #2]
0x00011ff4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ff4 <AesEncrypt_C+4272>:	eor	r2, r2, r3
0x00011ff8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ff8 <AesEncrypt_C+4276>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011ffc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x11ffc <AesEncrypt_C+4280>:	and	r3, r3, #255	; 0xff
0x00012000	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12000 <AesEncrypt_C+4284>:	ldr	r1, [pc, #-164]	; 0x11f64 <AesEncrypt_C+4128>
0x00012004	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12004 <AesEncrypt_C+4288>:	add	r3, r3, #768	; 0x300
0x00012008	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12008 <AesEncrypt_C+4292>:	ldr	r3, [r1, r3, lsl #2]
0x0001200c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1200c <AesEncrypt_C+4296>:	eor	r2, r2, r3
0x00012010	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12010 <AesEncrypt_C+4300>:	ldr	r3, [r11, #-12]
0x00012014	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12014 <AesEncrypt_C+4304>:	add	r3, r3, #140	; 0x8c
0x00012018	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12018 <AesEncrypt_C+4308>:	ldr	r3, [r3]
0x0001201c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1201c <AesEncrypt_C+4312>:	eor	r3, r3, r2
0x00012020	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12020 <AesEncrypt_C+4316>:	str	r3, [r11, #-32]	; 0xffffffe0
2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12024 <AesEncrypt_C+4320>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012028	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12028 <AesEncrypt_C+4324>:	lsr	r3, r3, #24
0x0001202c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1202c <AesEncrypt_C+4328>:	and	r3, r3, #255	; 0xff
0x00012030	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12030 <AesEncrypt_C+4332>:	mov	r2, r3
0x00012034	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12034 <AesEncrypt_C+4336>:	ldr	r3, [pc, #-216]	; 0x11f64 <AesEncrypt_C+4128>
0x00012038	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12038 <AesEncrypt_C+4340>:	ldr	r2, [r3, r2, lsl #2]
0x0001203c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1203c <AesEncrypt_C+4344>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00012040	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12040 <AesEncrypt_C+4348>:	lsr	r3, r3, #16
0x00012044	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12044 <AesEncrypt_C+4352>:	and	r3, r3, #255	; 0xff
0x00012048	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12048 <AesEncrypt_C+4356>:	ldr	r1, [pc, #-236]	; 0x11f64 <AesEncrypt_C+4128>
0x0001204c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1204c <AesEncrypt_C+4360>:	add	r3, r3, #256	; 0x100
0x00012050	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12050 <AesEncrypt_C+4364>:	ldr	r3, [r1, r3, lsl #2]
0x00012054	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12054 <AesEncrypt_C+4368>:	eor	r2, r2, r3
0x00012058	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12058 <AesEncrypt_C+4372>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x0001205c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1205c <AesEncrypt_C+4376>:	lsr	r3, r3, #8
0x00012060	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12060 <AesEncrypt_C+4380>:	and	r3, r3, #255	; 0xff
0x00012064	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12064 <AesEncrypt_C+4384>:	ldr	r1, [pc, #-264]	; 0x11f64 <AesEncrypt_C+4128>
0x00012068	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12068 <AesEncrypt_C+4388>:	add	r3, r3, #512	; 0x200
0x0001206c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1206c <AesEncrypt_C+4392>:	ldr	r3, [r1, r3, lsl #2]
0x00012070	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12070 <AesEncrypt_C+4396>:	eor	r2, r2, r3
0x00012074	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12074 <AesEncrypt_C+4400>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012078	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12078 <AesEncrypt_C+4404>:	and	r3, r3, #255	; 0xff
0x0001207c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1207c <AesEncrypt_C+4408>:	ldr	r1, [pc, #-288]	; 0x11f64 <AesEncrypt_C+4128>
0x00012080	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12080 <AesEncrypt_C+4412>:	add	r3, r3, #768	; 0x300
0x00012084	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12084 <AesEncrypt_C+4416>:	ldr	r3, [r1, r3, lsl #2]
0x00012088	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12088 <AesEncrypt_C+4420>:	eor	r2, r2, r3
0x0001208c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1208c <AesEncrypt_C+4424>:	ldr	r3, [r11, #-12]
0x00012090	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12090 <AesEncrypt_C+4428>:	add	r3, r3, #144	; 0x90
0x00012094	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12094 <AesEncrypt_C+4432>:	ldr	r3, [r3]
0x00012098	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12098 <AesEncrypt_C+4436>:	eor	r3, r3, r2
0x0001209c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1209c <AesEncrypt_C+4440>:	str	r3, [r11, #-28]	; 0xffffffe4
0x000120a0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120a0 <AesEncrypt_C+4444>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000120a4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120a4 <AesEncrypt_C+4448>:	lsr	r3, r3, #24
0x000120a8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120a8 <AesEncrypt_C+4452>:	and	r3, r3, #255	; 0xff
0x000120ac	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120ac <AesEncrypt_C+4456>:	mov	r2, r3
0x000120b0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120b0 <AesEncrypt_C+4460>:	ldr	r3, [pc, #-340]	; 0x11f64 <AesEncrypt_C+4128>
0x000120b4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120b4 <AesEncrypt_C+4464>:	ldr	r2, [r3, r2, lsl #2]
0x000120b8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120b8 <AesEncrypt_C+4468>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000120bc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120bc <AesEncrypt_C+4472>:	lsr	r3, r3, #16
0x000120c0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120c0 <AesEncrypt_C+4476>:	and	r3, r3, #255	; 0xff
0x000120c4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120c4 <AesEncrypt_C+4480>:	ldr	r1, [pc, #-360]	; 0x11f64 <AesEncrypt_C+4128>
0x000120c8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120c8 <AesEncrypt_C+4484>:	add	r3, r3, #256	; 0x100
0x000120cc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120cc <AesEncrypt_C+4488>:	ldr	r3, [r1, r3, lsl #2]
0x000120d0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120d0 <AesEncrypt_C+4492>:	eor	r2, r2, r3
0x000120d4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120d4 <AesEncrypt_C+4496>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000120d8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120d8 <AesEncrypt_C+4500>:	lsr	r3, r3, #8
0x000120dc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120dc <AesEncrypt_C+4504>:	and	r3, r3, #255	; 0xff
0x000120e0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120e0 <AesEncrypt_C+4508>:	ldr	r1, [pc, #-388]	; 0x11f64 <AesEncrypt_C+4128>
0x000120e4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120e4 <AesEncrypt_C+4512>:	add	r3, r3, #512	; 0x200
0x000120e8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120e8 <AesEncrypt_C+4516>:	ldr	r3, [r1, r3, lsl #2]
0x000120ec	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120ec <AesEncrypt_C+4520>:	eor	r2, r2, r3
0x000120f0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120f0 <AesEncrypt_C+4524>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000120f4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120f4 <AesEncrypt_C+4528>:	and	r3, r3, #255	; 0xff
0x000120f8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120f8 <AesEncrypt_C+4532>:	ldr	r1, [pc, #-412]	; 0x11f64 <AesEncrypt_C+4128>
0x000120fc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x120fc <AesEncrypt_C+4536>:	add	r3, r3, #768	; 0x300
0x00012100	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12100 <AesEncrypt_C+4540>:	ldr	r3, [r1, r3, lsl #2]
0x00012104	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12104 <AesEncrypt_C+4544>:	eor	r2, r2, r3
0x00012108	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12108 <AesEncrypt_C+4548>:	ldr	r3, [r11, #-12]
0x0001210c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1210c <AesEncrypt_C+4552>:	add	r3, r3, #148	; 0x94
0x00012110	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12110 <AesEncrypt_C+4556>:	ldr	r3, [r3]
0x00012114	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12114 <AesEncrypt_C+4560>:	eor	r3, r3, r2
0x00012118	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12118 <AesEncrypt_C+4564>:	str	r3, [r11, #-24]	; 0xffffffe8
0x0001211c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1211c <AesEncrypt_C+4568>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00012120	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12120 <AesEncrypt_C+4572>:	lsr	r3, r3, #24
0x00012124	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12124 <AesEncrypt_C+4576>:	and	r3, r3, #255	; 0xff
0x00012128	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12128 <AesEncrypt_C+4580>:	mov	r2, r3
0x0001212c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1212c <AesEncrypt_C+4584>:	ldr	r3, [pc, #-464]	; 0x11f64 <AesEncrypt_C+4128>
0x00012130	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12130 <AesEncrypt_C+4588>:	ldr	r2, [r3, r2, lsl #2]
0x00012134	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12134 <AesEncrypt_C+4592>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012138	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12138 <AesEncrypt_C+4596>:	lsr	r3, r3, #16
0x0001213c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1213c <AesEncrypt_C+4600>:	and	r3, r3, #255	; 0xff
0x00012140	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12140 <AesEncrypt_C+4604>:	ldr	r1, [pc, #-484]	; 0x11f64 <AesEncrypt_C+4128>
0x00012144	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12144 <AesEncrypt_C+4608>:	add	r3, r3, #256	; 0x100
0x00012148	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12148 <AesEncrypt_C+4612>:	ldr	r3, [r1, r3, lsl #2]
0x0001214c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1214c <AesEncrypt_C+4616>:	eor	r2, r2, r3
0x00012150	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12150 <AesEncrypt_C+4620>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012154	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12154 <AesEncrypt_C+4624>:	lsr	r3, r3, #8
0x00012158	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12158 <AesEncrypt_C+4628>:	and	r3, r3, #255	; 0xff
0x0001215c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1215c <AesEncrypt_C+4632>:	ldr	r1, [pc, #-512]	; 0x11f64 <AesEncrypt_C+4128>
0x00012160	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12160 <AesEncrypt_C+4636>:	add	r3, r3, #512	; 0x200
0x00012164	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12164 <AesEncrypt_C+4640>:	ldr	r3, [r1, r3, lsl #2]
0x00012168	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12168 <AesEncrypt_C+4644>:	eor	r2, r2, r3
0x0001216c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1216c <AesEncrypt_C+4648>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00012170	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12170 <AesEncrypt_C+4652>:	and	r3, r3, #255	; 0xff
0x00012174	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12174 <AesEncrypt_C+4656>:	ldr	r1, [pc, #-536]	; 0x11f64 <AesEncrypt_C+4128>
0x00012178	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12178 <AesEncrypt_C+4660>:	add	r3, r3, #768	; 0x300
0x0001217c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1217c <AesEncrypt_C+4664>:	ldr	r3, [r1, r3, lsl #2]
0x00012180	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12180 <AesEncrypt_C+4668>:	eor	r2, r2, r3
0x00012184	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12184 <AesEncrypt_C+4672>:	ldr	r3, [r11, #-12]
0x00012188	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12188 <AesEncrypt_C+4676>:	add	r3, r3, #152	; 0x98
0x0001218c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1218c <AesEncrypt_C+4680>:	ldr	r3, [r3]
0x00012190	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12190 <AesEncrypt_C+4684>:	eor	r3, r3, r2
0x00012194	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12194 <AesEncrypt_C+4688>:	str	r3, [r11, #-20]	; 0xffffffec
0x00012198	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12198 <AesEncrypt_C+4692>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001219c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1219c <AesEncrypt_C+4696>:	lsr	r3, r3, #24
0x000121a0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121a0 <AesEncrypt_C+4700>:	and	r3, r3, #255	; 0xff
0x000121a4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121a4 <AesEncrypt_C+4704>:	mov	r2, r3
0x000121a8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121a8 <AesEncrypt_C+4708>:	ldr	r3, [pc, #-588]	; 0x11f64 <AesEncrypt_C+4128>
0x000121ac	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121ac <AesEncrypt_C+4712>:	ldr	r2, [r3, r2, lsl #2]
0x000121b0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121b0 <AesEncrypt_C+4716>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000121b4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121b4 <AesEncrypt_C+4720>:	lsr	r3, r3, #16
0x000121b8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121b8 <AesEncrypt_C+4724>:	and	r3, r3, #255	; 0xff
0x000121bc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121bc <AesEncrypt_C+4728>:	ldr	r1, [pc, #-608]	; 0x11f64 <AesEncrypt_C+4128>
0x000121c0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121c0 <AesEncrypt_C+4732>:	add	r3, r3, #256	; 0x100
0x000121c4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121c4 <AesEncrypt_C+4736>:	ldr	r3, [r1, r3, lsl #2]
0x000121c8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121c8 <AesEncrypt_C+4740>:	eor	r2, r2, r3
0x000121cc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121cc <AesEncrypt_C+4744>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000121d0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121d0 <AesEncrypt_C+4748>:	lsr	r3, r3, #8
0x000121d4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121d4 <AesEncrypt_C+4752>:	and	r3, r3, #255	; 0xff
0x000121d8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121d8 <AesEncrypt_C+4756>:	ldr	r1, [pc, #-636]	; 0x11f64 <AesEncrypt_C+4128>
0x000121dc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121dc <AesEncrypt_C+4760>:	add	r3, r3, #512	; 0x200
0x000121e0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121e0 <AesEncrypt_C+4764>:	ldr	r3, [r1, r3, lsl #2]
0x000121e4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121e4 <AesEncrypt_C+4768>:	eor	r2, r2, r3
0x000121e8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121e8 <AesEncrypt_C+4772>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000121ec	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121ec <AesEncrypt_C+4776>:	and	r3, r3, #255	; 0xff
0x000121f0	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121f0 <AesEncrypt_C+4780>:	ldr	r1, [pc, #-660]	; 0x11f64 <AesEncrypt_C+4128>
0x000121f4	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121f4 <AesEncrypt_C+4784>:	add	r3, r3, #768	; 0x300
0x000121f8	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121f8 <AesEncrypt_C+4788>:	ldr	r3, [r1, r3, lsl #2]
0x000121fc	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x121fc <AesEncrypt_C+4792>:	eor	r2, r2, r3
0x00012200	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12200 <AesEncrypt_C+4796>:	ldr	r3, [r11, #-12]
0x00012204	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12204 <AesEncrypt_C+4800>:	add	r3, r3, #156	; 0x9c
0x00012208	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12208 <AesEncrypt_C+4804>:	ldr	r3, [r3]
0x0001220c	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x1220c <AesEncrypt_C+4808>:	eor	r3, r3, r2
0x00012210	2022	    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
=> 0x12210 <AesEncrypt_C+4812>:	str	r3, [r11, #-16]
2023	    if (r > 5) {
=> 0x12214 <AesEncrypt_C+4816>:	ldr	r3, [r11, #-60]	; 0xffffffc4
0x00012218	2023	    if (r > 5) {
=> 0x12218 <AesEncrypt_C+4820>:	cmp	r3, #5
0x0001221c	2023	    if (r > 5) {
=> 0x1221c <AesEncrypt_C+4824>:	bls	0x129ec <AesEncrypt_C+6824>
2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12220 <AesEncrypt_C+4828>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00012224	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12224 <AesEncrypt_C+4832>:	lsr	r3, r3, #24
0x00012228	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12228 <AesEncrypt_C+4836>:	and	r3, r3, #255	; 0xff
0x0001222c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1222c <AesEncrypt_C+4840>:	mov	r2, r3
0x00012230	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12230 <AesEncrypt_C+4844>:	ldr	r3, [pc, #-724]	; 0x11f64 <AesEncrypt_C+4128>
0x00012234	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12234 <AesEncrypt_C+4848>:	ldr	r2, [r3, r2, lsl #2]
0x00012238	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12238 <AesEncrypt_C+4852>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001223c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1223c <AesEncrypt_C+4856>:	lsr	r3, r3, #16
0x00012240	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12240 <AesEncrypt_C+4860>:	and	r3, r3, #255	; 0xff
0x00012244	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12244 <AesEncrypt_C+4864>:	ldr	r1, [pc, #-744]	; 0x11f64 <AesEncrypt_C+4128>
0x00012248	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12248 <AesEncrypt_C+4868>:	add	r3, r3, #256	; 0x100
0x0001224c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1224c <AesEncrypt_C+4872>:	ldr	r3, [r1, r3, lsl #2]
0x00012250	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12250 <AesEncrypt_C+4876>:	eor	r2, r2, r3
0x00012254	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12254 <AesEncrypt_C+4880>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00012258	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12258 <AesEncrypt_C+4884>:	lsr	r3, r3, #8
0x0001225c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1225c <AesEncrypt_C+4888>:	and	r3, r3, #255	; 0xff
0x00012260	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12260 <AesEncrypt_C+4892>:	ldr	r1, [pc, #-772]	; 0x11f64 <AesEncrypt_C+4128>
0x00012264	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12264 <AesEncrypt_C+4896>:	add	r3, r3, #512	; 0x200
0x00012268	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12268 <AesEncrypt_C+4900>:	ldr	r3, [r1, r3, lsl #2]
0x0001226c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1226c <AesEncrypt_C+4904>:	eor	r2, r2, r3
0x00012270	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12270 <AesEncrypt_C+4908>:	ldr	r3, [r11, #-16]
0x00012274	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12274 <AesEncrypt_C+4912>:	and	r3, r3, #255	; 0xff
0x00012278	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12278 <AesEncrypt_C+4916>:	ldr	r1, [pc, #-796]	; 0x11f64 <AesEncrypt_C+4128>
0x0001227c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1227c <AesEncrypt_C+4920>:	add	r3, r3, #768	; 0x300
0x00012280	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12280 <AesEncrypt_C+4924>:	ldr	r3, [r1, r3, lsl #2]
0x00012284	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12284 <AesEncrypt_C+4928>:	eor	r2, r2, r3
0x00012288	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12288 <AesEncrypt_C+4932>:	ldr	r3, [r11, #-12]
0x0001228c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1228c <AesEncrypt_C+4936>:	add	r3, r3, #160	; 0xa0
0x00012290	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12290 <AesEncrypt_C+4940>:	ldr	r3, [r3]
0x00012294	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12294 <AesEncrypt_C+4944>:	eor	r3, r3, r2
0x00012298	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12298 <AesEncrypt_C+4948>:	str	r3, [r11, #-44]	; 0xffffffd4
0x0001229c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1229c <AesEncrypt_C+4952>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000122a0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122a0 <AesEncrypt_C+4956>:	lsr	r3, r3, #24
0x000122a4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122a4 <AesEncrypt_C+4960>:	and	r3, r3, #255	; 0xff
0x000122a8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122a8 <AesEncrypt_C+4964>:	mov	r2, r3
0x000122ac	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122ac <AesEncrypt_C+4968>:	ldr	r3, [pc, #-848]	; 0x11f64 <AesEncrypt_C+4128>
0x000122b0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122b0 <AesEncrypt_C+4972>:	ldr	r2, [r3, r2, lsl #2]
0x000122b4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122b4 <AesEncrypt_C+4976>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000122b8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122b8 <AesEncrypt_C+4980>:	lsr	r3, r3, #16
0x000122bc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122bc <AesEncrypt_C+4984>:	and	r3, r3, #255	; 0xff
0x000122c0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122c0 <AesEncrypt_C+4988>:	ldr	r1, [pc, #-868]	; 0x11f64 <AesEncrypt_C+4128>
0x000122c4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122c4 <AesEncrypt_C+4992>:	add	r3, r3, #256	; 0x100
0x000122c8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122c8 <AesEncrypt_C+4996>:	ldr	r3, [r1, r3, lsl #2]
0x000122cc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122cc <AesEncrypt_C+5000>:	eor	r2, r2, r3
0x000122d0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122d0 <AesEncrypt_C+5004>:	ldr	r3, [r11, #-16]
0x000122d4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122d4 <AesEncrypt_C+5008>:	lsr	r3, r3, #8
0x000122d8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122d8 <AesEncrypt_C+5012>:	and	r3, r3, #255	; 0xff
0x000122dc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122dc <AesEncrypt_C+5016>:	ldr	r1, [pc, #-896]	; 0x11f64 <AesEncrypt_C+4128>
0x000122e0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122e0 <AesEncrypt_C+5020>:	add	r3, r3, #512	; 0x200
0x000122e4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122e4 <AesEncrypt_C+5024>:	ldr	r3, [r1, r3, lsl #2]
0x000122e8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122e8 <AesEncrypt_C+5028>:	eor	r2, r2, r3
0x000122ec	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122ec <AesEncrypt_C+5032>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000122f0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122f0 <AesEncrypt_C+5036>:	and	r3, r3, #255	; 0xff
0x000122f4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122f4 <AesEncrypt_C+5040>:	ldr	r1, [pc, #-920]	; 0x11f64 <AesEncrypt_C+4128>
0x000122f8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122f8 <AesEncrypt_C+5044>:	add	r3, r3, #768	; 0x300
0x000122fc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x122fc <AesEncrypt_C+5048>:	ldr	r3, [r1, r3, lsl #2]
0x00012300	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12300 <AesEncrypt_C+5052>:	eor	r2, r2, r3
0x00012304	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12304 <AesEncrypt_C+5056>:	ldr	r3, [r11, #-12]
0x00012308	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12308 <AesEncrypt_C+5060>:	add	r3, r3, #164	; 0xa4
0x0001230c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1230c <AesEncrypt_C+5064>:	ldr	r3, [r3]
0x00012310	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12310 <AesEncrypt_C+5068>:	eor	r3, r3, r2
0x00012314	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12314 <AesEncrypt_C+5072>:	str	r3, [r11, #-40]	; 0xffffffd8
0x00012318	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12318 <AesEncrypt_C+5076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001231c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1231c <AesEncrypt_C+5080>:	lsr	r3, r3, #24
0x00012320	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12320 <AesEncrypt_C+5084>:	and	r3, r3, #255	; 0xff
0x00012324	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12324 <AesEncrypt_C+5088>:	mov	r2, r3
0x00012328	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12328 <AesEncrypt_C+5092>:	ldr	r3, [pc, #-972]	; 0x11f64 <AesEncrypt_C+4128>
0x0001232c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1232c <AesEncrypt_C+5096>:	ldr	r2, [r3, r2, lsl #2]
0x00012330	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12330 <AesEncrypt_C+5100>:	ldr	r3, [r11, #-16]
0x00012334	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12334 <AesEncrypt_C+5104>:	lsr	r3, r3, #16
0x00012338	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12338 <AesEncrypt_C+5108>:	and	r3, r3, #255	; 0xff
0x0001233c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1233c <AesEncrypt_C+5112>:	ldr	r1, [pc, #-992]	; 0x11f64 <AesEncrypt_C+4128>
0x00012340	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12340 <AesEncrypt_C+5116>:	add	r3, r3, #256	; 0x100
0x00012344	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12344 <AesEncrypt_C+5120>:	ldr	r3, [r1, r3, lsl #2]
0x00012348	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12348 <AesEncrypt_C+5124>:	eor	r2, r2, r3
0x0001234c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1234c <AesEncrypt_C+5128>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00012350	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12350 <AesEncrypt_C+5132>:	lsr	r3, r3, #8
0x00012354	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12354 <AesEncrypt_C+5136>:	and	r3, r3, #255	; 0xff
0x00012358	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12358 <AesEncrypt_C+5140>:	ldr	r1, [pc, #-1020]	; 0x11f64 <AesEncrypt_C+4128>
0x0001235c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1235c <AesEncrypt_C+5144>:	add	r3, r3, #512	; 0x200
0x00012360	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12360 <AesEncrypt_C+5148>:	ldr	r3, [r1, r3, lsl #2]
0x00012364	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12364 <AesEncrypt_C+5152>:	eor	r2, r2, r3
0x00012368	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12368 <AesEncrypt_C+5156>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001236c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1236c <AesEncrypt_C+5160>:	and	r3, r3, #255	; 0xff
0x00012370	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12370 <AesEncrypt_C+5164>:	ldr	r1, [pc, #-1044]	; 0x11f64 <AesEncrypt_C+4128>
0x00012374	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12374 <AesEncrypt_C+5168>:	add	r3, r3, #768	; 0x300
0x00012378	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12378 <AesEncrypt_C+5172>:	ldr	r3, [r1, r3, lsl #2]
0x0001237c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1237c <AesEncrypt_C+5176>:	eor	r2, r2, r3
0x00012380	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12380 <AesEncrypt_C+5180>:	ldr	r3, [r11, #-12]
0x00012384	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12384 <AesEncrypt_C+5184>:	add	r3, r3, #168	; 0xa8
0x00012388	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12388 <AesEncrypt_C+5188>:	ldr	r3, [r3]
0x0001238c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1238c <AesEncrypt_C+5192>:	eor	r3, r3, r2
0x00012390	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12390 <AesEncrypt_C+5196>:	str	r3, [r11, #-36]	; 0xffffffdc
0x00012394	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12394 <AesEncrypt_C+5200>:	ldr	r3, [r11, #-16]
0x00012398	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12398 <AesEncrypt_C+5204>:	lsr	r3, r3, #24
0x0001239c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1239c <AesEncrypt_C+5208>:	and	r3, r3, #255	; 0xff
0x000123a0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123a0 <AesEncrypt_C+5212>:	mov	r2, r3
0x000123a4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123a4 <AesEncrypt_C+5216>:	ldr	r3, [pc, #-1096]	; 0x11f64 <AesEncrypt_C+4128>
0x000123a8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123a8 <AesEncrypt_C+5220>:	ldr	r2, [r3, r2, lsl #2]
0x000123ac	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123ac <AesEncrypt_C+5224>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000123b0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123b0 <AesEncrypt_C+5228>:	lsr	r3, r3, #16
0x000123b4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123b4 <AesEncrypt_C+5232>:	and	r3, r3, #255	; 0xff
0x000123b8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123b8 <AesEncrypt_C+5236>:	ldr	r1, [pc, #-1116]	; 0x11f64 <AesEncrypt_C+4128>
0x000123bc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123bc <AesEncrypt_C+5240>:	add	r3, r3, #256	; 0x100
0x000123c0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123c0 <AesEncrypt_C+5244>:	ldr	r3, [r1, r3, lsl #2]
0x000123c4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123c4 <AesEncrypt_C+5248>:	eor	r2, r2, r3
0x000123c8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123c8 <AesEncrypt_C+5252>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000123cc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123cc <AesEncrypt_C+5256>:	lsr	r3, r3, #8
0x000123d0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123d0 <AesEncrypt_C+5260>:	and	r3, r3, #255	; 0xff
0x000123d4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123d4 <AesEncrypt_C+5264>:	ldr	r1, [pc, #-1144]	; 0x11f64 <AesEncrypt_C+4128>
0x000123d8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123d8 <AesEncrypt_C+5268>:	add	r3, r3, #512	; 0x200
0x000123dc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123dc <AesEncrypt_C+5272>:	ldr	r3, [r1, r3, lsl #2]
0x000123e0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123e0 <AesEncrypt_C+5276>:	eor	r2, r2, r3
0x000123e4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123e4 <AesEncrypt_C+5280>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000123e8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123e8 <AesEncrypt_C+5284>:	and	r3, r3, #255	; 0xff
0x000123ec	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123ec <AesEncrypt_C+5288>:	ldr	r1, [pc, #-1168]	; 0x11f64 <AesEncrypt_C+4128>
0x000123f0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123f0 <AesEncrypt_C+5292>:	add	r3, r3, #768	; 0x300
0x000123f4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123f4 <AesEncrypt_C+5296>:	ldr	r3, [r1, r3, lsl #2]
0x000123f8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123f8 <AesEncrypt_C+5300>:	eor	r2, r2, r3
0x000123fc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x123fc <AesEncrypt_C+5304>:	ldr	r3, [r11, #-12]
0x00012400	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12400 <AesEncrypt_C+5308>:	add	r3, r3, #172	; 0xac
0x00012404	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12404 <AesEncrypt_C+5312>:	ldr	r3, [r3]
0x00012408	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12408 <AesEncrypt_C+5316>:	eor	r3, r3, r2
0x0001240c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1240c <AesEncrypt_C+5320>:	str	r3, [r11, #-32]	; 0xffffffe0
2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12410 <AesEncrypt_C+5324>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012414	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12414 <AesEncrypt_C+5328>:	lsr	r3, r3, #24
0x00012418	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12418 <AesEncrypt_C+5332>:	and	r3, r3, #255	; 0xff
0x0001241c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1241c <AesEncrypt_C+5336>:	mov	r2, r3
0x00012420	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12420 <AesEncrypt_C+5340>:	ldr	r3, [pc, #-1220]	; 0x11f64 <AesEncrypt_C+4128>
0x00012424	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12424 <AesEncrypt_C+5344>:	ldr	r2, [r3, r2, lsl #2]
0x00012428	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12428 <AesEncrypt_C+5348>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x0001242c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1242c <AesEncrypt_C+5352>:	lsr	r3, r3, #16
0x00012430	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12430 <AesEncrypt_C+5356>:	and	r3, r3, #255	; 0xff
0x00012434	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12434 <AesEncrypt_C+5360>:	ldr	r1, [pc, #-1240]	; 0x11f64 <AesEncrypt_C+4128>
0x00012438	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12438 <AesEncrypt_C+5364>:	add	r3, r3, #256	; 0x100
0x0001243c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1243c <AesEncrypt_C+5368>:	ldr	r3, [r1, r3, lsl #2]
0x00012440	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12440 <AesEncrypt_C+5372>:	eor	r2, r2, r3
0x00012444	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12444 <AesEncrypt_C+5376>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00012448	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12448 <AesEncrypt_C+5380>:	lsr	r3, r3, #8
0x0001244c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1244c <AesEncrypt_C+5384>:	and	r3, r3, #255	; 0xff
0x00012450	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12450 <AesEncrypt_C+5388>:	ldr	r1, [pc, #-1268]	; 0x11f64 <AesEncrypt_C+4128>
0x00012454	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12454 <AesEncrypt_C+5392>:	add	r3, r3, #512	; 0x200
0x00012458	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12458 <AesEncrypt_C+5396>:	ldr	r3, [r1, r3, lsl #2]
0x0001245c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1245c <AesEncrypt_C+5400>:	eor	r2, r2, r3
0x00012460	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12460 <AesEncrypt_C+5404>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012464	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12464 <AesEncrypt_C+5408>:	and	r3, r3, #255	; 0xff
0x00012468	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12468 <AesEncrypt_C+5412>:	ldr	r1, [pc, #-1292]	; 0x11f64 <AesEncrypt_C+4128>
0x0001246c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1246c <AesEncrypt_C+5416>:	add	r3, r3, #768	; 0x300
0x00012470	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12470 <AesEncrypt_C+5420>:	ldr	r3, [r1, r3, lsl #2]
0x00012474	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12474 <AesEncrypt_C+5424>:	eor	r2, r2, r3
0x00012478	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12478 <AesEncrypt_C+5428>:	ldr	r3, [r11, #-12]
0x0001247c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1247c <AesEncrypt_C+5432>:	add	r3, r3, #176	; 0xb0
0x00012480	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12480 <AesEncrypt_C+5436>:	ldr	r3, [r3]
0x00012484	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12484 <AesEncrypt_C+5440>:	eor	r3, r3, r2
0x00012488	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12488 <AesEncrypt_C+5444>:	str	r3, [r11, #-28]	; 0xffffffe4
0x0001248c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1248c <AesEncrypt_C+5448>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00012490	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12490 <AesEncrypt_C+5452>:	lsr	r3, r3, #24
0x00012494	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12494 <AesEncrypt_C+5456>:	and	r3, r3, #255	; 0xff
0x00012498	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12498 <AesEncrypt_C+5460>:	mov	r2, r3
0x0001249c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1249c <AesEncrypt_C+5464>:	ldr	r3, [pc, #-1344]	; 0x11f64 <AesEncrypt_C+4128>
0x000124a0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124a0 <AesEncrypt_C+5468>:	ldr	r2, [r3, r2, lsl #2]
0x000124a4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124a4 <AesEncrypt_C+5472>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000124a8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124a8 <AesEncrypt_C+5476>:	lsr	r3, r3, #16
0x000124ac	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124ac <AesEncrypt_C+5480>:	and	r3, r3, #255	; 0xff
0x000124b0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124b0 <AesEncrypt_C+5484>:	ldr	r1, [pc, #-1364]	; 0x11f64 <AesEncrypt_C+4128>
0x000124b4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124b4 <AesEncrypt_C+5488>:	add	r3, r3, #256	; 0x100
0x000124b8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124b8 <AesEncrypt_C+5492>:	ldr	r3, [r1, r3, lsl #2]
0x000124bc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124bc <AesEncrypt_C+5496>:	eor	r2, r2, r3
0x000124c0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124c0 <AesEncrypt_C+5500>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000124c4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124c4 <AesEncrypt_C+5504>:	lsr	r3, r3, #8
0x000124c8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124c8 <AesEncrypt_C+5508>:	and	r3, r3, #255	; 0xff
0x000124cc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124cc <AesEncrypt_C+5512>:	ldr	r1, [pc, #-1392]	; 0x11f64 <AesEncrypt_C+4128>
0x000124d0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124d0 <AesEncrypt_C+5516>:	add	r3, r3, #512	; 0x200
0x000124d4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124d4 <AesEncrypt_C+5520>:	ldr	r3, [r1, r3, lsl #2]
0x000124d8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124d8 <AesEncrypt_C+5524>:	eor	r2, r2, r3
0x000124dc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124dc <AesEncrypt_C+5528>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000124e0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124e0 <AesEncrypt_C+5532>:	and	r3, r3, #255	; 0xff
0x000124e4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124e4 <AesEncrypt_C+5536>:	ldr	r1, [pc, #-1416]	; 0x11f64 <AesEncrypt_C+4128>
0x000124e8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124e8 <AesEncrypt_C+5540>:	add	r3, r3, #768	; 0x300
0x000124ec	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124ec <AesEncrypt_C+5544>:	ldr	r3, [r1, r3, lsl #2]
0x000124f0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124f0 <AesEncrypt_C+5548>:	eor	r2, r2, r3
0x000124f4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124f4 <AesEncrypt_C+5552>:	ldr	r3, [r11, #-12]
0x000124f8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124f8 <AesEncrypt_C+5556>:	add	r3, r3, #180	; 0xb4
0x000124fc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x124fc <AesEncrypt_C+5560>:	ldr	r3, [r3]
0x00012500	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12500 <AesEncrypt_C+5564>:	eor	r3, r3, r2
0x00012504	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12504 <AesEncrypt_C+5568>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00012508	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12508 <AesEncrypt_C+5572>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x0001250c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1250c <AesEncrypt_C+5576>:	lsr	r3, r3, #24
0x00012510	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12510 <AesEncrypt_C+5580>:	and	r3, r3, #255	; 0xff
0x00012514	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12514 <AesEncrypt_C+5584>:	mov	r2, r3
0x00012518	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12518 <AesEncrypt_C+5588>:	ldr	r3, [pc, #-1468]	; 0x11f64 <AesEncrypt_C+4128>
0x0001251c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1251c <AesEncrypt_C+5592>:	ldr	r2, [r3, r2, lsl #2]
0x00012520	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12520 <AesEncrypt_C+5596>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012524	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12524 <AesEncrypt_C+5600>:	lsr	r3, r3, #16
0x00012528	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12528 <AesEncrypt_C+5604>:	and	r3, r3, #255	; 0xff
0x0001252c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1252c <AesEncrypt_C+5608>:	ldr	r1, [pc, #-1488]	; 0x11f64 <AesEncrypt_C+4128>
0x00012530	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12530 <AesEncrypt_C+5612>:	add	r3, r3, #256	; 0x100
0x00012534	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12534 <AesEncrypt_C+5616>:	ldr	r3, [r1, r3, lsl #2]
0x00012538	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12538 <AesEncrypt_C+5620>:	eor	r2, r2, r3
0x0001253c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1253c <AesEncrypt_C+5624>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012540	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12540 <AesEncrypt_C+5628>:	lsr	r3, r3, #8
0x00012544	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12544 <AesEncrypt_C+5632>:	and	r3, r3, #255	; 0xff
0x00012548	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12548 <AesEncrypt_C+5636>:	ldr	r1, [pc, #-1516]	; 0x11f64 <AesEncrypt_C+4128>
0x0001254c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1254c <AesEncrypt_C+5640>:	add	r3, r3, #512	; 0x200
0x00012550	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12550 <AesEncrypt_C+5644>:	ldr	r3, [r1, r3, lsl #2]
0x00012554	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12554 <AesEncrypt_C+5648>:	eor	r2, r2, r3
0x00012558	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12558 <AesEncrypt_C+5652>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x0001255c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1255c <AesEncrypt_C+5656>:	and	r3, r3, #255	; 0xff
0x00012560	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12560 <AesEncrypt_C+5660>:	ldr	r1, [pc, #-1540]	; 0x11f64 <AesEncrypt_C+4128>
0x00012564	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12564 <AesEncrypt_C+5664>:	add	r3, r3, #768	; 0x300
0x00012568	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12568 <AesEncrypt_C+5668>:	ldr	r3, [r1, r3, lsl #2]
0x0001256c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1256c <AesEncrypt_C+5672>:	eor	r2, r2, r3
0x00012570	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12570 <AesEncrypt_C+5676>:	ldr	r3, [r11, #-12]
0x00012574	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12574 <AesEncrypt_C+5680>:	add	r3, r3, #184	; 0xb8
0x00012578	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12578 <AesEncrypt_C+5684>:	ldr	r3, [r3]
0x0001257c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1257c <AesEncrypt_C+5688>:	eor	r3, r3, r2
0x00012580	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12580 <AesEncrypt_C+5692>:	str	r3, [r11, #-20]	; 0xffffffec
0x00012584	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12584 <AesEncrypt_C+5696>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012588	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12588 <AesEncrypt_C+5700>:	lsr	r3, r3, #24
0x0001258c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1258c <AesEncrypt_C+5704>:	and	r3, r3, #255	; 0xff
0x00012590	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12590 <AesEncrypt_C+5708>:	mov	r2, r3
0x00012594	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12594 <AesEncrypt_C+5712>:	ldr	r3, [pc, #-1592]	; 0x11f64 <AesEncrypt_C+4128>
0x00012598	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x12598 <AesEncrypt_C+5716>:	ldr	r2, [r3, r2, lsl #2]
0x0001259c	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x1259c <AesEncrypt_C+5720>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000125a0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125a0 <AesEncrypt_C+5724>:	lsr	r3, r3, #16
0x000125a4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125a4 <AesEncrypt_C+5728>:	and	r3, r3, #255	; 0xff
0x000125a8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125a8 <AesEncrypt_C+5732>:	ldr	r1, [pc, #-1612]	; 0x11f64 <AesEncrypt_C+4128>
0x000125ac	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125ac <AesEncrypt_C+5736>:	add	r3, r3, #256	; 0x100
0x000125b0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125b0 <AesEncrypt_C+5740>:	ldr	r3, [r1, r3, lsl #2]
0x000125b4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125b4 <AesEncrypt_C+5744>:	eor	r2, r2, r3
0x000125b8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125b8 <AesEncrypt_C+5748>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000125bc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125bc <AesEncrypt_C+5752>:	lsr	r3, r3, #8
0x000125c0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125c0 <AesEncrypt_C+5756>:	and	r3, r3, #255	; 0xff
0x000125c4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125c4 <AesEncrypt_C+5760>:	ldr	r1, [pc, #-1640]	; 0x11f64 <AesEncrypt_C+4128>
0x000125c8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125c8 <AesEncrypt_C+5764>:	add	r3, r3, #512	; 0x200
0x000125cc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125cc <AesEncrypt_C+5768>:	ldr	r3, [r1, r3, lsl #2]
0x000125d0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125d0 <AesEncrypt_C+5772>:	eor	r2, r2, r3
0x000125d4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125d4 <AesEncrypt_C+5776>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000125d8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125d8 <AesEncrypt_C+5780>:	and	r3, r3, #255	; 0xff
0x000125dc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125dc <AesEncrypt_C+5784>:	ldr	r1, [pc, #-1664]	; 0x11f64 <AesEncrypt_C+4128>
0x000125e0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125e0 <AesEncrypt_C+5788>:	add	r3, r3, #768	; 0x300
0x000125e4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125e4 <AesEncrypt_C+5792>:	ldr	r3, [r1, r3, lsl #2]
0x000125e8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125e8 <AesEncrypt_C+5796>:	eor	r2, r2, r3
0x000125ec	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125ec <AesEncrypt_C+5800>:	ldr	r3, [r11, #-12]
0x000125f0	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125f0 <AesEncrypt_C+5804>:	add	r3, r3, #188	; 0xbc
0x000125f4	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125f4 <AesEncrypt_C+5808>:	ldr	r3, [r3]
0x000125f8	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125f8 <AesEncrypt_C+5812>:	eor	r3, r3, r2
0x000125fc	2024	        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
=> 0x125fc <AesEncrypt_C+5816>:	str	r3, [r11, #-16]
2025	        if (r > 6) {
=> 0x12600 <AesEncrypt_C+5820>:	ldr	r3, [r11, #-60]	; 0xffffffc4
0x00012604	2025	        if (r > 6) {
=> 0x12604 <AesEncrypt_C+5824>:	cmp	r3, #6
0x00012608	2025	        if (r > 6) {
=> 0x12608 <AesEncrypt_C+5828>:	bls	0x129ec <AesEncrypt_C+6824>
2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1260c <AesEncrypt_C+5832>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00012610	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12610 <AesEncrypt_C+5836>:	lsr	r3, r3, #24
0x00012614	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12614 <AesEncrypt_C+5840>:	and	r3, r3, #255	; 0xff
0x00012618	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12618 <AesEncrypt_C+5844>:	mov	r2, r3
0x0001261c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1261c <AesEncrypt_C+5848>:	ldr	r3, [pc, #-1728]	; 0x11f64 <AesEncrypt_C+4128>
0x00012620	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12620 <AesEncrypt_C+5852>:	ldr	r2, [r3, r2, lsl #2]
0x00012624	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12624 <AesEncrypt_C+5856>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00012628	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12628 <AesEncrypt_C+5860>:	lsr	r3, r3, #16
0x0001262c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1262c <AesEncrypt_C+5864>:	and	r3, r3, #255	; 0xff
0x00012630	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12630 <AesEncrypt_C+5868>:	ldr	r1, [pc, #-1748]	; 0x11f64 <AesEncrypt_C+4128>
0x00012634	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12634 <AesEncrypt_C+5872>:	add	r3, r3, #256	; 0x100
0x00012638	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12638 <AesEncrypt_C+5876>:	ldr	r3, [r1, r3, lsl #2]
0x0001263c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1263c <AesEncrypt_C+5880>:	eor	r2, r2, r3
0x00012640	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12640 <AesEncrypt_C+5884>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00012644	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12644 <AesEncrypt_C+5888>:	lsr	r3, r3, #8
0x00012648	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12648 <AesEncrypt_C+5892>:	and	r3, r3, #255	; 0xff
0x0001264c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1264c <AesEncrypt_C+5896>:	ldr	r1, [pc, #-1776]	; 0x11f64 <AesEncrypt_C+4128>
0x00012650	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12650 <AesEncrypt_C+5900>:	add	r3, r3, #512	; 0x200
0x00012654	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12654 <AesEncrypt_C+5904>:	ldr	r3, [r1, r3, lsl #2]
0x00012658	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12658 <AesEncrypt_C+5908>:	eor	r2, r2, r3
0x0001265c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1265c <AesEncrypt_C+5912>:	ldr	r3, [r11, #-16]
0x00012660	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12660 <AesEncrypt_C+5916>:	and	r3, r3, #255	; 0xff
0x00012664	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12664 <AesEncrypt_C+5920>:	ldr	r1, [pc, #-1800]	; 0x11f64 <AesEncrypt_C+4128>
0x00012668	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12668 <AesEncrypt_C+5924>:	add	r3, r3, #768	; 0x300
0x0001266c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1266c <AesEncrypt_C+5928>:	ldr	r3, [r1, r3, lsl #2]
0x00012670	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12670 <AesEncrypt_C+5932>:	eor	r2, r2, r3
0x00012674	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12674 <AesEncrypt_C+5936>:	ldr	r3, [r11, #-12]
0x00012678	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12678 <AesEncrypt_C+5940>:	add	r3, r3, #192	; 0xc0
0x0001267c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1267c <AesEncrypt_C+5944>:	ldr	r3, [r3]
0x00012680	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12680 <AesEncrypt_C+5948>:	eor	r3, r3, r2
0x00012684	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12684 <AesEncrypt_C+5952>:	str	r3, [r11, #-44]	; 0xffffffd4
0x00012688	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12688 <AesEncrypt_C+5956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001268c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1268c <AesEncrypt_C+5960>:	lsr	r3, r3, #24
0x00012690	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12690 <AesEncrypt_C+5964>:	and	r3, r3, #255	; 0xff
0x00012694	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12694 <AesEncrypt_C+5968>:	mov	r2, r3
0x00012698	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12698 <AesEncrypt_C+5972>:	ldr	r3, [pc, #-1852]	; 0x11f64 <AesEncrypt_C+4128>
0x0001269c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1269c <AesEncrypt_C+5976>:	ldr	r2, [r3, r2, lsl #2]
0x000126a0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126a0 <AesEncrypt_C+5980>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000126a4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126a4 <AesEncrypt_C+5984>:	lsr	r3, r3, #16
0x000126a8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126a8 <AesEncrypt_C+5988>:	and	r3, r3, #255	; 0xff
0x000126ac	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126ac <AesEncrypt_C+5992>:	ldr	r1, [pc, #-1872]	; 0x11f64 <AesEncrypt_C+4128>
0x000126b0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126b0 <AesEncrypt_C+5996>:	add	r3, r3, #256	; 0x100
0x000126b4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126b4 <AesEncrypt_C+6000>:	ldr	r3, [r1, r3, lsl #2]
0x000126b8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126b8 <AesEncrypt_C+6004>:	eor	r2, r2, r3
0x000126bc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126bc <AesEncrypt_C+6008>:	ldr	r3, [r11, #-16]
0x000126c0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126c0 <AesEncrypt_C+6012>:	lsr	r3, r3, #8
0x000126c4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126c4 <AesEncrypt_C+6016>:	and	r3, r3, #255	; 0xff
0x000126c8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126c8 <AesEncrypt_C+6020>:	ldr	r1, [pc, #-1900]	; 0x11f64 <AesEncrypt_C+4128>
0x000126cc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126cc <AesEncrypt_C+6024>:	add	r3, r3, #512	; 0x200
0x000126d0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126d0 <AesEncrypt_C+6028>:	ldr	r3, [r1, r3, lsl #2]
0x000126d4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126d4 <AesEncrypt_C+6032>:	eor	r2, r2, r3
0x000126d8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126d8 <AesEncrypt_C+6036>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000126dc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126dc <AesEncrypt_C+6040>:	and	r3, r3, #255	; 0xff
0x000126e0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126e0 <AesEncrypt_C+6044>:	ldr	r1, [pc, #-1924]	; 0x11f64 <AesEncrypt_C+4128>
0x000126e4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126e4 <AesEncrypt_C+6048>:	add	r3, r3, #768	; 0x300
0x000126e8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126e8 <AesEncrypt_C+6052>:	ldr	r3, [r1, r3, lsl #2]
0x000126ec	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126ec <AesEncrypt_C+6056>:	eor	r2, r2, r3
0x000126f0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126f0 <AesEncrypt_C+6060>:	ldr	r3, [r11, #-12]
0x000126f4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126f4 <AesEncrypt_C+6064>:	add	r3, r3, #196	; 0xc4
0x000126f8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126f8 <AesEncrypt_C+6068>:	ldr	r3, [r3]
0x000126fc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x126fc <AesEncrypt_C+6072>:	eor	r3, r3, r2
0x00012700	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12700 <AesEncrypt_C+6076>:	str	r3, [r11, #-40]	; 0xffffffd8
0x00012704	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12704 <AesEncrypt_C+6080>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00012708	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12708 <AesEncrypt_C+6084>:	lsr	r3, r3, #24
0x0001270c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1270c <AesEncrypt_C+6088>:	and	r3, r3, #255	; 0xff
0x00012710	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12710 <AesEncrypt_C+6092>:	mov	r2, r3
0x00012714	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12714 <AesEncrypt_C+6096>:	ldr	r3, [pc, #-1976]	; 0x11f64 <AesEncrypt_C+4128>
0x00012718	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12718 <AesEncrypt_C+6100>:	ldr	r2, [r3, r2, lsl #2]
0x0001271c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1271c <AesEncrypt_C+6104>:	ldr	r3, [r11, #-16]
0x00012720	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12720 <AesEncrypt_C+6108>:	lsr	r3, r3, #16
0x00012724	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12724 <AesEncrypt_C+6112>:	and	r3, r3, #255	; 0xff
0x00012728	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12728 <AesEncrypt_C+6116>:	ldr	r1, [pc, #-1996]	; 0x11f64 <AesEncrypt_C+4128>
0x0001272c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1272c <AesEncrypt_C+6120>:	add	r3, r3, #256	; 0x100
0x00012730	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12730 <AesEncrypt_C+6124>:	ldr	r3, [r1, r3, lsl #2]
0x00012734	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12734 <AesEncrypt_C+6128>:	eor	r2, r2, r3
0x00012738	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12738 <AesEncrypt_C+6132>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001273c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1273c <AesEncrypt_C+6136>:	lsr	r3, r3, #8
0x00012740	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12740 <AesEncrypt_C+6140>:	and	r3, r3, #255	; 0xff
0x00012744	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12744 <AesEncrypt_C+6144>:	ldr	r1, [pc, #-2024]	; 0x11f64 <AesEncrypt_C+4128>
0x00012748	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12748 <AesEncrypt_C+6148>:	add	r3, r3, #512	; 0x200
0x0001274c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1274c <AesEncrypt_C+6152>:	ldr	r3, [r1, r3, lsl #2]
0x00012750	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12750 <AesEncrypt_C+6156>:	eor	r2, r2, r3
0x00012754	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12754 <AesEncrypt_C+6160>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00012758	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12758 <AesEncrypt_C+6164>:	and	r3, r3, #255	; 0xff
0x0001275c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1275c <AesEncrypt_C+6168>:	ldr	r1, [pc, #-2048]	; 0x11f64 <AesEncrypt_C+4128>
0x00012760	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12760 <AesEncrypt_C+6172>:	add	r3, r3, #768	; 0x300
0x00012764	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12764 <AesEncrypt_C+6176>:	ldr	r3, [r1, r3, lsl #2]
0x00012768	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12768 <AesEncrypt_C+6180>:	eor	r2, r2, r3
0x0001276c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1276c <AesEncrypt_C+6184>:	ldr	r3, [r11, #-12]
0x00012770	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12770 <AesEncrypt_C+6188>:	add	r3, r3, #200	; 0xc8
0x00012774	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12774 <AesEncrypt_C+6192>:	ldr	r3, [r3]
0x00012778	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12778 <AesEncrypt_C+6196>:	eor	r3, r3, r2
0x0001277c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1277c <AesEncrypt_C+6200>:	str	r3, [r11, #-36]	; 0xffffffdc
0x00012780	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12780 <AesEncrypt_C+6204>:	ldr	r3, [r11, #-16]
0x00012784	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12784 <AesEncrypt_C+6208>:	lsr	r3, r3, #24
0x00012788	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12788 <AesEncrypt_C+6212>:	and	r3, r3, #255	; 0xff
0x0001278c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1278c <AesEncrypt_C+6216>:	mov	r2, r3
0x00012790	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12790 <AesEncrypt_C+6220>:	ldr	r3, [pc, #-2100]	; 0x11f64 <AesEncrypt_C+4128>
0x00012794	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12794 <AesEncrypt_C+6224>:	ldr	r2, [r3, r2, lsl #2]
0x00012798	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12798 <AesEncrypt_C+6228>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001279c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1279c <AesEncrypt_C+6232>:	lsr	r3, r3, #16
0x000127a0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127a0 <AesEncrypt_C+6236>:	and	r3, r3, #255	; 0xff
0x000127a4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127a4 <AesEncrypt_C+6240>:	ldr	r1, [pc, #-2120]	; 0x11f64 <AesEncrypt_C+4128>
0x000127a8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127a8 <AesEncrypt_C+6244>:	add	r3, r3, #256	; 0x100
0x000127ac	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127ac <AesEncrypt_C+6248>:	ldr	r3, [r1, r3, lsl #2]
0x000127b0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127b0 <AesEncrypt_C+6252>:	eor	r2, r2, r3
0x000127b4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127b4 <AesEncrypt_C+6256>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000127b8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127b8 <AesEncrypt_C+6260>:	lsr	r3, r3, #8
0x000127bc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127bc <AesEncrypt_C+6264>:	and	r3, r3, #255	; 0xff
0x000127c0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127c0 <AesEncrypt_C+6268>:	ldr	r1, [pc, #-2148]	; 0x11f64 <AesEncrypt_C+4128>
0x000127c4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127c4 <AesEncrypt_C+6272>:	add	r3, r3, #512	; 0x200
0x000127c8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127c8 <AesEncrypt_C+6276>:	ldr	r3, [r1, r3, lsl #2]
0x000127cc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127cc <AesEncrypt_C+6280>:	eor	r2, r2, r3
0x000127d0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127d0 <AesEncrypt_C+6284>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000127d4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127d4 <AesEncrypt_C+6288>:	and	r3, r3, #255	; 0xff
0x000127d8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127d8 <AesEncrypt_C+6292>:	ldr	r1, [pc, #-2172]	; 0x11f64 <AesEncrypt_C+4128>
0x000127dc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127dc <AesEncrypt_C+6296>:	add	r3, r3, #768	; 0x300
0x000127e0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127e0 <AesEncrypt_C+6300>:	ldr	r3, [r1, r3, lsl #2]
0x000127e4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127e4 <AesEncrypt_C+6304>:	eor	r2, r2, r3
0x000127e8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127e8 <AesEncrypt_C+6308>:	ldr	r3, [r11, #-12]
0x000127ec	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127ec <AesEncrypt_C+6312>:	add	r3, r3, #204	; 0xcc
0x000127f0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127f0 <AesEncrypt_C+6316>:	ldr	r3, [r3]
0x000127f4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127f4 <AesEncrypt_C+6320>:	eor	r3, r3, r2
0x000127f8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127f8 <AesEncrypt_C+6324>:	str	r3, [r11, #-32]	; 0xffffffe0
2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x127fc <AesEncrypt_C+6328>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012800	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12800 <AesEncrypt_C+6332>:	lsr	r3, r3, #24
0x00012804	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12804 <AesEncrypt_C+6336>:	and	r3, r3, #255	; 0xff
0x00012808	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12808 <AesEncrypt_C+6340>:	mov	r2, r3
0x0001280c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1280c <AesEncrypt_C+6344>:	ldr	r3, [pc, #-2224]	; 0x11f64 <AesEncrypt_C+4128>
0x00012810	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12810 <AesEncrypt_C+6348>:	ldr	r2, [r3, r2, lsl #2]
0x00012814	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12814 <AesEncrypt_C+6352>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00012818	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12818 <AesEncrypt_C+6356>:	lsr	r3, r3, #16
0x0001281c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1281c <AesEncrypt_C+6360>:	and	r3, r3, #255	; 0xff
0x00012820	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12820 <AesEncrypt_C+6364>:	ldr	r1, [pc, #-2244]	; 0x11f64 <AesEncrypt_C+4128>
0x00012824	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12824 <AesEncrypt_C+6368>:	add	r3, r3, #256	; 0x100
0x00012828	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12828 <AesEncrypt_C+6372>:	ldr	r3, [r1, r3, lsl #2]
0x0001282c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1282c <AesEncrypt_C+6376>:	eor	r2, r2, r3
0x00012830	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12830 <AesEncrypt_C+6380>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00012834	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12834 <AesEncrypt_C+6384>:	lsr	r3, r3, #8
0x00012838	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12838 <AesEncrypt_C+6388>:	and	r3, r3, #255	; 0xff
0x0001283c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1283c <AesEncrypt_C+6392>:	ldr	r1, [pc, #-2272]	; 0x11f64 <AesEncrypt_C+4128>
0x00012840	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12840 <AesEncrypt_C+6396>:	add	r3, r3, #512	; 0x200
0x00012844	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12844 <AesEncrypt_C+6400>:	ldr	r3, [r1, r3, lsl #2]
0x00012848	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12848 <AesEncrypt_C+6404>:	eor	r2, r2, r3
0x0001284c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1284c <AesEncrypt_C+6408>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012850	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12850 <AesEncrypt_C+6412>:	and	r3, r3, #255	; 0xff
0x00012854	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12854 <AesEncrypt_C+6416>:	ldr	r1, [pc, #-2296]	; 0x11f64 <AesEncrypt_C+4128>
0x00012858	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12858 <AesEncrypt_C+6420>:	add	r3, r3, #768	; 0x300
0x0001285c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1285c <AesEncrypt_C+6424>:	ldr	r3, [r1, r3, lsl #2]
0x00012860	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12860 <AesEncrypt_C+6428>:	eor	r2, r2, r3
0x00012864	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12864 <AesEncrypt_C+6432>:	ldr	r3, [r11, #-12]
0x00012868	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12868 <AesEncrypt_C+6436>:	add	r3, r3, #208	; 0xd0
0x0001286c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1286c <AesEncrypt_C+6440>:	ldr	r3, [r3]
0x00012870	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12870 <AesEncrypt_C+6444>:	eor	r3, r3, r2
0x00012874	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12874 <AesEncrypt_C+6448>:	str	r3, [r11, #-28]	; 0xffffffe4
0x00012878	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12878 <AesEncrypt_C+6452>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x0001287c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1287c <AesEncrypt_C+6456>:	lsr	r3, r3, #24
0x00012880	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12880 <AesEncrypt_C+6460>:	and	r3, r3, #255	; 0xff
0x00012884	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12884 <AesEncrypt_C+6464>:	mov	r2, r3
0x00012888	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12888 <AesEncrypt_C+6468>:	ldr	r3, [pc, #-2348]	; 0x11f64 <AesEncrypt_C+4128>
0x0001288c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1288c <AesEncrypt_C+6472>:	ldr	r2, [r3, r2, lsl #2]
0x00012890	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12890 <AesEncrypt_C+6476>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00012894	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12894 <AesEncrypt_C+6480>:	lsr	r3, r3, #16
0x00012898	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12898 <AesEncrypt_C+6484>:	and	r3, r3, #255	; 0xff
0x0001289c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1289c <AesEncrypt_C+6488>:	ldr	r1, [pc, #-2368]	; 0x11f64 <AesEncrypt_C+4128>
0x000128a0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128a0 <AesEncrypt_C+6492>:	add	r3, r3, #256	; 0x100
0x000128a4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128a4 <AesEncrypt_C+6496>:	ldr	r3, [r1, r3, lsl #2]
0x000128a8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128a8 <AesEncrypt_C+6500>:	eor	r2, r2, r3
0x000128ac	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128ac <AesEncrypt_C+6504>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000128b0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128b0 <AesEncrypt_C+6508>:	lsr	r3, r3, #8
0x000128b4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128b4 <AesEncrypt_C+6512>:	and	r3, r3, #255	; 0xff
0x000128b8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128b8 <AesEncrypt_C+6516>:	ldr	r1, [pc, #-2396]	; 0x11f64 <AesEncrypt_C+4128>
0x000128bc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128bc <AesEncrypt_C+6520>:	add	r3, r3, #512	; 0x200
0x000128c0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128c0 <AesEncrypt_C+6524>:	ldr	r3, [r1, r3, lsl #2]
0x000128c4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128c4 <AesEncrypt_C+6528>:	eor	r2, r2, r3
0x000128c8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128c8 <AesEncrypt_C+6532>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000128cc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128cc <AesEncrypt_C+6536>:	and	r3, r3, #255	; 0xff
0x000128d0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128d0 <AesEncrypt_C+6540>:	ldr	r1, [pc, #-2420]	; 0x11f64 <AesEncrypt_C+4128>
0x000128d4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128d4 <AesEncrypt_C+6544>:	add	r3, r3, #768	; 0x300
0x000128d8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128d8 <AesEncrypt_C+6548>:	ldr	r3, [r1, r3, lsl #2]
0x000128dc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128dc <AesEncrypt_C+6552>:	eor	r2, r2, r3
0x000128e0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128e0 <AesEncrypt_C+6556>:	ldr	r3, [r11, #-12]
0x000128e4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128e4 <AesEncrypt_C+6560>:	add	r3, r3, #212	; 0xd4
0x000128e8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128e8 <AesEncrypt_C+6564>:	ldr	r3, [r3]
0x000128ec	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128ec <AesEncrypt_C+6568>:	eor	r3, r3, r2
0x000128f0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128f0 <AesEncrypt_C+6572>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000128f4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128f4 <AesEncrypt_C+6576>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000128f8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128f8 <AesEncrypt_C+6580>:	lsr	r3, r3, #24
0x000128fc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x128fc <AesEncrypt_C+6584>:	and	r3, r3, #255	; 0xff
0x00012900	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12900 <AesEncrypt_C+6588>:	mov	r2, r3
0x00012904	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12904 <AesEncrypt_C+6592>:	ldr	r3, [pc, #-2472]	; 0x11f64 <AesEncrypt_C+4128>
0x00012908	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12908 <AesEncrypt_C+6596>:	ldr	r2, [r3, r2, lsl #2]
0x0001290c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1290c <AesEncrypt_C+6600>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012910	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12910 <AesEncrypt_C+6604>:	lsr	r3, r3, #16
0x00012914	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12914 <AesEncrypt_C+6608>:	and	r3, r3, #255	; 0xff
0x00012918	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12918 <AesEncrypt_C+6612>:	ldr	r1, [pc, #-2492]	; 0x11f64 <AesEncrypt_C+4128>
0x0001291c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1291c <AesEncrypt_C+6616>:	add	r3, r3, #256	; 0x100
0x00012920	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12920 <AesEncrypt_C+6620>:	ldr	r3, [r1, r3, lsl #2]
0x00012924	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12924 <AesEncrypt_C+6624>:	eor	r2, r2, r3
0x00012928	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12928 <AesEncrypt_C+6628>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x0001292c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1292c <AesEncrypt_C+6632>:	lsr	r3, r3, #8
0x00012930	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12930 <AesEncrypt_C+6636>:	and	r3, r3, #255	; 0xff
0x00012934	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12934 <AesEncrypt_C+6640>:	ldr	r1, [pc, #-2520]	; 0x11f64 <AesEncrypt_C+4128>
0x00012938	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12938 <AesEncrypt_C+6644>:	add	r3, r3, #512	; 0x200
0x0001293c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1293c <AesEncrypt_C+6648>:	ldr	r3, [r1, r3, lsl #2]
0x00012940	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12940 <AesEncrypt_C+6652>:	eor	r2, r2, r3
0x00012944	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12944 <AesEncrypt_C+6656>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00012948	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12948 <AesEncrypt_C+6660>:	and	r3, r3, #255	; 0xff
0x0001294c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1294c <AesEncrypt_C+6664>:	ldr	r1, [pc, #-2544]	; 0x11f64 <AesEncrypt_C+4128>
0x00012950	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12950 <AesEncrypt_C+6668>:	add	r3, r3, #768	; 0x300
0x00012954	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12954 <AesEncrypt_C+6672>:	ldr	r3, [r1, r3, lsl #2]
0x00012958	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12958 <AesEncrypt_C+6676>:	eor	r2, r2, r3
0x0001295c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1295c <AesEncrypt_C+6680>:	ldr	r3, [r11, #-12]
0x00012960	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12960 <AesEncrypt_C+6684>:	add	r3, r3, #216	; 0xd8
0x00012964	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12964 <AesEncrypt_C+6688>:	ldr	r3, [r3]
0x00012968	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12968 <AesEncrypt_C+6692>:	eor	r3, r3, r2
0x0001296c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1296c <AesEncrypt_C+6696>:	str	r3, [r11, #-20]	; 0xffffffec
0x00012970	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12970 <AesEncrypt_C+6700>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012974	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12974 <AesEncrypt_C+6704>:	lsr	r3, r3, #24
0x00012978	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12978 <AesEncrypt_C+6708>:	and	r3, r3, #255	; 0xff
0x0001297c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1297c <AesEncrypt_C+6712>:	mov	r2, r3
0x00012980	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12980 <AesEncrypt_C+6716>:	ldr	r3, [pc, #-2596]	; 0x11f64 <AesEncrypt_C+4128>
0x00012984	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12984 <AesEncrypt_C+6720>:	ldr	r2, [r3, r2, lsl #2]
0x00012988	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12988 <AesEncrypt_C+6724>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x0001298c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1298c <AesEncrypt_C+6728>:	lsr	r3, r3, #16
0x00012990	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12990 <AesEncrypt_C+6732>:	and	r3, r3, #255	; 0xff
0x00012994	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12994 <AesEncrypt_C+6736>:	ldr	r1, [pc, #-2616]	; 0x11f64 <AesEncrypt_C+4128>
0x00012998	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x12998 <AesEncrypt_C+6740>:	add	r3, r3, #256	; 0x100
0x0001299c	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x1299c <AesEncrypt_C+6744>:	ldr	r3, [r1, r3, lsl #2]
0x000129a0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129a0 <AesEncrypt_C+6748>:	eor	r2, r2, r3
0x000129a4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129a4 <AesEncrypt_C+6752>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000129a8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129a8 <AesEncrypt_C+6756>:	lsr	r3, r3, #8
0x000129ac	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129ac <AesEncrypt_C+6760>:	and	r3, r3, #255	; 0xff
0x000129b0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129b0 <AesEncrypt_C+6764>:	ldr	r1, [pc, #-2644]	; 0x11f64 <AesEncrypt_C+4128>
0x000129b4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129b4 <AesEncrypt_C+6768>:	add	r3, r3, #512	; 0x200
0x000129b8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129b8 <AesEncrypt_C+6772>:	ldr	r3, [r1, r3, lsl #2]
0x000129bc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129bc <AesEncrypt_C+6776>:	eor	r2, r2, r3
0x000129c0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129c0 <AesEncrypt_C+6780>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000129c4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129c4 <AesEncrypt_C+6784>:	and	r3, r3, #255	; 0xff
0x000129c8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129c8 <AesEncrypt_C+6788>:	ldr	r1, [pc, #-2668]	; 0x11f64 <AesEncrypt_C+4128>
0x000129cc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129cc <AesEncrypt_C+6792>:	add	r3, r3, #768	; 0x300
0x000129d0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129d0 <AesEncrypt_C+6796>:	ldr	r3, [r1, r3, lsl #2]
0x000129d4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129d4 <AesEncrypt_C+6800>:	eor	r2, r2, r3
0x000129d8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129d8 <AesEncrypt_C+6804>:	ldr	r3, [r11, #-12]
0x000129dc	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129dc <AesEncrypt_C+6808>:	add	r3, r3, #220	; 0xdc
0x000129e0	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129e0 <AesEncrypt_C+6812>:	ldr	r3, [r3]
0x000129e4	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129e4 <AesEncrypt_C+6816>:	eor	r3, r3, r2
0x000129e8	2026	            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
=> 0x129e8 <AesEncrypt_C+6820>:	str	r3, [r11, #-16]
2029	    rk += r * 8;
=> 0x129ec <AesEncrypt_C+6824>:	ldr	r3, [r11, #-60]	; 0xffffffc4
0x000129f0	2029	    rk += r * 8;
=> 0x129f0 <AesEncrypt_C+6828>:	lsl	r3, r3, #5
0x000129f4	2029	    rk += r * 8;
=> 0x129f4 <AesEncrypt_C+6832>:	ldr	r2, [r11, #-12]
0x000129f8	2029	    rk += r * 8;
=> 0x129f8 <AesEncrypt_C+6836>:	add	r3, r2, r3
0x000129fc	2029	    rk += r * 8;
=> 0x129fc <AesEncrypt_C+6840>:	str	r3, [r11, #-12]
2054	        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
=> 0x12a00 <AesEncrypt_C+6844>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00012a04	2054	        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
=> 0x12a04 <AesEncrypt_C+6848>:	lsr	r3, r3, #24
0x00012a08	2054	        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
=> 0x12a08 <AesEncrypt_C+6852>:	and	r3, r3, #255	; 0xff
0x00012a0c	2054	        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
=> 0x12a0c <AesEncrypt_C+6856>:	ldr	r2, [pc, #-2736]	; 0x11f64 <AesEncrypt_C+4128>
0x00012a10	2054	        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
=> 0x12a10 <AesEncrypt_C+6860>:	add	r3, r3, #512	; 0x200
0x00012a14	2054	        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
=> 0x12a14 <AesEncrypt_C+6864>:	ldr	r3, [r2, r3, lsl #2]
2054	        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
=> 0x12a18 <AesEncrypt_C+6868>:	and	r2, r3, #-16777216	; 0xff000000
2055	        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
=> 0x12a1c <AesEncrypt_C+6872>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00012a20	2055	        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
=> 0x12a20 <AesEncrypt_C+6876>:	lsr	r3, r3, #16
0x00012a24	2055	        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
=> 0x12a24 <AesEncrypt_C+6880>:	and	r3, r3, #255	; 0xff
0x00012a28	2055	        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
=> 0x12a28 <AesEncrypt_C+6884>:	ldr	r1, [pc, #-2764]	; 0x11f64 <AesEncrypt_C+4128>
0x00012a2c	2055	        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
=> 0x12a2c <AesEncrypt_C+6888>:	add	r3, r3, #768	; 0x300
0x00012a30	2055	        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
=> 0x12a30 <AesEncrypt_C+6892>:	ldr	r3, [r1, r3, lsl #2]
2055	        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
=> 0x12a34 <AesEncrypt_C+6896>:	and	r3, r3, #16711680	; 0xff0000
2054	        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
=> 0x12a38 <AesEncrypt_C+6900>:	orr	r2, r2, r3
2056	        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
=> 0x12a3c <AesEncrypt_C+6904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00012a40	2056	        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
=> 0x12a40 <AesEncrypt_C+6908>:	lsr	r3, r3, #8
0x00012a44	2056	        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
=> 0x12a44 <AesEncrypt_C+6912>:	and	r3, r3, #255	; 0xff
0x00012a48	2056	        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
=> 0x12a48 <AesEncrypt_C+6916>:	mov	r1, r3
0x00012a4c	2056	        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
=> 0x12a4c <AesEncrypt_C+6920>:	ldr	r3, [pc, #-2800]	; 0x11f64 <AesEncrypt_C+4128>
0x00012a50	2056	        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
=> 0x12a50 <AesEncrypt_C+6924>:	ldr	r3, [r3, r1, lsl #2]
2056	        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
=> 0x12a54 <AesEncrypt_C+6928>:	and	r3, r3, #65280	; 0xff00
2055	        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
=> 0x12a58 <AesEncrypt_C+6932>:	eor	r2, r2, r3
2057	        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
=> 0x12a5c <AesEncrypt_C+6936>:	ldr	r3, [r11, #-16]
0x00012a60	2057	        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
=> 0x12a60 <AesEncrypt_C+6940>:	and	r3, r3, #255	; 0xff
0x00012a64	2057	        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
=> 0x12a64 <AesEncrypt_C+6944>:	ldr	r1, [pc, #-2824]	; 0x11f64 <AesEncrypt_C+4128>
0x00012a68	2057	        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
=> 0x12a68 <AesEncrypt_C+6948>:	add	r3, r3, #256	; 0x100
0x00012a6c	2057	        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
=> 0x12a6c <AesEncrypt_C+6952>:	ldr	r3, [r1, r3, lsl #2]
2057	        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
=> 0x12a70 <AesEncrypt_C+6956>:	and	r3, r3, #255	; 0xff
2056	        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
=> 0x12a74 <AesEncrypt_C+6960>:	eor	r2, r2, r3
2058	        rk[0];
=> 0x12a78 <AesEncrypt_C+6964>:	ldr	r3, [r11, #-12]
0x00012a7c	2058	        rk[0];
=> 0x12a7c <AesEncrypt_C+6968>:	ldr	r3, [r3]
2057	        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
=> 0x12a80 <AesEncrypt_C+6972>:	eor	r3, r3, r2
2053	    s0 =
=> 0x12a84 <AesEncrypt_C+6976>:	str	r3, [r11, #-44]	; 0xffffffd4
2060	        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
=> 0x12a88 <AesEncrypt_C+6980>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00012a8c	2060	        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
=> 0x12a8c <AesEncrypt_C+6984>:	lsr	r3, r3, #24
0x00012a90	2060	        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
=> 0x12a90 <AesEncrypt_C+6988>:	and	r3, r3, #255	; 0xff
0x00012a94	2060	        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
=> 0x12a94 <AesEncrypt_C+6992>:	ldr	r2, [pc, #-2872]	; 0x11f64 <AesEncrypt_C+4128>
0x00012a98	2060	        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
=> 0x12a98 <AesEncrypt_C+6996>:	add	r3, r3, #512	; 0x200
0x00012a9c	2060	        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
=> 0x12a9c <AesEncrypt_C+7000>:	ldr	r3, [r2, r3, lsl #2]
2060	        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
=> 0x12aa0 <AesEncrypt_C+7004>:	and	r2, r3, #-16777216	; 0xff000000
2061	        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
=> 0x12aa4 <AesEncrypt_C+7008>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00012aa8	2061	        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
=> 0x12aa8 <AesEncrypt_C+7012>:	lsr	r3, r3, #16
0x00012aac	2061	        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
=> 0x12aac <AesEncrypt_C+7016>:	and	r3, r3, #255	; 0xff
0x00012ab0	2061	        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
=> 0x12ab0 <AesEncrypt_C+7020>:	ldr	r1, [pc, #-2900]	; 0x11f64 <AesEncrypt_C+4128>
0x00012ab4	2061	        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
=> 0x12ab4 <AesEncrypt_C+7024>:	add	r3, r3, #768	; 0x300
0x00012ab8	2061	        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
=> 0x12ab8 <AesEncrypt_C+7028>:	ldr	r3, [r1, r3, lsl #2]
2061	        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
=> 0x12abc <AesEncrypt_C+7032>:	and	r3, r3, #16711680	; 0xff0000
2060	        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
=> 0x12ac0 <AesEncrypt_C+7036>:	orr	r2, r2, r3
2062	        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
=> 0x12ac4 <AesEncrypt_C+7040>:	ldr	r3, [r11, #-16]
0x00012ac8	2062	        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
=> 0x12ac8 <AesEncrypt_C+7044>:	lsr	r3, r3, #8
0x00012acc	2062	        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
=> 0x12acc <AesEncrypt_C+7048>:	and	r3, r3, #255	; 0xff
0x00012ad0	2062	        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
=> 0x12ad0 <AesEncrypt_C+7052>:	mov	r1, r3
0x00012ad4	2062	        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
=> 0x12ad4 <AesEncrypt_C+7056>:	ldr	r3, [pc, #-2936]	; 0x11f64 <AesEncrypt_C+4128>
0x00012ad8	2062	        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
=> 0x12ad8 <AesEncrypt_C+7060>:	ldr	r3, [r3, r1, lsl #2]
2062	        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
=> 0x12adc <AesEncrypt_C+7064>:	and	r3, r3, #65280	; 0xff00
2061	        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
=> 0x12ae0 <AesEncrypt_C+7068>:	eor	r2, r2, r3
2063	        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
=> 0x12ae4 <AesEncrypt_C+7072>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00012ae8	2063	        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
=> 0x12ae8 <AesEncrypt_C+7076>:	and	r3, r3, #255	; 0xff
0x00012aec	2063	        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
=> 0x12aec <AesEncrypt_C+7080>:	ldr	r1, [pc, #-2960]	; 0x11f64 <AesEncrypt_C+4128>
0x00012af0	2063	        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
=> 0x12af0 <AesEncrypt_C+7084>:	add	r3, r3, #256	; 0x100
0x00012af4	2063	        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
=> 0x12af4 <AesEncrypt_C+7088>:	ldr	r3, [r1, r3, lsl #2]
2063	        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
=> 0x12af8 <AesEncrypt_C+7092>:	and	r3, r3, #255	; 0xff
2062	        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
=> 0x12afc <AesEncrypt_C+7096>:	eor	r2, r2, r3
2064	        rk[1];
=> 0x12b00 <AesEncrypt_C+7100>:	ldr	r3, [r11, #-12]
0x00012b04	2064	        rk[1];
=> 0x12b04 <AesEncrypt_C+7104>:	add	r3, r3, #4
0x00012b08	2064	        rk[1];
=> 0x12b08 <AesEncrypt_C+7108>:	ldr	r3, [r3]
2063	        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
=> 0x12b0c <AesEncrypt_C+7112>:	eor	r3, r3, r2
2059	    s1 =
=> 0x12b10 <AesEncrypt_C+7116>:	str	r3, [r11, #-40]	; 0xffffffd8
2066	        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
=> 0x12b14 <AesEncrypt_C+7120>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00012b18	2066	        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
=> 0x12b18 <AesEncrypt_C+7124>:	lsr	r3, r3, #24
0x00012b1c	2066	        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
=> 0x12b1c <AesEncrypt_C+7128>:	and	r3, r3, #255	; 0xff
0x00012b20	2066	        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
=> 0x12b20 <AesEncrypt_C+7132>:	ldr	r2, [pc, #-3012]	; 0x11f64 <AesEncrypt_C+4128>
0x00012b24	2066	        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
=> 0x12b24 <AesEncrypt_C+7136>:	add	r3, r3, #512	; 0x200
0x00012b28	2066	        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
=> 0x12b28 <AesEncrypt_C+7140>:	ldr	r3, [r2, r3, lsl #2]
2066	        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
=> 0x12b2c <AesEncrypt_C+7144>:	and	r2, r3, #-16777216	; 0xff000000
2067	        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
=> 0x12b30 <AesEncrypt_C+7148>:	ldr	r3, [r11, #-16]
0x00012b34	2067	        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
=> 0x12b34 <AesEncrypt_C+7152>:	lsr	r3, r3, #16
0x00012b38	2067	        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
=> 0x12b38 <AesEncrypt_C+7156>:	and	r3, r3, #255	; 0xff
0x00012b3c	2067	        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
=> 0x12b3c <AesEncrypt_C+7160>:	ldr	r1, [pc, #-3040]	; 0x11f64 <AesEncrypt_C+4128>
0x00012b40	2067	        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
=> 0x12b40 <AesEncrypt_C+7164>:	add	r3, r3, #768	; 0x300
0x00012b44	2067	        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
=> 0x12b44 <AesEncrypt_C+7168>:	ldr	r3, [r1, r3, lsl #2]
2067	        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
=> 0x12b48 <AesEncrypt_C+7172>:	and	r3, r3, #16711680	; 0xff0000
2066	        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
=> 0x12b4c <AesEncrypt_C+7176>:	orr	r2, r2, r3
2068	        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
=> 0x12b50 <AesEncrypt_C+7180>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00012b54	2068	        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
=> 0x12b54 <AesEncrypt_C+7184>:	lsr	r3, r3, #8
0x00012b58	2068	        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
=> 0x12b58 <AesEncrypt_C+7188>:	and	r3, r3, #255	; 0xff
0x00012b5c	2068	        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
=> 0x12b5c <AesEncrypt_C+7192>:	mov	r1, r3
0x00012b60	2068	        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
=> 0x12b60 <AesEncrypt_C+7196>:	ldr	r3, [pc, #-3076]	; 0x11f64 <AesEncrypt_C+4128>
0x00012b64	2068	        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
=> 0x12b64 <AesEncrypt_C+7200>:	ldr	r3, [r3, r1, lsl #2]
2068	        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
=> 0x12b68 <AesEncrypt_C+7204>:	and	r3, r3, #65280	; 0xff00
2067	        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
=> 0x12b6c <AesEncrypt_C+7208>:	eor	r2, r2, r3
2069	        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
=> 0x12b70 <AesEncrypt_C+7212>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00012b74	2069	        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
=> 0x12b74 <AesEncrypt_C+7216>:	and	r3, r3, #255	; 0xff
0x00012b78	2069	        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
=> 0x12b78 <AesEncrypt_C+7220>:	ldr	r1, [pc, #-3100]	; 0x11f64 <AesEncrypt_C+4128>
0x00012b7c	2069	        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
=> 0x12b7c <AesEncrypt_C+7224>:	add	r3, r3, #256	; 0x100
0x00012b80	2069	        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
=> 0x12b80 <AesEncrypt_C+7228>:	ldr	r3, [r1, r3, lsl #2]
2069	        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
=> 0x12b84 <AesEncrypt_C+7232>:	and	r3, r3, #255	; 0xff
2068	        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
=> 0x12b88 <AesEncrypt_C+7236>:	eor	r2, r2, r3
2070	        rk[2];
=> 0x12b8c <AesEncrypt_C+7240>:	ldr	r3, [r11, #-12]
0x00012b90	2070	        rk[2];
=> 0x12b90 <AesEncrypt_C+7244>:	add	r3, r3, #8
0x00012b94	2070	        rk[2];
=> 0x12b94 <AesEncrypt_C+7248>:	ldr	r3, [r3]
2069	        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
=> 0x12b98 <AesEncrypt_C+7252>:	eor	r3, r3, r2
2065	    s2 =
=> 0x12b9c <AesEncrypt_C+7256>:	str	r3, [r11, #-36]	; 0xffffffdc
2072	        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
=> 0x12ba0 <AesEncrypt_C+7260>:	ldr	r3, [r11, #-16]
0x00012ba4	2072	        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
=> 0x12ba4 <AesEncrypt_C+7264>:	lsr	r3, r3, #24
0x00012ba8	2072	        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
=> 0x12ba8 <AesEncrypt_C+7268>:	and	r3, r3, #255	; 0xff
0x00012bac	2072	        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
=> 0x12bac <AesEncrypt_C+7272>:	ldr	r2, [pc, #-3152]	; 0x11f64 <AesEncrypt_C+4128>
0x00012bb0	2072	        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
=> 0x12bb0 <AesEncrypt_C+7276>:	add	r3, r3, #512	; 0x200
0x00012bb4	2072	        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
=> 0x12bb4 <AesEncrypt_C+7280>:	ldr	r3, [r2, r3, lsl #2]
2072	        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
=> 0x12bb8 <AesEncrypt_C+7284>:	and	r2, r3, #-16777216	; 0xff000000
2073	        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
=> 0x12bbc <AesEncrypt_C+7288>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00012bc0	2073	        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
=> 0x12bc0 <AesEncrypt_C+7292>:	lsr	r3, r3, #16
0x00012bc4	2073	        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
=> 0x12bc4 <AesEncrypt_C+7296>:	and	r3, r3, #255	; 0xff
0x00012bc8	2073	        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
=> 0x12bc8 <AesEncrypt_C+7300>:	ldr	r1, [pc, #-3180]	; 0x11f64 <AesEncrypt_C+4128>
0x00012bcc	2073	        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
=> 0x12bcc <AesEncrypt_C+7304>:	add	r3, r3, #768	; 0x300
0x00012bd0	2073	        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
=> 0x12bd0 <AesEncrypt_C+7308>:	ldr	r3, [r1, r3, lsl #2]
2073	        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
=> 0x12bd4 <AesEncrypt_C+7312>:	and	r3, r3, #16711680	; 0xff0000
2072	        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
=> 0x12bd8 <AesEncrypt_C+7316>:	orr	r2, r2, r3
2074	        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
=> 0x12bdc <AesEncrypt_C+7320>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00012be0	2074	        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
=> 0x12be0 <AesEncrypt_C+7324>:	lsr	r3, r3, #8
0x00012be4	2074	        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
=> 0x12be4 <AesEncrypt_C+7328>:	and	r3, r3, #255	; 0xff
0x00012be8	2074	        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
=> 0x12be8 <AesEncrypt_C+7332>:	mov	r1, r3
0x00012bec	2074	        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
=> 0x12bec <AesEncrypt_C+7336>:	ldr	r3, [pc, #-3216]	; 0x11f64 <AesEncrypt_C+4128>
0x00012bf0	2074	        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
=> 0x12bf0 <AesEncrypt_C+7340>:	ldr	r3, [r3, r1, lsl #2]
2074	        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
=> 0x12bf4 <AesEncrypt_C+7344>:	and	r3, r3, #65280	; 0xff00
2073	        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
=> 0x12bf8 <AesEncrypt_C+7348>:	eor	r2, r2, r3
2075	        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
=> 0x12bfc <AesEncrypt_C+7352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00012c00	2075	        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
=> 0x12c00 <AesEncrypt_C+7356>:	and	r3, r3, #255	; 0xff
0x00012c04	2075	        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
=> 0x12c04 <AesEncrypt_C+7360>:	ldr	r1, [pc, #-3240]	; 0x11f64 <AesEncrypt_C+4128>
0x00012c08	2075	        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
=> 0x12c08 <AesEncrypt_C+7364>:	add	r3, r3, #256	; 0x100
0x00012c0c	2075	        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
=> 0x12c0c <AesEncrypt_C+7368>:	ldr	r3, [r1, r3, lsl #2]
2075	        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
=> 0x12c10 <AesEncrypt_C+7372>:	and	r3, r3, #255	; 0xff
2074	        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
=> 0x12c14 <AesEncrypt_C+7376>:	eor	r2, r2, r3
2076	        rk[3];
=> 0x12c18 <AesEncrypt_C+7380>:	ldr	r3, [r11, #-12]
0x00012c1c	2076	        rk[3];
=> 0x12c1c <AesEncrypt_C+7384>:	add	r3, r3, #12
0x00012c20	2076	        rk[3];
=> 0x12c20 <AesEncrypt_C+7388>:	ldr	r3, [r3]
2075	        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
=> 0x12c24 <AesEncrypt_C+7392>:	eor	r3, r3, r2
2071	    s3 =
=> 0x12c28 <AesEncrypt_C+7396>:	str	r3, [r11, #-32]	; 0xffffffe0
2186	    s0 = ByteReverseWord32(s0);
=> 0x12c2c <AesEncrypt_C+7400>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012c30	2186	    s0 = ByteReverseWord32(s0);
=> 0x12c30 <AesEncrypt_C+7404>:	mov	r0, r3
0x00012c34	2186	    s0 = ByteReverseWord32(s0);
=> 0x12c34 <AesEncrypt_C+7408>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=256) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=1311520825, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=983131107) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00012c38 in AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:2186
2186	    s0 = ByteReverseWord32(s0);
=> 0x12c38 <AesEncrypt_C+7412>:	mov	r3, r0
2186	    s0 = ByteReverseWord32(s0);
=> 0x12c3c <AesEncrypt_C+7416>:	str	r3, [r11, #-44]	; 0xffffffd4
2187	    s1 = ByteReverseWord32(s1);
=> 0x12c40 <AesEncrypt_C+7420>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00012c44	2187	    s1 = ByteReverseWord32(s1);
=> 0x12c44 <AesEncrypt_C+7424>:	mov	r0, r3
0x00012c48	2187	    s1 = ByteReverseWord32(s1);
=> 0x12c48 <AesEncrypt_C+7428>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=983131107) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=983131107, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=3732445142) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00012c4c in AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:2187
2187	    s1 = ByteReverseWord32(s1);
=> 0x12c4c <AesEncrypt_C+7432>:	mov	r3, r0
2187	    s1 = ByteReverseWord32(s1);
=> 0x12c50 <AesEncrypt_C+7436>:	str	r3, [r11, #-40]	; 0xffffffd8
2188	    s2 = ByteReverseWord32(s2);
=> 0x12c54 <AesEncrypt_C+7440>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00012c58	2188	    s2 = ByteReverseWord32(s2);
=> 0x12c58 <AesEncrypt_C+7444>:	mov	r0, r3
0x00012c5c	2188	    s2 = ByteReverseWord32(s2);
=> 0x12c5c <AesEncrypt_C+7448>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=3732445142) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=3732445142, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=1175121584) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00012c60 in AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:2188
2188	    s2 = ByteReverseWord32(s2);
=> 0x12c60 <AesEncrypt_C+7452>:	mov	r3, r0
2188	    s2 = ByteReverseWord32(s2);
=> 0x12c64 <AesEncrypt_C+7456>:	str	r3, [r11, #-36]	; 0xffffffdc
2189	    s3 = ByteReverseWord32(s3);
=> 0x12c68 <AesEncrypt_C+7460>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012c6c	2189	    s3 = ByteReverseWord32(s3);
=> 0x12c6c <AesEncrypt_C+7464>:	mov	r0, r3
0x00012c70	2189	    s3 = ByteReverseWord32(s3);
=> 0x12c70 <AesEncrypt_C+7468>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=1175121584) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=1175121584, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=3363859472) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00012c74 in AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "a:qghnlam`>889N,", outBlock=0x407fff00 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:2189
2189	    s3 = ByteReverseWord32(s3);
=> 0x12c74 <AesEncrypt_C+7472>:	mov	r3, r0
2189	    s3 = ByteReverseWord32(s3);
=> 0x12c78 <AesEncrypt_C+7476>:	str	r3, [r11, #-32]	; 0xffffffe0
2192	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x12c7c <AesEncrypt_C+7480>:	sub	r3, r11, #44	; 0x2c
0x00012c80	2192	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x12c80 <AesEncrypt_C+7484>:	mov	r2, #4
0x00012c84	2192	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x12c84 <AesEncrypt_C+7488>:	mov	r1, r3
0x00012c88	2192	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x12c88 <AesEncrypt_C+7492>:	ldr	r0, [r11, #-56]	; 0xffffffc8
0x00012c8c	2192	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x12c8c <AesEncrypt_C+7496>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "\231:\343chnlam`>889N,", outBlock=0x407fff00 "\231:\343chnlam`>889N,", r=7) at wolfcrypt/src/aes.c:2193
2193	    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
=> 0x12c90 <AesEncrypt_C+7500>:	ldr	r3, [r11, #-56]	; 0xffffffc8
0x00012c94	2193	    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
=> 0x12c94 <AesEncrypt_C+7504>:	add	r3, r3, #4
0x00012c98	2193	    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
=> 0x12c98 <AesEncrypt_C+7508>:	sub	r1, r11, #40	; 0x28
0x00012c9c	2193	    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
=> 0x12c9c <AesEncrypt_C+7512>:	mov	r2, #4
0x00012ca0	2193	    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
=> 0x12ca0 <AesEncrypt_C+7516>:	mov	r0, r3
0x00012ca4	2193	    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
=> 0x12ca4 <AesEncrypt_C+7520>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "\231:\343cx\336֗m`>889N,", outBlock=0x407fff00 "\231:\343cx\336֗m`>889N,", r=7) at wolfcrypt/src/aes.c:2194
2194	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x12ca8 <AesEncrypt_C+7524>:	ldr	r3, [r11, #-56]	; 0xffffffc8
0x00012cac	2194	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x12cac <AesEncrypt_C+7528>:	add	r3, r3, #8
0x00012cb0	2194	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x12cb0 <AesEncrypt_C+7532>:	sub	r1, r11, #36	; 0x24
0x00012cb4	2194	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x12cb4 <AesEncrypt_C+7536>:	mov	r2, #4
0x00012cb8	2194	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x12cb8 <AesEncrypt_C+7540>:	mov	r0, r3
0x00012cbc	2194	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x12cbc <AesEncrypt_C+7544>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "\231:\343cx\336֗\nF\260\356\070\071N,", outBlock=0x407fff00 "\231:\343cx\336֗\nF\260\356\070\071N,", r=7) at wolfcrypt/src/aes.c:2195
2195	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x12cc0 <AesEncrypt_C+7548>:	ldr	r3, [r11, #-56]	; 0xffffffc8
0x00012cc4	2195	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x12cc4 <AesEncrypt_C+7552>:	add	r3, r3, #12
0x00012cc8	2195	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x12cc8 <AesEncrypt_C+7556>:	sub	r1, r11, #32
0x00012ccc	2195	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x12ccc <AesEncrypt_C+7560>:	mov	r2, #4
0x00012cd0	2195	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x12cd0 <AesEncrypt_C+7564>:	mov	r0, r3
0x00012cd4	2195	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x12cd4 <AesEncrypt_C+7568>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesEncrypt_C (aes=0x407ffe00, inBlock=0x407fff00 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x407fff00 "\231:\343cx\336֗\nF\260\356\200\310\020l", r=7) at wolfcrypt/src/aes.c:2196
2196	}
=> 0x12cd8 <AesEncrypt_C+7572>:	nop			; (mov r0, r0)
0x00012cdc	2196	}
=> 0x12cdc <AesEncrypt_C+7576>:	ldr	r3, [pc, #-3452]	; 0x11f68 <AesEncrypt_C+4132>
0x00012ce0	2196	}
=> 0x12ce0 <AesEncrypt_C+7580>:	ldr	r2, [r3]
0x00012ce4	2196	}
=> 0x12ce4 <AesEncrypt_C+7584>:	ldr	r3, [r11, #-8]
0x00012ce8	2196	}
=> 0x12ce8 <AesEncrypt_C+7588>:	eors	r2, r3, r2
0x00012cec	2196	}
=> 0x12cec <AesEncrypt_C+7592>:	mov	r3, #0
0x00012cf0	2196	}
=> 0x12cf0 <AesEncrypt_C+7596>:	beq	0x12cf8 <AesEncrypt_C+7604>
0x00012cf8	2196	}
=> 0x12cf8 <AesEncrypt_C+7604>:	sub	sp, r11, #4
0x00012cfc	2196	}
=> 0x12cfc <AesEncrypt_C+7608>:	pop	{r11, pc}
wc_AesEncrypt (aes=0x407ffe00, inBlock=0x407fff00 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x407fff00 "\231:\343cx\336֗\nF\260\356\200\310\020l") at wolfcrypt/src/aes.c:2877
2877	    return 0;
=> 0x12d70 <wc_AesEncrypt+112>:	mov	r3, #0
2878	} /* wc_AesEncrypt */
=> 0x12d74 <wc_AesEncrypt+116>:	mov	r0, r3
0x00012d78	2878	} /* wc_AesEncrypt */
=> 0x12d78 <wc_AesEncrypt+120>:	sub	sp, r11, #4
0x00012d7c	2878	} /* wc_AesEncrypt */
=> 0x12d7c <wc_AesEncrypt+124>:	pop	{r11, pc}
0x00015b6c in wc_AesCbcEncrypt (aes=0x407ffe00, out=0x40800174 "", in=0x40800164 "a;sdlkjfei4344@#", sz=16) at wolfcrypt/src/aes.c:5601
5601	                ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
=> 0x15b6c <wc_AesCbcEncrypt+168>:	str	r0, [r11, #-8]
5602	                if (ret != 0)
=> 0x15b70 <wc_AesCbcEncrypt+172>:	ldr	r3, [r11, #-8]
0x00015b74	5602	                if (ret != 0)
=> 0x15b74 <wc_AesCbcEncrypt+176>:	cmp	r3, #0
0x00015b78	5602	                if (ret != 0)
=> 0x15b78 <wc_AesCbcEncrypt+180>:	bne	0x15bc4 <wc_AesCbcEncrypt+256>
5604	                XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
=> 0x15b7c <wc_AesCbcEncrypt+184>:	ldr	r3, [r11, #-16]
0x00015b80	5604	                XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
=> 0x15b80 <wc_AesCbcEncrypt+188>:	add	r3, r3, #256	; 0x100
0x00015b84	5604	                XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
=> 0x15b84 <wc_AesCbcEncrypt+192>:	mov	r2, #16
0x00015b88	5604	                XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
=> 0x15b88 <wc_AesCbcEncrypt+196>:	mov	r1, r3
0x00015b8c	5604	                XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
=> 0x15b8c <wc_AesCbcEncrypt+200>:	ldr	r0, [r11, #-20]	; 0xffffffec
0x00015b90	5604	                XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
=> 0x15b90 <wc_AesCbcEncrypt+204>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af78 in memcpy ()
=> 0x3af78 <memcpy+88>:	ldr	r6, [r1], #4
0x0003af7c in memcpy ()
=> 0x3af7c <memcpy+92>:	ldr	r7, [r1], #4
0x0003af80 in memcpy ()
=> 0x3af80 <memcpy+96>:	ldr	r8, [r1], #4
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afa0 in memcpy ()
=> 0x3afa0 <memcpy+128>:	str	r6, [r0], #4
0x0003afa4 in memcpy ()
=> 0x3afa4 <memcpy+132>:	str	r7, [r0], #4
0x0003afa8 in memcpy ()
=> 0x3afa8 <memcpy+136>:	str	r8, [r0], #4
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
wc_AesCbcEncrypt (aes=0x407ffe00, out=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", in=0x40800164 "a;sdlkjfei4344@#\231:\343cx\336֗\nF\260\356\200\310\020l", sz=16) at wolfcrypt/src/aes.c:5606
5606	                out += AES_BLOCK_SIZE;
=> 0x15b94 <wc_AesCbcEncrypt+208>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015b98	5606	                out += AES_BLOCK_SIZE;
=> 0x15b98 <wc_AesCbcEncrypt+212>:	add	r3, r3, #16
0x00015b9c	5606	                out += AES_BLOCK_SIZE;
=> 0x15b9c <wc_AesCbcEncrypt+216>:	str	r3, [r11, #-20]	; 0xffffffec
5607	                in  += AES_BLOCK_SIZE;
=> 0x15ba0 <wc_AesCbcEncrypt+220>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015ba4	5607	                in  += AES_BLOCK_SIZE;
=> 0x15ba4 <wc_AesCbcEncrypt+224>:	add	r3, r3, #16
0x00015ba8	5607	                in  += AES_BLOCK_SIZE;
=> 0x15ba8 <wc_AesCbcEncrypt+228>:	str	r3, [r11, #-24]	; 0xffffffe8
5599	            while (blocks--) {
=> 0x15bac <wc_AesCbcEncrypt+232>:	ldr	r3, [r11, #-12]
0x00015bb0	5599	            while (blocks--) {
=> 0x15bb0 <wc_AesCbcEncrypt+236>:	sub	r2, r3, #1
0x00015bb4	5599	            while (blocks--) {
=> 0x15bb4 <wc_AesCbcEncrypt+240>:	str	r2, [r11, #-12]
5599	            while (blocks--) {
=> 0x15bb8 <wc_AesCbcEncrypt+244>:	cmp	r3, #0
0x00015bbc	5599	            while (blocks--) {
=> 0x15bbc <wc_AesCbcEncrypt+248>:	bne	0x15b38 <wc_AesCbcEncrypt+116>
0x00015bc0	5599	            while (blocks--) {
=> 0x15bc0 <wc_AesCbcEncrypt+252>:	b	0x15bc8 <wc_AesCbcEncrypt+260>
5615	        return ret;
=> 0x15bc8 <wc_AesCbcEncrypt+260>:	ldr	r3, [r11, #-8]
5616	    } /* wc_AesCbcEncrypt */
=> 0x15bcc <wc_AesCbcEncrypt+264>:	mov	r0, r3
0x00015bd0	5616	    } /* wc_AesCbcEncrypt */
=> 0x15bd0 <wc_AesCbcEncrypt+268>:	sub	sp, r11, #4
0x00015bd4	5616	    } /* wc_AesCbcEncrypt */
=> 0x15bd4 <wc_AesCbcEncrypt+272>:	pop	{r11, pc}
0x00010664 in main () at AES.c:36
36	    ret = wc_AesCbcEncrypt(&aes, ciphertext, plaintext, sizeof(plaintext));
=> 0x10664 <main+188>:	str	r0, [r11, #-976]	; 0xfffffc30
37	    check_wolfssl_result(ret, "wc_AesCbcEncrypt");
=> 0x10668 <main+192>:	ldr	r1, [pc, #228]	; 0x10754 <main+428>
0x0001066c	37	    check_wolfssl_result(ret, "wc_AesCbcEncrypt");
=> 0x1066c <main+196>:	ldr	r0, [r11, #-976]	; 0xfffffc30
0x00010670	37	    check_wolfssl_result(ret, "wc_AesCbcEncrypt");
=> 0x10670 <main+200>:	bl	0x1055c <check_wolfssl_result>
check_wolfssl_result (ret=0, func=0xffffffff <error: Cannot access memory at address 0xffffffff>) at AES.c:11
11	void check_wolfssl_result(int ret, const char* func) {
=> 0x1055c <check_wolfssl_result>:	push	{r11, lr}
0x00010560	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10560 <check_wolfssl_result+4>:	add	r11, sp, #4
0x00010564	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10564 <check_wolfssl_result+8>:	sub	sp, sp, #8
0x00010568	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10568 <check_wolfssl_result+12>:	str	r0, [r11, #-8]
0x0001056c	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x1056c <check_wolfssl_result+16>:	str	r1, [r11, #-12]
12	    if (ret != 0) {
=> 0x10570 <check_wolfssl_result+20>:	ldr	r3, [r11, #-8]
0x00010574	12	    if (ret != 0) {
=> 0x10574 <check_wolfssl_result+24>:	cmp	r3, #0
0x00010578	12	    if (ret != 0) {
=> 0x10578 <check_wolfssl_result+28>:	beq	0x10598 <check_wolfssl_result+60>
15	}
=> 0x10598 <check_wolfssl_result+60>:	nop			; (mov r0, r0)
0x0001059c	15	}
=> 0x1059c <check_wolfssl_result+64>:	sub	sp, r11, #4
0x000105a0	15	}
=> 0x105a0 <check_wolfssl_result+68>:	pop	{r11, pc}
main () at AES.c:40
40	    wc_AesInit(&aes, NULL, INVALID_DEVID);
=> 0x10674 <main+204>:	mvn	r2, #1
0x00010678	40	    wc_AesInit(&aes, NULL, INVALID_DEVID);
=> 0x10678 <main+208>:	mov	r1, #0
0x0001067c	40	    wc_AesInit(&aes, NULL, INVALID_DEVID);
=> 0x1067c <main+212>:	mov	r0, r4
0x00010680	40	    wc_AesInit(&aes, NULL, INVALID_DEVID);
=> 0x10680 <main+216>:	bl	0x17bc4 <wc_AesInit>
wc_AesInit (aes=0x407ffe00, heap=0x40800184, devId=1082130804) at wolfcrypt/src/aes.c:11098
11098	{
=> 0x17bc4 <wc_AesInit>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00017bc8	11098	{
=> 0x17bc8 <wc_AesInit+4>:	add	r11, sp, #0
0x00017bcc	11098	{
=> 0x17bcc <wc_AesInit+8>:	sub	sp, sp, #28
0x00017bd0	11098	{
=> 0x17bd0 <wc_AesInit+12>:	str	r0, [r11, #-16]
0x00017bd4	11098	{
=> 0x17bd4 <wc_AesInit+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00017bd8	11098	{
=> 0x17bd8 <wc_AesInit+20>:	str	r2, [r11, #-24]	; 0xffffffe8
11099	    int ret = 0;
=> 0x17bdc <wc_AesInit+24>:	mov	r3, #0
0x00017be0	11099	    int ret = 0;
=> 0x17be0 <wc_AesInit+28>:	str	r3, [r11, #-8]
11101	    if (aes == NULL)
=> 0x17be4 <wc_AesInit+32>:	ldr	r3, [r11, #-16]
0x00017be8	11101	    if (aes == NULL)
=> 0x17be8 <wc_AesInit+36>:	cmp	r3, #0
0x00017bec	11101	    if (aes == NULL)
=> 0x17bec <wc_AesInit+40>:	bne	0x17bf8 <wc_AesInit+52>
11104	    aes->heap = heap;
=> 0x17bf8 <wc_AesInit+52>:	ldr	r3, [r11, #-16]
0x00017bfc	11104	    aes->heap = heap;
=> 0x17bfc <wc_AesInit+56>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00017c00	11104	    aes->heap = heap;
=> 0x17c00 <wc_AesInit+60>:	str	r2, [r3, #832]	; 0x340
11105	    aes->rounds = 0;
=> 0x17c04 <wc_AesInit+64>:	ldr	r3, [r11, #-16]
0x00017c08	11105	    aes->rounds = 0;
=> 0x17c08 <wc_AesInit+68>:	mov	r2, #0
0x00017c0c	11105	    aes->rounds = 0;
=> 0x17c0c <wc_AesInit+72>:	str	r2, [r3, #240]	; 0xf0
11177	    return ret;
=> 0x17c10 <wc_AesInit+76>:	ldr	r3, [r11, #-8]
11178	}
=> 0x17c14 <wc_AesInit+80>:	mov	r0, r3
0x00017c18	11178	}
=> 0x17c18 <wc_AesInit+84>:	add	sp, r11, #0
0x00017c1c	11178	}
=> 0x17c1c <wc_AesInit+88>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00017c20	11178	}
=> 0x17c20 <wc_AesInit+92>:	bx	lr
main () at AES.c:41
41	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_DECRYPTION);
=> 0x10684 <main+220>:	sub	r3, r11, #112	; 0x70
0x00010688	41	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_DECRYPTION);
=> 0x10688 <main+224>:	sub	r1, r11, #48	; 0x30
0x0001068c	41	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_DECRYPTION);
=> 0x1068c <main+228>:	mov	r2, #1
0x00010690	41	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_DECRYPTION);
=> 0x10690 <main+232>:	str	r2, [sp]
0x00010694	41	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_DECRYPTION);
=> 0x10694 <main+236>:	mov	r2, #32
0x00010698	41	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_DECRYPTION);
=> 0x10698 <main+240>:	mov	r0, r4
0x0001069c	41	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_DECRYPTION);
=> 0x1069c <main+244>:	bl	0x159d4 <wc_AesSetKey>
wc_AesSetKey (aes=0x0, userKey=0x7a4fc "wc_AesCbcEncrypt", keylen=1082129920, iv=0x0, dir=1) at wolfcrypt/src/aes.c:4590
4590	    {
=> 0x159d4 <wc_AesSetKey>:	push	{r11, lr}
0x000159d8	4590	    {
=> 0x159d8 <wc_AesSetKey+4>:	add	r11, sp, #4
0x000159dc	4590	    {
=> 0x159dc <wc_AesSetKey+8>:	sub	sp, sp, #24
0x000159e0	4590	    {
=> 0x159e0 <wc_AesSetKey+12>:	str	r0, [r11, #-8]
0x000159e4	4590	    {
=> 0x159e4 <wc_AesSetKey+16>:	str	r1, [r11, #-12]
0x000159e8	4590	    {
=> 0x159e8 <wc_AesSetKey+20>:	str	r2, [r11, #-16]
0x000159ec	4590	    {
=> 0x159ec <wc_AesSetKey+24>:	str	r3, [r11, #-20]	; 0xffffffec
4591	        if (aes == NULL) {
=> 0x159f0 <wc_AesSetKey+28>:	ldr	r3, [r11, #-8]
0x000159f4	4591	        if (aes == NULL) {
=> 0x159f4 <wc_AesSetKey+32>:	cmp	r3, #0
0x000159f8	4591	        if (aes == NULL) {
=> 0x159f8 <wc_AesSetKey+36>:	bne	0x15a04 <wc_AesSetKey+48>
4594	        if (keylen > sizeof(aes->key)) {
=> 0x15a04 <wc_AesSetKey+48>:	ldr	r3, [r11, #-16]
0x00015a08	4594	        if (keylen > sizeof(aes->key)) {
=> 0x15a08 <wc_AesSetKey+52>:	cmp	r3, #240	; 0xf0
0x00015a0c	4594	        if (keylen > sizeof(aes->key)) {
=> 0x15a0c <wc_AesSetKey+56>:	bls	0x15a18 <wc_AesSetKey+68>
4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a18 <wc_AesSetKey+68>:	mov	r3, #1
0x00015a1c	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a1c <wc_AesSetKey+72>:	str	r3, [sp, #4]
0x00015a20	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a20 <wc_AesSetKey+76>:	ldr	r3, [r11, #4]
0x00015a24	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a24 <wc_AesSetKey+80>:	str	r3, [sp]
0x00015a28	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a28 <wc_AesSetKey+84>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015a2c	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a2c <wc_AesSetKey+88>:	ldr	r2, [r11, #-16]
0x00015a30	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a30 <wc_AesSetKey+92>:	ldr	r1, [r11, #-12]
0x00015a34	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a34 <wc_AesSetKey+96>:	ldr	r0, [r11, #-8]
0x00015a38	4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a38 <wc_AesSetKey+100>:	bl	0x15864 <wc_AesSetKeyLocal>
wc_AesSetKeyLocal (aes=0x40800324, userKey=0x1 <error: Cannot access memory at address 0x1>, keylen=680108, iv=0x407fff10 "", dir=1, checkKeyLen=1) at wolfcrypt/src/aes.c:4312
4312	    {
=> 0x15864 <wc_AesSetKeyLocal>:	push	{r11, lr}
0x00015868	4312	    {
=> 0x15868 <wc_AesSetKeyLocal+4>:	add	r11, sp, #4
0x0001586c	4312	    {
=> 0x1586c <wc_AesSetKeyLocal+8>:	sub	sp, sp, #24
0x00015870	4312	    {
=> 0x15870 <wc_AesSetKeyLocal+12>:	str	r0, [r11, #-16]
0x00015874	4312	    {
=> 0x15874 <wc_AesSetKeyLocal+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00015878	4312	    {
=> 0x15878 <wc_AesSetKeyLocal+20>:	str	r2, [r11, #-24]	; 0xffffffe8
0x0001587c	4312	    {
=> 0x1587c <wc_AesSetKeyLocal+24>:	str	r3, [r11, #-28]	; 0xffffffe4
4319	        if (aes == NULL)
=> 0x15880 <wc_AesSetKeyLocal+28>:	ldr	r3, [r11, #-16]
0x00015884	4319	        if (aes == NULL)
=> 0x15884 <wc_AesSetKeyLocal+32>:	cmp	r3, #0
0x00015888	4319	        if (aes == NULL)
=> 0x15888 <wc_AesSetKeyLocal+36>:	bne	0x15894 <wc_AesSetKeyLocal+48>
4327	        switch (keylen) {
=> 0x15894 <wc_AesSetKeyLocal+48>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015898	4327	        switch (keylen) {
=> 0x15898 <wc_AesSetKeyLocal+52>:	sub	r3, r3, #16
0x0001589c	4327	        switch (keylen) {
=> 0x1589c <wc_AesSetKeyLocal+56>:	cmp	r3, #16
0x000158a0	4327	        switch (keylen) {
=> 0x158a0 <wc_AesSetKeyLocal+60>:	movhi	r2, #1
0x000158a4	4327	        switch (keylen) {
=> 0x158a4 <wc_AesSetKeyLocal+64>:	movls	r2, #0
0x000158a8	4327	        switch (keylen) {
=> 0x158a8 <wc_AesSetKeyLocal+68>:	and	r2, r2, #255	; 0xff
0x000158ac	4327	        switch (keylen) {
=> 0x158ac <wc_AesSetKeyLocal+72>:	cmp	r2, #0
0x000158b0	4327	        switch (keylen) {
=> 0x158b0 <wc_AesSetKeyLocal+76>:	bne	0x158d8 <wc_AesSetKeyLocal+116>
0x000158b4	4327	        switch (keylen) {
=> 0x158b4 <wc_AesSetKeyLocal+80>:	ldr	r2, [pc, #276]	; 0x159d0 <wc_AesSetKeyLocal+364>
0x000158b8	4327	        switch (keylen) {
=> 0x158b8 <wc_AesSetKeyLocal+84>:	lsr	r3, r2, r3
0x000158bc	4327	        switch (keylen) {
=> 0x158bc <wc_AesSetKeyLocal+88>:	and	r3, r3, #1
0x000158c0	4327	        switch (keylen) {
=> 0x158c0 <wc_AesSetKeyLocal+92>:	cmp	r3, #0
0x000158c4	4327	        switch (keylen) {
=> 0x158c4 <wc_AesSetKeyLocal+96>:	movne	r3, #1
0x000158c8	4327	        switch (keylen) {
=> 0x158c8 <wc_AesSetKeyLocal+100>:	moveq	r3, #0
0x000158cc	4327	        switch (keylen) {
=> 0x158cc <wc_AesSetKeyLocal+104>:	and	r3, r3, #255	; 0xff
0x000158d0	4327	        switch (keylen) {
=> 0x158d0 <wc_AesSetKeyLocal+108>:	cmp	r3, #0
0x000158d4	4327	        switch (keylen) {
=> 0x158d4 <wc_AesSetKeyLocal+112>:	bne	0x158e0 <wc_AesSetKeyLocal+124>
4340	            break;
=> 0x158e0 <wc_AesSetKeyLocal+124>:	nop			; (mov r0, r0)
4422	        if (checkKeyLen) {
=> 0x158e4 <wc_AesSetKeyLocal+128>:	ldr	r3, [r11, #8]
0x000158e8	4422	        if (checkKeyLen) {
=> 0x158e8 <wc_AesSetKeyLocal+132>:	cmp	r3, #0
0x000158ec	4422	        if (checkKeyLen) {
=> 0x158ec <wc_AesSetKeyLocal+136>:	beq	0x1591c <wc_AesSetKeyLocal+184>
4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x158f0 <wc_AesSetKeyLocal+140>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000158f4	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x158f4 <wc_AesSetKeyLocal+144>:	cmp	r3, #16
0x000158f8	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x158f8 <wc_AesSetKeyLocal+148>:	beq	0x1591c <wc_AesSetKeyLocal+184>
0x000158fc	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x158fc <wc_AesSetKeyLocal+152>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015900	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x15900 <wc_AesSetKeyLocal+156>:	cmp	r3, #24
0x00015904	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x15904 <wc_AesSetKeyLocal+160>:	beq	0x1591c <wc_AesSetKeyLocal+184>
0x00015908	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x15908 <wc_AesSetKeyLocal+164>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001590c	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x1590c <wc_AesSetKeyLocal+168>:	cmp	r3, #32
0x00015910	4423	            if (keylen != 16 && keylen != 24 && keylen != 32) {
=> 0x15910 <wc_AesSetKeyLocal+172>:	beq	0x1591c <wc_AesSetKeyLocal+184>
4440	        aes->keylen = (int)keylen;
=> 0x1591c <wc_AesSetKeyLocal+184>:	ldr	r2, [r11, #-24]	; 0xffffffe8
4440	        aes->keylen = (int)keylen;
=> 0x15920 <wc_AesSetKeyLocal+188>:	ldr	r3, [r11, #-16]
0x00015924	4440	        aes->keylen = (int)keylen;
=> 0x15924 <wc_AesSetKeyLocal+192>:	str	r2, [r3, #244]	; 0xf4
4441	        aes->rounds = (keylen/4) + 6;
=> 0x15928 <wc_AesSetKeyLocal+196>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001592c	4441	        aes->rounds = (keylen/4) + 6;
=> 0x1592c <wc_AesSetKeyLocal+200>:	lsr	r3, r3, #2
4441	        aes->rounds = (keylen/4) + 6;
=> 0x15930 <wc_AesSetKeyLocal+204>:	add	r2, r3, #6
4441	        aes->rounds = (keylen/4) + 6;
=> 0x15934 <wc_AesSetKeyLocal+208>:	ldr	r3, [r11, #-16]
0x00015938	4441	        aes->rounds = (keylen/4) + 6;
=> 0x15938 <wc_AesSetKeyLocal+212>:	str	r2, [r3, #240]	; 0xf0
4442	        ret = wc_AesSetIV(aes, iv);
=> 0x1593c <wc_AesSetKeyLocal+216>:	ldr	r1, [r11, #-28]	; 0xffffffe4
0x00015940	4442	        ret = wc_AesSetIV(aes, iv);
=> 0x15940 <wc_AesSetKeyLocal+220>:	ldr	r0, [r11, #-16]
0x00015944	4442	        ret = wc_AesSetIV(aes, iv);
=> 0x15944 <wc_AesSetKeyLocal+224>:	bl	0x15a4c <wc_AesSetIV>
wc_AesSetIV (aes=0x9eb56b00, iv=0x407ffee0 "\314y\374$\351y\t\277<\302\032\067\066\336hm\016") at wolfcrypt/src/aes.c:4643
4643	{
=> 0x15a4c <wc_AesSetIV>:	push	{r11, lr}
0x00015a50	4643	{
=> 0x15a50 <wc_AesSetIV+4>:	add	r11, sp, #4
0x00015a54	4643	{
=> 0x15a54 <wc_AesSetIV+8>:	sub	sp, sp, #8
0x00015a58	4643	{
=> 0x15a58 <wc_AesSetIV+12>:	str	r0, [r11, #-8]
0x00015a5c	4643	{
=> 0x15a5c <wc_AesSetIV+16>:	str	r1, [r11, #-12]
4644	    if (aes == NULL)
=> 0x15a60 <wc_AesSetIV+20>:	ldr	r3, [r11, #-8]
0x00015a64	4644	    if (aes == NULL)
=> 0x15a64 <wc_AesSetIV+24>:	cmp	r3, #0
0x00015a68	4644	    if (aes == NULL)
=> 0x15a68 <wc_AesSetIV+28>:	bne	0x15a74 <wc_AesSetIV+40>
4655	    if (iv)
=> 0x15a74 <wc_AesSetIV+40>:	ldr	r3, [r11, #-12]
0x00015a78	4655	    if (iv)
=> 0x15a78 <wc_AesSetIV+44>:	cmp	r3, #0
0x00015a7c	4655	    if (iv)
=> 0x15a7c <wc_AesSetIV+48>:	beq	0x15a9c <wc_AesSetIV+80>
4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a80 <wc_AesSetIV+52>:	ldr	r3, [r11, #-8]
0x00015a84	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a84 <wc_AesSetIV+56>:	add	r3, r3, #256	; 0x100
0x00015a88	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a88 <wc_AesSetIV+60>:	mov	r2, #16
0x00015a8c	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a8c <wc_AesSetIV+64>:	ldr	r1, [r11, #-12]
0x00015a90	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a90 <wc_AesSetIV+68>:	mov	r0, r3
0x00015a94	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a94 <wc_AesSetIV+72>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af78 in memcpy ()
=> 0x3af78 <memcpy+88>:	ldr	r6, [r1], #4
0x0003af7c in memcpy ()
=> 0x3af7c <memcpy+92>:	ldr	r7, [r1], #4
0x0003af80 in memcpy ()
=> 0x3af80 <memcpy+96>:	ldr	r8, [r1], #4
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afa0 in memcpy ()
=> 0x3afa0 <memcpy+128>:	str	r6, [r0], #4
0x0003afa4 in memcpy ()
=> 0x3afa4 <memcpy+132>:	str	r7, [r0], #4
0x0003afa8 in memcpy ()
=> 0x3afa8 <memcpy+136>:	str	r8, [r0], #4
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
0x00015a98 in wc_AesSetIV (aes=0x407ffe00, iv=0x40800154 "") at wolfcrypt/src/aes.c:4656
4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a98 <wc_AesSetIV+76>:	b	0x15ab4 <wc_AesSetIV+104>
4666	    return 0;
=> 0x15ab4 <wc_AesSetIV+104>:	mov	r3, #0
4667	}
=> 0x15ab8 <wc_AesSetIV+108>:	mov	r0, r3
0x00015abc	4667	}
=> 0x15abc <wc_AesSetIV+112>:	sub	sp, r11, #4
0x00015ac0	4667	}
=> 0x15ac0 <wc_AesSetIV+116>:	pop	{r11, pc}
0x00015948 in wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=1, checkKeyLen=1) at wolfcrypt/src/aes.c:4442
4442	        ret = wc_AesSetIV(aes, iv);
=> 0x15948 <wc_AesSetKeyLocal+228>:	str	r0, [r11, #-8]
4443	        if (ret != 0)
=> 0x1594c <wc_AesSetKeyLocal+232>:	ldr	r3, [r11, #-8]
0x00015950	4443	        if (ret != 0)
=> 0x15950 <wc_AesSetKeyLocal+236>:	cmp	r3, #0
0x00015954	4443	        if (ret != 0)
=> 0x15954 <wc_AesSetKeyLocal+240>:	beq	0x15960 <wc_AesSetKeyLocal+252>
4504	        if (keylen > sizeof(aes->key)) {
=> 0x15960 <wc_AesSetKeyLocal+252>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015964	4504	        if (keylen > sizeof(aes->key)) {
=> 0x15964 <wc_AesSetKeyLocal+256>:	cmp	r3, #240	; 0xf0
0x00015968	4504	        if (keylen > sizeof(aes->key)) {
=> 0x15968 <wc_AesSetKeyLocal+260>:	bls	0x15974 <wc_AesSetKeyLocal+272>
4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x15974 <wc_AesSetKeyLocal+272>:	ldr	r3, [r11, #-16]
0x00015978	4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x15978 <wc_AesSetKeyLocal+276>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x0001597c	4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x1597c <wc_AesSetKeyLocal+280>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015980	4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x15980 <wc_AesSetKeyLocal+284>:	mov	r0, r3
0x00015984	4524	        XMEMCPY(aes->key, userKey, keylen);
=> 0x15984 <wc_AesSetKeyLocal+288>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af48 in memcpy ()
=> 0x3af48 <memcpy+40>:	ldm	r1!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x0003af4c in memcpy ()
=> 0x3af4c <memcpy+44>:	subs	r2, r2, #32
0x0003af50 in memcpy ()
=> 0x3af50 <memcpy+48>:	stmia	r0!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x0003af54 in memcpy ()
=> 0x3af54 <memcpy+52>:	bcs	0x3af48 <memcpy+40>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af64 in memcpy ()
=> 0x3af64 <memcpy+68>:	b	0x3afb0 <memcpy+144>
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=1, checkKeyLen=1) at wolfcrypt/src/aes.c:4532
4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x15988 <wc_AesSetKeyLocal+292>:	ldr	r3, [r11, #-16]
4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x1598c <wc_AesSetKeyLocal+296>:	ldr	r1, [r11, #-16]
4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x15990 <wc_AesSetKeyLocal+300>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015994	4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x15994 <wc_AesSetKeyLocal+304>:	mov	r0, r3
0x00015998	4532	        ByteReverseWords(aes->key, aes->key, keylen);
=> 0x15998 <wc_AesSetKeyLocal+308>:	bl	0x107ec <ByteReverseWords>
ByteReverseWords (out=0xa60ac, in=0x63e33a99, byteCount=1082129920) at ./wolfcrypt/src/misc.c:183
183	{
=> 0x107ec <ByteReverseWords>:	push	{r4, r11, lr}
0x000107f0	183	{
=> 0x107f0 <ByteReverseWords+4>:	add	r11, sp, #8
0x000107f4	183	{
=> 0x107f4 <ByteReverseWords+8>:	sub	sp, sp, #44	; 0x2c
0x000107f8	183	{
=> 0x107f8 <ByteReverseWords+12>:	str	r0, [r11, #-40]	; 0xffffffd8
0x000107fc	183	{
=> 0x107fc <ByteReverseWords+16>:	str	r1, [r11, #-44]	; 0xffffffd4
0x00010800	183	{
=> 0x10800 <ByteReverseWords+20>:	str	r2, [r11, #-48]	; 0xffffffd0
183	{
=> 0x10804 <ByteReverseWords+24>:	ldr	r3, [pc, #332]	; 0x10958 <ByteReverseWords+364>
0x00010808	183	{
=> 0x10808 <ByteReverseWords+28>:	ldr	r3, [r3]
0x0001080c	183	{
=> 0x1080c <ByteReverseWords+32>:	str	r3, [r11, #-16]
0x00010810	183	{
=> 0x10810 <ByteReverseWords+36>:	mov	r3, #0
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10814 <ByteReverseWords+40>:	ldr	r3, [r11, #-44]	; 0xffffffd4
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10818 <ByteReverseWords+44>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1081c <ByteReverseWords+48>:	cmp	r3, #0
0x00010820	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10820 <ByteReverseWords+52>:	bne	0x108a0 <ByteReverseWords+180>
188	        (((size_t)out & 0x3) == 0))
=> 0x10824 <ByteReverseWords+56>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010828	188	        (((size_t)out & 0x3) == 0))
=> 0x10828 <ByteReverseWords+60>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1082c <ByteReverseWords+64>:	cmp	r3, #0
0x00010830	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10830 <ByteReverseWords+68>:	bne	0x108a0 <ByteReverseWords+180>
191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10834 <ByteReverseWords+72>:	ldr	r3, [r11, #-48]	; 0xffffffd0
0x00010838	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10838 <ByteReverseWords+76>:	lsr	r3, r3, #2
0x0001083c	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x1083c <ByteReverseWords+80>:	str	r3, [r11, #-28]	; 0xffffffe4
192	        for (i = 0; i < count; i++)
=> 0x10840 <ByteReverseWords+84>:	mov	r3, #0
0x00010844	192	        for (i = 0; i < count; i++)
=> 0x10844 <ByteReverseWords+88>:	str	r3, [r11, #-32]	; 0xffffffe0
192	        for (i = 0; i < count; i++)
=> 0x10848 <ByteReverseWords+92>:	b	0x1088c <ByteReverseWords+160>
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=77016) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=1082131236, y=1) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=33751041) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=33751041) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=33751041, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=101123077) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=101123077) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=101123077, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=168495113) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=168495113) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=168495113, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=235867149) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=235867149) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=235867149, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=303239185) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=303239185) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=303239185, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=370611221) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=370611221) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=370611221, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=437983257) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=437983257) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=437983257, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=505355293) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
190	    {
=> 0x1089c <ByteReverseWords+176>:	b	0x10930 <ByteReverseWords+324>
210	}
=> 0x10930 <ByteReverseWords+324>:	nop			; (mov r0, r0)
0x00010934	210	}
=> 0x10934 <ByteReverseWords+328>:	ldr	r3, [pc, #28]	; 0x10958 <ByteReverseWords+364>
0x00010938	210	}
=> 0x10938 <ByteReverseWords+332>:	ldr	r2, [r3]
0x0001093c	210	}
=> 0x1093c <ByteReverseWords+336>:	ldr	r3, [r11, #-16]
0x00010940	210	}
=> 0x10940 <ByteReverseWords+340>:	eors	r2, r3, r2
0x00010944	210	}
=> 0x10944 <ByteReverseWords+344>:	mov	r3, #0
0x00010948	210	}
=> 0x10948 <ByteReverseWords+348>:	beq	0x10950 <ByteReverseWords+356>
0x00010950	210	}
=> 0x10950 <ByteReverseWords+356>:	sub	sp, r11, #8
0x00010954	210	}
=> 0x10954 <ByteReverseWords+360>:	pop	{r4, r11, pc}
wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=1, checkKeyLen=1) at wolfcrypt/src/aes.c:4566
4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x1599c <wc_AesSetKeyLocal+312>:	ldr	r3, [r11, #4]
0x000159a0	4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x159a0 <wc_AesSetKeyLocal+316>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000159a4	4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x159a4 <wc_AesSetKeyLocal+320>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x000159a8	4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x159a8 <wc_AesSetKeyLocal+324>:	ldr	r0, [r11, #-16]
0x000159ac	4566	        AesSetKey_C(aes, userKey, keylen, dir);
=> 0x159ac <wc_AesSetKeyLocal+328>:	bl	0x14ccc <AesSetKey_C>
AesSetKey_C (aes=0x8, key=0x1 <error: Cannot access memory at address 0x1>, keySz=1082129920, dir=1082129920) at wolfcrypt/src/aes.c:4075
4075	{
=> 0x14ccc <AesSetKey_C>:	push	{r11, lr}
0x00014cd0	4075	{
=> 0x14cd0 <AesSetKey_C+4>:	add	r11, sp, #4
0x00014cd4	4075	{
=> 0x14cd4 <AesSetKey_C+8>:	sub	sp, sp, #40	; 0x28
0x00014cd8	4075	{
=> 0x14cd8 <AesSetKey_C+12>:	str	r0, [r11, #-32]	; 0xffffffe0
0x00014cdc	4075	{
=> 0x14cdc <AesSetKey_C+16>:	str	r1, [r11, #-36]	; 0xffffffdc
0x00014ce0	4075	{
=> 0x14ce0 <AesSetKey_C+20>:	str	r2, [r11, #-40]	; 0xffffffd8
0x00014ce4	4075	{
=> 0x14ce4 <AesSetKey_C+24>:	str	r3, [r11, #-44]	; 0xffffffd4
4075	{
=> 0x14ce8 <AesSetKey_C+28>:	ldr	r3, [pc, #2916]	; 0x15854 <AesSetKey_C+2952>
0x00014cec	4075	{
=> 0x14cec <AesSetKey_C+32>:	ldr	r3, [r3]
0x00014cf0	4075	{
=> 0x14cf0 <AesSetKey_C+36>:	str	r3, [r11, #-8]
0x00014cf4	4075	{
=> 0x14cf4 <AesSetKey_C+40>:	mov	r3, #0
4079	    word32* rk = aes->key;
=> 0x14cf8 <AesSetKey_C+44>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00014cfc	4079	    word32* rk = aes->key;
=> 0x14cfc <AesSetKey_C+48>:	str	r3, [r11, #-20]	; 0xffffffec
4082	    unsigned int i = 0;
=> 0x14d00 <AesSetKey_C+52>:	mov	r3, #0
0x00014d04	4082	    unsigned int i = 0;
=> 0x14d04 <AesSetKey_C+56>:	str	r3, [r11, #-16]
4084	    XMEMCPY(rk, key, keySz);
=> 0x14d08 <AesSetKey_C+60>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00014d0c	4084	    XMEMCPY(rk, key, keySz);
=> 0x14d0c <AesSetKey_C+64>:	ldr	r1, [r11, #-36]	; 0xffffffdc
0x00014d10	4084	    XMEMCPY(rk, key, keySz);
=> 0x14d10 <AesSetKey_C+68>:	ldr	r0, [r11, #-20]	; 0xffffffec
0x00014d14	4084	    XMEMCPY(rk, key, keySz);
=> 0x14d14 <AesSetKey_C+72>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af48 in memcpy ()
=> 0x3af48 <memcpy+40>:	ldm	r1!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x0003af4c in memcpy ()
=> 0x3af4c <memcpy+44>:	subs	r2, r2, #32
0x0003af50 in memcpy ()
=> 0x3af50 <memcpy+48>:	stmia	r0!, {r3, r4, r5, r6, r7, r8, r12, lr}
0x0003af54 in memcpy ()
=> 0x3af54 <memcpy+52>:	bcs	0x3af48 <memcpy+40>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af64 in memcpy ()
=> 0x3af64 <memcpy+68>:	b	0x3afb0 <memcpy+144>
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesSetKey_C (aes=0x407ffe00, key=0x40800194 "", keySz=32, dir=1) at wolfcrypt/src/aes.c:4089
4089	        ByteReverseWords(rk, rk, keySz);
=> 0x14d18 <AesSetKey_C+76>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x00014d1c	4089	        ByteReverseWords(rk, rk, keySz);
=> 0x14d1c <AesSetKey_C+80>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00014d20	4089	        ByteReverseWords(rk, rk, keySz);
=> 0x14d20 <AesSetKey_C+84>:	ldr	r0, [r11, #-20]	; 0xffffffec
0x00014d24	4089	        ByteReverseWords(rk, rk, keySz);
=> 0x14d24 <AesSetKey_C+88>:	bl	0x107ec <ByteReverseWords>
ByteReverseWords (out=0xa60ac, in=0x10, byteCount=32) at ./wolfcrypt/src/misc.c:183
183	{
=> 0x107ec <ByteReverseWords>:	push	{r4, r11, lr}
0x000107f0	183	{
=> 0x107f0 <ByteReverseWords+4>:	add	r11, sp, #8
0x000107f4	183	{
=> 0x107f4 <ByteReverseWords+8>:	sub	sp, sp, #44	; 0x2c
0x000107f8	183	{
=> 0x107f8 <ByteReverseWords+12>:	str	r0, [r11, #-40]	; 0xffffffd8
0x000107fc	183	{
=> 0x107fc <ByteReverseWords+16>:	str	r1, [r11, #-44]	; 0xffffffd4
0x00010800	183	{
=> 0x10800 <ByteReverseWords+20>:	str	r2, [r11, #-48]	; 0xffffffd0
183	{
=> 0x10804 <ByteReverseWords+24>:	ldr	r3, [pc, #332]	; 0x10958 <ByteReverseWords+364>
0x00010808	183	{
=> 0x10808 <ByteReverseWords+28>:	ldr	r3, [r3]
0x0001080c	183	{
=> 0x1080c <ByteReverseWords+32>:	str	r3, [r11, #-16]
0x00010810	183	{
=> 0x10810 <ByteReverseWords+36>:	mov	r3, #0
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10814 <ByteReverseWords+40>:	ldr	r3, [r11, #-44]	; 0xffffffd4
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10818 <ByteReverseWords+44>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1081c <ByteReverseWords+48>:	cmp	r3, #0
0x00010820	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10820 <ByteReverseWords+52>:	bne	0x108a0 <ByteReverseWords+180>
188	        (((size_t)out & 0x3) == 0))
=> 0x10824 <ByteReverseWords+56>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010828	188	        (((size_t)out & 0x3) == 0))
=> 0x10828 <ByteReverseWords+60>:	and	r3, r3, #3
187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x1082c <ByteReverseWords+64>:	cmp	r3, #0
0x00010830	187	    if ((((size_t)in & 0x3) == 0) &&
=> 0x10830 <ByteReverseWords+68>:	bne	0x108a0 <ByteReverseWords+180>
191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10834 <ByteReverseWords+72>:	ldr	r3, [r11, #-48]	; 0xffffffd0
0x00010838	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x10838 <ByteReverseWords+76>:	lsr	r3, r3, #2
0x0001083c	191	        word32 count = byteCount/(word32)sizeof(word32);
=> 0x1083c <ByteReverseWords+80>:	str	r3, [r11, #-28]	; 0xffffffe4
192	        for (i = 0; i < count; i++)
=> 0x10840 <ByteReverseWords+84>:	mov	r3, #0
0x00010844	192	        for (i = 0; i < count; i++)
=> 0x10844 <ByteReverseWords+88>:	str	r3, [r11, #-32]	; 0xffffffe0
192	        for (i = 0; i < count; i++)
=> 0x10848 <ByteReverseWords+92>:	b	0x1088c <ByteReverseWords+160>
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=505355293) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=505355293, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=33751041) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=33751041) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=33751041, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=101123077) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=101123077) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=101123077, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=168495113) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=168495113) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=168495113, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=235867149) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=235867149) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=235867149, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=303239185) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=303239185) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=303239185, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=370611221) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=370611221) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=370611221, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=437983257) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1084c <ByteReverseWords+96>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010850	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10850 <ByteReverseWords+100>:	lsl	r3, r3, #2
0x00010854	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10854 <ByteReverseWords+104>:	ldr	r2, [r11, #-44]	; 0xffffffd4
0x00010858	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10858 <ByteReverseWords+108>:	add	r3, r2, r3
0x0001085c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1085c <ByteReverseWords+112>:	ldr	r1, [r3]
0x00010860	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10860 <ByteReverseWords+116>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010864	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10864 <ByteReverseWords+120>:	lsl	r3, r3, #2
0x00010868	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10868 <ByteReverseWords+124>:	ldr	r2, [r11, #-40]	; 0xffffffd8
0x0001086c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1086c <ByteReverseWords+128>:	add	r4, r2, r3
0x00010870	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10870 <ByteReverseWords+132>:	mov	r0, r1
0x00010874	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10874 <ByteReverseWords+136>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=437983257) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=437983257, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=505355293) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00010878 in ByteReverseWords (out=0x407ffe00, in=0x407ffe00, byteCount=32) at ./wolfcrypt/src/misc.c:193
193	            out[i] = ByteReverseWord32(in[i]);
=> 0x10878 <ByteReverseWords+140>:	mov	r3, r0
0x0001087c	193	            out[i] = ByteReverseWord32(in[i]);
=> 0x1087c <ByteReverseWords+144>:	str	r3, [r4]
192	        for (i = 0; i < count; i++)
=> 0x10880 <ByteReverseWords+148>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010884	192	        for (i = 0; i < count; i++)
=> 0x10884 <ByteReverseWords+152>:	add	r3, r3, #1
0x00010888	192	        for (i = 0; i < count; i++)
=> 0x10888 <ByteReverseWords+156>:	str	r3, [r11, #-32]	; 0xffffffe0
0x0001088c	192	        for (i = 0; i < count; i++)
=> 0x1088c <ByteReverseWords+160>:	ldr	r2, [r11, #-32]	; 0xffffffe0
0x00010890	192	        for (i = 0; i < count; i++)
=> 0x10890 <ByteReverseWords+164>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010894	192	        for (i = 0; i < count; i++)
=> 0x10894 <ByteReverseWords+168>:	cmp	r2, r3
0x00010898	192	        for (i = 0; i < count; i++)
=> 0x10898 <ByteReverseWords+172>:	bcc	0x1084c <ByteReverseWords+96>
190	    {
=> 0x1089c <ByteReverseWords+176>:	b	0x10930 <ByteReverseWords+324>
210	}
=> 0x10930 <ByteReverseWords+324>:	nop			; (mov r0, r0)
0x00010934	210	}
=> 0x10934 <ByteReverseWords+328>:	ldr	r3, [pc, #28]	; 0x10958 <ByteReverseWords+364>
0x00010938	210	}
=> 0x10938 <ByteReverseWords+332>:	ldr	r2, [r3]
0x0001093c	210	}
=> 0x1093c <ByteReverseWords+336>:	ldr	r3, [r11, #-16]
0x00010940	210	}
=> 0x10940 <ByteReverseWords+340>:	eors	r2, r3, r2
0x00010944	210	}
=> 0x10944 <ByteReverseWords+344>:	mov	r3, #0
0x00010948	210	}
=> 0x10948 <ByteReverseWords+348>:	beq	0x10950 <ByteReverseWords+356>
0x00010950	210	}
=> 0x10950 <ByteReverseWords+356>:	sub	sp, r11, #8
0x00010954	210	}
=> 0x10954 <ByteReverseWords+360>:	pop	{r4, r11, pc}
AesSetKey_C (aes=0x407ffe00, key=0x40800194 "", keySz=32, dir=1) at wolfcrypt/src/aes.c:4111
4111	    switch (keySz) {
=> 0x14d28 <AesSetKey_C+92>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00014d2c	4111	    switch (keySz) {
=> 0x14d2c <AesSetKey_C+96>:	cmp	r3, #32
0x00014d30	4111	    switch (keySz) {
=> 0x14d30 <AesSetKey_C+100>:	beq	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4209	            temp = rk[11];
=> 0x15190 <AesSetKey_C+1220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015194	4209	            temp = rk[11];
=> 0x15194 <AesSetKey_C+1224>:	ldr	r3, [r3, #44]	; 0x2c
0x00015198	4209	            temp = rk[11];
=> 0x15198 <AesSetKey_C+1228>:	str	r3, [r11, #-24]	; 0xffffffe8
4210	            rk[12] = rk[ 4] ^
=> 0x1519c <AesSetKey_C+1232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000151a0	4210	            rk[12] = rk[ 4] ^
=> 0x151a0 <AesSetKey_C+1236>:	add	r3, r3, #16
0x000151a4	4210	            rk[12] = rk[ 4] ^
=> 0x151a4 <AesSetKey_C+1240>:	ldr	r2, [r3]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151a8 <AesSetKey_C+1244>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ac	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151ac <AesSetKey_C+1248>:	lsr	r3, r3, #24
0x000151b0	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b0 <AesSetKey_C+1252>:	and	r3, r3, #255	; 0xff
0x000151b4	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b4 <AesSetKey_C+1256>:	ldr	r1, [pc, #1692]	; 0x15858 <AesSetKey_C+2956>
0x000151b8	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151b8 <AesSetKey_C+1260>:	add	r3, r3, #512	; 0x200
0x000151bc	4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151bc <AesSetKey_C+1264>:	ldr	r3, [r1, r3, lsl #2]
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151c0 <AesSetKey_C+1268>:	and	r3, r3, #-16777216	; 0xff000000
4210	            rk[12] = rk[ 4] ^
=> 0x151c4 <AesSetKey_C+1272>:	eor	r2, r2, r3
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151c8 <AesSetKey_C+1276>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151cc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151cc <AesSetKey_C+1280>:	lsr	r3, r3, #16
0x000151d0	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d0 <AesSetKey_C+1284>:	and	r3, r3, #255	; 0xff
0x000151d4	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d4 <AesSetKey_C+1288>:	ldr	r1, [pc, #1660]	; 0x15858 <AesSetKey_C+2956>
0x000151d8	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151d8 <AesSetKey_C+1292>:	add	r3, r3, #768	; 0x300
0x000151dc	4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151dc <AesSetKey_C+1296>:	ldr	r3, [r1, r3, lsl #2]
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x151e0 <AesSetKey_C+1300>:	and	r3, r3, #16711680	; 0xff0000
4212	                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
=> 0x151e4 <AesSetKey_C+1304>:	eor	r2, r2, r3
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151e8 <AesSetKey_C+1308>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000151ec	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151ec <AesSetKey_C+1312>:	lsr	r3, r3, #8
0x000151f0	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f0 <AesSetKey_C+1316>:	and	r3, r3, #255	; 0xff
0x000151f4	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f4 <AesSetKey_C+1320>:	mov	r1, r3
0x000151f8	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151f8 <AesSetKey_C+1324>:	ldr	r3, [pc, #1624]	; 0x15858 <AesSetKey_C+2956>
0x000151fc	4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x151fc <AesSetKey_C+1328>:	ldr	r3, [r3, r1, lsl #2]
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15200 <AesSetKey_C+1332>:	and	r3, r3, #65280	; 0xff00
4213	                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
=> 0x15204 <AesSetKey_C+1336>:	eor	r1, r2, r3
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15208 <AesSetKey_C+1340>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001520c	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1520c <AesSetKey_C+1344>:	and	r3, r3, #255	; 0xff
0x00015210	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15210 <AesSetKey_C+1348>:	ldr	r2, [pc, #1600]	; 0x15858 <AesSetKey_C+2956>
0x00015214	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15214 <AesSetKey_C+1352>:	add	r3, r3, #256	; 0x100
0x00015218	4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x15218 <AesSetKey_C+1356>:	ldr	r3, [r2, r3, lsl #2]
4215	                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
=> 0x1521c <AesSetKey_C+1360>:	and	r2, r3, #255	; 0xff
4210	            rk[12] = rk[ 4] ^
=> 0x15220 <AesSetKey_C+1364>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015224	4210	            rk[12] = rk[ 4] ^
=> 0x15224 <AesSetKey_C+1368>:	add	r3, r3, #48	; 0x30
4214	                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
=> 0x15228 <AesSetKey_C+1372>:	eor	r2, r2, r1
4210	            rk[12] = rk[ 4] ^
=> 0x1522c <AesSetKey_C+1376>:	str	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15230 <AesSetKey_C+1380>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015234	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15234 <AesSetKey_C+1384>:	add	r3, r3, #20
0x00015238	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15238 <AesSetKey_C+1388>:	ldr	r1, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1523c <AesSetKey_C+1392>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015240	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15240 <AesSetKey_C+1396>:	add	r3, r3, #48	; 0x30
0x00015244	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15244 <AesSetKey_C+1400>:	ldr	r2, [r3]
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15248 <AesSetKey_C+1404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001524c	4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x1524c <AesSetKey_C+1408>:	add	r3, r3, #52	; 0x34
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15250 <AesSetKey_C+1412>:	eor	r2, r2, r1
4222	            rk[13] = rk[ 5] ^ rk[12];
=> 0x15254 <AesSetKey_C+1416>:	str	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15258 <AesSetKey_C+1420>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001525c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1525c <AesSetKey_C+1424>:	add	r3, r3, #24
0x00015260	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15260 <AesSetKey_C+1428>:	ldr	r1, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15264 <AesSetKey_C+1432>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015268	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15268 <AesSetKey_C+1436>:	add	r3, r3, #52	; 0x34
0x0001526c	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1526c <AesSetKey_C+1440>:	ldr	r2, [r3]
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15270 <AesSetKey_C+1444>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015274	4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15274 <AesSetKey_C+1448>:	add	r3, r3, #56	; 0x38
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x15278 <AesSetKey_C+1452>:	eor	r2, r2, r1
4223	            rk[14] = rk[ 6] ^ rk[13];
=> 0x1527c <AesSetKey_C+1456>:	str	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15280 <AesSetKey_C+1460>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015284	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15284 <AesSetKey_C+1464>:	add	r3, r3, #28
0x00015288	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15288 <AesSetKey_C+1468>:	ldr	r1, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1528c <AesSetKey_C+1472>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015290	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15290 <AesSetKey_C+1476>:	add	r3, r3, #56	; 0x38
0x00015294	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15294 <AesSetKey_C+1480>:	ldr	r2, [r3]
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x15298 <AesSetKey_C+1484>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001529c	4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x1529c <AesSetKey_C+1488>:	add	r3, r3, #60	; 0x3c
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a0 <AesSetKey_C+1492>:	eor	r2, r2, r1
4224	            rk[15] = rk[ 7] ^ rk[14];
=> 0x152a4 <AesSetKey_C+1496>:	str	r2, [r3]
4226	            rk += 8;
=> 0x152a8 <AesSetKey_C+1500>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000152ac	4226	            rk += 8;
=> 0x152ac <AesSetKey_C+1504>:	add	r3, r3, #32
0x000152b0	4226	            rk += 8;
=> 0x152b0 <AesSetKey_C+1508>:	str	r3, [r11, #-20]	; 0xffffffec
4190	            temp = rk[ 7];
=> 0x152b4 <AesSetKey_C+1512>:	b	0x15054 <AesSetKey_C+904>
4190	            temp = rk[ 7];
=> 0x15054 <AesSetKey_C+904>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015058	4190	            temp = rk[ 7];
=> 0x15058 <AesSetKey_C+908>:	ldr	r3, [r3, #28]
0x0001505c	4190	            temp = rk[ 7];
=> 0x1505c <AesSetKey_C+912>:	str	r3, [r11, #-24]	; 0xffffffe8
4191	            rk[ 8] = rk[ 0] ^
=> 0x15060 <AesSetKey_C+916>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015064	4191	            rk[ 8] = rk[ 0] ^
=> 0x15064 <AesSetKey_C+920>:	ldr	r2, [r3]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15068 <AesSetKey_C+924>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001506c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1506c <AesSetKey_C+928>:	lsr	r3, r3, #16
0x00015070	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15070 <AesSetKey_C+932>:	and	r3, r3, #255	; 0xff
0x00015074	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15074 <AesSetKey_C+936>:	ldr	r1, [pc, #2012]	; 0x15858 <AesSetKey_C+2956>
0x00015078	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15078 <AesSetKey_C+940>:	add	r3, r3, #512	; 0x200
0x0001507c	4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x1507c <AesSetKey_C+944>:	ldr	r3, [r1, r3, lsl #2]
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x15080 <AesSetKey_C+948>:	and	r3, r3, #-16777216	; 0xff000000
4191	            rk[ 8] = rk[ 0] ^
=> 0x15084 <AesSetKey_C+952>:	eor	r2, r2, r3
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15088 <AesSetKey_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001508c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1508c <AesSetKey_C+960>:	lsr	r3, r3, #8
0x00015090	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15090 <AesSetKey_C+964>:	and	r3, r3, #255	; 0xff
0x00015094	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15094 <AesSetKey_C+968>:	ldr	r1, [pc, #1980]	; 0x15858 <AesSetKey_C+2956>
0x00015098	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x15098 <AesSetKey_C+972>:	add	r3, r3, #768	; 0x300
0x0001509c	4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x1509c <AesSetKey_C+976>:	ldr	r3, [r1, r3, lsl #2]
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150a0 <AesSetKey_C+980>:	and	r3, r3, #16711680	; 0xff0000
4193	                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
=> 0x150a4 <AesSetKey_C+984>:	eor	r2, r2, r3
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150a8 <AesSetKey_C+988>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150ac	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150ac <AesSetKey_C+992>:	and	r3, r3, #255	; 0xff
0x000150b0	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b0 <AesSetKey_C+996>:	mov	r1, r3
0x000150b4	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b4 <AesSetKey_C+1000>:	ldr	r3, [pc, #1948]	; 0x15858 <AesSetKey_C+2956>
0x000150b8	4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150b8 <AesSetKey_C+1004>:	ldr	r3, [r3, r1, lsl #2]
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150bc <AesSetKey_C+1008>:	and	r3, r3, #65280	; 0xff00
4194	                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
=> 0x150c0 <AesSetKey_C+1012>:	eor	r2, r2, r3
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c4 <AesSetKey_C+1016>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000150c8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150c8 <AesSetKey_C+1020>:	lsr	r3, r3, #24
0x000150cc	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150cc <AesSetKey_C+1024>:	and	r3, r3, #255	; 0xff
0x000150d0	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d0 <AesSetKey_C+1028>:	ldr	r1, [pc, #1920]	; 0x15858 <AesSetKey_C+2956>
0x000150d4	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d4 <AesSetKey_C+1032>:	add	r3, r3, #256	; 0x100
0x000150d8	4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150d8 <AesSetKey_C+1036>:	ldr	r3, [r1, r3, lsl #2]
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150dc <AesSetKey_C+1040>:	and	r3, r3, #255	; 0xff
4195	                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
=> 0x150e0 <AesSetKey_C+1044>:	eor	r1, r2, r3
4203	                rcon[i];
=> 0x150e4 <AesSetKey_C+1048>:	ldr	r2, [pc, #1904]	; 0x1585c <AesSetKey_C+2960>
0x000150e8	4203	                rcon[i];
=> 0x150e8 <AesSetKey_C+1052>:	ldr	r3, [r11, #-16]
0x000150ec	4203	                rcon[i];
=> 0x150ec <AesSetKey_C+1056>:	ldr	r2, [r2, r3, lsl #2]
4191	            rk[ 8] = rk[ 0] ^
=> 0x150f0 <AesSetKey_C+1060>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000150f4	4191	            rk[ 8] = rk[ 0] ^
=> 0x150f4 <AesSetKey_C+1064>:	add	r3, r3, #32
4196	                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
=> 0x150f8 <AesSetKey_C+1068>:	eor	r2, r2, r1
4191	            rk[ 8] = rk[ 0] ^
=> 0x150fc <AesSetKey_C+1072>:	str	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15100 <AesSetKey_C+1076>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015104	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15104 <AesSetKey_C+1080>:	add	r3, r3, #4
0x00015108	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15108 <AesSetKey_C+1084>:	ldr	r1, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1510c <AesSetKey_C+1088>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015110	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15110 <AesSetKey_C+1092>:	add	r3, r3, #32
0x00015114	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15114 <AesSetKey_C+1096>:	ldr	r2, [r3]
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15118 <AesSetKey_C+1100>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001511c	4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x1511c <AesSetKey_C+1104>:	add	r3, r3, #36	; 0x24
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15120 <AesSetKey_C+1108>:	eor	r2, r2, r1
4204	            rk[ 9] = rk[ 1] ^ rk[ 8];
=> 0x15124 <AesSetKey_C+1112>:	str	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15128 <AesSetKey_C+1116>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001512c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1512c <AesSetKey_C+1120>:	add	r3, r3, #8
0x00015130	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15130 <AesSetKey_C+1124>:	ldr	r1, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15134 <AesSetKey_C+1128>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015138	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15138 <AesSetKey_C+1132>:	add	r3, r3, #36	; 0x24
0x0001513c	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1513c <AesSetKey_C+1136>:	ldr	r2, [r3]
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15140 <AesSetKey_C+1140>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015144	4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15144 <AesSetKey_C+1144>:	add	r3, r3, #40	; 0x28
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x15148 <AesSetKey_C+1148>:	eor	r2, r2, r1
4205	            rk[10] = rk[ 2] ^ rk[ 9];
=> 0x1514c <AesSetKey_C+1152>:	str	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15150 <AesSetKey_C+1156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015154	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15154 <AesSetKey_C+1160>:	add	r3, r3, #12
0x00015158	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15158 <AesSetKey_C+1164>:	ldr	r1, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1515c <AesSetKey_C+1168>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015160	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15160 <AesSetKey_C+1172>:	add	r3, r3, #40	; 0x28
0x00015164	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15164 <AesSetKey_C+1176>:	ldr	r2, [r3]
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15168 <AesSetKey_C+1180>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001516c	4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x1516c <AesSetKey_C+1184>:	add	r3, r3, #44	; 0x2c
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15170 <AesSetKey_C+1188>:	eor	r2, r2, r1
4206	            rk[11] = rk[ 3] ^ rk[10];
=> 0x15174 <AesSetKey_C+1192>:	str	r2, [r3]
4207	            if (++i == 7)
=> 0x15178 <AesSetKey_C+1196>:	ldr	r3, [r11, #-16]
0x0001517c	4207	            if (++i == 7)
=> 0x1517c <AesSetKey_C+1200>:	add	r3, r3, #1
0x00015180	4207	            if (++i == 7)
=> 0x15180 <AesSetKey_C+1204>:	str	r3, [r11, #-16]
0x00015184	4207	            if (++i == 7)
=> 0x15184 <AesSetKey_C+1208>:	ldr	r3, [r11, #-16]
0x00015188	4207	            if (++i == 7)
=> 0x15188 <AesSetKey_C+1212>:	cmp	r3, #7
0x0001518c	4207	            if (++i == 7)
=> 0x1518c <AesSetKey_C+1216>:	beq	0x152b8 <AesSetKey_C+1516>
4208	                break;
=> 0x152b8 <AesSetKey_C+1516>:	nop			; (mov r0, r0)
4228	        break;
=> 0x152bc <AesSetKey_C+1520>:	nop			; (mov r0, r0)
4231	    ForceZero(&temp, sizeof(temp));
=> 0x152c0 <AesSetKey_C+1524>:	sub	r3, r11, #24
0x000152c4	4231	    ForceZero(&temp, sizeof(temp));
=> 0x152c4 <AesSetKey_C+1528>:	mov	r1, #4
0x000152c8	4231	    ForceZero(&temp, sizeof(temp));
=> 0x152c8 <AesSetKey_C+1532>:	mov	r0, r3
0x000152cc	4231	    ForceZero(&temp, sizeof(temp));
=> 0x152cc <AesSetKey_C+1536>:	bl	0x10dbc <ForceZero>
ForceZero (mem=0x9eb56b00, len=1) at ./wolfcrypt/src/misc.c:376
376	{
=> 0x10dbc <ForceZero>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010dc0	376	{
=> 0x10dc0 <ForceZero+4>:	add	r11, sp, #0
0x00010dc4	376	{
=> 0x10dc4 <ForceZero+8>:	sub	sp, sp, #20
0x00010dc8	376	{
=> 0x10dc8 <ForceZero+12>:	str	r0, [r11, #-16]
0x00010dcc	376	{
=> 0x10dcc <ForceZero+16>:	str	r1, [r11, #-20]	; 0xffffffec
377	    volatile byte* z = (volatile byte*)mem;
=> 0x10dd0 <ForceZero+20>:	ldr	r3, [r11, #-16]
0x00010dd4	377	    volatile byte* z = (volatile byte*)mem;
=> 0x10dd4 <ForceZero+24>:	str	r3, [r11, #-8]
399	    while (len--) *z++ = 0;
=> 0x10dd8 <ForceZero+28>:	b	0x10df0 <ForceZero+52>
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
400	}
=> 0x10e04 <ForceZero+72>:	nop			; (mov r0, r0)
0x00010e08	400	}
=> 0x10e08 <ForceZero+76>:	nop			; (mov r0, r0)
0x00010e0c	400	}
=> 0x10e0c <ForceZero+80>:	add	sp, r11, #0
0x00010e10	400	}
=> 0x10e10 <ForceZero+84>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010e14	400	}
=> 0x10e14 <ForceZero+88>:	bx	lr
AesSetKey_C (aes=0x407ffe00, key=0x40800194 "", keySz=32, dir=1) at wolfcrypt/src/aes.c:4234
4234	    if (dir == AES_DECRYPTION) {
=> 0x152d0 <AesSetKey_C+1540>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000152d4	4234	    if (dir == AES_DECRYPTION) {
=> 0x152d4 <AesSetKey_C+1544>:	cmp	r3, #1
0x000152d8	4234	    if (dir == AES_DECRYPTION) {
=> 0x152d8 <AesSetKey_C+1548>:	bne	0x1582c <AesSetKey_C+2912>
4240	        rk = aes->key;
=> 0x152dc <AesSetKey_C+1552>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000152e0	4240	        rk = aes->key;
=> 0x152e0 <AesSetKey_C+1556>:	str	r3, [r11, #-20]	; 0xffffffec
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x152e4 <AesSetKey_C+1560>:	mov	r3, #0
0x000152e8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x152e8 <AesSetKey_C+1564>:	str	r3, [r11, #-16]
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x152ec <AesSetKey_C+1568>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000152f0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x152f0 <AesSetKey_C+1572>:	ldr	r3, [r3, #240]	; 0xf0
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x152f4 <AesSetKey_C+1576>:	lsl	r3, r3, #2
0x000152f8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x152f8 <AesSetKey_C+1580>:	str	r3, [r11, #-12]
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x152fc <AesSetKey_C+1584>:	b	0x154a8 <AesSetKey_C+2012>
0x000154a8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a8 <AesSetKey_C+2012>:	ldr	r2, [r11, #-16]
0x000154ac	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154ac <AesSetKey_C+2016>:	ldr	r3, [r11, #-12]
0x000154b0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b0 <AesSetKey_C+2020>:	cmp	r2, r3
0x000154b4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b4 <AesSetKey_C+2024>:	bcc	0x15300 <AesSetKey_C+1588>
4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15300 <AesSetKey_C+1588>:	ldr	r3, [r11, #-16]
0x00015304	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15304 <AesSetKey_C+1592>:	lsl	r3, r3, #2
0x00015308	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15308 <AesSetKey_C+1596>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001530c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1530c <AesSetKey_C+1600>:	add	r3, r2, r3
0x00015310	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15310 <AesSetKey_C+1604>:	ldr	r3, [r3]
0x00015314	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15314 <AesSetKey_C+1608>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015318	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15318 <AesSetKey_C+1612>:	ldr	r3, [r11, #-12]
0x0001531c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1531c <AesSetKey_C+1616>:	lsl	r3, r3, #2
0x00015320	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15320 <AesSetKey_C+1620>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015324	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15324 <AesSetKey_C+1624>:	add	r2, r2, r3
0x00015328	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15328 <AesSetKey_C+1628>:	ldr	r3, [r11, #-16]
0x0001532c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1532c <AesSetKey_C+1632>:	lsl	r3, r3, #2
0x00015330	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15330 <AesSetKey_C+1636>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015334	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15334 <AesSetKey_C+1640>:	add	r3, r1, r3
0x00015338	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15338 <AesSetKey_C+1644>:	ldr	r2, [r2]
0x0001533c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1533c <AesSetKey_C+1648>:	str	r2, [r3]
0x00015340	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15340 <AesSetKey_C+1652>:	ldr	r3, [r11, #-12]
0x00015344	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15344 <AesSetKey_C+1656>:	lsl	r3, r3, #2
0x00015348	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15348 <AesSetKey_C+1660>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001534c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1534c <AesSetKey_C+1664>:	add	r3, r2, r3
0x00015350	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15350 <AesSetKey_C+1668>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015354	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15354 <AesSetKey_C+1672>:	str	r2, [r3]
4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15358 <AesSetKey_C+1676>:	ldr	r3, [r11, #-16]
0x0001535c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1535c <AesSetKey_C+1680>:	add	r3, r3, #1
0x00015360	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15360 <AesSetKey_C+1684>:	lsl	r3, r3, #2
0x00015364	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15364 <AesSetKey_C+1688>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015368	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15368 <AesSetKey_C+1692>:	add	r3, r2, r3
0x0001536c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1536c <AesSetKey_C+1696>:	ldr	r3, [r3]
0x00015370	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15370 <AesSetKey_C+1700>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015374	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15374 <AesSetKey_C+1704>:	ldr	r3, [r11, #-12]
0x00015378	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15378 <AesSetKey_C+1708>:	add	r3, r3, #1
0x0001537c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1537c <AesSetKey_C+1712>:	lsl	r3, r3, #2
0x00015380	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15380 <AesSetKey_C+1716>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015384	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15384 <AesSetKey_C+1720>:	add	r2, r2, r3
0x00015388	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15388 <AesSetKey_C+1724>:	ldr	r3, [r11, #-16]
0x0001538c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1538c <AesSetKey_C+1728>:	add	r3, r3, #1
0x00015390	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15390 <AesSetKey_C+1732>:	lsl	r3, r3, #2
0x00015394	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15394 <AesSetKey_C+1736>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015398	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15398 <AesSetKey_C+1740>:	add	r3, r1, r3
0x0001539c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1539c <AesSetKey_C+1744>:	ldr	r2, [r2]
0x000153a0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a0 <AesSetKey_C+1748>:	str	r2, [r3]
0x000153a4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a4 <AesSetKey_C+1752>:	ldr	r3, [r11, #-12]
0x000153a8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a8 <AesSetKey_C+1756>:	add	r3, r3, #1
0x000153ac	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153ac <AesSetKey_C+1760>:	lsl	r3, r3, #2
0x000153b0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b0 <AesSetKey_C+1764>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153b4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b4 <AesSetKey_C+1768>:	add	r3, r2, r3
0x000153b8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b8 <AesSetKey_C+1772>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000153bc	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153bc <AesSetKey_C+1776>:	str	r2, [r3]
4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c0 <AesSetKey_C+1780>:	ldr	r3, [r11, #-16]
0x000153c4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c4 <AesSetKey_C+1784>:	add	r3, r3, #2
0x000153c8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c8 <AesSetKey_C+1788>:	lsl	r3, r3, #2
0x000153cc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153cc <AesSetKey_C+1792>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153d0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d0 <AesSetKey_C+1796>:	add	r3, r2, r3
0x000153d4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d4 <AesSetKey_C+1800>:	ldr	r3, [r3]
0x000153d8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d8 <AesSetKey_C+1804>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000153dc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153dc <AesSetKey_C+1808>:	ldr	r3, [r11, #-12]
0x000153e0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e0 <AesSetKey_C+1812>:	add	r3, r3, #2
0x000153e4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e4 <AesSetKey_C+1816>:	lsl	r3, r3, #2
0x000153e8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e8 <AesSetKey_C+1820>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153ec	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153ec <AesSetKey_C+1824>:	add	r2, r2, r3
0x000153f0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f0 <AesSetKey_C+1828>:	ldr	r3, [r11, #-16]
0x000153f4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f4 <AesSetKey_C+1832>:	add	r3, r3, #2
0x000153f8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f8 <AesSetKey_C+1836>:	lsl	r3, r3, #2
0x000153fc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153fc <AesSetKey_C+1840>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015400	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15400 <AesSetKey_C+1844>:	add	r3, r1, r3
0x00015404	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15404 <AesSetKey_C+1848>:	ldr	r2, [r2]
0x00015408	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15408 <AesSetKey_C+1852>:	str	r2, [r3]
0x0001540c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1540c <AesSetKey_C+1856>:	ldr	r3, [r11, #-12]
0x00015410	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15410 <AesSetKey_C+1860>:	add	r3, r3, #2
0x00015414	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15414 <AesSetKey_C+1864>:	lsl	r3, r3, #2
0x00015418	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15418 <AesSetKey_C+1868>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001541c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1541c <AesSetKey_C+1872>:	add	r3, r2, r3
0x00015420	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15420 <AesSetKey_C+1876>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015424	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15424 <AesSetKey_C+1880>:	str	r2, [r3]
4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15428 <AesSetKey_C+1884>:	ldr	r3, [r11, #-16]
0x0001542c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1542c <AesSetKey_C+1888>:	add	r3, r3, #3
0x00015430	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15430 <AesSetKey_C+1892>:	lsl	r3, r3, #2
0x00015434	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15434 <AesSetKey_C+1896>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015438	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15438 <AesSetKey_C+1900>:	add	r3, r2, r3
0x0001543c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1543c <AesSetKey_C+1904>:	ldr	r3, [r3]
0x00015440	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15440 <AesSetKey_C+1908>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015444	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15444 <AesSetKey_C+1912>:	ldr	r3, [r11, #-12]
0x00015448	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15448 <AesSetKey_C+1916>:	add	r3, r3, #3
0x0001544c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1544c <AesSetKey_C+1920>:	lsl	r3, r3, #2
0x00015450	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15450 <AesSetKey_C+1924>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015454	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15454 <AesSetKey_C+1928>:	add	r2, r2, r3
0x00015458	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15458 <AesSetKey_C+1932>:	ldr	r3, [r11, #-16]
0x0001545c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1545c <AesSetKey_C+1936>:	add	r3, r3, #3
0x00015460	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15460 <AesSetKey_C+1940>:	lsl	r3, r3, #2
0x00015464	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15464 <AesSetKey_C+1944>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015468	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15468 <AesSetKey_C+1948>:	add	r3, r1, r3
0x0001546c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1546c <AesSetKey_C+1952>:	ldr	r2, [r2]
0x00015470	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15470 <AesSetKey_C+1956>:	str	r2, [r3]
0x00015474	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15474 <AesSetKey_C+1960>:	ldr	r3, [r11, #-12]
0x00015478	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15478 <AesSetKey_C+1964>:	add	r3, r3, #3
0x0001547c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1547c <AesSetKey_C+1968>:	lsl	r3, r3, #2
0x00015480	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15480 <AesSetKey_C+1972>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015484	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15484 <AesSetKey_C+1976>:	add	r3, r2, r3
0x00015488	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15488 <AesSetKey_C+1980>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x0001548c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1548c <AesSetKey_C+1984>:	str	r2, [r3]
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15490 <AesSetKey_C+1988>:	ldr	r3, [r11, #-16]
0x00015494	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15494 <AesSetKey_C+1992>:	add	r3, r3, #4
0x00015498	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15498 <AesSetKey_C+1996>:	str	r3, [r11, #-16]
0x0001549c	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x1549c <AesSetKey_C+2000>:	ldr	r3, [r11, #-12]
0x000154a0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a0 <AesSetKey_C+2004>:	sub	r3, r3, #4
0x000154a4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a4 <AesSetKey_C+2008>:	str	r3, [r11, #-12]
0x000154a8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a8 <AesSetKey_C+2012>:	ldr	r2, [r11, #-16]
0x000154ac	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154ac <AesSetKey_C+2016>:	ldr	r3, [r11, #-12]
0x000154b0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b0 <AesSetKey_C+2020>:	cmp	r2, r3
0x000154b4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b4 <AesSetKey_C+2024>:	bcc	0x15300 <AesSetKey_C+1588>
4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15300 <AesSetKey_C+1588>:	ldr	r3, [r11, #-16]
0x00015304	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15304 <AesSetKey_C+1592>:	lsl	r3, r3, #2
0x00015308	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15308 <AesSetKey_C+1596>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001530c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1530c <AesSetKey_C+1600>:	add	r3, r2, r3
0x00015310	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15310 <AesSetKey_C+1604>:	ldr	r3, [r3]
0x00015314	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15314 <AesSetKey_C+1608>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015318	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15318 <AesSetKey_C+1612>:	ldr	r3, [r11, #-12]
0x0001531c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1531c <AesSetKey_C+1616>:	lsl	r3, r3, #2
0x00015320	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15320 <AesSetKey_C+1620>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015324	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15324 <AesSetKey_C+1624>:	add	r2, r2, r3
0x00015328	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15328 <AesSetKey_C+1628>:	ldr	r3, [r11, #-16]
0x0001532c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1532c <AesSetKey_C+1632>:	lsl	r3, r3, #2
0x00015330	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15330 <AesSetKey_C+1636>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015334	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15334 <AesSetKey_C+1640>:	add	r3, r1, r3
0x00015338	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15338 <AesSetKey_C+1644>:	ldr	r2, [r2]
0x0001533c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1533c <AesSetKey_C+1648>:	str	r2, [r3]
0x00015340	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15340 <AesSetKey_C+1652>:	ldr	r3, [r11, #-12]
0x00015344	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15344 <AesSetKey_C+1656>:	lsl	r3, r3, #2
0x00015348	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15348 <AesSetKey_C+1660>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001534c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1534c <AesSetKey_C+1664>:	add	r3, r2, r3
0x00015350	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15350 <AesSetKey_C+1668>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015354	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15354 <AesSetKey_C+1672>:	str	r2, [r3]
4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15358 <AesSetKey_C+1676>:	ldr	r3, [r11, #-16]
0x0001535c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1535c <AesSetKey_C+1680>:	add	r3, r3, #1
0x00015360	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15360 <AesSetKey_C+1684>:	lsl	r3, r3, #2
0x00015364	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15364 <AesSetKey_C+1688>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015368	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15368 <AesSetKey_C+1692>:	add	r3, r2, r3
0x0001536c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1536c <AesSetKey_C+1696>:	ldr	r3, [r3]
0x00015370	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15370 <AesSetKey_C+1700>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015374	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15374 <AesSetKey_C+1704>:	ldr	r3, [r11, #-12]
0x00015378	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15378 <AesSetKey_C+1708>:	add	r3, r3, #1
0x0001537c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1537c <AesSetKey_C+1712>:	lsl	r3, r3, #2
0x00015380	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15380 <AesSetKey_C+1716>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015384	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15384 <AesSetKey_C+1720>:	add	r2, r2, r3
0x00015388	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15388 <AesSetKey_C+1724>:	ldr	r3, [r11, #-16]
0x0001538c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1538c <AesSetKey_C+1728>:	add	r3, r3, #1
0x00015390	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15390 <AesSetKey_C+1732>:	lsl	r3, r3, #2
0x00015394	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15394 <AesSetKey_C+1736>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015398	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15398 <AesSetKey_C+1740>:	add	r3, r1, r3
0x0001539c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1539c <AesSetKey_C+1744>:	ldr	r2, [r2]
0x000153a0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a0 <AesSetKey_C+1748>:	str	r2, [r3]
0x000153a4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a4 <AesSetKey_C+1752>:	ldr	r3, [r11, #-12]
0x000153a8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a8 <AesSetKey_C+1756>:	add	r3, r3, #1
0x000153ac	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153ac <AesSetKey_C+1760>:	lsl	r3, r3, #2
0x000153b0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b0 <AesSetKey_C+1764>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153b4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b4 <AesSetKey_C+1768>:	add	r3, r2, r3
0x000153b8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b8 <AesSetKey_C+1772>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000153bc	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153bc <AesSetKey_C+1776>:	str	r2, [r3]
4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c0 <AesSetKey_C+1780>:	ldr	r3, [r11, #-16]
0x000153c4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c4 <AesSetKey_C+1784>:	add	r3, r3, #2
0x000153c8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c8 <AesSetKey_C+1788>:	lsl	r3, r3, #2
0x000153cc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153cc <AesSetKey_C+1792>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153d0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d0 <AesSetKey_C+1796>:	add	r3, r2, r3
0x000153d4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d4 <AesSetKey_C+1800>:	ldr	r3, [r3]
0x000153d8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d8 <AesSetKey_C+1804>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000153dc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153dc <AesSetKey_C+1808>:	ldr	r3, [r11, #-12]
0x000153e0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e0 <AesSetKey_C+1812>:	add	r3, r3, #2
0x000153e4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e4 <AesSetKey_C+1816>:	lsl	r3, r3, #2
0x000153e8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e8 <AesSetKey_C+1820>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153ec	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153ec <AesSetKey_C+1824>:	add	r2, r2, r3
0x000153f0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f0 <AesSetKey_C+1828>:	ldr	r3, [r11, #-16]
0x000153f4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f4 <AesSetKey_C+1832>:	add	r3, r3, #2
0x000153f8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f8 <AesSetKey_C+1836>:	lsl	r3, r3, #2
0x000153fc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153fc <AesSetKey_C+1840>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015400	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15400 <AesSetKey_C+1844>:	add	r3, r1, r3
0x00015404	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15404 <AesSetKey_C+1848>:	ldr	r2, [r2]
0x00015408	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15408 <AesSetKey_C+1852>:	str	r2, [r3]
0x0001540c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1540c <AesSetKey_C+1856>:	ldr	r3, [r11, #-12]
0x00015410	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15410 <AesSetKey_C+1860>:	add	r3, r3, #2
0x00015414	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15414 <AesSetKey_C+1864>:	lsl	r3, r3, #2
0x00015418	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15418 <AesSetKey_C+1868>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001541c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1541c <AesSetKey_C+1872>:	add	r3, r2, r3
0x00015420	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15420 <AesSetKey_C+1876>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015424	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15424 <AesSetKey_C+1880>:	str	r2, [r3]
4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15428 <AesSetKey_C+1884>:	ldr	r3, [r11, #-16]
0x0001542c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1542c <AesSetKey_C+1888>:	add	r3, r3, #3
0x00015430	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15430 <AesSetKey_C+1892>:	lsl	r3, r3, #2
0x00015434	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15434 <AesSetKey_C+1896>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015438	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15438 <AesSetKey_C+1900>:	add	r3, r2, r3
0x0001543c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1543c <AesSetKey_C+1904>:	ldr	r3, [r3]
0x00015440	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15440 <AesSetKey_C+1908>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015444	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15444 <AesSetKey_C+1912>:	ldr	r3, [r11, #-12]
0x00015448	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15448 <AesSetKey_C+1916>:	add	r3, r3, #3
0x0001544c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1544c <AesSetKey_C+1920>:	lsl	r3, r3, #2
0x00015450	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15450 <AesSetKey_C+1924>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015454	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15454 <AesSetKey_C+1928>:	add	r2, r2, r3
0x00015458	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15458 <AesSetKey_C+1932>:	ldr	r3, [r11, #-16]
0x0001545c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1545c <AesSetKey_C+1936>:	add	r3, r3, #3
0x00015460	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15460 <AesSetKey_C+1940>:	lsl	r3, r3, #2
0x00015464	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15464 <AesSetKey_C+1944>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015468	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15468 <AesSetKey_C+1948>:	add	r3, r1, r3
0x0001546c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1546c <AesSetKey_C+1952>:	ldr	r2, [r2]
0x00015470	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15470 <AesSetKey_C+1956>:	str	r2, [r3]
0x00015474	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15474 <AesSetKey_C+1960>:	ldr	r3, [r11, #-12]
0x00015478	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15478 <AesSetKey_C+1964>:	add	r3, r3, #3
0x0001547c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1547c <AesSetKey_C+1968>:	lsl	r3, r3, #2
0x00015480	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15480 <AesSetKey_C+1972>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015484	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15484 <AesSetKey_C+1976>:	add	r3, r2, r3
0x00015488	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15488 <AesSetKey_C+1980>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x0001548c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1548c <AesSetKey_C+1984>:	str	r2, [r3]
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15490 <AesSetKey_C+1988>:	ldr	r3, [r11, #-16]
0x00015494	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15494 <AesSetKey_C+1992>:	add	r3, r3, #4
0x00015498	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15498 <AesSetKey_C+1996>:	str	r3, [r11, #-16]
0x0001549c	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x1549c <AesSetKey_C+2000>:	ldr	r3, [r11, #-12]
0x000154a0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a0 <AesSetKey_C+2004>:	sub	r3, r3, #4
0x000154a4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a4 <AesSetKey_C+2008>:	str	r3, [r11, #-12]
0x000154a8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a8 <AesSetKey_C+2012>:	ldr	r2, [r11, #-16]
0x000154ac	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154ac <AesSetKey_C+2016>:	ldr	r3, [r11, #-12]
0x000154b0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b0 <AesSetKey_C+2020>:	cmp	r2, r3
0x000154b4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b4 <AesSetKey_C+2024>:	bcc	0x15300 <AesSetKey_C+1588>
4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15300 <AesSetKey_C+1588>:	ldr	r3, [r11, #-16]
0x00015304	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15304 <AesSetKey_C+1592>:	lsl	r3, r3, #2
0x00015308	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15308 <AesSetKey_C+1596>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001530c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1530c <AesSetKey_C+1600>:	add	r3, r2, r3
0x00015310	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15310 <AesSetKey_C+1604>:	ldr	r3, [r3]
0x00015314	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15314 <AesSetKey_C+1608>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015318	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15318 <AesSetKey_C+1612>:	ldr	r3, [r11, #-12]
0x0001531c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1531c <AesSetKey_C+1616>:	lsl	r3, r3, #2
0x00015320	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15320 <AesSetKey_C+1620>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015324	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15324 <AesSetKey_C+1624>:	add	r2, r2, r3
0x00015328	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15328 <AesSetKey_C+1628>:	ldr	r3, [r11, #-16]
0x0001532c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1532c <AesSetKey_C+1632>:	lsl	r3, r3, #2
0x00015330	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15330 <AesSetKey_C+1636>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015334	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15334 <AesSetKey_C+1640>:	add	r3, r1, r3
0x00015338	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15338 <AesSetKey_C+1644>:	ldr	r2, [r2]
0x0001533c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1533c <AesSetKey_C+1648>:	str	r2, [r3]
0x00015340	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15340 <AesSetKey_C+1652>:	ldr	r3, [r11, #-12]
0x00015344	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15344 <AesSetKey_C+1656>:	lsl	r3, r3, #2
0x00015348	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15348 <AesSetKey_C+1660>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001534c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1534c <AesSetKey_C+1664>:	add	r3, r2, r3
0x00015350	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15350 <AesSetKey_C+1668>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015354	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15354 <AesSetKey_C+1672>:	str	r2, [r3]
4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15358 <AesSetKey_C+1676>:	ldr	r3, [r11, #-16]
0x0001535c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1535c <AesSetKey_C+1680>:	add	r3, r3, #1
0x00015360	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15360 <AesSetKey_C+1684>:	lsl	r3, r3, #2
0x00015364	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15364 <AesSetKey_C+1688>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015368	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15368 <AesSetKey_C+1692>:	add	r3, r2, r3
0x0001536c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1536c <AesSetKey_C+1696>:	ldr	r3, [r3]
0x00015370	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15370 <AesSetKey_C+1700>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015374	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15374 <AesSetKey_C+1704>:	ldr	r3, [r11, #-12]
0x00015378	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15378 <AesSetKey_C+1708>:	add	r3, r3, #1
0x0001537c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1537c <AesSetKey_C+1712>:	lsl	r3, r3, #2
0x00015380	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15380 <AesSetKey_C+1716>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015384	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15384 <AesSetKey_C+1720>:	add	r2, r2, r3
0x00015388	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15388 <AesSetKey_C+1724>:	ldr	r3, [r11, #-16]
0x0001538c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1538c <AesSetKey_C+1728>:	add	r3, r3, #1
0x00015390	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15390 <AesSetKey_C+1732>:	lsl	r3, r3, #2
0x00015394	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15394 <AesSetKey_C+1736>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015398	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15398 <AesSetKey_C+1740>:	add	r3, r1, r3
0x0001539c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1539c <AesSetKey_C+1744>:	ldr	r2, [r2]
0x000153a0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a0 <AesSetKey_C+1748>:	str	r2, [r3]
0x000153a4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a4 <AesSetKey_C+1752>:	ldr	r3, [r11, #-12]
0x000153a8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a8 <AesSetKey_C+1756>:	add	r3, r3, #1
0x000153ac	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153ac <AesSetKey_C+1760>:	lsl	r3, r3, #2
0x000153b0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b0 <AesSetKey_C+1764>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153b4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b4 <AesSetKey_C+1768>:	add	r3, r2, r3
0x000153b8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b8 <AesSetKey_C+1772>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000153bc	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153bc <AesSetKey_C+1776>:	str	r2, [r3]
4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c0 <AesSetKey_C+1780>:	ldr	r3, [r11, #-16]
0x000153c4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c4 <AesSetKey_C+1784>:	add	r3, r3, #2
0x000153c8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c8 <AesSetKey_C+1788>:	lsl	r3, r3, #2
0x000153cc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153cc <AesSetKey_C+1792>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153d0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d0 <AesSetKey_C+1796>:	add	r3, r2, r3
0x000153d4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d4 <AesSetKey_C+1800>:	ldr	r3, [r3]
0x000153d8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d8 <AesSetKey_C+1804>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000153dc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153dc <AesSetKey_C+1808>:	ldr	r3, [r11, #-12]
0x000153e0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e0 <AesSetKey_C+1812>:	add	r3, r3, #2
0x000153e4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e4 <AesSetKey_C+1816>:	lsl	r3, r3, #2
0x000153e8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e8 <AesSetKey_C+1820>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153ec	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153ec <AesSetKey_C+1824>:	add	r2, r2, r3
0x000153f0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f0 <AesSetKey_C+1828>:	ldr	r3, [r11, #-16]
0x000153f4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f4 <AesSetKey_C+1832>:	add	r3, r3, #2
0x000153f8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f8 <AesSetKey_C+1836>:	lsl	r3, r3, #2
0x000153fc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153fc <AesSetKey_C+1840>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015400	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15400 <AesSetKey_C+1844>:	add	r3, r1, r3
0x00015404	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15404 <AesSetKey_C+1848>:	ldr	r2, [r2]
0x00015408	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15408 <AesSetKey_C+1852>:	str	r2, [r3]
0x0001540c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1540c <AesSetKey_C+1856>:	ldr	r3, [r11, #-12]
0x00015410	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15410 <AesSetKey_C+1860>:	add	r3, r3, #2
0x00015414	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15414 <AesSetKey_C+1864>:	lsl	r3, r3, #2
0x00015418	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15418 <AesSetKey_C+1868>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001541c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1541c <AesSetKey_C+1872>:	add	r3, r2, r3
0x00015420	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15420 <AesSetKey_C+1876>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015424	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15424 <AesSetKey_C+1880>:	str	r2, [r3]
4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15428 <AesSetKey_C+1884>:	ldr	r3, [r11, #-16]
0x0001542c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1542c <AesSetKey_C+1888>:	add	r3, r3, #3
0x00015430	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15430 <AesSetKey_C+1892>:	lsl	r3, r3, #2
0x00015434	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15434 <AesSetKey_C+1896>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015438	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15438 <AesSetKey_C+1900>:	add	r3, r2, r3
0x0001543c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1543c <AesSetKey_C+1904>:	ldr	r3, [r3]
0x00015440	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15440 <AesSetKey_C+1908>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015444	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15444 <AesSetKey_C+1912>:	ldr	r3, [r11, #-12]
0x00015448	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15448 <AesSetKey_C+1916>:	add	r3, r3, #3
0x0001544c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1544c <AesSetKey_C+1920>:	lsl	r3, r3, #2
0x00015450	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15450 <AesSetKey_C+1924>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015454	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15454 <AesSetKey_C+1928>:	add	r2, r2, r3
0x00015458	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15458 <AesSetKey_C+1932>:	ldr	r3, [r11, #-16]
0x0001545c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1545c <AesSetKey_C+1936>:	add	r3, r3, #3
0x00015460	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15460 <AesSetKey_C+1940>:	lsl	r3, r3, #2
0x00015464	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15464 <AesSetKey_C+1944>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015468	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15468 <AesSetKey_C+1948>:	add	r3, r1, r3
0x0001546c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1546c <AesSetKey_C+1952>:	ldr	r2, [r2]
0x00015470	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15470 <AesSetKey_C+1956>:	str	r2, [r3]
0x00015474	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15474 <AesSetKey_C+1960>:	ldr	r3, [r11, #-12]
0x00015478	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15478 <AesSetKey_C+1964>:	add	r3, r3, #3
0x0001547c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1547c <AesSetKey_C+1968>:	lsl	r3, r3, #2
0x00015480	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15480 <AesSetKey_C+1972>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015484	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15484 <AesSetKey_C+1976>:	add	r3, r2, r3
0x00015488	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15488 <AesSetKey_C+1980>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x0001548c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1548c <AesSetKey_C+1984>:	str	r2, [r3]
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15490 <AesSetKey_C+1988>:	ldr	r3, [r11, #-16]
0x00015494	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15494 <AesSetKey_C+1992>:	add	r3, r3, #4
0x00015498	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15498 <AesSetKey_C+1996>:	str	r3, [r11, #-16]
0x0001549c	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x1549c <AesSetKey_C+2000>:	ldr	r3, [r11, #-12]
0x000154a0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a0 <AesSetKey_C+2004>:	sub	r3, r3, #4
0x000154a4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a4 <AesSetKey_C+2008>:	str	r3, [r11, #-12]
0x000154a8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a8 <AesSetKey_C+2012>:	ldr	r2, [r11, #-16]
0x000154ac	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154ac <AesSetKey_C+2016>:	ldr	r3, [r11, #-12]
0x000154b0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b0 <AesSetKey_C+2020>:	cmp	r2, r3
0x000154b4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b4 <AesSetKey_C+2024>:	bcc	0x15300 <AesSetKey_C+1588>
4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15300 <AesSetKey_C+1588>:	ldr	r3, [r11, #-16]
0x00015304	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15304 <AesSetKey_C+1592>:	lsl	r3, r3, #2
0x00015308	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15308 <AesSetKey_C+1596>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001530c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1530c <AesSetKey_C+1600>:	add	r3, r2, r3
0x00015310	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15310 <AesSetKey_C+1604>:	ldr	r3, [r3]
0x00015314	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15314 <AesSetKey_C+1608>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015318	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15318 <AesSetKey_C+1612>:	ldr	r3, [r11, #-12]
0x0001531c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1531c <AesSetKey_C+1616>:	lsl	r3, r3, #2
0x00015320	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15320 <AesSetKey_C+1620>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015324	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15324 <AesSetKey_C+1624>:	add	r2, r2, r3
0x00015328	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15328 <AesSetKey_C+1628>:	ldr	r3, [r11, #-16]
0x0001532c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1532c <AesSetKey_C+1632>:	lsl	r3, r3, #2
0x00015330	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15330 <AesSetKey_C+1636>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015334	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15334 <AesSetKey_C+1640>:	add	r3, r1, r3
0x00015338	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15338 <AesSetKey_C+1644>:	ldr	r2, [r2]
0x0001533c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1533c <AesSetKey_C+1648>:	str	r2, [r3]
0x00015340	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15340 <AesSetKey_C+1652>:	ldr	r3, [r11, #-12]
0x00015344	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15344 <AesSetKey_C+1656>:	lsl	r3, r3, #2
0x00015348	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15348 <AesSetKey_C+1660>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001534c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1534c <AesSetKey_C+1664>:	add	r3, r2, r3
0x00015350	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15350 <AesSetKey_C+1668>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015354	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15354 <AesSetKey_C+1672>:	str	r2, [r3]
4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15358 <AesSetKey_C+1676>:	ldr	r3, [r11, #-16]
0x0001535c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1535c <AesSetKey_C+1680>:	add	r3, r3, #1
0x00015360	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15360 <AesSetKey_C+1684>:	lsl	r3, r3, #2
0x00015364	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15364 <AesSetKey_C+1688>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015368	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15368 <AesSetKey_C+1692>:	add	r3, r2, r3
0x0001536c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1536c <AesSetKey_C+1696>:	ldr	r3, [r3]
0x00015370	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15370 <AesSetKey_C+1700>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015374	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15374 <AesSetKey_C+1704>:	ldr	r3, [r11, #-12]
0x00015378	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15378 <AesSetKey_C+1708>:	add	r3, r3, #1
0x0001537c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1537c <AesSetKey_C+1712>:	lsl	r3, r3, #2
0x00015380	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15380 <AesSetKey_C+1716>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015384	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15384 <AesSetKey_C+1720>:	add	r2, r2, r3
0x00015388	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15388 <AesSetKey_C+1724>:	ldr	r3, [r11, #-16]
0x0001538c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1538c <AesSetKey_C+1728>:	add	r3, r3, #1
0x00015390	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15390 <AesSetKey_C+1732>:	lsl	r3, r3, #2
0x00015394	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15394 <AesSetKey_C+1736>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015398	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15398 <AesSetKey_C+1740>:	add	r3, r1, r3
0x0001539c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1539c <AesSetKey_C+1744>:	ldr	r2, [r2]
0x000153a0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a0 <AesSetKey_C+1748>:	str	r2, [r3]
0x000153a4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a4 <AesSetKey_C+1752>:	ldr	r3, [r11, #-12]
0x000153a8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a8 <AesSetKey_C+1756>:	add	r3, r3, #1
0x000153ac	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153ac <AesSetKey_C+1760>:	lsl	r3, r3, #2
0x000153b0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b0 <AesSetKey_C+1764>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153b4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b4 <AesSetKey_C+1768>:	add	r3, r2, r3
0x000153b8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b8 <AesSetKey_C+1772>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000153bc	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153bc <AesSetKey_C+1776>:	str	r2, [r3]
4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c0 <AesSetKey_C+1780>:	ldr	r3, [r11, #-16]
0x000153c4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c4 <AesSetKey_C+1784>:	add	r3, r3, #2
0x000153c8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c8 <AesSetKey_C+1788>:	lsl	r3, r3, #2
0x000153cc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153cc <AesSetKey_C+1792>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153d0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d0 <AesSetKey_C+1796>:	add	r3, r2, r3
0x000153d4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d4 <AesSetKey_C+1800>:	ldr	r3, [r3]
0x000153d8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d8 <AesSetKey_C+1804>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000153dc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153dc <AesSetKey_C+1808>:	ldr	r3, [r11, #-12]
0x000153e0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e0 <AesSetKey_C+1812>:	add	r3, r3, #2
0x000153e4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e4 <AesSetKey_C+1816>:	lsl	r3, r3, #2
0x000153e8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e8 <AesSetKey_C+1820>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153ec	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153ec <AesSetKey_C+1824>:	add	r2, r2, r3
0x000153f0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f0 <AesSetKey_C+1828>:	ldr	r3, [r11, #-16]
0x000153f4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f4 <AesSetKey_C+1832>:	add	r3, r3, #2
0x000153f8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f8 <AesSetKey_C+1836>:	lsl	r3, r3, #2
0x000153fc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153fc <AesSetKey_C+1840>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015400	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15400 <AesSetKey_C+1844>:	add	r3, r1, r3
0x00015404	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15404 <AesSetKey_C+1848>:	ldr	r2, [r2]
0x00015408	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15408 <AesSetKey_C+1852>:	str	r2, [r3]
0x0001540c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1540c <AesSetKey_C+1856>:	ldr	r3, [r11, #-12]
0x00015410	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15410 <AesSetKey_C+1860>:	add	r3, r3, #2
0x00015414	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15414 <AesSetKey_C+1864>:	lsl	r3, r3, #2
0x00015418	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15418 <AesSetKey_C+1868>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001541c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1541c <AesSetKey_C+1872>:	add	r3, r2, r3
0x00015420	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15420 <AesSetKey_C+1876>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015424	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15424 <AesSetKey_C+1880>:	str	r2, [r3]
4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15428 <AesSetKey_C+1884>:	ldr	r3, [r11, #-16]
0x0001542c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1542c <AesSetKey_C+1888>:	add	r3, r3, #3
0x00015430	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15430 <AesSetKey_C+1892>:	lsl	r3, r3, #2
0x00015434	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15434 <AesSetKey_C+1896>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015438	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15438 <AesSetKey_C+1900>:	add	r3, r2, r3
0x0001543c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1543c <AesSetKey_C+1904>:	ldr	r3, [r3]
0x00015440	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15440 <AesSetKey_C+1908>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015444	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15444 <AesSetKey_C+1912>:	ldr	r3, [r11, #-12]
0x00015448	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15448 <AesSetKey_C+1916>:	add	r3, r3, #3
0x0001544c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1544c <AesSetKey_C+1920>:	lsl	r3, r3, #2
0x00015450	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15450 <AesSetKey_C+1924>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015454	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15454 <AesSetKey_C+1928>:	add	r2, r2, r3
0x00015458	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15458 <AesSetKey_C+1932>:	ldr	r3, [r11, #-16]
0x0001545c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1545c <AesSetKey_C+1936>:	add	r3, r3, #3
0x00015460	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15460 <AesSetKey_C+1940>:	lsl	r3, r3, #2
0x00015464	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15464 <AesSetKey_C+1944>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015468	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15468 <AesSetKey_C+1948>:	add	r3, r1, r3
0x0001546c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1546c <AesSetKey_C+1952>:	ldr	r2, [r2]
0x00015470	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15470 <AesSetKey_C+1956>:	str	r2, [r3]
0x00015474	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15474 <AesSetKey_C+1960>:	ldr	r3, [r11, #-12]
0x00015478	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15478 <AesSetKey_C+1964>:	add	r3, r3, #3
0x0001547c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1547c <AesSetKey_C+1968>:	lsl	r3, r3, #2
0x00015480	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15480 <AesSetKey_C+1972>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015484	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15484 <AesSetKey_C+1976>:	add	r3, r2, r3
0x00015488	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15488 <AesSetKey_C+1980>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x0001548c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1548c <AesSetKey_C+1984>:	str	r2, [r3]
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15490 <AesSetKey_C+1988>:	ldr	r3, [r11, #-16]
0x00015494	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15494 <AesSetKey_C+1992>:	add	r3, r3, #4
0x00015498	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15498 <AesSetKey_C+1996>:	str	r3, [r11, #-16]
0x0001549c	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x1549c <AesSetKey_C+2000>:	ldr	r3, [r11, #-12]
0x000154a0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a0 <AesSetKey_C+2004>:	sub	r3, r3, #4
0x000154a4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a4 <AesSetKey_C+2008>:	str	r3, [r11, #-12]
0x000154a8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a8 <AesSetKey_C+2012>:	ldr	r2, [r11, #-16]
0x000154ac	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154ac <AesSetKey_C+2016>:	ldr	r3, [r11, #-12]
0x000154b0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b0 <AesSetKey_C+2020>:	cmp	r2, r3
0x000154b4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b4 <AesSetKey_C+2024>:	bcc	0x15300 <AesSetKey_C+1588>
4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15300 <AesSetKey_C+1588>:	ldr	r3, [r11, #-16]
0x00015304	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15304 <AesSetKey_C+1592>:	lsl	r3, r3, #2
0x00015308	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15308 <AesSetKey_C+1596>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001530c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1530c <AesSetKey_C+1600>:	add	r3, r2, r3
0x00015310	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15310 <AesSetKey_C+1604>:	ldr	r3, [r3]
0x00015314	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15314 <AesSetKey_C+1608>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015318	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15318 <AesSetKey_C+1612>:	ldr	r3, [r11, #-12]
0x0001531c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1531c <AesSetKey_C+1616>:	lsl	r3, r3, #2
0x00015320	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15320 <AesSetKey_C+1620>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015324	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15324 <AesSetKey_C+1624>:	add	r2, r2, r3
0x00015328	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15328 <AesSetKey_C+1628>:	ldr	r3, [r11, #-16]
0x0001532c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1532c <AesSetKey_C+1632>:	lsl	r3, r3, #2
0x00015330	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15330 <AesSetKey_C+1636>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015334	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15334 <AesSetKey_C+1640>:	add	r3, r1, r3
0x00015338	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15338 <AesSetKey_C+1644>:	ldr	r2, [r2]
0x0001533c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1533c <AesSetKey_C+1648>:	str	r2, [r3]
0x00015340	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15340 <AesSetKey_C+1652>:	ldr	r3, [r11, #-12]
0x00015344	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15344 <AesSetKey_C+1656>:	lsl	r3, r3, #2
0x00015348	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15348 <AesSetKey_C+1660>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001534c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1534c <AesSetKey_C+1664>:	add	r3, r2, r3
0x00015350	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15350 <AesSetKey_C+1668>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015354	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15354 <AesSetKey_C+1672>:	str	r2, [r3]
4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15358 <AesSetKey_C+1676>:	ldr	r3, [r11, #-16]
0x0001535c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1535c <AesSetKey_C+1680>:	add	r3, r3, #1
0x00015360	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15360 <AesSetKey_C+1684>:	lsl	r3, r3, #2
0x00015364	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15364 <AesSetKey_C+1688>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015368	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15368 <AesSetKey_C+1692>:	add	r3, r2, r3
0x0001536c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1536c <AesSetKey_C+1696>:	ldr	r3, [r3]
0x00015370	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15370 <AesSetKey_C+1700>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015374	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15374 <AesSetKey_C+1704>:	ldr	r3, [r11, #-12]
0x00015378	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15378 <AesSetKey_C+1708>:	add	r3, r3, #1
0x0001537c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1537c <AesSetKey_C+1712>:	lsl	r3, r3, #2
0x00015380	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15380 <AesSetKey_C+1716>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015384	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15384 <AesSetKey_C+1720>:	add	r2, r2, r3
0x00015388	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15388 <AesSetKey_C+1724>:	ldr	r3, [r11, #-16]
0x0001538c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1538c <AesSetKey_C+1728>:	add	r3, r3, #1
0x00015390	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15390 <AesSetKey_C+1732>:	lsl	r3, r3, #2
0x00015394	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15394 <AesSetKey_C+1736>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015398	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15398 <AesSetKey_C+1740>:	add	r3, r1, r3
0x0001539c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1539c <AesSetKey_C+1744>:	ldr	r2, [r2]
0x000153a0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a0 <AesSetKey_C+1748>:	str	r2, [r3]
0x000153a4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a4 <AesSetKey_C+1752>:	ldr	r3, [r11, #-12]
0x000153a8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a8 <AesSetKey_C+1756>:	add	r3, r3, #1
0x000153ac	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153ac <AesSetKey_C+1760>:	lsl	r3, r3, #2
0x000153b0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b0 <AesSetKey_C+1764>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153b4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b4 <AesSetKey_C+1768>:	add	r3, r2, r3
0x000153b8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b8 <AesSetKey_C+1772>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000153bc	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153bc <AesSetKey_C+1776>:	str	r2, [r3]
4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c0 <AesSetKey_C+1780>:	ldr	r3, [r11, #-16]
0x000153c4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c4 <AesSetKey_C+1784>:	add	r3, r3, #2
0x000153c8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c8 <AesSetKey_C+1788>:	lsl	r3, r3, #2
0x000153cc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153cc <AesSetKey_C+1792>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153d0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d0 <AesSetKey_C+1796>:	add	r3, r2, r3
0x000153d4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d4 <AesSetKey_C+1800>:	ldr	r3, [r3]
0x000153d8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d8 <AesSetKey_C+1804>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000153dc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153dc <AesSetKey_C+1808>:	ldr	r3, [r11, #-12]
0x000153e0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e0 <AesSetKey_C+1812>:	add	r3, r3, #2
0x000153e4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e4 <AesSetKey_C+1816>:	lsl	r3, r3, #2
0x000153e8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e8 <AesSetKey_C+1820>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153ec	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153ec <AesSetKey_C+1824>:	add	r2, r2, r3
0x000153f0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f0 <AesSetKey_C+1828>:	ldr	r3, [r11, #-16]
0x000153f4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f4 <AesSetKey_C+1832>:	add	r3, r3, #2
0x000153f8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f8 <AesSetKey_C+1836>:	lsl	r3, r3, #2
0x000153fc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153fc <AesSetKey_C+1840>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015400	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15400 <AesSetKey_C+1844>:	add	r3, r1, r3
0x00015404	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15404 <AesSetKey_C+1848>:	ldr	r2, [r2]
0x00015408	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15408 <AesSetKey_C+1852>:	str	r2, [r3]
0x0001540c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1540c <AesSetKey_C+1856>:	ldr	r3, [r11, #-12]
0x00015410	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15410 <AesSetKey_C+1860>:	add	r3, r3, #2
0x00015414	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15414 <AesSetKey_C+1864>:	lsl	r3, r3, #2
0x00015418	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15418 <AesSetKey_C+1868>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001541c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1541c <AesSetKey_C+1872>:	add	r3, r2, r3
0x00015420	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15420 <AesSetKey_C+1876>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015424	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15424 <AesSetKey_C+1880>:	str	r2, [r3]
4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15428 <AesSetKey_C+1884>:	ldr	r3, [r11, #-16]
0x0001542c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1542c <AesSetKey_C+1888>:	add	r3, r3, #3
0x00015430	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15430 <AesSetKey_C+1892>:	lsl	r3, r3, #2
0x00015434	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15434 <AesSetKey_C+1896>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015438	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15438 <AesSetKey_C+1900>:	add	r3, r2, r3
0x0001543c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1543c <AesSetKey_C+1904>:	ldr	r3, [r3]
0x00015440	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15440 <AesSetKey_C+1908>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015444	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15444 <AesSetKey_C+1912>:	ldr	r3, [r11, #-12]
0x00015448	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15448 <AesSetKey_C+1916>:	add	r3, r3, #3
0x0001544c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1544c <AesSetKey_C+1920>:	lsl	r3, r3, #2
0x00015450	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15450 <AesSetKey_C+1924>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015454	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15454 <AesSetKey_C+1928>:	add	r2, r2, r3
0x00015458	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15458 <AesSetKey_C+1932>:	ldr	r3, [r11, #-16]
0x0001545c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1545c <AesSetKey_C+1936>:	add	r3, r3, #3
0x00015460	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15460 <AesSetKey_C+1940>:	lsl	r3, r3, #2
0x00015464	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15464 <AesSetKey_C+1944>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015468	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15468 <AesSetKey_C+1948>:	add	r3, r1, r3
0x0001546c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1546c <AesSetKey_C+1952>:	ldr	r2, [r2]
0x00015470	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15470 <AesSetKey_C+1956>:	str	r2, [r3]
0x00015474	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15474 <AesSetKey_C+1960>:	ldr	r3, [r11, #-12]
0x00015478	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15478 <AesSetKey_C+1964>:	add	r3, r3, #3
0x0001547c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1547c <AesSetKey_C+1968>:	lsl	r3, r3, #2
0x00015480	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15480 <AesSetKey_C+1972>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015484	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15484 <AesSetKey_C+1976>:	add	r3, r2, r3
0x00015488	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15488 <AesSetKey_C+1980>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x0001548c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1548c <AesSetKey_C+1984>:	str	r2, [r3]
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15490 <AesSetKey_C+1988>:	ldr	r3, [r11, #-16]
0x00015494	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15494 <AesSetKey_C+1992>:	add	r3, r3, #4
0x00015498	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15498 <AesSetKey_C+1996>:	str	r3, [r11, #-16]
0x0001549c	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x1549c <AesSetKey_C+2000>:	ldr	r3, [r11, #-12]
0x000154a0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a0 <AesSetKey_C+2004>:	sub	r3, r3, #4
0x000154a4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a4 <AesSetKey_C+2008>:	str	r3, [r11, #-12]
0x000154a8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a8 <AesSetKey_C+2012>:	ldr	r2, [r11, #-16]
0x000154ac	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154ac <AesSetKey_C+2016>:	ldr	r3, [r11, #-12]
0x000154b0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b0 <AesSetKey_C+2020>:	cmp	r2, r3
0x000154b4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b4 <AesSetKey_C+2024>:	bcc	0x15300 <AesSetKey_C+1588>
4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15300 <AesSetKey_C+1588>:	ldr	r3, [r11, #-16]
0x00015304	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15304 <AesSetKey_C+1592>:	lsl	r3, r3, #2
0x00015308	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15308 <AesSetKey_C+1596>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001530c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1530c <AesSetKey_C+1600>:	add	r3, r2, r3
0x00015310	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15310 <AesSetKey_C+1604>:	ldr	r3, [r3]
0x00015314	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15314 <AesSetKey_C+1608>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015318	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15318 <AesSetKey_C+1612>:	ldr	r3, [r11, #-12]
0x0001531c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1531c <AesSetKey_C+1616>:	lsl	r3, r3, #2
0x00015320	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15320 <AesSetKey_C+1620>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015324	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15324 <AesSetKey_C+1624>:	add	r2, r2, r3
0x00015328	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15328 <AesSetKey_C+1628>:	ldr	r3, [r11, #-16]
0x0001532c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1532c <AesSetKey_C+1632>:	lsl	r3, r3, #2
0x00015330	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15330 <AesSetKey_C+1636>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015334	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15334 <AesSetKey_C+1640>:	add	r3, r1, r3
0x00015338	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15338 <AesSetKey_C+1644>:	ldr	r2, [r2]
0x0001533c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1533c <AesSetKey_C+1648>:	str	r2, [r3]
0x00015340	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15340 <AesSetKey_C+1652>:	ldr	r3, [r11, #-12]
0x00015344	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15344 <AesSetKey_C+1656>:	lsl	r3, r3, #2
0x00015348	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15348 <AesSetKey_C+1660>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001534c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1534c <AesSetKey_C+1664>:	add	r3, r2, r3
0x00015350	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15350 <AesSetKey_C+1668>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015354	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15354 <AesSetKey_C+1672>:	str	r2, [r3]
4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15358 <AesSetKey_C+1676>:	ldr	r3, [r11, #-16]
0x0001535c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1535c <AesSetKey_C+1680>:	add	r3, r3, #1
0x00015360	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15360 <AesSetKey_C+1684>:	lsl	r3, r3, #2
0x00015364	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15364 <AesSetKey_C+1688>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015368	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15368 <AesSetKey_C+1692>:	add	r3, r2, r3
0x0001536c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1536c <AesSetKey_C+1696>:	ldr	r3, [r3]
0x00015370	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15370 <AesSetKey_C+1700>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015374	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15374 <AesSetKey_C+1704>:	ldr	r3, [r11, #-12]
0x00015378	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15378 <AesSetKey_C+1708>:	add	r3, r3, #1
0x0001537c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1537c <AesSetKey_C+1712>:	lsl	r3, r3, #2
0x00015380	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15380 <AesSetKey_C+1716>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015384	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15384 <AesSetKey_C+1720>:	add	r2, r2, r3
0x00015388	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15388 <AesSetKey_C+1724>:	ldr	r3, [r11, #-16]
0x0001538c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1538c <AesSetKey_C+1728>:	add	r3, r3, #1
0x00015390	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15390 <AesSetKey_C+1732>:	lsl	r3, r3, #2
0x00015394	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15394 <AesSetKey_C+1736>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015398	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15398 <AesSetKey_C+1740>:	add	r3, r1, r3
0x0001539c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1539c <AesSetKey_C+1744>:	ldr	r2, [r2]
0x000153a0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a0 <AesSetKey_C+1748>:	str	r2, [r3]
0x000153a4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a4 <AesSetKey_C+1752>:	ldr	r3, [r11, #-12]
0x000153a8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a8 <AesSetKey_C+1756>:	add	r3, r3, #1
0x000153ac	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153ac <AesSetKey_C+1760>:	lsl	r3, r3, #2
0x000153b0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b0 <AesSetKey_C+1764>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153b4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b4 <AesSetKey_C+1768>:	add	r3, r2, r3
0x000153b8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b8 <AesSetKey_C+1772>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000153bc	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153bc <AesSetKey_C+1776>:	str	r2, [r3]
4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c0 <AesSetKey_C+1780>:	ldr	r3, [r11, #-16]
0x000153c4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c4 <AesSetKey_C+1784>:	add	r3, r3, #2
0x000153c8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c8 <AesSetKey_C+1788>:	lsl	r3, r3, #2
0x000153cc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153cc <AesSetKey_C+1792>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153d0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d0 <AesSetKey_C+1796>:	add	r3, r2, r3
0x000153d4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d4 <AesSetKey_C+1800>:	ldr	r3, [r3]
0x000153d8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d8 <AesSetKey_C+1804>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000153dc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153dc <AesSetKey_C+1808>:	ldr	r3, [r11, #-12]
0x000153e0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e0 <AesSetKey_C+1812>:	add	r3, r3, #2
0x000153e4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e4 <AesSetKey_C+1816>:	lsl	r3, r3, #2
0x000153e8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e8 <AesSetKey_C+1820>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153ec	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153ec <AesSetKey_C+1824>:	add	r2, r2, r3
0x000153f0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f0 <AesSetKey_C+1828>:	ldr	r3, [r11, #-16]
0x000153f4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f4 <AesSetKey_C+1832>:	add	r3, r3, #2
0x000153f8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f8 <AesSetKey_C+1836>:	lsl	r3, r3, #2
0x000153fc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153fc <AesSetKey_C+1840>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015400	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15400 <AesSetKey_C+1844>:	add	r3, r1, r3
0x00015404	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15404 <AesSetKey_C+1848>:	ldr	r2, [r2]
0x00015408	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15408 <AesSetKey_C+1852>:	str	r2, [r3]
0x0001540c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1540c <AesSetKey_C+1856>:	ldr	r3, [r11, #-12]
0x00015410	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15410 <AesSetKey_C+1860>:	add	r3, r3, #2
0x00015414	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15414 <AesSetKey_C+1864>:	lsl	r3, r3, #2
0x00015418	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15418 <AesSetKey_C+1868>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001541c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1541c <AesSetKey_C+1872>:	add	r3, r2, r3
0x00015420	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15420 <AesSetKey_C+1876>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015424	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15424 <AesSetKey_C+1880>:	str	r2, [r3]
4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15428 <AesSetKey_C+1884>:	ldr	r3, [r11, #-16]
0x0001542c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1542c <AesSetKey_C+1888>:	add	r3, r3, #3
0x00015430	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15430 <AesSetKey_C+1892>:	lsl	r3, r3, #2
0x00015434	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15434 <AesSetKey_C+1896>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015438	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15438 <AesSetKey_C+1900>:	add	r3, r2, r3
0x0001543c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1543c <AesSetKey_C+1904>:	ldr	r3, [r3]
0x00015440	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15440 <AesSetKey_C+1908>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015444	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15444 <AesSetKey_C+1912>:	ldr	r3, [r11, #-12]
0x00015448	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15448 <AesSetKey_C+1916>:	add	r3, r3, #3
0x0001544c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1544c <AesSetKey_C+1920>:	lsl	r3, r3, #2
0x00015450	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15450 <AesSetKey_C+1924>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015454	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15454 <AesSetKey_C+1928>:	add	r2, r2, r3
0x00015458	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15458 <AesSetKey_C+1932>:	ldr	r3, [r11, #-16]
0x0001545c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1545c <AesSetKey_C+1936>:	add	r3, r3, #3
0x00015460	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15460 <AesSetKey_C+1940>:	lsl	r3, r3, #2
0x00015464	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15464 <AesSetKey_C+1944>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015468	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15468 <AesSetKey_C+1948>:	add	r3, r1, r3
0x0001546c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1546c <AesSetKey_C+1952>:	ldr	r2, [r2]
0x00015470	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15470 <AesSetKey_C+1956>:	str	r2, [r3]
0x00015474	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15474 <AesSetKey_C+1960>:	ldr	r3, [r11, #-12]
0x00015478	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15478 <AesSetKey_C+1964>:	add	r3, r3, #3
0x0001547c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1547c <AesSetKey_C+1968>:	lsl	r3, r3, #2
0x00015480	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15480 <AesSetKey_C+1972>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015484	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15484 <AesSetKey_C+1976>:	add	r3, r2, r3
0x00015488	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15488 <AesSetKey_C+1980>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x0001548c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1548c <AesSetKey_C+1984>:	str	r2, [r3]
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15490 <AesSetKey_C+1988>:	ldr	r3, [r11, #-16]
0x00015494	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15494 <AesSetKey_C+1992>:	add	r3, r3, #4
0x00015498	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15498 <AesSetKey_C+1996>:	str	r3, [r11, #-16]
0x0001549c	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x1549c <AesSetKey_C+2000>:	ldr	r3, [r11, #-12]
0x000154a0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a0 <AesSetKey_C+2004>:	sub	r3, r3, #4
0x000154a4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a4 <AesSetKey_C+2008>:	str	r3, [r11, #-12]
0x000154a8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a8 <AesSetKey_C+2012>:	ldr	r2, [r11, #-16]
0x000154ac	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154ac <AesSetKey_C+2016>:	ldr	r3, [r11, #-12]
0x000154b0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b0 <AesSetKey_C+2020>:	cmp	r2, r3
0x000154b4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b4 <AesSetKey_C+2024>:	bcc	0x15300 <AesSetKey_C+1588>
4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15300 <AesSetKey_C+1588>:	ldr	r3, [r11, #-16]
0x00015304	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15304 <AesSetKey_C+1592>:	lsl	r3, r3, #2
0x00015308	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15308 <AesSetKey_C+1596>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001530c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1530c <AesSetKey_C+1600>:	add	r3, r2, r3
0x00015310	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15310 <AesSetKey_C+1604>:	ldr	r3, [r3]
0x00015314	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15314 <AesSetKey_C+1608>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015318	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15318 <AesSetKey_C+1612>:	ldr	r3, [r11, #-12]
0x0001531c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1531c <AesSetKey_C+1616>:	lsl	r3, r3, #2
0x00015320	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15320 <AesSetKey_C+1620>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015324	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15324 <AesSetKey_C+1624>:	add	r2, r2, r3
0x00015328	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15328 <AesSetKey_C+1628>:	ldr	r3, [r11, #-16]
0x0001532c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1532c <AesSetKey_C+1632>:	lsl	r3, r3, #2
0x00015330	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15330 <AesSetKey_C+1636>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015334	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15334 <AesSetKey_C+1640>:	add	r3, r1, r3
0x00015338	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15338 <AesSetKey_C+1644>:	ldr	r2, [r2]
0x0001533c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1533c <AesSetKey_C+1648>:	str	r2, [r3]
0x00015340	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15340 <AesSetKey_C+1652>:	ldr	r3, [r11, #-12]
0x00015344	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15344 <AesSetKey_C+1656>:	lsl	r3, r3, #2
0x00015348	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15348 <AesSetKey_C+1660>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001534c	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x1534c <AesSetKey_C+1664>:	add	r3, r2, r3
0x00015350	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15350 <AesSetKey_C+1668>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015354	4245	            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
=> 0x15354 <AesSetKey_C+1672>:	str	r2, [r3]
4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15358 <AesSetKey_C+1676>:	ldr	r3, [r11, #-16]
0x0001535c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1535c <AesSetKey_C+1680>:	add	r3, r3, #1
0x00015360	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15360 <AesSetKey_C+1684>:	lsl	r3, r3, #2
0x00015364	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15364 <AesSetKey_C+1688>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015368	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15368 <AesSetKey_C+1692>:	add	r3, r2, r3
0x0001536c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1536c <AesSetKey_C+1696>:	ldr	r3, [r3]
0x00015370	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15370 <AesSetKey_C+1700>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015374	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15374 <AesSetKey_C+1704>:	ldr	r3, [r11, #-12]
0x00015378	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15378 <AesSetKey_C+1708>:	add	r3, r3, #1
0x0001537c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1537c <AesSetKey_C+1712>:	lsl	r3, r3, #2
0x00015380	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15380 <AesSetKey_C+1716>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015384	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15384 <AesSetKey_C+1720>:	add	r2, r2, r3
0x00015388	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15388 <AesSetKey_C+1724>:	ldr	r3, [r11, #-16]
0x0001538c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1538c <AesSetKey_C+1728>:	add	r3, r3, #1
0x00015390	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15390 <AesSetKey_C+1732>:	lsl	r3, r3, #2
0x00015394	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15394 <AesSetKey_C+1736>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015398	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x15398 <AesSetKey_C+1740>:	add	r3, r1, r3
0x0001539c	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x1539c <AesSetKey_C+1744>:	ldr	r2, [r2]
0x000153a0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a0 <AesSetKey_C+1748>:	str	r2, [r3]
0x000153a4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a4 <AesSetKey_C+1752>:	ldr	r3, [r11, #-12]
0x000153a8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153a8 <AesSetKey_C+1756>:	add	r3, r3, #1
0x000153ac	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153ac <AesSetKey_C+1760>:	lsl	r3, r3, #2
0x000153b0	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b0 <AesSetKey_C+1764>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153b4	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b4 <AesSetKey_C+1768>:	add	r3, r2, r3
0x000153b8	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153b8 <AesSetKey_C+1772>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000153bc	4246	            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
=> 0x153bc <AesSetKey_C+1776>:	str	r2, [r3]
4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c0 <AesSetKey_C+1780>:	ldr	r3, [r11, #-16]
0x000153c4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c4 <AesSetKey_C+1784>:	add	r3, r3, #2
0x000153c8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153c8 <AesSetKey_C+1788>:	lsl	r3, r3, #2
0x000153cc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153cc <AesSetKey_C+1792>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153d0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d0 <AesSetKey_C+1796>:	add	r3, r2, r3
0x000153d4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d4 <AesSetKey_C+1800>:	ldr	r3, [r3]
0x000153d8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153d8 <AesSetKey_C+1804>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000153dc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153dc <AesSetKey_C+1808>:	ldr	r3, [r11, #-12]
0x000153e0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e0 <AesSetKey_C+1812>:	add	r3, r3, #2
0x000153e4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e4 <AesSetKey_C+1816>:	lsl	r3, r3, #2
0x000153e8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153e8 <AesSetKey_C+1820>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x000153ec	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153ec <AesSetKey_C+1824>:	add	r2, r2, r3
0x000153f0	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f0 <AesSetKey_C+1828>:	ldr	r3, [r11, #-16]
0x000153f4	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f4 <AesSetKey_C+1832>:	add	r3, r3, #2
0x000153f8	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153f8 <AesSetKey_C+1836>:	lsl	r3, r3, #2
0x000153fc	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x153fc <AesSetKey_C+1840>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015400	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15400 <AesSetKey_C+1844>:	add	r3, r1, r3
0x00015404	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15404 <AesSetKey_C+1848>:	ldr	r2, [r2]
0x00015408	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15408 <AesSetKey_C+1852>:	str	r2, [r3]
0x0001540c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1540c <AesSetKey_C+1856>:	ldr	r3, [r11, #-12]
0x00015410	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15410 <AesSetKey_C+1860>:	add	r3, r3, #2
0x00015414	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15414 <AesSetKey_C+1864>:	lsl	r3, r3, #2
0x00015418	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15418 <AesSetKey_C+1868>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x0001541c	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x1541c <AesSetKey_C+1872>:	add	r3, r2, r3
0x00015420	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15420 <AesSetKey_C+1876>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00015424	4247	            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
=> 0x15424 <AesSetKey_C+1880>:	str	r2, [r3]
4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15428 <AesSetKey_C+1884>:	ldr	r3, [r11, #-16]
0x0001542c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1542c <AesSetKey_C+1888>:	add	r3, r3, #3
0x00015430	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15430 <AesSetKey_C+1892>:	lsl	r3, r3, #2
0x00015434	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15434 <AesSetKey_C+1896>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015438	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15438 <AesSetKey_C+1900>:	add	r3, r2, r3
0x0001543c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1543c <AesSetKey_C+1904>:	ldr	r3, [r3]
0x00015440	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15440 <AesSetKey_C+1908>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00015444	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15444 <AesSetKey_C+1912>:	ldr	r3, [r11, #-12]
0x00015448	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15448 <AesSetKey_C+1916>:	add	r3, r3, #3
0x0001544c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1544c <AesSetKey_C+1920>:	lsl	r3, r3, #2
0x00015450	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15450 <AesSetKey_C+1924>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015454	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15454 <AesSetKey_C+1928>:	add	r2, r2, r3
0x00015458	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15458 <AesSetKey_C+1932>:	ldr	r3, [r11, #-16]
0x0001545c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1545c <AesSetKey_C+1936>:	add	r3, r3, #3
0x00015460	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15460 <AesSetKey_C+1940>:	lsl	r3, r3, #2
0x00015464	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15464 <AesSetKey_C+1944>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00015468	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15468 <AesSetKey_C+1948>:	add	r3, r1, r3
0x0001546c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1546c <AesSetKey_C+1952>:	ldr	r2, [r2]
0x00015470	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15470 <AesSetKey_C+1956>:	str	r2, [r3]
0x00015474	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15474 <AesSetKey_C+1960>:	ldr	r3, [r11, #-12]
0x00015478	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15478 <AesSetKey_C+1964>:	add	r3, r3, #3
0x0001547c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1547c <AesSetKey_C+1968>:	lsl	r3, r3, #2
0x00015480	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15480 <AesSetKey_C+1972>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015484	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15484 <AesSetKey_C+1976>:	add	r3, r2, r3
0x00015488	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x15488 <AesSetKey_C+1980>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x0001548c	4248	            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
=> 0x1548c <AesSetKey_C+1984>:	str	r2, [r3]
4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15490 <AesSetKey_C+1988>:	ldr	r3, [r11, #-16]
0x00015494	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15494 <AesSetKey_C+1992>:	add	r3, r3, #4
0x00015498	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x15498 <AesSetKey_C+1996>:	str	r3, [r11, #-16]
0x0001549c	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x1549c <AesSetKey_C+2000>:	ldr	r3, [r11, #-12]
0x000154a0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a0 <AesSetKey_C+2004>:	sub	r3, r3, #4
0x000154a4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a4 <AesSetKey_C+2008>:	str	r3, [r11, #-12]
0x000154a8	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154a8 <AesSetKey_C+2012>:	ldr	r2, [r11, #-16]
0x000154ac	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154ac <AesSetKey_C+2016>:	ldr	r3, [r11, #-12]
0x000154b0	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b0 <AesSetKey_C+2020>:	cmp	r2, r3
0x000154b4	4244	        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
=> 0x154b4 <AesSetKey_C+2024>:	bcc	0x15300 <AesSetKey_C+1588>
4250	        ForceZero(&temp, sizeof(temp));
=> 0x154b8 <AesSetKey_C+2028>:	sub	r3, r11, #24
0x000154bc	4250	        ForceZero(&temp, sizeof(temp));
=> 0x154bc <AesSetKey_C+2032>:	mov	r1, #4
0x000154c0	4250	        ForceZero(&temp, sizeof(temp));
=> 0x154c0 <AesSetKey_C+2036>:	mov	r0, r3
0x000154c4	4250	        ForceZero(&temp, sizeof(temp));
=> 0x154c4 <AesSetKey_C+2040>:	bl	0x10dbc <ForceZero>
ForceZero (mem=0x407ffd8c, len=4294967295) at ./wolfcrypt/src/misc.c:376
376	{
=> 0x10dbc <ForceZero>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010dc0	376	{
=> 0x10dc0 <ForceZero+4>:	add	r11, sp, #0
0x00010dc4	376	{
=> 0x10dc4 <ForceZero+8>:	sub	sp, sp, #20
0x00010dc8	376	{
=> 0x10dc8 <ForceZero+12>:	str	r0, [r11, #-16]
0x00010dcc	376	{
=> 0x10dcc <ForceZero+16>:	str	r1, [r11, #-20]	; 0xffffffec
377	    volatile byte* z = (volatile byte*)mem;
=> 0x10dd0 <ForceZero+20>:	ldr	r3, [r11, #-16]
0x00010dd4	377	    volatile byte* z = (volatile byte*)mem;
=> 0x10dd4 <ForceZero+24>:	str	r3, [r11, #-8]
399	    while (len--) *z++ = 0;
=> 0x10dd8 <ForceZero+28>:	b	0x10df0 <ForceZero+52>
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
0x00010ddc	399	    while (len--) *z++ = 0;
=> 0x10ddc <ForceZero+32>:	ldr	r3, [r11, #-8]
0x00010de0	399	    while (len--) *z++ = 0;
=> 0x10de0 <ForceZero+36>:	add	r2, r3, #1
0x00010de4	399	    while (len--) *z++ = 0;
=> 0x10de4 <ForceZero+40>:	str	r2, [r11, #-8]
0x00010de8	399	    while (len--) *z++ = 0;
=> 0x10de8 <ForceZero+44>:	mov	r2, #0
0x00010dec	399	    while (len--) *z++ = 0;
=> 0x10dec <ForceZero+48>:	strb	r2, [r3]
0x00010df0	399	    while (len--) *z++ = 0;
=> 0x10df0 <ForceZero+52>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010df4	399	    while (len--) *z++ = 0;
=> 0x10df4 <ForceZero+56>:	sub	r2, r3, #1
0x00010df8	399	    while (len--) *z++ = 0;
=> 0x10df8 <ForceZero+60>:	str	r2, [r11, #-20]	; 0xffffffec
0x00010dfc	399	    while (len--) *z++ = 0;
=> 0x10dfc <ForceZero+64>:	cmp	r3, #0
0x00010e00	399	    while (len--) *z++ = 0;
=> 0x10e00 <ForceZero+68>:	bne	0x10ddc <ForceZero+32>
400	}
=> 0x10e04 <ForceZero+72>:	nop			; (mov r0, r0)
0x00010e08	400	}
=> 0x10e08 <ForceZero+76>:	nop			; (mov r0, r0)
0x00010e0c	400	}
=> 0x10e0c <ForceZero+80>:	add	sp, r11, #0
0x00010e10	400	}
=> 0x10e10 <ForceZero+84>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010e14	400	}
=> 0x10e14 <ForceZero+88>:	bx	lr
AesSetKey_C (aes=0x407ffe00, key=0x40800194 "", keySz=32, dir=1) at wolfcrypt/src/aes.c:4254
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x154c8 <AesSetKey_C+2044>:	mov	r3, #1
0x000154cc	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x154cc <AesSetKey_C+2048>:	str	r3, [r11, #-16]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x154d0 <AesSetKey_C+2052>:	b	0x15818 <AesSetKey_C+2892>
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4255	            rk += 4;
=> 0x154d4 <AesSetKey_C+2056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154d8	4255	            rk += 4;
=> 0x154d8 <AesSetKey_C+2060>:	add	r3, r3, #16
0x000154dc	4255	            rk += 4;
=> 0x154dc <AesSetKey_C+2064>:	str	r3, [r11, #-20]	; 0xffffffec
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e0 <AesSetKey_C+2068>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000154e4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e4 <AesSetKey_C+2072>:	ldr	r3, [r3]
0x000154e8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154e8 <AesSetKey_C+2076>:	lsr	r3, r3, #24
0x000154ec	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154ec <AesSetKey_C+2080>:	and	r3, r3, #255	; 0xff
0x000154f0	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f0 <AesSetKey_C+2084>:	ldr	r2, [pc, #864]	; 0x15858 <AesSetKey_C+2956>
0x000154f4	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f4 <AesSetKey_C+2088>:	add	r3, r3, #256	; 0x100
0x000154f8	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154f8 <AesSetKey_C+2092>:	ldr	r3, [r2, r3, lsl #2]
0x000154fc	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x154fc <AesSetKey_C+2096>:	and	r3, r3, #255	; 0xff
0x00015500	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15500 <AesSetKey_C+2100>:	ldr	r2, [pc, #856]	; 0x15860 <AesSetKey_C+2964>
0x00015504	4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15504 <AesSetKey_C+2104>:	ldr	r2, [r2, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15508 <AesSetKey_C+2108>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001550c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1550c <AesSetKey_C+2112>:	ldr	r3, [r3]
0x00015510	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15510 <AesSetKey_C+2116>:	lsr	r3, r3, #16
0x00015514	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15514 <AesSetKey_C+2120>:	and	r3, r3, #255	; 0xff
0x00015518	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15518 <AesSetKey_C+2124>:	ldr	r1, [pc, #824]	; 0x15858 <AesSetKey_C+2956>
0x0001551c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1551c <AesSetKey_C+2128>:	add	r3, r3, #256	; 0x100
0x00015520	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15520 <AesSetKey_C+2132>:	ldr	r3, [r1, r3, lsl #2]
0x00015524	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15524 <AesSetKey_C+2136>:	and	r3, r3, #255	; 0xff
0x00015528	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15528 <AesSetKey_C+2140>:	ldr	r1, [pc, #816]	; 0x15860 <AesSetKey_C+2964>
0x0001552c	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x1552c <AesSetKey_C+2144>:	add	r3, r3, #256	; 0x100
0x00015530	4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15530 <AesSetKey_C+2148>:	ldr	r3, [r1, r3, lsl #2]
4257	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
=> 0x15534 <AesSetKey_C+2152>:	eor	r2, r2, r3
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15538 <AesSetKey_C+2156>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001553c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1553c <AesSetKey_C+2160>:	ldr	r3, [r3]
0x00015540	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15540 <AesSetKey_C+2164>:	lsr	r3, r3, #8
0x00015544	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15544 <AesSetKey_C+2168>:	and	r3, r3, #255	; 0xff
0x00015548	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15548 <AesSetKey_C+2172>:	ldr	r1, [pc, #776]	; 0x15858 <AesSetKey_C+2956>
0x0001554c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1554c <AesSetKey_C+2176>:	add	r3, r3, #256	; 0x100
0x00015550	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15550 <AesSetKey_C+2180>:	ldr	r3, [r1, r3, lsl #2]
0x00015554	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15554 <AesSetKey_C+2184>:	and	r3, r3, #255	; 0xff
0x00015558	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15558 <AesSetKey_C+2188>:	ldr	r1, [pc, #768]	; 0x15860 <AesSetKey_C+2964>
0x0001555c	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x1555c <AesSetKey_C+2192>:	add	r3, r3, #512	; 0x200
0x00015560	4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15560 <AesSetKey_C+2196>:	ldr	r3, [r1, r3, lsl #2]
4258	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
=> 0x15564 <AesSetKey_C+2200>:	eor	r2, r2, r3
4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15568 <AesSetKey_C+2204>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001556c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1556c <AesSetKey_C+2208>:	ldr	r3, [r3]
0x00015570	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15570 <AesSetKey_C+2212>:	and	r3, r3, #255	; 0xff
0x00015574	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15574 <AesSetKey_C+2216>:	ldr	r1, [pc, #732]	; 0x15858 <AesSetKey_C+2956>
0x00015578	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15578 <AesSetKey_C+2220>:	add	r3, r3, #256	; 0x100
0x0001557c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1557c <AesSetKey_C+2224>:	ldr	r3, [r1, r3, lsl #2]
0x00015580	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15580 <AesSetKey_C+2228>:	and	r3, r3, #255	; 0xff
0x00015584	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15584 <AesSetKey_C+2232>:	ldr	r1, [pc, #724]	; 0x15860 <AesSetKey_C+2964>
0x00015588	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x15588 <AesSetKey_C+2236>:	add	r3, r3, #768	; 0x300
0x0001558c	4260	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
=> 0x1558c <AesSetKey_C+2240>:	ldr	r3, [r1, r3, lsl #2]
4259	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
=> 0x15590 <AesSetKey_C+2244>:	eor	r2, r2, r3
4256	            rk[0] =
=> 0x15594 <AesSetKey_C+2248>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015598	4256	            rk[0] =
=> 0x15598 <AesSetKey_C+2252>:	str	r2, [r3]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x1559c <AesSetKey_C+2256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155a0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a0 <AesSetKey_C+2260>:	add	r3, r3, #4
0x000155a4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a4 <AesSetKey_C+2264>:	ldr	r3, [r3]
0x000155a8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155a8 <AesSetKey_C+2268>:	lsr	r3, r3, #24
0x000155ac	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155ac <AesSetKey_C+2272>:	and	r3, r3, #255	; 0xff
0x000155b0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b0 <AesSetKey_C+2276>:	ldr	r2, [pc, #672]	; 0x15858 <AesSetKey_C+2956>
0x000155b4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b4 <AesSetKey_C+2280>:	add	r3, r3, #256	; 0x100
0x000155b8	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155b8 <AesSetKey_C+2284>:	ldr	r3, [r2, r3, lsl #2]
0x000155bc	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155bc <AesSetKey_C+2288>:	and	r3, r3, #255	; 0xff
0x000155c0	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c0 <AesSetKey_C+2292>:	ldr	r2, [pc, #664]	; 0x15860 <AesSetKey_C+2964>
0x000155c4	4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155c4 <AesSetKey_C+2296>:	ldr	r2, [r2, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155c8 <AesSetKey_C+2300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000155cc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155cc <AesSetKey_C+2304>:	add	r3, r3, #4
0x000155d0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d0 <AesSetKey_C+2308>:	ldr	r3, [r3]
0x000155d4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d4 <AesSetKey_C+2312>:	lsr	r3, r3, #16
0x000155d8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155d8 <AesSetKey_C+2316>:	and	r3, r3, #255	; 0xff
0x000155dc	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155dc <AesSetKey_C+2320>:	ldr	r1, [pc, #628]	; 0x15858 <AesSetKey_C+2956>
0x000155e0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e0 <AesSetKey_C+2324>:	add	r3, r3, #256	; 0x100
0x000155e4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e4 <AesSetKey_C+2328>:	ldr	r3, [r1, r3, lsl #2]
0x000155e8	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155e8 <AesSetKey_C+2332>:	and	r3, r3, #255	; 0xff
0x000155ec	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155ec <AesSetKey_C+2336>:	ldr	r1, [pc, #620]	; 0x15860 <AesSetKey_C+2964>
0x000155f0	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f0 <AesSetKey_C+2340>:	add	r3, r3, #256	; 0x100
0x000155f4	4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x155f4 <AesSetKey_C+2344>:	ldr	r3, [r1, r3, lsl #2]
4262	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
=> 0x155f8 <AesSetKey_C+2348>:	eor	r2, r2, r3
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x155fc <AesSetKey_C+2352>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015600	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15600 <AesSetKey_C+2356>:	add	r3, r3, #4
0x00015604	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15604 <AesSetKey_C+2360>:	ldr	r3, [r3]
0x00015608	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15608 <AesSetKey_C+2364>:	lsr	r3, r3, #8
0x0001560c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1560c <AesSetKey_C+2368>:	and	r3, r3, #255	; 0xff
0x00015610	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15610 <AesSetKey_C+2372>:	ldr	r1, [pc, #576]	; 0x15858 <AesSetKey_C+2956>
0x00015614	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15614 <AesSetKey_C+2376>:	add	r3, r3, #256	; 0x100
0x00015618	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15618 <AesSetKey_C+2380>:	ldr	r3, [r1, r3, lsl #2]
0x0001561c	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x1561c <AesSetKey_C+2384>:	and	r3, r3, #255	; 0xff
0x00015620	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15620 <AesSetKey_C+2388>:	ldr	r1, [pc, #568]	; 0x15860 <AesSetKey_C+2964>
0x00015624	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15624 <AesSetKey_C+2392>:	add	r3, r3, #512	; 0x200
0x00015628	4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15628 <AesSetKey_C+2396>:	ldr	r3, [r1, r3, lsl #2]
4263	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
=> 0x1562c <AesSetKey_C+2400>:	eor	r1, r2, r3
4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15630 <AesSetKey_C+2404>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015634	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15634 <AesSetKey_C+2408>:	add	r3, r3, #4
0x00015638	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15638 <AesSetKey_C+2412>:	ldr	r3, [r3]
0x0001563c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1563c <AesSetKey_C+2416>:	and	r3, r3, #255	; 0xff
0x00015640	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15640 <AesSetKey_C+2420>:	ldr	r2, [pc, #528]	; 0x15858 <AesSetKey_C+2956>
0x00015644	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15644 <AesSetKey_C+2424>:	add	r3, r3, #256	; 0x100
0x00015648	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15648 <AesSetKey_C+2428>:	ldr	r3, [r2, r3, lsl #2]
0x0001564c	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x1564c <AesSetKey_C+2432>:	and	r3, r3, #255	; 0xff
0x00015650	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15650 <AesSetKey_C+2436>:	ldr	r2, [pc, #520]	; 0x15860 <AesSetKey_C+2964>
0x00015654	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15654 <AesSetKey_C+2440>:	add	r3, r3, #768	; 0x300
0x00015658	4265	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
=> 0x15658 <AesSetKey_C+2444>:	ldr	r2, [r2, r3, lsl #2]
4261	            rk[1] =
=> 0x1565c <AesSetKey_C+2448>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015660	4261	            rk[1] =
=> 0x15660 <AesSetKey_C+2452>:	add	r3, r3, #4
4264	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
=> 0x15664 <AesSetKey_C+2456>:	eor	r2, r2, r1
4261	            rk[1] =
=> 0x15668 <AesSetKey_C+2460>:	str	r2, [r3]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1566c <AesSetKey_C+2464>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015670	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15670 <AesSetKey_C+2468>:	add	r3, r3, #8
0x00015674	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15674 <AesSetKey_C+2472>:	ldr	r3, [r3]
0x00015678	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15678 <AesSetKey_C+2476>:	lsr	r3, r3, #24
0x0001567c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1567c <AesSetKey_C+2480>:	and	r3, r3, #255	; 0xff
0x00015680	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15680 <AesSetKey_C+2484>:	ldr	r2, [pc, #464]	; 0x15858 <AesSetKey_C+2956>
0x00015684	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15684 <AesSetKey_C+2488>:	add	r3, r3, #256	; 0x100
0x00015688	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15688 <AesSetKey_C+2492>:	ldr	r3, [r2, r3, lsl #2]
0x0001568c	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x1568c <AesSetKey_C+2496>:	and	r3, r3, #255	; 0xff
0x00015690	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15690 <AesSetKey_C+2500>:	ldr	r2, [pc, #456]	; 0x15860 <AesSetKey_C+2964>
0x00015694	4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x15694 <AesSetKey_C+2504>:	ldr	r2, [r2, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x15698 <AesSetKey_C+2508>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001569c	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x1569c <AesSetKey_C+2512>:	add	r3, r3, #8
0x000156a0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a0 <AesSetKey_C+2516>:	ldr	r3, [r3]
0x000156a4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a4 <AesSetKey_C+2520>:	lsr	r3, r3, #16
0x000156a8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156a8 <AesSetKey_C+2524>:	and	r3, r3, #255	; 0xff
0x000156ac	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156ac <AesSetKey_C+2528>:	ldr	r1, [pc, #420]	; 0x15858 <AesSetKey_C+2956>
0x000156b0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b0 <AesSetKey_C+2532>:	add	r3, r3, #256	; 0x100
0x000156b4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b4 <AesSetKey_C+2536>:	ldr	r3, [r1, r3, lsl #2]
0x000156b8	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156b8 <AesSetKey_C+2540>:	and	r3, r3, #255	; 0xff
0x000156bc	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156bc <AesSetKey_C+2544>:	ldr	r1, [pc, #412]	; 0x15860 <AesSetKey_C+2964>
0x000156c0	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c0 <AesSetKey_C+2548>:	add	r3, r3, #256	; 0x100
0x000156c4	4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156c4 <AesSetKey_C+2552>:	ldr	r3, [r1, r3, lsl #2]
4267	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
=> 0x156c8 <AesSetKey_C+2556>:	eor	r2, r2, r3
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156cc <AesSetKey_C+2560>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000156d0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d0 <AesSetKey_C+2564>:	add	r3, r3, #8
0x000156d4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d4 <AesSetKey_C+2568>:	ldr	r3, [r3]
0x000156d8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156d8 <AesSetKey_C+2572>:	lsr	r3, r3, #8
0x000156dc	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156dc <AesSetKey_C+2576>:	and	r3, r3, #255	; 0xff
0x000156e0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e0 <AesSetKey_C+2580>:	ldr	r1, [pc, #368]	; 0x15858 <AesSetKey_C+2956>
0x000156e4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e4 <AesSetKey_C+2584>:	add	r3, r3, #256	; 0x100
0x000156e8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156e8 <AesSetKey_C+2588>:	ldr	r3, [r1, r3, lsl #2]
0x000156ec	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156ec <AesSetKey_C+2592>:	and	r3, r3, #255	; 0xff
0x000156f0	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f0 <AesSetKey_C+2596>:	ldr	r1, [pc, #360]	; 0x15860 <AesSetKey_C+2964>
0x000156f4	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f4 <AesSetKey_C+2600>:	add	r3, r3, #512	; 0x200
0x000156f8	4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x156f8 <AesSetKey_C+2604>:	ldr	r3, [r1, r3, lsl #2]
4268	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
=> 0x156fc <AesSetKey_C+2608>:	eor	r1, r2, r3
4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15700 <AesSetKey_C+2612>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015704	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15704 <AesSetKey_C+2616>:	add	r3, r3, #8
0x00015708	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15708 <AesSetKey_C+2620>:	ldr	r3, [r3]
0x0001570c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1570c <AesSetKey_C+2624>:	and	r3, r3, #255	; 0xff
0x00015710	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15710 <AesSetKey_C+2628>:	ldr	r2, [pc, #320]	; 0x15858 <AesSetKey_C+2956>
0x00015714	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15714 <AesSetKey_C+2632>:	add	r3, r3, #256	; 0x100
0x00015718	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15718 <AesSetKey_C+2636>:	ldr	r3, [r2, r3, lsl #2]
0x0001571c	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x1571c <AesSetKey_C+2640>:	and	r3, r3, #255	; 0xff
0x00015720	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15720 <AesSetKey_C+2644>:	ldr	r2, [pc, #312]	; 0x15860 <AesSetKey_C+2964>
0x00015724	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15724 <AesSetKey_C+2648>:	add	r3, r3, #768	; 0x300
0x00015728	4270	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
=> 0x15728 <AesSetKey_C+2652>:	ldr	r2, [r2, r3, lsl #2]
4266	            rk[2] =
=> 0x1572c <AesSetKey_C+2656>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015730	4266	            rk[2] =
=> 0x15730 <AesSetKey_C+2660>:	add	r3, r3, #8
4269	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
=> 0x15734 <AesSetKey_C+2664>:	eor	r2, r2, r1
4266	            rk[2] =
=> 0x15738 <AesSetKey_C+2668>:	str	r2, [r3]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1573c <AesSetKey_C+2672>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015740	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15740 <AesSetKey_C+2676>:	add	r3, r3, #12
0x00015744	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15744 <AesSetKey_C+2680>:	ldr	r3, [r3]
0x00015748	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15748 <AesSetKey_C+2684>:	lsr	r3, r3, #24
0x0001574c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1574c <AesSetKey_C+2688>:	and	r3, r3, #255	; 0xff
0x00015750	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15750 <AesSetKey_C+2692>:	ldr	r2, [pc, #256]	; 0x15858 <AesSetKey_C+2956>
0x00015754	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15754 <AesSetKey_C+2696>:	add	r3, r3, #256	; 0x100
0x00015758	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15758 <AesSetKey_C+2700>:	ldr	r3, [r2, r3, lsl #2]
0x0001575c	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x1575c <AesSetKey_C+2704>:	and	r3, r3, #255	; 0xff
0x00015760	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15760 <AesSetKey_C+2708>:	ldr	r2, [pc, #248]	; 0x15860 <AesSetKey_C+2964>
0x00015764	4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15764 <AesSetKey_C+2712>:	ldr	r2, [r2, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15768 <AesSetKey_C+2716>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001576c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1576c <AesSetKey_C+2720>:	add	r3, r3, #12
0x00015770	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15770 <AesSetKey_C+2724>:	ldr	r3, [r3]
0x00015774	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15774 <AesSetKey_C+2728>:	lsr	r3, r3, #16
0x00015778	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15778 <AesSetKey_C+2732>:	and	r3, r3, #255	; 0xff
0x0001577c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1577c <AesSetKey_C+2736>:	ldr	r1, [pc, #212]	; 0x15858 <AesSetKey_C+2956>
0x00015780	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15780 <AesSetKey_C+2740>:	add	r3, r3, #256	; 0x100
0x00015784	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15784 <AesSetKey_C+2744>:	ldr	r3, [r1, r3, lsl #2]
0x00015788	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15788 <AesSetKey_C+2748>:	and	r3, r3, #255	; 0xff
0x0001578c	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x1578c <AesSetKey_C+2752>:	ldr	r1, [pc, #204]	; 0x15860 <AesSetKey_C+2964>
0x00015790	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15790 <AesSetKey_C+2756>:	add	r3, r3, #256	; 0x100
0x00015794	4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x15794 <AesSetKey_C+2760>:	ldr	r3, [r1, r3, lsl #2]
4272	                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
=> 0x15798 <AesSetKey_C+2764>:	eor	r2, r2, r3
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x1579c <AesSetKey_C+2768>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157a0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a0 <AesSetKey_C+2772>:	add	r3, r3, #12
0x000157a4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a4 <AesSetKey_C+2776>:	ldr	r3, [r3]
0x000157a8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157a8 <AesSetKey_C+2780>:	lsr	r3, r3, #8
0x000157ac	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157ac <AesSetKey_C+2784>:	and	r3, r3, #255	; 0xff
0x000157b0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b0 <AesSetKey_C+2788>:	ldr	r1, [pc, #160]	; 0x15858 <AesSetKey_C+2956>
0x000157b4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b4 <AesSetKey_C+2792>:	add	r3, r3, #256	; 0x100
0x000157b8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157b8 <AesSetKey_C+2796>:	ldr	r3, [r1, r3, lsl #2]
0x000157bc	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157bc <AesSetKey_C+2800>:	and	r3, r3, #255	; 0xff
0x000157c0	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c0 <AesSetKey_C+2804>:	ldr	r1, [pc, #152]	; 0x15860 <AesSetKey_C+2964>
0x000157c4	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c4 <AesSetKey_C+2808>:	add	r3, r3, #512	; 0x200
0x000157c8	4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x157c8 <AesSetKey_C+2812>:	ldr	r3, [r1, r3, lsl #2]
4273	                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
=> 0x157cc <AesSetKey_C+2816>:	eor	r1, r2, r3
4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d0 <AesSetKey_C+2820>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000157d4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d4 <AesSetKey_C+2824>:	add	r3, r3, #12
0x000157d8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157d8 <AesSetKey_C+2828>:	ldr	r3, [r3]
0x000157dc	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157dc <AesSetKey_C+2832>:	and	r3, r3, #255	; 0xff
0x000157e0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e0 <AesSetKey_C+2836>:	ldr	r2, [pc, #112]	; 0x15858 <AesSetKey_C+2956>
0x000157e4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e4 <AesSetKey_C+2840>:	add	r3, r3, #256	; 0x100
0x000157e8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157e8 <AesSetKey_C+2844>:	ldr	r3, [r2, r3, lsl #2]
0x000157ec	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157ec <AesSetKey_C+2848>:	and	r3, r3, #255	; 0xff
0x000157f0	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f0 <AesSetKey_C+2852>:	ldr	r2, [pc, #104]	; 0x15860 <AesSetKey_C+2964>
0x000157f4	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f4 <AesSetKey_C+2856>:	add	r3, r3, #768	; 0x300
0x000157f8	4275	                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
=> 0x157f8 <AesSetKey_C+2860>:	ldr	r2, [r2, r3, lsl #2]
4271	            rk[3] =
=> 0x157fc <AesSetKey_C+2864>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015800	4271	            rk[3] =
=> 0x15800 <AesSetKey_C+2868>:	add	r3, r3, #12
4274	                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
=> 0x15804 <AesSetKey_C+2872>:	eor	r2, r2, r1
4271	            rk[3] =
=> 0x15808 <AesSetKey_C+2876>:	str	r2, [r3]
4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1580c <AesSetKey_C+2880>:	ldr	r3, [r11, #-16]
0x00015810	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15810 <AesSetKey_C+2884>:	add	r3, r3, #1
0x00015814	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15814 <AesSetKey_C+2888>:	str	r3, [r11, #-16]
0x00015818	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15818 <AesSetKey_C+2892>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001581c	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x1581c <AesSetKey_C+2896>:	ldr	r3, [r3, #240]	; 0xf0
0x00015820	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15820 <AesSetKey_C+2900>:	ldr	r2, [r11, #-16]
0x00015824	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15824 <AesSetKey_C+2904>:	cmp	r2, r3
0x00015828	4254	        for (i = 1; i < aes->rounds; i++) {
=> 0x15828 <AesSetKey_C+2908>:	bcc	0x154d4 <AesSetKey_C+2056>
4288	}
=> 0x1582c <AesSetKey_C+2912>:	nop			; (mov r0, r0)
0x00015830	4288	}
=> 0x15830 <AesSetKey_C+2916>:	ldr	r3, [pc, #28]	; 0x15854 <AesSetKey_C+2952>
0x00015834	4288	}
=> 0x15834 <AesSetKey_C+2920>:	ldr	r2, [r3]
0x00015838	4288	}
=> 0x15838 <AesSetKey_C+2924>:	ldr	r3, [r11, #-8]
0x0001583c	4288	}
=> 0x1583c <AesSetKey_C+2928>:	eors	r2, r3, r2
0x00015840	4288	}
=> 0x15840 <AesSetKey_C+2932>:	mov	r3, #0
0x00015844	4288	}
=> 0x15844 <AesSetKey_C+2936>:	beq	0x1584c <AesSetKey_C+2944>
0x0001584c	4288	}
=> 0x1584c <AesSetKey_C+2944>:	sub	sp, r11, #4
0x00015850	4288	}
=> 0x15850 <AesSetKey_C+2948>:	pop	{r11, pc}
wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=1, checkKeyLen=1) at wolfcrypt/src/aes.c:4576
4576	        ret = wc_AesSetIV(aes, iv);
=> 0x159b0 <wc_AesSetKeyLocal+332>:	ldr	r1, [r11, #-28]	; 0xffffffe4
0x000159b4	4576	        ret = wc_AesSetIV(aes, iv);
=> 0x159b4 <wc_AesSetKeyLocal+336>:	ldr	r0, [r11, #-16]
0x000159b8	4576	        ret = wc_AesSetIV(aes, iv);
=> 0x159b8 <wc_AesSetKeyLocal+340>:	bl	0x15a4c <wc_AesSetIV>
wc_AesSetIV (aes=0x9eb56b00, iv=0x1c <error: Cannot access memory at address 0x1c>) at wolfcrypt/src/aes.c:4643
4643	{
=> 0x15a4c <wc_AesSetIV>:	push	{r11, lr}
0x00015a50	4643	{
=> 0x15a50 <wc_AesSetIV+4>:	add	r11, sp, #4
0x00015a54	4643	{
=> 0x15a54 <wc_AesSetIV+8>:	sub	sp, sp, #8
0x00015a58	4643	{
=> 0x15a58 <wc_AesSetIV+12>:	str	r0, [r11, #-8]
0x00015a5c	4643	{
=> 0x15a5c <wc_AesSetIV+16>:	str	r1, [r11, #-12]
4644	    if (aes == NULL)
=> 0x15a60 <wc_AesSetIV+20>:	ldr	r3, [r11, #-8]
0x00015a64	4644	    if (aes == NULL)
=> 0x15a64 <wc_AesSetIV+24>:	cmp	r3, #0
0x00015a68	4644	    if (aes == NULL)
=> 0x15a68 <wc_AesSetIV+28>:	bne	0x15a74 <wc_AesSetIV+40>
4655	    if (iv)
=> 0x15a74 <wc_AesSetIV+40>:	ldr	r3, [r11, #-12]
0x00015a78	4655	    if (iv)
=> 0x15a78 <wc_AesSetIV+44>:	cmp	r3, #0
0x00015a7c	4655	    if (iv)
=> 0x15a7c <wc_AesSetIV+48>:	beq	0x15a9c <wc_AesSetIV+80>
4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a80 <wc_AesSetIV+52>:	ldr	r3, [r11, #-8]
0x00015a84	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a84 <wc_AesSetIV+56>:	add	r3, r3, #256	; 0x100
0x00015a88	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a88 <wc_AesSetIV+60>:	mov	r2, #16
0x00015a8c	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a8c <wc_AesSetIV+64>:	ldr	r1, [r11, #-12]
0x00015a90	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a90 <wc_AesSetIV+68>:	mov	r0, r3
0x00015a94	4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a94 <wc_AesSetIV+72>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af78 in memcpy ()
=> 0x3af78 <memcpy+88>:	ldr	r6, [r1], #4
0x0003af7c in memcpy ()
=> 0x3af7c <memcpy+92>:	ldr	r7, [r1], #4
0x0003af80 in memcpy ()
=> 0x3af80 <memcpy+96>:	ldr	r8, [r1], #4
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afa0 in memcpy ()
=> 0x3afa0 <memcpy+128>:	str	r6, [r0], #4
0x0003afa4 in memcpy ()
=> 0x3afa4 <memcpy+132>:	str	r7, [r0], #4
0x0003afa8 in memcpy ()
=> 0x3afa8 <memcpy+136>:	str	r8, [r0], #4
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
0x00015a98 in wc_AesSetIV (aes=0x407ffe00, iv=0x40800154 "") at wolfcrypt/src/aes.c:4656
4656	        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
=> 0x15a98 <wc_AesSetIV+76>:	b	0x15ab4 <wc_AesSetIV+104>
4666	    return 0;
=> 0x15ab4 <wc_AesSetIV+104>:	mov	r3, #0
4667	}
=> 0x15ab8 <wc_AesSetIV+108>:	mov	r0, r3
0x00015abc	4667	}
=> 0x15abc <wc_AesSetIV+112>:	sub	sp, r11, #4
0x00015ac0	4667	}
=> 0x15ac0 <wc_AesSetIV+116>:	pop	{r11, pc}
0x000159bc in wc_AesSetKeyLocal (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=1, checkKeyLen=1) at wolfcrypt/src/aes.c:4576
4576	        ret = wc_AesSetIV(aes, iv);
=> 0x159bc <wc_AesSetKeyLocal+344>:	str	r0, [r11, #-8]
4585	        return ret;
=> 0x159c0 <wc_AesSetKeyLocal+348>:	ldr	r3, [r11, #-8]
4586	    } /* wc_AesSetKeyLocal */
=> 0x159c4 <wc_AesSetKeyLocal+352>:	mov	r0, r3
0x000159c8	4586	    } /* wc_AesSetKeyLocal */
=> 0x159c8 <wc_AesSetKeyLocal+356>:	sub	sp, r11, #4
0x000159cc	4586	    } /* wc_AesSetKeyLocal */
=> 0x159cc <wc_AesSetKeyLocal+360>:	pop	{r11, pc}
0x00015a3c in wc_AesSetKey (aes=0x407ffe00, userKey=0x40800194 "", keylen=32, iv=0x40800154 "", dir=1) at wolfcrypt/src/aes.c:4618
4618	        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
=> 0x15a3c <wc_AesSetKey+104>:	mov	r3, r0
4620	    } /* wc_AesSetKey() */
=> 0x15a40 <wc_AesSetKey+108>:	mov	r0, r3
0x00015a44	4620	    } /* wc_AesSetKey() */
=> 0x15a44 <wc_AesSetKey+112>:	sub	sp, r11, #4
0x00015a48	4620	    } /* wc_AesSetKey() */
=> 0x15a48 <wc_AesSetKey+116>:	pop	{r11, pc}
0x000106a0 in main () at AES.c:41
41	    ret = wc_AesSetKey(&aes, key, sizeof(key), iv, AES_DECRYPTION);
=> 0x106a0 <main+248>:	str	r0, [r11, #-976]	; 0xfffffc30
42	    check_wolfssl_result(ret, "wc_AesSetKey (decrypt)");
=> 0x106a4 <main+252>:	ldr	r1, [pc, #172]	; 0x10758 <main+432>
0x000106a8	42	    check_wolfssl_result(ret, "wc_AesSetKey (decrypt)");
=> 0x106a8 <main+256>:	ldr	r0, [r11, #-976]	; 0xfffffc30
0x000106ac	42	    check_wolfssl_result(ret, "wc_AesSetKey (decrypt)");
=> 0x106ac <main+260>:	bl	0x1055c <check_wolfssl_result>
check_wolfssl_result (ret=1082129920, func=0x40800194 "") at AES.c:11
11	void check_wolfssl_result(int ret, const char* func) {
=> 0x1055c <check_wolfssl_result>:	push	{r11, lr}
0x00010560	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10560 <check_wolfssl_result+4>:	add	r11, sp, #4
0x00010564	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10564 <check_wolfssl_result+8>:	sub	sp, sp, #8
0x00010568	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10568 <check_wolfssl_result+12>:	str	r0, [r11, #-8]
0x0001056c	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x1056c <check_wolfssl_result+16>:	str	r1, [r11, #-12]
12	    if (ret != 0) {
=> 0x10570 <check_wolfssl_result+20>:	ldr	r3, [r11, #-8]
0x00010574	12	    if (ret != 0) {
=> 0x10574 <check_wolfssl_result+24>:	cmp	r3, #0
0x00010578	12	    if (ret != 0) {
=> 0x10578 <check_wolfssl_result+28>:	beq	0x10598 <check_wolfssl_result+60>
15	}
=> 0x10598 <check_wolfssl_result+60>:	nop			; (mov r0, r0)
0x0001059c	15	}
=> 0x1059c <check_wolfssl_result+64>:	sub	sp, r11, #4
0x000105a0	15	}
=> 0x105a0 <check_wolfssl_result+68>:	pop	{r11, pc}
main () at AES.c:45
45	    ret = wc_AesCbcDecrypt(&aes, decryptedtext, ciphertext, sizeof(ciphertext));
=> 0x106b0 <main+264>:	sub	r2, r11, #80	; 0x50
0x000106b4	45	    ret = wc_AesCbcDecrypt(&aes, decryptedtext, ciphertext, sizeof(ciphertext));
=> 0x106b4 <main+268>:	sub	r1, r11, #64	; 0x40
0x000106b8	45	    ret = wc_AesCbcDecrypt(&aes, decryptedtext, ciphertext, sizeof(ciphertext));
=> 0x106b8 <main+272>:	mov	r3, #16
0x000106bc	45	    ret = wc_AesCbcDecrypt(&aes, decryptedtext, ciphertext, sizeof(ciphertext));
=> 0x106bc <main+276>:	mov	r0, r4
0x000106c0	45	    ret = wc_AesCbcDecrypt(&aes, decryptedtext, ciphertext, sizeof(ciphertext));
=> 0x106c0 <main+280>:	bl	0x15bd8 <wc_AesCbcDecrypt>
wc_AesCbcDecrypt (aes=0x20, out=0x40800154 "", in=0x1 <error: Cannot access memory at address 0x1>, sz=1) at wolfcrypt/src/aes.c:5621
5621	    {
=> 0x15bd8 <wc_AesCbcDecrypt>:	push	{r11, lr}
0x00015bdc	5621	    {
=> 0x15bdc <wc_AesCbcDecrypt+4>:	add	r11, sp, #4
0x00015be0	5621	    {
=> 0x15be0 <wc_AesCbcDecrypt+8>:	sub	sp, sp, #24
0x00015be4	5621	    {
=> 0x15be4 <wc_AesCbcDecrypt+12>:	str	r0, [r11, #-16]
0x00015be8	5621	    {
=> 0x15be8 <wc_AesCbcDecrypt+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00015bec	5621	    {
=> 0x15bec <wc_AesCbcDecrypt+20>:	str	r2, [r11, #-24]	; 0xffffffe8
0x00015bf0	5621	    {
=> 0x15bf0 <wc_AesCbcDecrypt+24>:	str	r3, [r11, #-28]	; 0xffffffe4
5625	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15bf4 <wc_AesCbcDecrypt+28>:	ldr	r3, [r11, #-16]
0x00015bf8	5625	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15bf8 <wc_AesCbcDecrypt+32>:	cmp	r3, #0
0x00015bfc	5625	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15bfc <wc_AesCbcDecrypt+36>:	beq	0x15c18 <wc_AesCbcDecrypt+64>
0x00015c00	5625	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15c00 <wc_AesCbcDecrypt+40>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015c04	5625	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15c04 <wc_AesCbcDecrypt+44>:	cmp	r3, #0
0x00015c08	5625	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15c08 <wc_AesCbcDecrypt+48>:	beq	0x15c18 <wc_AesCbcDecrypt+64>
0x00015c0c	5625	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15c0c <wc_AesCbcDecrypt+52>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015c10	5625	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15c10 <wc_AesCbcDecrypt+56>:	cmp	r3, #0
0x00015c14	5625	        if (aes == NULL || out == NULL || in == NULL) {
=> 0x15c14 <wc_AesCbcDecrypt+60>:	bne	0x15c20 <wc_AesCbcDecrypt+72>
5629	        if (sz == 0) {
=> 0x15c20 <wc_AesCbcDecrypt+72>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00015c24	5629	        if (sz == 0) {
=> 0x15c24 <wc_AesCbcDecrypt+76>:	cmp	r3, #0
0x00015c28	5629	        if (sz == 0) {
=> 0x15c28 <wc_AesCbcDecrypt+80>:	bne	0x15c34 <wc_AesCbcDecrypt+92>
5648	        blocks = sz / AES_BLOCK_SIZE;
=> 0x15c34 <wc_AesCbcDecrypt+92>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00015c38	5648	        blocks = sz / AES_BLOCK_SIZE;
=> 0x15c38 <wc_AesCbcDecrypt+96>:	lsr	r3, r3, #4
0x00015c3c	5648	        blocks = sz / AES_BLOCK_SIZE;
=> 0x15c3c <wc_AesCbcDecrypt+100>:	str	r3, [r11, #-12]
5649	        if (sz % AES_BLOCK_SIZE) {
=> 0x15c40 <wc_AesCbcDecrypt+104>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00015c44	5649	        if (sz % AES_BLOCK_SIZE) {
=> 0x15c44 <wc_AesCbcDecrypt+108>:	and	r3, r3, #15
5649	        if (sz % AES_BLOCK_SIZE) {
=> 0x15c48 <wc_AesCbcDecrypt+112>:	cmp	r3, #0
0x00015c4c	5649	        if (sz % AES_BLOCK_SIZE) {
=> 0x15c4c <wc_AesCbcDecrypt+116>:	beq	0x15c58 <wc_AesCbcDecrypt+128>
5738	            ret = 0;
=> 0x15c58 <wc_AesCbcDecrypt+128>:	mov	r3, #0
0x00015c5c	5738	            ret = 0;
=> 0x15c5c <wc_AesCbcDecrypt+132>:	str	r3, [r11, #-8]
5800	            while (blocks--) {
=> 0x15c60 <wc_AesCbcDecrypt+136>:	b	0x15cf0 <wc_AesCbcDecrypt+280>
5800	            while (blocks--) {
=> 0x15cf0 <wc_AesCbcDecrypt+280>:	ldr	r3, [r11, #-12]
0x00015cf4	5800	            while (blocks--) {
=> 0x15cf4 <wc_AesCbcDecrypt+284>:	sub	r2, r3, #1
0x00015cf8	5800	            while (blocks--) {
=> 0x15cf8 <wc_AesCbcDecrypt+288>:	str	r2, [r11, #-12]
5800	            while (blocks--) {
=> 0x15cfc <wc_AesCbcDecrypt+292>:	cmp	r3, #0
0x00015d00	5800	            while (blocks--) {
=> 0x15d00 <wc_AesCbcDecrypt+296>:	bne	0x15c64 <wc_AesCbcDecrypt+140>
5801	                XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
=> 0x15c64 <wc_AesCbcDecrypt+140>:	ldr	r3, [r11, #-16]
0x00015c68	5801	                XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
=> 0x15c68 <wc_AesCbcDecrypt+144>:	add	r3, r3, #272	; 0x110
0x00015c6c	5801	                XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
=> 0x15c6c <wc_AesCbcDecrypt+148>:	mov	r2, #16
0x00015c70	5801	                XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
=> 0x15c70 <wc_AesCbcDecrypt+152>:	ldr	r1, [r11, #-24]	; 0xffffffe8
0x00015c74	5801	                XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
=> 0x15c74 <wc_AesCbcDecrypt+156>:	mov	r0, r3
0x00015c78	5801	                XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
=> 0x15c78 <wc_AesCbcDecrypt+160>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af78 in memcpy ()
=> 0x3af78 <memcpy+88>:	ldr	r6, [r1], #4
0x0003af7c in memcpy ()
=> 0x3af7c <memcpy+92>:	ldr	r7, [r1], #4
0x0003af80 in memcpy ()
=> 0x3af80 <memcpy+96>:	ldr	r8, [r1], #4
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afa0 in memcpy ()
=> 0x3afa0 <memcpy+128>:	str	r6, [r0], #4
0x0003afa4 in memcpy ()
=> 0x3afa4 <memcpy+132>:	str	r7, [r0], #4
0x0003afa8 in memcpy ()
=> 0x3afa8 <memcpy+136>:	str	r8, [r0], #4
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
wc_AesCbcDecrypt (aes=0x407ffe00, out=0x40800184 "", in=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", sz=16) at wolfcrypt/src/aes.c:5802
5802	                ret = wc_AesDecrypt(aes, in, out);
=> 0x15c7c <wc_AesCbcDecrypt+164>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00015c80	5802	                ret = wc_AesDecrypt(aes, in, out);
=> 0x15c80 <wc_AesCbcDecrypt+168>:	ldr	r1, [r11, #-24]	; 0xffffffe8
0x00015c84	5802	                ret = wc_AesDecrypt(aes, in, out);
=> 0x15c84 <wc_AesCbcDecrypt+172>:	ldr	r0, [r11, #-16]
0x00015c88	5802	                ret = wc_AesDecrypt(aes, in, out);
=> 0x15c88 <wc_AesCbcDecrypt+176>:	bl	0x14c4c <wc_AesDecrypt>
wc_AesDecrypt (aes=0x40800324, inBlock=0x1 <error: Cannot access memory at address 0x1>, outBlock=0xa60ac "\344\004\001") at wolfcrypt/src/aes.c:3521
3521	{
=> 0x14c4c <wc_AesDecrypt>:	push	{r11, lr}
0x00014c50	3521	{
=> 0x14c50 <wc_AesDecrypt+4>:	add	r11, sp, #4
0x00014c54	3521	{
=> 0x14c54 <wc_AesDecrypt+8>:	sub	sp, sp, #24
0x00014c58	3521	{
=> 0x14c58 <wc_AesDecrypt+12>:	str	r0, [r11, #-16]
0x00014c5c	3521	{
=> 0x14c5c <wc_AesDecrypt+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00014c60	3521	{
=> 0x14c60 <wc_AesDecrypt+20>:	str	r2, [r11, #-24]	; 0xffffffe8
3524	    if (aes == NULL) {
=> 0x14c64 <wc_AesDecrypt+24>:	ldr	r3, [r11, #-16]
0x00014c68	3524	    if (aes == NULL) {
=> 0x14c68 <wc_AesDecrypt+28>:	cmp	r3, #0
0x00014c6c	3524	    if (aes == NULL) {
=> 0x14c6c <wc_AesDecrypt+32>:	bne	0x14c78 <wc_AesDecrypt+44>
3536	    r = aes->rounds >> 1;
=> 0x14c78 <wc_AesDecrypt+44>:	ldr	r3, [r11, #-16]
0x00014c7c	3536	    r = aes->rounds >> 1;
=> 0x14c7c <wc_AesDecrypt+48>:	ldr	r3, [r3, #240]	; 0xf0
3536	    r = aes->rounds >> 1;
=> 0x14c80 <wc_AesDecrypt+52>:	lsr	r3, r3, #1
0x00014c84	3536	    r = aes->rounds >> 1;
=> 0x14c84 <wc_AesDecrypt+56>:	str	r3, [r11, #-8]
3538	    if (r > 7 || r == 0) {
=> 0x14c88 <wc_AesDecrypt+60>:	ldr	r3, [r11, #-8]
0x00014c8c	3538	    if (r > 7 || r == 0) {
=> 0x14c8c <wc_AesDecrypt+64>:	cmp	r3, #7
0x00014c90	3538	    if (r > 7 || r == 0) {
=> 0x14c90 <wc_AesDecrypt+68>:	bhi	0x14ca0 <wc_AesDecrypt+84>
0x00014c94	3538	    if (r > 7 || r == 0) {
=> 0x14c94 <wc_AesDecrypt+72>:	ldr	r3, [r11, #-8]
0x00014c98	3538	    if (r > 7 || r == 0) {
=> 0x14c98 <wc_AesDecrypt+76>:	cmp	r3, #0
0x00014c9c	3538	    if (r > 7 || r == 0) {
=> 0x14c9c <wc_AesDecrypt+80>:	bne	0x14ca8 <wc_AesDecrypt+92>
3598	    AesDecrypt_C(aes, inBlock, outBlock, r);
=> 0x14ca8 <wc_AesDecrypt+92>:	ldr	r3, [r11, #-8]
0x00014cac	3598	    AesDecrypt_C(aes, inBlock, outBlock, r);
=> 0x14cac <wc_AesDecrypt+96>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x00014cb0	3598	    AesDecrypt_C(aes, inBlock, outBlock, r);
=> 0x14cb0 <wc_AesDecrypt+100>:	ldr	r1, [r11, #-20]	; 0xffffffec
0x00014cb4	3598	    AesDecrypt_C(aes, inBlock, outBlock, r);
=> 0x14cb4 <wc_AesDecrypt+104>:	ldr	r0, [r11, #-16]
0x00014cb8	3598	    AesDecrypt_C(aes, inBlock, outBlock, r);
=> 0x14cb8 <wc_AesDecrypt+108>:	bl	0x12e88 <AesDecrypt_C>
AesDecrypt_C (aes=0x407ffda4, inBlock=0x407ffda4 "\274Y\001", outBlock=0x407ffd90 "", r=1082131244) at wolfcrypt/src/aes.c:2931
2931	{
=> 0x12e88 <AesDecrypt_C>:	push	{r11, lr}
0x00012e8c	2931	{
=> 0x12e8c <AesDecrypt_C+4>:	add	r11, sp, #4
0x00012e90	2931	{
=> 0x12e90 <AesDecrypt_C+8>:	sub	sp, sp, #56	; 0x38
0x00012e94	2931	{
=> 0x12e94 <AesDecrypt_C+12>:	str	r0, [r11, #-48]	; 0xffffffd0
0x00012e98	2931	{
=> 0x12e98 <AesDecrypt_C+16>:	str	r1, [r11, #-52]	; 0xffffffcc
0x00012e9c	2931	{
=> 0x12e9c <AesDecrypt_C+20>:	str	r2, [r11, #-56]	; 0xffffffc8
0x00012ea0	2931	{
=> 0x12ea0 <AesDecrypt_C+24>:	str	r3, [r11, #-60]	; 0xffffffc4
2931	{
=> 0x12ea4 <AesDecrypt_C+28>:	ldr	r3, [pc, #4088]	; 0x13ea4 <AesDecrypt_C+4124>
0x00012ea8	2931	{
=> 0x12ea8 <AesDecrypt_C+32>:	ldr	r3, [r3]
0x00012eac	2931	{
=> 0x12eac <AesDecrypt_C+36>:	str	r3, [r11, #-8]
0x00012eb0	2931	{
=> 0x12eb0 <AesDecrypt_C+40>:	mov	r3, #0
2939	    rk = aes->key;
=> 0x12eb4 <AesDecrypt_C+44>:	ldr	r3, [r11, #-48]	; 0xffffffd0
0x00012eb8	2939	    rk = aes->key;
=> 0x12eb8 <AesDecrypt_C+48>:	str	r3, [r11, #-12]
2946	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x12ebc <AesDecrypt_C+52>:	sub	r3, r11, #44	; 0x2c
0x00012ec0	2946	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x12ec0 <AesDecrypt_C+56>:	mov	r2, #4
0x00012ec4	2946	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x12ec4 <AesDecrypt_C+60>:	ldr	r1, [r11, #-52]	; 0xffffffcc
0x00012ec8	2946	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x12ec8 <AesDecrypt_C+64>:	mov	r0, r3
0x00012ecc	2946	    XMEMCPY(&s0, inBlock,                  sizeof(s0));
=> 0x12ecc <AesDecrypt_C+68>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:2947
2947	    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
=> 0x12ed0 <AesDecrypt_C+72>:	ldr	r3, [r11, #-52]	; 0xffffffcc
0x00012ed4	2947	    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
=> 0x12ed4 <AesDecrypt_C+76>:	add	r1, r3, #4
0x00012ed8	2947	    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
=> 0x12ed8 <AesDecrypt_C+80>:	sub	r3, r11, #40	; 0x28
0x00012edc	2947	    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
=> 0x12edc <AesDecrypt_C+84>:	mov	r2, #4
0x00012ee0	2947	    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
=> 0x12ee0 <AesDecrypt_C+88>:	mov	r0, r3
0x00012ee4	2947	    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
=> 0x12ee4 <AesDecrypt_C+92>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:2948
2948	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x12ee8 <AesDecrypt_C+96>:	ldr	r3, [r11, #-52]	; 0xffffffcc
0x00012eec	2948	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x12eec <AesDecrypt_C+100>:	add	r1, r3, #8
0x00012ef0	2948	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x12ef0 <AesDecrypt_C+104>:	sub	r3, r11, #36	; 0x24
0x00012ef4	2948	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x12ef4 <AesDecrypt_C+108>:	mov	r2, #4
0x00012ef8	2948	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x12ef8 <AesDecrypt_C+112>:	mov	r0, r3
0x00012efc	2948	    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
=> 0x12efc <AesDecrypt_C+116>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:2949
2949	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x12f00 <AesDecrypt_C+120>:	ldr	r3, [r11, #-52]	; 0xffffffcc
0x00012f04	2949	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x12f04 <AesDecrypt_C+124>:	add	r1, r3, #12
0x00012f08	2949	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x12f08 <AesDecrypt_C+128>:	sub	r3, r11, #32
0x00012f0c	2949	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x12f0c <AesDecrypt_C+132>:	mov	r2, #4
0x00012f10	2949	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x12f10 <AesDecrypt_C+136>:	mov	r0, r3
0x00012f14	2949	    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
=> 0x12f14 <AesDecrypt_C+140>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:2952
2952	    s0 = ByteReverseWord32(s0);
=> 0x12f18 <AesDecrypt_C+144>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012f1c	2952	    s0 = ByteReverseWord32(s0);
=> 0x12f1c <AesDecrypt_C+148>:	mov	r0, r3
0x00012f20	2952	    s0 = ByteReverseWord32(s0);
=> 0x12f20 <AesDecrypt_C+152>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=1082129796) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=680108, y=1082129920) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=3814955322) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00012f24 in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:2952
2952	    s0 = ByteReverseWord32(s0);
=> 0x12f24 <AesDecrypt_C+156>:	mov	r3, r0
2952	    s0 = ByteReverseWord32(s0);
=> 0x12f28 <AesDecrypt_C+160>:	str	r3, [r11, #-44]	; 0xffffffd4
2953	    s1 = ByteReverseWord32(s1);
=> 0x12f2c <AesDecrypt_C+164>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00012f30	2953	    s1 = ByteReverseWord32(s1);
=> 0x12f30 <AesDecrypt_C+168>:	mov	r0, r3
0x00012f34	2953	    s1 = ByteReverseWord32(s1);
=> 0x12f34 <AesDecrypt_C+172>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=3814955322) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=3814955322, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=3600251102) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00012f38 in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:2953
2953	    s1 = ByteReverseWord32(s1);
=> 0x12f38 <AesDecrypt_C+176>:	mov	r3, r0
2953	    s1 = ByteReverseWord32(s1);
=> 0x12f3c <AesDecrypt_C+180>:	str	r3, [r11, #-40]	; 0xffffffd8
2954	    s2 = ByteReverseWord32(s2);
=> 0x12f40 <AesDecrypt_C+184>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00012f44	2954	    s2 = ByteReverseWord32(s2);
=> 0x12f44 <AesDecrypt_C+188>:	mov	r0, r3
0x00012f48	2954	    s2 = ByteReverseWord32(s2);
=> 0x12f48 <AesDecrypt_C+192>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=3600251102) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=3600251102, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=2968390214) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00012f4c in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:2954
2954	    s2 = ByteReverseWord32(s2);
=> 0x12f4c <AesDecrypt_C+196>:	mov	r3, r0
2954	    s2 = ByteReverseWord32(s2);
=> 0x12f50 <AesDecrypt_C+200>:	str	r3, [r11, #-36]	; 0xffffffdc
2955	    s3 = ByteReverseWord32(s3);
=> 0x12f54 <AesDecrypt_C+204>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012f58	2955	    s3 = ByteReverseWord32(s3);
=> 0x12f58 <AesDecrypt_C+208>:	mov	r0, r3
0x00012f5c	2955	    s3 = ByteReverseWord32(s3);
=> 0x12f5c <AesDecrypt_C+212>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=2968390214) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=2968390214, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=275546312) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00012f60 in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:2955
2955	    s3 = ByteReverseWord32(s3);
=> 0x12f60 <AesDecrypt_C+216>:	mov	r3, r0
2955	    s3 = ByteReverseWord32(s3);
=> 0x12f64 <AesDecrypt_C+220>:	str	r3, [r11, #-32]	; 0xffffffe0
2958	    s0 ^= rk[0];
=> 0x12f68 <AesDecrypt_C+224>:	ldr	r3, [r11, #-12]
0x00012f6c	2958	    s0 ^= rk[0];
=> 0x12f6c <AesDecrypt_C+228>:	ldr	r2, [r3]
2958	    s0 ^= rk[0];
=> 0x12f70 <AesDecrypt_C+232>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012f74	2958	    s0 ^= rk[0];
=> 0x12f74 <AesDecrypt_C+236>:	eor	r3, r3, r2
0x00012f78	2958	    s0 ^= rk[0];
=> 0x12f78 <AesDecrypt_C+240>:	str	r3, [r11, #-44]	; 0xffffffd4
2959	    s1 ^= rk[1];
=> 0x12f7c <AesDecrypt_C+244>:	ldr	r3, [r11, #-12]
0x00012f80	2959	    s1 ^= rk[1];
=> 0x12f80 <AesDecrypt_C+248>:	add	r3, r3, #4
0x00012f84	2959	    s1 ^= rk[1];
=> 0x12f84 <AesDecrypt_C+252>:	ldr	r2, [r3]
2959	    s1 ^= rk[1];
=> 0x12f88 <AesDecrypt_C+256>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00012f8c	2959	    s1 ^= rk[1];
=> 0x12f8c <AesDecrypt_C+260>:	eor	r3, r3, r2
0x00012f90	2959	    s1 ^= rk[1];
=> 0x12f90 <AesDecrypt_C+264>:	str	r3, [r11, #-40]	; 0xffffffd8
2960	    s2 ^= rk[2];
=> 0x12f94 <AesDecrypt_C+268>:	ldr	r3, [r11, #-12]
0x00012f98	2960	    s2 ^= rk[2];
=> 0x12f98 <AesDecrypt_C+272>:	add	r3, r3, #8
0x00012f9c	2960	    s2 ^= rk[2];
=> 0x12f9c <AesDecrypt_C+276>:	ldr	r2, [r3]
2960	    s2 ^= rk[2];
=> 0x12fa0 <AesDecrypt_C+280>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00012fa4	2960	    s2 ^= rk[2];
=> 0x12fa4 <AesDecrypt_C+284>:	eor	r3, r3, r2
0x00012fa8	2960	    s2 ^= rk[2];
=> 0x12fa8 <AesDecrypt_C+288>:	str	r3, [r11, #-36]	; 0xffffffdc
2961	    s3 ^= rk[3];
=> 0x12fac <AesDecrypt_C+292>:	ldr	r3, [r11, #-12]
0x00012fb0	2961	    s3 ^= rk[3];
=> 0x12fb0 <AesDecrypt_C+296>:	add	r3, r3, #12
0x00012fb4	2961	    s3 ^= rk[3];
=> 0x12fb4 <AesDecrypt_C+300>:	ldr	r2, [r3]
2961	    s3 ^= rk[3];
=> 0x12fb8 <AesDecrypt_C+304>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012fbc	2961	    s3 ^= rk[3];
=> 0x12fbc <AesDecrypt_C+308>:	eor	r3, r3, r2
0x00012fc0	2961	    s3 ^= rk[3];
=> 0x12fc0 <AesDecrypt_C+312>:	str	r3, [r11, #-32]	; 0xffffffe0
2965	    s0 |= PreFetchTd();
=> 0x12fc4 <AesDecrypt_C+316>:	bl	0x12d80 <PreFetchTd>
PreFetchTd () at wolfcrypt/src/aes.c:2891
2891	{
=> 0x12d80 <PreFetchTd>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00012d84	2891	{
=> 0x12d84 <PreFetchTd+4>:	add	r11, sp, #0
0x00012d88	2891	{
=> 0x12d88 <PreFetchTd+8>:	sub	sp, sp, #20
2892	    word32 x = 0;
=> 0x12d8c <PreFetchTd+12>:	mov	r3, #0
0x00012d90	2892	    word32 x = 0;
=> 0x12d90 <PreFetchTd+16>:	str	r3, [r11, #-16]
2895	    for (i = 0; i < 4; i++) {
=> 0x12d94 <PreFetchTd+20>:	mov	r3, #0
0x00012d98	2895	    for (i = 0; i < 4; i++) {
=> 0x12d98 <PreFetchTd+24>:	str	r3, [r11, #-12]
2895	    for (i = 0; i < 4; i++) {
=> 0x12d9c <PreFetchTd+28>:	b	0x12df4 <PreFetchTd+116>
0x00012df4	2895	    for (i = 0; i < 4; i++) {
=> 0x12df4 <PreFetchTd+116>:	ldr	r3, [r11, #-12]
0x00012df8	2895	    for (i = 0; i < 4; i++) {
=> 0x12df8 <PreFetchTd+120>:	cmp	r3, #3
0x00012dfc	2895	    for (i = 0; i < 4; i++) {
=> 0x12dfc <PreFetchTd+124>:	ble	0x12da0 <PreFetchTd+32>
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da0 <PreFetchTd+32>:	mov	r3, #0
0x00012da4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da4 <PreFetchTd+36>:	str	r3, [r11, #-8]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da8 <PreFetchTd+40>:	b	0x12ddc <PreFetchTd+92>
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2895	    for (i = 0; i < 4; i++) {
=> 0x12de8 <PreFetchTd+104>:	ldr	r3, [r11, #-12]
0x00012dec	2895	    for (i = 0; i < 4; i++) {
=> 0x12dec <PreFetchTd+108>:	add	r3, r3, #1
0x00012df0	2895	    for (i = 0; i < 4; i++) {
=> 0x12df0 <PreFetchTd+112>:	str	r3, [r11, #-12]
0x00012df4	2895	    for (i = 0; i < 4; i++) {
=> 0x12df4 <PreFetchTd+116>:	ldr	r3, [r11, #-12]
0x00012df8	2895	    for (i = 0; i < 4; i++) {
=> 0x12df8 <PreFetchTd+120>:	cmp	r3, #3
0x00012dfc	2895	    for (i = 0; i < 4; i++) {
=> 0x12dfc <PreFetchTd+124>:	ble	0x12da0 <PreFetchTd+32>
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da0 <PreFetchTd+32>:	mov	r3, #0
0x00012da4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da4 <PreFetchTd+36>:	str	r3, [r11, #-8]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da8 <PreFetchTd+40>:	b	0x12ddc <PreFetchTd+92>
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2895	    for (i = 0; i < 4; i++) {
=> 0x12de8 <PreFetchTd+104>:	ldr	r3, [r11, #-12]
0x00012dec	2895	    for (i = 0; i < 4; i++) {
=> 0x12dec <PreFetchTd+108>:	add	r3, r3, #1
0x00012df0	2895	    for (i = 0; i < 4; i++) {
=> 0x12df0 <PreFetchTd+112>:	str	r3, [r11, #-12]
0x00012df4	2895	    for (i = 0; i < 4; i++) {
=> 0x12df4 <PreFetchTd+116>:	ldr	r3, [r11, #-12]
0x00012df8	2895	    for (i = 0; i < 4; i++) {
=> 0x12df8 <PreFetchTd+120>:	cmp	r3, #3
0x00012dfc	2895	    for (i = 0; i < 4; i++) {
=> 0x12dfc <PreFetchTd+124>:	ble	0x12da0 <PreFetchTd+32>
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da0 <PreFetchTd+32>:	mov	r3, #0
0x00012da4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da4 <PreFetchTd+36>:	str	r3, [r11, #-8]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da8 <PreFetchTd+40>:	b	0x12ddc <PreFetchTd+92>
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2895	    for (i = 0; i < 4; i++) {
=> 0x12de8 <PreFetchTd+104>:	ldr	r3, [r11, #-12]
0x00012dec	2895	    for (i = 0; i < 4; i++) {
=> 0x12dec <PreFetchTd+108>:	add	r3, r3, #1
0x00012df0	2895	    for (i = 0; i < 4; i++) {
=> 0x12df0 <PreFetchTd+112>:	str	r3, [r11, #-12]
0x00012df4	2895	    for (i = 0; i < 4; i++) {
=> 0x12df4 <PreFetchTd+116>:	ldr	r3, [r11, #-12]
0x00012df8	2895	    for (i = 0; i < 4; i++) {
=> 0x12df8 <PreFetchTd+120>:	cmp	r3, #3
0x00012dfc	2895	    for (i = 0; i < 4; i++) {
=> 0x12dfc <PreFetchTd+124>:	ble	0x12da0 <PreFetchTd+32>
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da0 <PreFetchTd+32>:	mov	r3, #0
0x00012da4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da4 <PreFetchTd+36>:	str	r3, [r11, #-8]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12da8 <PreFetchTd+40>:	b	0x12ddc <PreFetchTd+92>
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2898	            x &= Td[i][j];
=> 0x12dac <PreFetchTd+44>:	ldr	r1, [pc, #96]	; 0x12e14 <PreFetchTd+148>
0x00012db0	2898	            x &= Td[i][j];
=> 0x12db0 <PreFetchTd+48>:	ldr	r3, [r11, #-12]
0x00012db4	2898	            x &= Td[i][j];
=> 0x12db4 <PreFetchTd+52>:	lsl	r2, r3, #8
0x00012db8	2898	            x &= Td[i][j];
=> 0x12db8 <PreFetchTd+56>:	ldr	r3, [r11, #-8]
0x00012dbc	2898	            x &= Td[i][j];
=> 0x12dbc <PreFetchTd+60>:	add	r3, r2, r3
0x00012dc0	2898	            x &= Td[i][j];
=> 0x12dc0 <PreFetchTd+64>:	ldr	r3, [r1, r3, lsl #2]
0x00012dc4	2898	            x &= Td[i][j];
=> 0x12dc4 <PreFetchTd+68>:	ldr	r2, [r11, #-16]
0x00012dc8	2898	            x &= Td[i][j];
=> 0x12dc8 <PreFetchTd+72>:	and	r3, r3, r2
0x00012dcc	2898	            x &= Td[i][j];
=> 0x12dcc <PreFetchTd+76>:	str	r3, [r11, #-16]
2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd0 <PreFetchTd+80>:	ldr	r3, [r11, #-8]
0x00012dd4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd4 <PreFetchTd+84>:	add	r3, r3, #8
0x00012dd8	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12dd8 <PreFetchTd+88>:	str	r3, [r11, #-8]
0x00012ddc	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12ddc <PreFetchTd+92>:	ldr	r3, [r11, #-8]
0x00012de0	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de0 <PreFetchTd+96>:	cmp	r3, #255	; 0xff
0x00012de4	2897	        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
=> 0x12de4 <PreFetchTd+100>:	ble	0x12dac <PreFetchTd+44>
2895	    for (i = 0; i < 4; i++) {
=> 0x12de8 <PreFetchTd+104>:	ldr	r3, [r11, #-12]
0x00012dec	2895	    for (i = 0; i < 4; i++) {
=> 0x12dec <PreFetchTd+108>:	add	r3, r3, #1
0x00012df0	2895	    for (i = 0; i < 4; i++) {
=> 0x12df0 <PreFetchTd+112>:	str	r3, [r11, #-12]
0x00012df4	2895	    for (i = 0; i < 4; i++) {
=> 0x12df4 <PreFetchTd+116>:	ldr	r3, [r11, #-12]
0x00012df8	2895	    for (i = 0; i < 4; i++) {
=> 0x12df8 <PreFetchTd+120>:	cmp	r3, #3
0x00012dfc	2895	    for (i = 0; i < 4; i++) {
=> 0x12dfc <PreFetchTd+124>:	ble	0x12da0 <PreFetchTd+32>
2901	    return x;
=> 0x12e00 <PreFetchTd+128>:	ldr	r3, [r11, #-16]
2902	}
=> 0x12e04 <PreFetchTd+132>:	mov	r0, r3
0x00012e08	2902	}
=> 0x12e08 <PreFetchTd+136>:	add	sp, r11, #0
0x00012e0c	2902	}
=> 0x12e0c <PreFetchTd+140>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00012e10	2902	}
=> 0x12e10 <PreFetchTd+144>:	bx	lr
0x00012fc8 in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:2965
2965	    s0 |= PreFetchTd();
=> 0x12fc8 <AesDecrypt_C+320>:	mov	r2, r0
2965	    s0 |= PreFetchTd();
=> 0x12fcc <AesDecrypt_C+324>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012fd0	2965	    s0 |= PreFetchTd();
=> 0x12fd0 <AesDecrypt_C+328>:	orr	r3, r2, r3
0x00012fd4	2965	    s0 |= PreFetchTd();
=> 0x12fd4 <AesDecrypt_C+332>:	str	r3, [r11, #-44]	; 0xffffffd4
3013	                       DEC_ROUND_T_S( 0);
=> 0x12fd8 <AesDecrypt_C+336>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00012fdc	3013	                       DEC_ROUND_T_S( 0);
=> 0x12fdc <AesDecrypt_C+340>:	lsr	r3, r3, #24
0x00012fe0	3013	                       DEC_ROUND_T_S( 0);
=> 0x12fe0 <AesDecrypt_C+344>:	and	r3, r3, #255	; 0xff
0x00012fe4	3013	                       DEC_ROUND_T_S( 0);
=> 0x12fe4 <AesDecrypt_C+348>:	mov	r2, r3
0x00012fe8	3013	                       DEC_ROUND_T_S( 0);
=> 0x12fe8 <AesDecrypt_C+352>:	ldr	r3, [pc, #3768]	; 0x13ea8 <AesDecrypt_C+4128>
0x00012fec	3013	                       DEC_ROUND_T_S( 0);
=> 0x12fec <AesDecrypt_C+356>:	ldr	r2, [r3, r2, lsl #2]
0x00012ff0	3013	                       DEC_ROUND_T_S( 0);
=> 0x12ff0 <AesDecrypt_C+360>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00012ff4	3013	                       DEC_ROUND_T_S( 0);
=> 0x12ff4 <AesDecrypt_C+364>:	lsr	r3, r3, #16
0x00012ff8	3013	                       DEC_ROUND_T_S( 0);
=> 0x12ff8 <AesDecrypt_C+368>:	and	r3, r3, #255	; 0xff
0x00012ffc	3013	                       DEC_ROUND_T_S( 0);
=> 0x12ffc <AesDecrypt_C+372>:	ldr	r1, [pc, #3748]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013000	3013	                       DEC_ROUND_T_S( 0);
=> 0x13000 <AesDecrypt_C+376>:	add	r3, r3, #256	; 0x100
0x00013004	3013	                       DEC_ROUND_T_S( 0);
=> 0x13004 <AesDecrypt_C+380>:	ldr	r3, [r1, r3, lsl #2]
0x00013008	3013	                       DEC_ROUND_T_S( 0);
=> 0x13008 <AesDecrypt_C+384>:	eor	r2, r2, r3
0x0001300c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1300c <AesDecrypt_C+388>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013010	3013	                       DEC_ROUND_T_S( 0);
=> 0x13010 <AesDecrypt_C+392>:	lsr	r3, r3, #8
0x00013014	3013	                       DEC_ROUND_T_S( 0);
=> 0x13014 <AesDecrypt_C+396>:	and	r3, r3, #255	; 0xff
0x00013018	3013	                       DEC_ROUND_T_S( 0);
=> 0x13018 <AesDecrypt_C+400>:	ldr	r1, [pc, #3720]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001301c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1301c <AesDecrypt_C+404>:	add	r3, r3, #512	; 0x200
0x00013020	3013	                       DEC_ROUND_T_S( 0);
=> 0x13020 <AesDecrypt_C+408>:	ldr	r3, [r1, r3, lsl #2]
0x00013024	3013	                       DEC_ROUND_T_S( 0);
=> 0x13024 <AesDecrypt_C+412>:	eor	r2, r2, r3
0x00013028	3013	                       DEC_ROUND_T_S( 0);
=> 0x13028 <AesDecrypt_C+416>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x0001302c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1302c <AesDecrypt_C+420>:	and	r3, r3, #255	; 0xff
0x00013030	3013	                       DEC_ROUND_T_S( 0);
=> 0x13030 <AesDecrypt_C+424>:	ldr	r1, [pc, #3696]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013034	3013	                       DEC_ROUND_T_S( 0);
=> 0x13034 <AesDecrypt_C+428>:	add	r3, r3, #768	; 0x300
0x00013038	3013	                       DEC_ROUND_T_S( 0);
=> 0x13038 <AesDecrypt_C+432>:	ldr	r3, [r1, r3, lsl #2]
0x0001303c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1303c <AesDecrypt_C+436>:	eor	r2, r2, r3
0x00013040	3013	                       DEC_ROUND_T_S( 0);
=> 0x13040 <AesDecrypt_C+440>:	ldr	r3, [r11, #-12]
0x00013044	3013	                       DEC_ROUND_T_S( 0);
=> 0x13044 <AesDecrypt_C+444>:	add	r3, r3, #16
0x00013048	3013	                       DEC_ROUND_T_S( 0);
=> 0x13048 <AesDecrypt_C+448>:	ldr	r3, [r3]
0x0001304c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1304c <AesDecrypt_C+452>:	eor	r3, r3, r2
0x00013050	3013	                       DEC_ROUND_T_S( 0);
=> 0x13050 <AesDecrypt_C+456>:	str	r3, [r11, #-28]	; 0xffffffe4
0x00013054	3013	                       DEC_ROUND_T_S( 0);
=> 0x13054 <AesDecrypt_C+460>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013058	3013	                       DEC_ROUND_T_S( 0);
=> 0x13058 <AesDecrypt_C+464>:	lsr	r3, r3, #24
0x0001305c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1305c <AesDecrypt_C+468>:	and	r3, r3, #255	; 0xff
0x00013060	3013	                       DEC_ROUND_T_S( 0);
=> 0x13060 <AesDecrypt_C+472>:	mov	r2, r3
0x00013064	3013	                       DEC_ROUND_T_S( 0);
=> 0x13064 <AesDecrypt_C+476>:	ldr	r3, [pc, #3644]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013068	3013	                       DEC_ROUND_T_S( 0);
=> 0x13068 <AesDecrypt_C+480>:	ldr	r2, [r3, r2, lsl #2]
0x0001306c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1306c <AesDecrypt_C+484>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013070	3013	                       DEC_ROUND_T_S( 0);
=> 0x13070 <AesDecrypt_C+488>:	lsr	r3, r3, #16
0x00013074	3013	                       DEC_ROUND_T_S( 0);
=> 0x13074 <AesDecrypt_C+492>:	and	r3, r3, #255	; 0xff
0x00013078	3013	                       DEC_ROUND_T_S( 0);
=> 0x13078 <AesDecrypt_C+496>:	ldr	r1, [pc, #3624]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001307c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1307c <AesDecrypt_C+500>:	add	r3, r3, #256	; 0x100
0x00013080	3013	                       DEC_ROUND_T_S( 0);
=> 0x13080 <AesDecrypt_C+504>:	ldr	r3, [r1, r3, lsl #2]
0x00013084	3013	                       DEC_ROUND_T_S( 0);
=> 0x13084 <AesDecrypt_C+508>:	eor	r2, r2, r3
0x00013088	3013	                       DEC_ROUND_T_S( 0);
=> 0x13088 <AesDecrypt_C+512>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001308c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1308c <AesDecrypt_C+516>:	lsr	r3, r3, #8
0x00013090	3013	                       DEC_ROUND_T_S( 0);
=> 0x13090 <AesDecrypt_C+520>:	and	r3, r3, #255	; 0xff
0x00013094	3013	                       DEC_ROUND_T_S( 0);
=> 0x13094 <AesDecrypt_C+524>:	ldr	r1, [pc, #3596]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013098	3013	                       DEC_ROUND_T_S( 0);
=> 0x13098 <AesDecrypt_C+528>:	add	r3, r3, #512	; 0x200
0x0001309c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1309c <AesDecrypt_C+532>:	ldr	r3, [r1, r3, lsl #2]
0x000130a0	3013	                       DEC_ROUND_T_S( 0);
=> 0x130a0 <AesDecrypt_C+536>:	eor	r2, r2, r3
0x000130a4	3013	                       DEC_ROUND_T_S( 0);
=> 0x130a4 <AesDecrypt_C+540>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000130a8	3013	                       DEC_ROUND_T_S( 0);
=> 0x130a8 <AesDecrypt_C+544>:	and	r3, r3, #255	; 0xff
0x000130ac	3013	                       DEC_ROUND_T_S( 0);
=> 0x130ac <AesDecrypt_C+548>:	ldr	r1, [pc, #3572]	; 0x13ea8 <AesDecrypt_C+4128>
0x000130b0	3013	                       DEC_ROUND_T_S( 0);
=> 0x130b0 <AesDecrypt_C+552>:	add	r3, r3, #768	; 0x300
0x000130b4	3013	                       DEC_ROUND_T_S( 0);
=> 0x130b4 <AesDecrypt_C+556>:	ldr	r3, [r1, r3, lsl #2]
0x000130b8	3013	                       DEC_ROUND_T_S( 0);
=> 0x130b8 <AesDecrypt_C+560>:	eor	r2, r2, r3
0x000130bc	3013	                       DEC_ROUND_T_S( 0);
=> 0x130bc <AesDecrypt_C+564>:	ldr	r3, [r11, #-12]
0x000130c0	3013	                       DEC_ROUND_T_S( 0);
=> 0x130c0 <AesDecrypt_C+568>:	add	r3, r3, #20
0x000130c4	3013	                       DEC_ROUND_T_S( 0);
=> 0x130c4 <AesDecrypt_C+572>:	ldr	r3, [r3]
0x000130c8	3013	                       DEC_ROUND_T_S( 0);
=> 0x130c8 <AesDecrypt_C+576>:	eor	r3, r3, r2
0x000130cc	3013	                       DEC_ROUND_T_S( 0);
=> 0x130cc <AesDecrypt_C+580>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000130d0	3013	                       DEC_ROUND_T_S( 0);
=> 0x130d0 <AesDecrypt_C+584>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000130d4	3013	                       DEC_ROUND_T_S( 0);
=> 0x130d4 <AesDecrypt_C+588>:	lsr	r3, r3, #24
0x000130d8	3013	                       DEC_ROUND_T_S( 0);
=> 0x130d8 <AesDecrypt_C+592>:	and	r3, r3, #255	; 0xff
0x000130dc	3013	                       DEC_ROUND_T_S( 0);
=> 0x130dc <AesDecrypt_C+596>:	mov	r2, r3
0x000130e0	3013	                       DEC_ROUND_T_S( 0);
=> 0x130e0 <AesDecrypt_C+600>:	ldr	r3, [pc, #3520]	; 0x13ea8 <AesDecrypt_C+4128>
0x000130e4	3013	                       DEC_ROUND_T_S( 0);
=> 0x130e4 <AesDecrypt_C+604>:	ldr	r2, [r3, r2, lsl #2]
0x000130e8	3013	                       DEC_ROUND_T_S( 0);
=> 0x130e8 <AesDecrypt_C+608>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000130ec	3013	                       DEC_ROUND_T_S( 0);
=> 0x130ec <AesDecrypt_C+612>:	lsr	r3, r3, #16
0x000130f0	3013	                       DEC_ROUND_T_S( 0);
=> 0x130f0 <AesDecrypt_C+616>:	and	r3, r3, #255	; 0xff
0x000130f4	3013	                       DEC_ROUND_T_S( 0);
=> 0x130f4 <AesDecrypt_C+620>:	ldr	r1, [pc, #3500]	; 0x13ea8 <AesDecrypt_C+4128>
0x000130f8	3013	                       DEC_ROUND_T_S( 0);
=> 0x130f8 <AesDecrypt_C+624>:	add	r3, r3, #256	; 0x100
0x000130fc	3013	                       DEC_ROUND_T_S( 0);
=> 0x130fc <AesDecrypt_C+628>:	ldr	r3, [r1, r3, lsl #2]
0x00013100	3013	                       DEC_ROUND_T_S( 0);
=> 0x13100 <AesDecrypt_C+632>:	eor	r2, r2, r3
0x00013104	3013	                       DEC_ROUND_T_S( 0);
=> 0x13104 <AesDecrypt_C+636>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013108	3013	                       DEC_ROUND_T_S( 0);
=> 0x13108 <AesDecrypt_C+640>:	lsr	r3, r3, #8
0x0001310c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1310c <AesDecrypt_C+644>:	and	r3, r3, #255	; 0xff
0x00013110	3013	                       DEC_ROUND_T_S( 0);
=> 0x13110 <AesDecrypt_C+648>:	ldr	r1, [pc, #3472]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013114	3013	                       DEC_ROUND_T_S( 0);
=> 0x13114 <AesDecrypt_C+652>:	add	r3, r3, #512	; 0x200
0x00013118	3013	                       DEC_ROUND_T_S( 0);
=> 0x13118 <AesDecrypt_C+656>:	ldr	r3, [r1, r3, lsl #2]
0x0001311c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1311c <AesDecrypt_C+660>:	eor	r2, r2, r3
0x00013120	3013	                       DEC_ROUND_T_S( 0);
=> 0x13120 <AesDecrypt_C+664>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013124	3013	                       DEC_ROUND_T_S( 0);
=> 0x13124 <AesDecrypt_C+668>:	and	r3, r3, #255	; 0xff
0x00013128	3013	                       DEC_ROUND_T_S( 0);
=> 0x13128 <AesDecrypt_C+672>:	ldr	r1, [pc, #3448]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001312c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1312c <AesDecrypt_C+676>:	add	r3, r3, #768	; 0x300
0x00013130	3013	                       DEC_ROUND_T_S( 0);
=> 0x13130 <AesDecrypt_C+680>:	ldr	r3, [r1, r3, lsl #2]
0x00013134	3013	                       DEC_ROUND_T_S( 0);
=> 0x13134 <AesDecrypt_C+684>:	eor	r2, r2, r3
0x00013138	3013	                       DEC_ROUND_T_S( 0);
=> 0x13138 <AesDecrypt_C+688>:	ldr	r3, [r11, #-12]
0x0001313c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1313c <AesDecrypt_C+692>:	add	r3, r3, #24
0x00013140	3013	                       DEC_ROUND_T_S( 0);
=> 0x13140 <AesDecrypt_C+696>:	ldr	r3, [r3]
0x00013144	3013	                       DEC_ROUND_T_S( 0);
=> 0x13144 <AesDecrypt_C+700>:	eor	r3, r3, r2
0x00013148	3013	                       DEC_ROUND_T_S( 0);
=> 0x13148 <AesDecrypt_C+704>:	str	r3, [r11, #-20]	; 0xffffffec
0x0001314c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1314c <AesDecrypt_C+708>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013150	3013	                       DEC_ROUND_T_S( 0);
=> 0x13150 <AesDecrypt_C+712>:	lsr	r3, r3, #24
0x00013154	3013	                       DEC_ROUND_T_S( 0);
=> 0x13154 <AesDecrypt_C+716>:	and	r3, r3, #255	; 0xff
0x00013158	3013	                       DEC_ROUND_T_S( 0);
=> 0x13158 <AesDecrypt_C+720>:	mov	r2, r3
0x0001315c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1315c <AesDecrypt_C+724>:	ldr	r3, [pc, #3396]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013160	3013	                       DEC_ROUND_T_S( 0);
=> 0x13160 <AesDecrypt_C+728>:	ldr	r2, [r3, r2, lsl #2]
0x00013164	3013	                       DEC_ROUND_T_S( 0);
=> 0x13164 <AesDecrypt_C+732>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013168	3013	                       DEC_ROUND_T_S( 0);
=> 0x13168 <AesDecrypt_C+736>:	lsr	r3, r3, #16
0x0001316c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1316c <AesDecrypt_C+740>:	and	r3, r3, #255	; 0xff
0x00013170	3013	                       DEC_ROUND_T_S( 0);
=> 0x13170 <AesDecrypt_C+744>:	ldr	r1, [pc, #3376]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013174	3013	                       DEC_ROUND_T_S( 0);
=> 0x13174 <AesDecrypt_C+748>:	add	r3, r3, #256	; 0x100
0x00013178	3013	                       DEC_ROUND_T_S( 0);
=> 0x13178 <AesDecrypt_C+752>:	ldr	r3, [r1, r3, lsl #2]
0x0001317c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1317c <AesDecrypt_C+756>:	eor	r2, r2, r3
0x00013180	3013	                       DEC_ROUND_T_S( 0);
=> 0x13180 <AesDecrypt_C+760>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013184	3013	                       DEC_ROUND_T_S( 0);
=> 0x13184 <AesDecrypt_C+764>:	lsr	r3, r3, #8
0x00013188	3013	                       DEC_ROUND_T_S( 0);
=> 0x13188 <AesDecrypt_C+768>:	and	r3, r3, #255	; 0xff
0x0001318c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1318c <AesDecrypt_C+772>:	ldr	r1, [pc, #3348]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013190	3013	                       DEC_ROUND_T_S( 0);
=> 0x13190 <AesDecrypt_C+776>:	add	r3, r3, #512	; 0x200
0x00013194	3013	                       DEC_ROUND_T_S( 0);
=> 0x13194 <AesDecrypt_C+780>:	ldr	r3, [r1, r3, lsl #2]
0x00013198	3013	                       DEC_ROUND_T_S( 0);
=> 0x13198 <AesDecrypt_C+784>:	eor	r2, r2, r3
0x0001319c	3013	                       DEC_ROUND_T_S( 0);
=> 0x1319c <AesDecrypt_C+788>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000131a0	3013	                       DEC_ROUND_T_S( 0);
=> 0x131a0 <AesDecrypt_C+792>:	and	r3, r3, #255	; 0xff
0x000131a4	3013	                       DEC_ROUND_T_S( 0);
=> 0x131a4 <AesDecrypt_C+796>:	ldr	r1, [pc, #3324]	; 0x13ea8 <AesDecrypt_C+4128>
0x000131a8	3013	                       DEC_ROUND_T_S( 0);
=> 0x131a8 <AesDecrypt_C+800>:	add	r3, r3, #768	; 0x300
0x000131ac	3013	                       DEC_ROUND_T_S( 0);
=> 0x131ac <AesDecrypt_C+804>:	ldr	r3, [r1, r3, lsl #2]
0x000131b0	3013	                       DEC_ROUND_T_S( 0);
=> 0x131b0 <AesDecrypt_C+808>:	eor	r2, r2, r3
0x000131b4	3013	                       DEC_ROUND_T_S( 0);
=> 0x131b4 <AesDecrypt_C+812>:	ldr	r3, [r11, #-12]
0x000131b8	3013	                       DEC_ROUND_T_S( 0);
=> 0x131b8 <AesDecrypt_C+816>:	add	r3, r3, #28
0x000131bc	3013	                       DEC_ROUND_T_S( 0);
=> 0x131bc <AesDecrypt_C+820>:	ldr	r3, [r3]
0x000131c0	3013	                       DEC_ROUND_T_S( 0);
=> 0x131c0 <AesDecrypt_C+824>:	eor	r3, r3, r2
0x000131c4	3013	                       DEC_ROUND_T_S( 0);
=> 0x131c4 <AesDecrypt_C+828>:	str	r3, [r11, #-16]
3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131c8 <AesDecrypt_C+832>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000131cc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131cc <AesDecrypt_C+836>:	lsr	r3, r3, #24
0x000131d0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131d0 <AesDecrypt_C+840>:	and	r3, r3, #255	; 0xff
0x000131d4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131d4 <AesDecrypt_C+844>:	mov	r2, r3
0x000131d8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131d8 <AesDecrypt_C+848>:	ldr	r3, [pc, #3272]	; 0x13ea8 <AesDecrypt_C+4128>
0x000131dc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131dc <AesDecrypt_C+852>:	ldr	r2, [r3, r2, lsl #2]
0x000131e0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131e0 <AesDecrypt_C+856>:	ldr	r3, [r11, #-16]
0x000131e4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131e4 <AesDecrypt_C+860>:	lsr	r3, r3, #16
0x000131e8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131e8 <AesDecrypt_C+864>:	and	r3, r3, #255	; 0xff
0x000131ec	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131ec <AesDecrypt_C+868>:	ldr	r1, [pc, #3252]	; 0x13ea8 <AesDecrypt_C+4128>
0x000131f0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131f0 <AesDecrypt_C+872>:	add	r3, r3, #256	; 0x100
0x000131f4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131f4 <AesDecrypt_C+876>:	ldr	r3, [r1, r3, lsl #2]
0x000131f8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131f8 <AesDecrypt_C+880>:	eor	r2, r2, r3
0x000131fc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x131fc <AesDecrypt_C+884>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013200	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13200 <AesDecrypt_C+888>:	lsr	r3, r3, #8
0x00013204	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13204 <AesDecrypt_C+892>:	and	r3, r3, #255	; 0xff
0x00013208	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13208 <AesDecrypt_C+896>:	ldr	r1, [pc, #3224]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001320c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1320c <AesDecrypt_C+900>:	add	r3, r3, #512	; 0x200
0x00013210	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13210 <AesDecrypt_C+904>:	ldr	r3, [r1, r3, lsl #2]
0x00013214	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13214 <AesDecrypt_C+908>:	eor	r2, r2, r3
0x00013218	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13218 <AesDecrypt_C+912>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001321c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1321c <AesDecrypt_C+916>:	and	r3, r3, #255	; 0xff
0x00013220	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13220 <AesDecrypt_C+920>:	ldr	r1, [pc, #3200]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013224	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13224 <AesDecrypt_C+924>:	add	r3, r3, #768	; 0x300
0x00013228	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13228 <AesDecrypt_C+928>:	ldr	r3, [r1, r3, lsl #2]
0x0001322c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1322c <AesDecrypt_C+932>:	eor	r2, r2, r3
0x00013230	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13230 <AesDecrypt_C+936>:	ldr	r3, [r11, #-12]
0x00013234	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13234 <AesDecrypt_C+940>:	add	r3, r3, #32
0x00013238	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13238 <AesDecrypt_C+944>:	ldr	r3, [r3]
0x0001323c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1323c <AesDecrypt_C+948>:	eor	r3, r3, r2
0x00013240	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13240 <AesDecrypt_C+952>:	str	r3, [r11, #-44]	; 0xffffffd4
0x00013244	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13244 <AesDecrypt_C+956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013248	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13248 <AesDecrypt_C+960>:	lsr	r3, r3, #24
0x0001324c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1324c <AesDecrypt_C+964>:	and	r3, r3, #255	; 0xff
0x00013250	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13250 <AesDecrypt_C+968>:	mov	r2, r3
0x00013254	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13254 <AesDecrypt_C+972>:	ldr	r3, [pc, #3148]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013258	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13258 <AesDecrypt_C+976>:	ldr	r2, [r3, r2, lsl #2]
0x0001325c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1325c <AesDecrypt_C+980>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013260	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13260 <AesDecrypt_C+984>:	lsr	r3, r3, #16
0x00013264	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13264 <AesDecrypt_C+988>:	and	r3, r3, #255	; 0xff
0x00013268	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13268 <AesDecrypt_C+992>:	ldr	r1, [pc, #3128]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001326c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1326c <AesDecrypt_C+996>:	add	r3, r3, #256	; 0x100
0x00013270	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13270 <AesDecrypt_C+1000>:	ldr	r3, [r1, r3, lsl #2]
0x00013274	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13274 <AesDecrypt_C+1004>:	eor	r2, r2, r3
0x00013278	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13278 <AesDecrypt_C+1008>:	ldr	r3, [r11, #-16]
0x0001327c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1327c <AesDecrypt_C+1012>:	lsr	r3, r3, #8
0x00013280	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13280 <AesDecrypt_C+1016>:	and	r3, r3, #255	; 0xff
0x00013284	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13284 <AesDecrypt_C+1020>:	ldr	r1, [pc, #3100]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013288	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13288 <AesDecrypt_C+1024>:	add	r3, r3, #512	; 0x200
0x0001328c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1328c <AesDecrypt_C+1028>:	ldr	r3, [r1, r3, lsl #2]
0x00013290	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13290 <AesDecrypt_C+1032>:	eor	r2, r2, r3
0x00013294	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13294 <AesDecrypt_C+1036>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013298	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13298 <AesDecrypt_C+1040>:	and	r3, r3, #255	; 0xff
0x0001329c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1329c <AesDecrypt_C+1044>:	ldr	r1, [pc, #3076]	; 0x13ea8 <AesDecrypt_C+4128>
0x000132a0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132a0 <AesDecrypt_C+1048>:	add	r3, r3, #768	; 0x300
0x000132a4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132a4 <AesDecrypt_C+1052>:	ldr	r3, [r1, r3, lsl #2]
0x000132a8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132a8 <AesDecrypt_C+1056>:	eor	r2, r2, r3
0x000132ac	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132ac <AesDecrypt_C+1060>:	ldr	r3, [r11, #-12]
0x000132b0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132b0 <AesDecrypt_C+1064>:	add	r3, r3, #36	; 0x24
0x000132b4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132b4 <AesDecrypt_C+1068>:	ldr	r3, [r3]
0x000132b8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132b8 <AesDecrypt_C+1072>:	eor	r3, r3, r2
0x000132bc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132bc <AesDecrypt_C+1076>:	str	r3, [r11, #-40]	; 0xffffffd8
0x000132c0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132c0 <AesDecrypt_C+1080>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000132c4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132c4 <AesDecrypt_C+1084>:	lsr	r3, r3, #24
0x000132c8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132c8 <AesDecrypt_C+1088>:	and	r3, r3, #255	; 0xff
0x000132cc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132cc <AesDecrypt_C+1092>:	mov	r2, r3
0x000132d0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132d0 <AesDecrypt_C+1096>:	ldr	r3, [pc, #3024]	; 0x13ea8 <AesDecrypt_C+4128>
0x000132d4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132d4 <AesDecrypt_C+1100>:	ldr	r2, [r3, r2, lsl #2]
0x000132d8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132d8 <AesDecrypt_C+1104>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000132dc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132dc <AesDecrypt_C+1108>:	lsr	r3, r3, #16
0x000132e0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132e0 <AesDecrypt_C+1112>:	and	r3, r3, #255	; 0xff
0x000132e4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132e4 <AesDecrypt_C+1116>:	ldr	r1, [pc, #3004]	; 0x13ea8 <AesDecrypt_C+4128>
0x000132e8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132e8 <AesDecrypt_C+1120>:	add	r3, r3, #256	; 0x100
0x000132ec	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132ec <AesDecrypt_C+1124>:	ldr	r3, [r1, r3, lsl #2]
0x000132f0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132f0 <AesDecrypt_C+1128>:	eor	r2, r2, r3
0x000132f4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132f4 <AesDecrypt_C+1132>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000132f8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132f8 <AesDecrypt_C+1136>:	lsr	r3, r3, #8
0x000132fc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x132fc <AesDecrypt_C+1140>:	and	r3, r3, #255	; 0xff
0x00013300	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13300 <AesDecrypt_C+1144>:	ldr	r1, [pc, #2976]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013304	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13304 <AesDecrypt_C+1148>:	add	r3, r3, #512	; 0x200
0x00013308	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13308 <AesDecrypt_C+1152>:	ldr	r3, [r1, r3, lsl #2]
0x0001330c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1330c <AesDecrypt_C+1156>:	eor	r2, r2, r3
0x00013310	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13310 <AesDecrypt_C+1160>:	ldr	r3, [r11, #-16]
0x00013314	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13314 <AesDecrypt_C+1164>:	and	r3, r3, #255	; 0xff
0x00013318	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13318 <AesDecrypt_C+1168>:	ldr	r1, [pc, #2952]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001331c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1331c <AesDecrypt_C+1172>:	add	r3, r3, #768	; 0x300
0x00013320	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13320 <AesDecrypt_C+1176>:	ldr	r3, [r1, r3, lsl #2]
0x00013324	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13324 <AesDecrypt_C+1180>:	eor	r2, r2, r3
0x00013328	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13328 <AesDecrypt_C+1184>:	ldr	r3, [r11, #-12]
0x0001332c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1332c <AesDecrypt_C+1188>:	add	r3, r3, #40	; 0x28
0x00013330	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13330 <AesDecrypt_C+1192>:	ldr	r3, [r3]
0x00013334	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13334 <AesDecrypt_C+1196>:	eor	r3, r3, r2
0x00013338	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13338 <AesDecrypt_C+1200>:	str	r3, [r11, #-36]	; 0xffffffdc
0x0001333c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1333c <AesDecrypt_C+1204>:	ldr	r3, [r11, #-16]
0x00013340	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13340 <AesDecrypt_C+1208>:	lsr	r3, r3, #24
0x00013344	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13344 <AesDecrypt_C+1212>:	and	r3, r3, #255	; 0xff
0x00013348	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13348 <AesDecrypt_C+1216>:	mov	r2, r3
0x0001334c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1334c <AesDecrypt_C+1220>:	ldr	r3, [pc, #2900]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013350	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13350 <AesDecrypt_C+1224>:	ldr	r2, [r3, r2, lsl #2]
0x00013354	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13354 <AesDecrypt_C+1228>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013358	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13358 <AesDecrypt_C+1232>:	lsr	r3, r3, #16
0x0001335c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1335c <AesDecrypt_C+1236>:	and	r3, r3, #255	; 0xff
0x00013360	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13360 <AesDecrypt_C+1240>:	ldr	r1, [pc, #2880]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013364	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13364 <AesDecrypt_C+1244>:	add	r3, r3, #256	; 0x100
0x00013368	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13368 <AesDecrypt_C+1248>:	ldr	r3, [r1, r3, lsl #2]
0x0001336c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1336c <AesDecrypt_C+1252>:	eor	r2, r2, r3
0x00013370	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13370 <AesDecrypt_C+1256>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013374	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13374 <AesDecrypt_C+1260>:	lsr	r3, r3, #8
0x00013378	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13378 <AesDecrypt_C+1264>:	and	r3, r3, #255	; 0xff
0x0001337c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1337c <AesDecrypt_C+1268>:	ldr	r1, [pc, #2852]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013380	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13380 <AesDecrypt_C+1272>:	add	r3, r3, #512	; 0x200
0x00013384	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13384 <AesDecrypt_C+1276>:	ldr	r3, [r1, r3, lsl #2]
0x00013388	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13388 <AesDecrypt_C+1280>:	eor	r2, r2, r3
0x0001338c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1338c <AesDecrypt_C+1284>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013390	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13390 <AesDecrypt_C+1288>:	and	r3, r3, #255	; 0xff
0x00013394	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13394 <AesDecrypt_C+1292>:	ldr	r1, [pc, #2828]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013398	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13398 <AesDecrypt_C+1296>:	add	r3, r3, #768	; 0x300
0x0001339c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1339c <AesDecrypt_C+1300>:	ldr	r3, [r1, r3, lsl #2]
0x000133a0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133a0 <AesDecrypt_C+1304>:	eor	r2, r2, r3
0x000133a4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133a4 <AesDecrypt_C+1308>:	ldr	r3, [r11, #-12]
0x000133a8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133a8 <AesDecrypt_C+1312>:	add	r3, r3, #44	; 0x2c
0x000133ac	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133ac <AesDecrypt_C+1316>:	ldr	r3, [r3]
0x000133b0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133b0 <AesDecrypt_C+1320>:	eor	r3, r3, r2
0x000133b4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133b4 <AesDecrypt_C+1324>:	str	r3, [r11, #-32]	; 0xffffffe0
3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133b8 <AesDecrypt_C+1328>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000133bc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133bc <AesDecrypt_C+1332>:	lsr	r3, r3, #24
0x000133c0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133c0 <AesDecrypt_C+1336>:	and	r3, r3, #255	; 0xff
0x000133c4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133c4 <AesDecrypt_C+1340>:	mov	r2, r3
0x000133c8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133c8 <AesDecrypt_C+1344>:	ldr	r3, [pc, #2776]	; 0x13ea8 <AesDecrypt_C+4128>
0x000133cc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133cc <AesDecrypt_C+1348>:	ldr	r2, [r3, r2, lsl #2]
0x000133d0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133d0 <AesDecrypt_C+1352>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000133d4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133d4 <AesDecrypt_C+1356>:	lsr	r3, r3, #16
0x000133d8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133d8 <AesDecrypt_C+1360>:	and	r3, r3, #255	; 0xff
0x000133dc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133dc <AesDecrypt_C+1364>:	ldr	r1, [pc, #2756]	; 0x13ea8 <AesDecrypt_C+4128>
0x000133e0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133e0 <AesDecrypt_C+1368>:	add	r3, r3, #256	; 0x100
0x000133e4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133e4 <AesDecrypt_C+1372>:	ldr	r3, [r1, r3, lsl #2]
0x000133e8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133e8 <AesDecrypt_C+1376>:	eor	r2, r2, r3
0x000133ec	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133ec <AesDecrypt_C+1380>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000133f0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133f0 <AesDecrypt_C+1384>:	lsr	r3, r3, #8
0x000133f4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133f4 <AesDecrypt_C+1388>:	and	r3, r3, #255	; 0xff
0x000133f8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133f8 <AesDecrypt_C+1392>:	ldr	r1, [pc, #2728]	; 0x13ea8 <AesDecrypt_C+4128>
0x000133fc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x133fc <AesDecrypt_C+1396>:	add	r3, r3, #512	; 0x200
0x00013400	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13400 <AesDecrypt_C+1400>:	ldr	r3, [r1, r3, lsl #2]
0x00013404	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13404 <AesDecrypt_C+1404>:	eor	r2, r2, r3
0x00013408	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13408 <AesDecrypt_C+1408>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x0001340c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1340c <AesDecrypt_C+1412>:	and	r3, r3, #255	; 0xff
0x00013410	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13410 <AesDecrypt_C+1416>:	ldr	r1, [pc, #2704]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013414	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13414 <AesDecrypt_C+1420>:	add	r3, r3, #768	; 0x300
0x00013418	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13418 <AesDecrypt_C+1424>:	ldr	r3, [r1, r3, lsl #2]
0x0001341c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1341c <AesDecrypt_C+1428>:	eor	r2, r2, r3
0x00013420	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13420 <AesDecrypt_C+1432>:	ldr	r3, [r11, #-12]
0x00013424	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13424 <AesDecrypt_C+1436>:	add	r3, r3, #48	; 0x30
0x00013428	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13428 <AesDecrypt_C+1440>:	ldr	r3, [r3]
0x0001342c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1342c <AesDecrypt_C+1444>:	eor	r3, r3, r2
0x00013430	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13430 <AesDecrypt_C+1448>:	str	r3, [r11, #-28]	; 0xffffffe4
0x00013434	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13434 <AesDecrypt_C+1452>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013438	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13438 <AesDecrypt_C+1456>:	lsr	r3, r3, #24
0x0001343c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1343c <AesDecrypt_C+1460>:	and	r3, r3, #255	; 0xff
0x00013440	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13440 <AesDecrypt_C+1464>:	mov	r2, r3
0x00013444	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13444 <AesDecrypt_C+1468>:	ldr	r3, [pc, #2652]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013448	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13448 <AesDecrypt_C+1472>:	ldr	r2, [r3, r2, lsl #2]
0x0001344c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1344c <AesDecrypt_C+1476>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013450	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13450 <AesDecrypt_C+1480>:	lsr	r3, r3, #16
0x00013454	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13454 <AesDecrypt_C+1484>:	and	r3, r3, #255	; 0xff
0x00013458	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13458 <AesDecrypt_C+1488>:	ldr	r1, [pc, #2632]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001345c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1345c <AesDecrypt_C+1492>:	add	r3, r3, #256	; 0x100
0x00013460	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13460 <AesDecrypt_C+1496>:	ldr	r3, [r1, r3, lsl #2]
0x00013464	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13464 <AesDecrypt_C+1500>:	eor	r2, r2, r3
0x00013468	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13468 <AesDecrypt_C+1504>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001346c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1346c <AesDecrypt_C+1508>:	lsr	r3, r3, #8
0x00013470	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13470 <AesDecrypt_C+1512>:	and	r3, r3, #255	; 0xff
0x00013474	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13474 <AesDecrypt_C+1516>:	ldr	r1, [pc, #2604]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013478	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13478 <AesDecrypt_C+1520>:	add	r3, r3, #512	; 0x200
0x0001347c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1347c <AesDecrypt_C+1524>:	ldr	r3, [r1, r3, lsl #2]
0x00013480	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13480 <AesDecrypt_C+1528>:	eor	r2, r2, r3
0x00013484	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13484 <AesDecrypt_C+1532>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013488	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13488 <AesDecrypt_C+1536>:	and	r3, r3, #255	; 0xff
0x0001348c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1348c <AesDecrypt_C+1540>:	ldr	r1, [pc, #2580]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013490	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13490 <AesDecrypt_C+1544>:	add	r3, r3, #768	; 0x300
0x00013494	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13494 <AesDecrypt_C+1548>:	ldr	r3, [r1, r3, lsl #2]
0x00013498	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13498 <AesDecrypt_C+1552>:	eor	r2, r2, r3
0x0001349c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1349c <AesDecrypt_C+1556>:	ldr	r3, [r11, #-12]
0x000134a0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134a0 <AesDecrypt_C+1560>:	add	r3, r3, #52	; 0x34
0x000134a4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134a4 <AesDecrypt_C+1564>:	ldr	r3, [r3]
0x000134a8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134a8 <AesDecrypt_C+1568>:	eor	r3, r3, r2
0x000134ac	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134ac <AesDecrypt_C+1572>:	str	r3, [r11, #-24]	; 0xffffffe8
0x000134b0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134b0 <AesDecrypt_C+1576>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000134b4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134b4 <AesDecrypt_C+1580>:	lsr	r3, r3, #24
0x000134b8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134b8 <AesDecrypt_C+1584>:	and	r3, r3, #255	; 0xff
0x000134bc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134bc <AesDecrypt_C+1588>:	mov	r2, r3
0x000134c0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134c0 <AesDecrypt_C+1592>:	ldr	r3, [pc, #2528]	; 0x13ea8 <AesDecrypt_C+4128>
0x000134c4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134c4 <AesDecrypt_C+1596>:	ldr	r2, [r3, r2, lsl #2]
0x000134c8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134c8 <AesDecrypt_C+1600>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000134cc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134cc <AesDecrypt_C+1604>:	lsr	r3, r3, #16
0x000134d0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134d0 <AesDecrypt_C+1608>:	and	r3, r3, #255	; 0xff
0x000134d4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134d4 <AesDecrypt_C+1612>:	ldr	r1, [pc, #2508]	; 0x13ea8 <AesDecrypt_C+4128>
0x000134d8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134d8 <AesDecrypt_C+1616>:	add	r3, r3, #256	; 0x100
0x000134dc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134dc <AesDecrypt_C+1620>:	ldr	r3, [r1, r3, lsl #2]
0x000134e0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134e0 <AesDecrypt_C+1624>:	eor	r2, r2, r3
0x000134e4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134e4 <AesDecrypt_C+1628>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000134e8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134e8 <AesDecrypt_C+1632>:	lsr	r3, r3, #8
0x000134ec	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134ec <AesDecrypt_C+1636>:	and	r3, r3, #255	; 0xff
0x000134f0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134f0 <AesDecrypt_C+1640>:	ldr	r1, [pc, #2480]	; 0x13ea8 <AesDecrypt_C+4128>
0x000134f4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134f4 <AesDecrypt_C+1644>:	add	r3, r3, #512	; 0x200
0x000134f8	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134f8 <AesDecrypt_C+1648>:	ldr	r3, [r1, r3, lsl #2]
0x000134fc	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x134fc <AesDecrypt_C+1652>:	eor	r2, r2, r3
0x00013500	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13500 <AesDecrypt_C+1656>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013504	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13504 <AesDecrypt_C+1660>:	and	r3, r3, #255	; 0xff
0x00013508	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13508 <AesDecrypt_C+1664>:	ldr	r1, [pc, #2456]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001350c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1350c <AesDecrypt_C+1668>:	add	r3, r3, #768	; 0x300
0x00013510	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13510 <AesDecrypt_C+1672>:	ldr	r3, [r1, r3, lsl #2]
0x00013514	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13514 <AesDecrypt_C+1676>:	eor	r2, r2, r3
0x00013518	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13518 <AesDecrypt_C+1680>:	ldr	r3, [r11, #-12]
0x0001351c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1351c <AesDecrypt_C+1684>:	add	r3, r3, #56	; 0x38
0x00013520	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13520 <AesDecrypt_C+1688>:	ldr	r3, [r3]
0x00013524	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13524 <AesDecrypt_C+1692>:	eor	r3, r3, r2
0x00013528	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13528 <AesDecrypt_C+1696>:	str	r3, [r11, #-20]	; 0xffffffec
0x0001352c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1352c <AesDecrypt_C+1700>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013530	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13530 <AesDecrypt_C+1704>:	lsr	r3, r3, #24
0x00013534	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13534 <AesDecrypt_C+1708>:	and	r3, r3, #255	; 0xff
0x00013538	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13538 <AesDecrypt_C+1712>:	mov	r2, r3
0x0001353c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1353c <AesDecrypt_C+1716>:	ldr	r3, [pc, #2404]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013540	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13540 <AesDecrypt_C+1720>:	ldr	r2, [r3, r2, lsl #2]
0x00013544	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13544 <AesDecrypt_C+1724>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013548	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13548 <AesDecrypt_C+1728>:	lsr	r3, r3, #16
0x0001354c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1354c <AesDecrypt_C+1732>:	and	r3, r3, #255	; 0xff
0x00013550	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13550 <AesDecrypt_C+1736>:	ldr	r1, [pc, #2384]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013554	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13554 <AesDecrypt_C+1740>:	add	r3, r3, #256	; 0x100
0x00013558	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13558 <AesDecrypt_C+1744>:	ldr	r3, [r1, r3, lsl #2]
0x0001355c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1355c <AesDecrypt_C+1748>:	eor	r2, r2, r3
0x00013560	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13560 <AesDecrypt_C+1752>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013564	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13564 <AesDecrypt_C+1756>:	lsr	r3, r3, #8
0x00013568	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13568 <AesDecrypt_C+1760>:	and	r3, r3, #255	; 0xff
0x0001356c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1356c <AesDecrypt_C+1764>:	ldr	r1, [pc, #2356]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013570	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13570 <AesDecrypt_C+1768>:	add	r3, r3, #512	; 0x200
0x00013574	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13574 <AesDecrypt_C+1772>:	ldr	r3, [r1, r3, lsl #2]
0x00013578	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13578 <AesDecrypt_C+1776>:	eor	r2, r2, r3
0x0001357c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1357c <AesDecrypt_C+1780>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013580	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13580 <AesDecrypt_C+1784>:	and	r3, r3, #255	; 0xff
0x00013584	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13584 <AesDecrypt_C+1788>:	ldr	r1, [pc, #2332]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013588	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13588 <AesDecrypt_C+1792>:	add	r3, r3, #768	; 0x300
0x0001358c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1358c <AesDecrypt_C+1796>:	ldr	r3, [r1, r3, lsl #2]
0x00013590	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13590 <AesDecrypt_C+1800>:	eor	r2, r2, r3
0x00013594	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13594 <AesDecrypt_C+1804>:	ldr	r3, [r11, #-12]
0x00013598	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x13598 <AesDecrypt_C+1808>:	add	r3, r3, #60	; 0x3c
0x0001359c	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x1359c <AesDecrypt_C+1812>:	ldr	r3, [r3]
0x000135a0	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x135a0 <AesDecrypt_C+1816>:	eor	r3, r3, r2
0x000135a4	3014	    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
=> 0x135a4 <AesDecrypt_C+1820>:	str	r3, [r11, #-16]
3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135a8 <AesDecrypt_C+1824>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000135ac	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135ac <AesDecrypt_C+1828>:	lsr	r3, r3, #24
0x000135b0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135b0 <AesDecrypt_C+1832>:	and	r3, r3, #255	; 0xff
0x000135b4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135b4 <AesDecrypt_C+1836>:	mov	r2, r3
0x000135b8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135b8 <AesDecrypt_C+1840>:	ldr	r3, [pc, #2280]	; 0x13ea8 <AesDecrypt_C+4128>
0x000135bc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135bc <AesDecrypt_C+1844>:	ldr	r2, [r3, r2, lsl #2]
0x000135c0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135c0 <AesDecrypt_C+1848>:	ldr	r3, [r11, #-16]
0x000135c4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135c4 <AesDecrypt_C+1852>:	lsr	r3, r3, #16
0x000135c8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135c8 <AesDecrypt_C+1856>:	and	r3, r3, #255	; 0xff
0x000135cc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135cc <AesDecrypt_C+1860>:	ldr	r1, [pc, #2260]	; 0x13ea8 <AesDecrypt_C+4128>
0x000135d0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135d0 <AesDecrypt_C+1864>:	add	r3, r3, #256	; 0x100
0x000135d4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135d4 <AesDecrypt_C+1868>:	ldr	r3, [r1, r3, lsl #2]
0x000135d8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135d8 <AesDecrypt_C+1872>:	eor	r2, r2, r3
0x000135dc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135dc <AesDecrypt_C+1876>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000135e0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135e0 <AesDecrypt_C+1880>:	lsr	r3, r3, #8
0x000135e4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135e4 <AesDecrypt_C+1884>:	and	r3, r3, #255	; 0xff
0x000135e8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135e8 <AesDecrypt_C+1888>:	ldr	r1, [pc, #2232]	; 0x13ea8 <AesDecrypt_C+4128>
0x000135ec	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135ec <AesDecrypt_C+1892>:	add	r3, r3, #512	; 0x200
0x000135f0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135f0 <AesDecrypt_C+1896>:	ldr	r3, [r1, r3, lsl #2]
0x000135f4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135f4 <AesDecrypt_C+1900>:	eor	r2, r2, r3
0x000135f8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135f8 <AesDecrypt_C+1904>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000135fc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x135fc <AesDecrypt_C+1908>:	and	r3, r3, #255	; 0xff
0x00013600	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13600 <AesDecrypt_C+1912>:	ldr	r1, [pc, #2208]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013604	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13604 <AesDecrypt_C+1916>:	add	r3, r3, #768	; 0x300
0x00013608	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13608 <AesDecrypt_C+1920>:	ldr	r3, [r1, r3, lsl #2]
0x0001360c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1360c <AesDecrypt_C+1924>:	eor	r2, r2, r3
0x00013610	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13610 <AesDecrypt_C+1928>:	ldr	r3, [r11, #-12]
0x00013614	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13614 <AesDecrypt_C+1932>:	add	r3, r3, #64	; 0x40
0x00013618	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13618 <AesDecrypt_C+1936>:	ldr	r3, [r3]
0x0001361c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1361c <AesDecrypt_C+1940>:	eor	r3, r3, r2
0x00013620	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13620 <AesDecrypt_C+1944>:	str	r3, [r11, #-44]	; 0xffffffd4
0x00013624	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13624 <AesDecrypt_C+1948>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013628	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13628 <AesDecrypt_C+1952>:	lsr	r3, r3, #24
0x0001362c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1362c <AesDecrypt_C+1956>:	and	r3, r3, #255	; 0xff
0x00013630	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13630 <AesDecrypt_C+1960>:	mov	r2, r3
0x00013634	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13634 <AesDecrypt_C+1964>:	ldr	r3, [pc, #2156]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013638	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13638 <AesDecrypt_C+1968>:	ldr	r2, [r3, r2, lsl #2]
0x0001363c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1363c <AesDecrypt_C+1972>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013640	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13640 <AesDecrypt_C+1976>:	lsr	r3, r3, #16
0x00013644	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13644 <AesDecrypt_C+1980>:	and	r3, r3, #255	; 0xff
0x00013648	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13648 <AesDecrypt_C+1984>:	ldr	r1, [pc, #2136]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001364c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1364c <AesDecrypt_C+1988>:	add	r3, r3, #256	; 0x100
0x00013650	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13650 <AesDecrypt_C+1992>:	ldr	r3, [r1, r3, lsl #2]
0x00013654	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13654 <AesDecrypt_C+1996>:	eor	r2, r2, r3
0x00013658	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13658 <AesDecrypt_C+2000>:	ldr	r3, [r11, #-16]
0x0001365c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1365c <AesDecrypt_C+2004>:	lsr	r3, r3, #8
0x00013660	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13660 <AesDecrypt_C+2008>:	and	r3, r3, #255	; 0xff
0x00013664	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13664 <AesDecrypt_C+2012>:	ldr	r1, [pc, #2108]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013668	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13668 <AesDecrypt_C+2016>:	add	r3, r3, #512	; 0x200
0x0001366c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1366c <AesDecrypt_C+2020>:	ldr	r3, [r1, r3, lsl #2]
0x00013670	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13670 <AesDecrypt_C+2024>:	eor	r2, r2, r3
0x00013674	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13674 <AesDecrypt_C+2028>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013678	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13678 <AesDecrypt_C+2032>:	and	r3, r3, #255	; 0xff
0x0001367c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1367c <AesDecrypt_C+2036>:	ldr	r1, [pc, #2084]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013680	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13680 <AesDecrypt_C+2040>:	add	r3, r3, #768	; 0x300
0x00013684	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13684 <AesDecrypt_C+2044>:	ldr	r3, [r1, r3, lsl #2]
0x00013688	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13688 <AesDecrypt_C+2048>:	eor	r2, r2, r3
0x0001368c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1368c <AesDecrypt_C+2052>:	ldr	r3, [r11, #-12]
0x00013690	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13690 <AesDecrypt_C+2056>:	add	r3, r3, #68	; 0x44
0x00013694	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13694 <AesDecrypt_C+2060>:	ldr	r3, [r3]
0x00013698	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13698 <AesDecrypt_C+2064>:	eor	r3, r3, r2
0x0001369c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1369c <AesDecrypt_C+2068>:	str	r3, [r11, #-40]	; 0xffffffd8
0x000136a0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136a0 <AesDecrypt_C+2072>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000136a4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136a4 <AesDecrypt_C+2076>:	lsr	r3, r3, #24
0x000136a8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136a8 <AesDecrypt_C+2080>:	and	r3, r3, #255	; 0xff
0x000136ac	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136ac <AesDecrypt_C+2084>:	mov	r2, r3
0x000136b0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136b0 <AesDecrypt_C+2088>:	ldr	r3, [pc, #2032]	; 0x13ea8 <AesDecrypt_C+4128>
0x000136b4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136b4 <AesDecrypt_C+2092>:	ldr	r2, [r3, r2, lsl #2]
0x000136b8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136b8 <AesDecrypt_C+2096>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000136bc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136bc <AesDecrypt_C+2100>:	lsr	r3, r3, #16
0x000136c0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136c0 <AesDecrypt_C+2104>:	and	r3, r3, #255	; 0xff
0x000136c4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136c4 <AesDecrypt_C+2108>:	ldr	r1, [pc, #2012]	; 0x13ea8 <AesDecrypt_C+4128>
0x000136c8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136c8 <AesDecrypt_C+2112>:	add	r3, r3, #256	; 0x100
0x000136cc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136cc <AesDecrypt_C+2116>:	ldr	r3, [r1, r3, lsl #2]
0x000136d0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136d0 <AesDecrypt_C+2120>:	eor	r2, r2, r3
0x000136d4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136d4 <AesDecrypt_C+2124>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000136d8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136d8 <AesDecrypt_C+2128>:	lsr	r3, r3, #8
0x000136dc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136dc <AesDecrypt_C+2132>:	and	r3, r3, #255	; 0xff
0x000136e0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136e0 <AesDecrypt_C+2136>:	ldr	r1, [pc, #1984]	; 0x13ea8 <AesDecrypt_C+4128>
0x000136e4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136e4 <AesDecrypt_C+2140>:	add	r3, r3, #512	; 0x200
0x000136e8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136e8 <AesDecrypt_C+2144>:	ldr	r3, [r1, r3, lsl #2]
0x000136ec	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136ec <AesDecrypt_C+2148>:	eor	r2, r2, r3
0x000136f0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136f0 <AesDecrypt_C+2152>:	ldr	r3, [r11, #-16]
0x000136f4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136f4 <AesDecrypt_C+2156>:	and	r3, r3, #255	; 0xff
0x000136f8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136f8 <AesDecrypt_C+2160>:	ldr	r1, [pc, #1960]	; 0x13ea8 <AesDecrypt_C+4128>
0x000136fc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x136fc <AesDecrypt_C+2164>:	add	r3, r3, #768	; 0x300
0x00013700	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13700 <AesDecrypt_C+2168>:	ldr	r3, [r1, r3, lsl #2]
0x00013704	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13704 <AesDecrypt_C+2172>:	eor	r2, r2, r3
0x00013708	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13708 <AesDecrypt_C+2176>:	ldr	r3, [r11, #-12]
0x0001370c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1370c <AesDecrypt_C+2180>:	add	r3, r3, #72	; 0x48
0x00013710	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13710 <AesDecrypt_C+2184>:	ldr	r3, [r3]
0x00013714	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13714 <AesDecrypt_C+2188>:	eor	r3, r3, r2
0x00013718	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13718 <AesDecrypt_C+2192>:	str	r3, [r11, #-36]	; 0xffffffdc
0x0001371c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1371c <AesDecrypt_C+2196>:	ldr	r3, [r11, #-16]
0x00013720	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13720 <AesDecrypt_C+2200>:	lsr	r3, r3, #24
0x00013724	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13724 <AesDecrypt_C+2204>:	and	r3, r3, #255	; 0xff
0x00013728	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13728 <AesDecrypt_C+2208>:	mov	r2, r3
0x0001372c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1372c <AesDecrypt_C+2212>:	ldr	r3, [pc, #1908]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013730	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13730 <AesDecrypt_C+2216>:	ldr	r2, [r3, r2, lsl #2]
0x00013734	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13734 <AesDecrypt_C+2220>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013738	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13738 <AesDecrypt_C+2224>:	lsr	r3, r3, #16
0x0001373c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1373c <AesDecrypt_C+2228>:	and	r3, r3, #255	; 0xff
0x00013740	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13740 <AesDecrypt_C+2232>:	ldr	r1, [pc, #1888]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013744	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13744 <AesDecrypt_C+2236>:	add	r3, r3, #256	; 0x100
0x00013748	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13748 <AesDecrypt_C+2240>:	ldr	r3, [r1, r3, lsl #2]
0x0001374c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1374c <AesDecrypt_C+2244>:	eor	r2, r2, r3
0x00013750	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13750 <AesDecrypt_C+2248>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013754	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13754 <AesDecrypt_C+2252>:	lsr	r3, r3, #8
0x00013758	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13758 <AesDecrypt_C+2256>:	and	r3, r3, #255	; 0xff
0x0001375c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1375c <AesDecrypt_C+2260>:	ldr	r1, [pc, #1860]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013760	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13760 <AesDecrypt_C+2264>:	add	r3, r3, #512	; 0x200
0x00013764	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13764 <AesDecrypt_C+2268>:	ldr	r3, [r1, r3, lsl #2]
0x00013768	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13768 <AesDecrypt_C+2272>:	eor	r2, r2, r3
0x0001376c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1376c <AesDecrypt_C+2276>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013770	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13770 <AesDecrypt_C+2280>:	and	r3, r3, #255	; 0xff
0x00013774	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13774 <AesDecrypt_C+2284>:	ldr	r1, [pc, #1836]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013778	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13778 <AesDecrypt_C+2288>:	add	r3, r3, #768	; 0x300
0x0001377c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1377c <AesDecrypt_C+2292>:	ldr	r3, [r1, r3, lsl #2]
0x00013780	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13780 <AesDecrypt_C+2296>:	eor	r2, r2, r3
0x00013784	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13784 <AesDecrypt_C+2300>:	ldr	r3, [r11, #-12]
0x00013788	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13788 <AesDecrypt_C+2304>:	add	r3, r3, #76	; 0x4c
0x0001378c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1378c <AesDecrypt_C+2308>:	ldr	r3, [r3]
0x00013790	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13790 <AesDecrypt_C+2312>:	eor	r3, r3, r2
0x00013794	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13794 <AesDecrypt_C+2316>:	str	r3, [r11, #-32]	; 0xffffffe0
3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13798 <AesDecrypt_C+2320>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x0001379c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1379c <AesDecrypt_C+2324>:	lsr	r3, r3, #24
0x000137a0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137a0 <AesDecrypt_C+2328>:	and	r3, r3, #255	; 0xff
0x000137a4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137a4 <AesDecrypt_C+2332>:	mov	r2, r3
0x000137a8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137a8 <AesDecrypt_C+2336>:	ldr	r3, [pc, #1784]	; 0x13ea8 <AesDecrypt_C+4128>
0x000137ac	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137ac <AesDecrypt_C+2340>:	ldr	r2, [r3, r2, lsl #2]
0x000137b0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137b0 <AesDecrypt_C+2344>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000137b4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137b4 <AesDecrypt_C+2348>:	lsr	r3, r3, #16
0x000137b8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137b8 <AesDecrypt_C+2352>:	and	r3, r3, #255	; 0xff
0x000137bc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137bc <AesDecrypt_C+2356>:	ldr	r1, [pc, #1764]	; 0x13ea8 <AesDecrypt_C+4128>
0x000137c0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137c0 <AesDecrypt_C+2360>:	add	r3, r3, #256	; 0x100
0x000137c4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137c4 <AesDecrypt_C+2364>:	ldr	r3, [r1, r3, lsl #2]
0x000137c8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137c8 <AesDecrypt_C+2368>:	eor	r2, r2, r3
0x000137cc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137cc <AesDecrypt_C+2372>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000137d0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137d0 <AesDecrypt_C+2376>:	lsr	r3, r3, #8
0x000137d4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137d4 <AesDecrypt_C+2380>:	and	r3, r3, #255	; 0xff
0x000137d8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137d8 <AesDecrypt_C+2384>:	ldr	r1, [pc, #1736]	; 0x13ea8 <AesDecrypt_C+4128>
0x000137dc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137dc <AesDecrypt_C+2388>:	add	r3, r3, #512	; 0x200
0x000137e0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137e0 <AesDecrypt_C+2392>:	ldr	r3, [r1, r3, lsl #2]
0x000137e4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137e4 <AesDecrypt_C+2396>:	eor	r2, r2, r3
0x000137e8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137e8 <AesDecrypt_C+2400>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000137ec	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137ec <AesDecrypt_C+2404>:	and	r3, r3, #255	; 0xff
0x000137f0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137f0 <AesDecrypt_C+2408>:	ldr	r1, [pc, #1712]	; 0x13ea8 <AesDecrypt_C+4128>
0x000137f4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137f4 <AesDecrypt_C+2412>:	add	r3, r3, #768	; 0x300
0x000137f8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137f8 <AesDecrypt_C+2416>:	ldr	r3, [r1, r3, lsl #2]
0x000137fc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x137fc <AesDecrypt_C+2420>:	eor	r2, r2, r3
0x00013800	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13800 <AesDecrypt_C+2424>:	ldr	r3, [r11, #-12]
0x00013804	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13804 <AesDecrypt_C+2428>:	add	r3, r3, #80	; 0x50
0x00013808	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13808 <AesDecrypt_C+2432>:	ldr	r3, [r3]
0x0001380c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1380c <AesDecrypt_C+2436>:	eor	r3, r3, r2
0x00013810	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13810 <AesDecrypt_C+2440>:	str	r3, [r11, #-28]	; 0xffffffe4
0x00013814	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13814 <AesDecrypt_C+2444>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013818	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13818 <AesDecrypt_C+2448>:	lsr	r3, r3, #24
0x0001381c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1381c <AesDecrypt_C+2452>:	and	r3, r3, #255	; 0xff
0x00013820	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13820 <AesDecrypt_C+2456>:	mov	r2, r3
0x00013824	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13824 <AesDecrypt_C+2460>:	ldr	r3, [pc, #1660]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013828	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13828 <AesDecrypt_C+2464>:	ldr	r2, [r3, r2, lsl #2]
0x0001382c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1382c <AesDecrypt_C+2468>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013830	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13830 <AesDecrypt_C+2472>:	lsr	r3, r3, #16
0x00013834	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13834 <AesDecrypt_C+2476>:	and	r3, r3, #255	; 0xff
0x00013838	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13838 <AesDecrypt_C+2480>:	ldr	r1, [pc, #1640]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001383c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1383c <AesDecrypt_C+2484>:	add	r3, r3, #256	; 0x100
0x00013840	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13840 <AesDecrypt_C+2488>:	ldr	r3, [r1, r3, lsl #2]
0x00013844	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13844 <AesDecrypt_C+2492>:	eor	r2, r2, r3
0x00013848	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13848 <AesDecrypt_C+2496>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001384c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1384c <AesDecrypt_C+2500>:	lsr	r3, r3, #8
0x00013850	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13850 <AesDecrypt_C+2504>:	and	r3, r3, #255	; 0xff
0x00013854	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13854 <AesDecrypt_C+2508>:	ldr	r1, [pc, #1612]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013858	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13858 <AesDecrypt_C+2512>:	add	r3, r3, #512	; 0x200
0x0001385c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1385c <AesDecrypt_C+2516>:	ldr	r3, [r1, r3, lsl #2]
0x00013860	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13860 <AesDecrypt_C+2520>:	eor	r2, r2, r3
0x00013864	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13864 <AesDecrypt_C+2524>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013868	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13868 <AesDecrypt_C+2528>:	and	r3, r3, #255	; 0xff
0x0001386c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1386c <AesDecrypt_C+2532>:	ldr	r1, [pc, #1588]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013870	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13870 <AesDecrypt_C+2536>:	add	r3, r3, #768	; 0x300
0x00013874	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13874 <AesDecrypt_C+2540>:	ldr	r3, [r1, r3, lsl #2]
0x00013878	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13878 <AesDecrypt_C+2544>:	eor	r2, r2, r3
0x0001387c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1387c <AesDecrypt_C+2548>:	ldr	r3, [r11, #-12]
0x00013880	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13880 <AesDecrypt_C+2552>:	add	r3, r3, #84	; 0x54
0x00013884	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13884 <AesDecrypt_C+2556>:	ldr	r3, [r3]
0x00013888	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13888 <AesDecrypt_C+2560>:	eor	r3, r3, r2
0x0001388c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1388c <AesDecrypt_C+2564>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00013890	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13890 <AesDecrypt_C+2568>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013894	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13894 <AesDecrypt_C+2572>:	lsr	r3, r3, #24
0x00013898	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13898 <AesDecrypt_C+2576>:	and	r3, r3, #255	; 0xff
0x0001389c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1389c <AesDecrypt_C+2580>:	mov	r2, r3
0x000138a0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138a0 <AesDecrypt_C+2584>:	ldr	r3, [pc, #1536]	; 0x13ea8 <AesDecrypt_C+4128>
0x000138a4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138a4 <AesDecrypt_C+2588>:	ldr	r2, [r3, r2, lsl #2]
0x000138a8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138a8 <AesDecrypt_C+2592>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000138ac	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138ac <AesDecrypt_C+2596>:	lsr	r3, r3, #16
0x000138b0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138b0 <AesDecrypt_C+2600>:	and	r3, r3, #255	; 0xff
0x000138b4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138b4 <AesDecrypt_C+2604>:	ldr	r1, [pc, #1516]	; 0x13ea8 <AesDecrypt_C+4128>
0x000138b8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138b8 <AesDecrypt_C+2608>:	add	r3, r3, #256	; 0x100
0x000138bc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138bc <AesDecrypt_C+2612>:	ldr	r3, [r1, r3, lsl #2]
0x000138c0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138c0 <AesDecrypt_C+2616>:	eor	r2, r2, r3
0x000138c4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138c4 <AesDecrypt_C+2620>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000138c8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138c8 <AesDecrypt_C+2624>:	lsr	r3, r3, #8
0x000138cc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138cc <AesDecrypt_C+2628>:	and	r3, r3, #255	; 0xff
0x000138d0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138d0 <AesDecrypt_C+2632>:	ldr	r1, [pc, #1488]	; 0x13ea8 <AesDecrypt_C+4128>
0x000138d4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138d4 <AesDecrypt_C+2636>:	add	r3, r3, #512	; 0x200
0x000138d8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138d8 <AesDecrypt_C+2640>:	ldr	r3, [r1, r3, lsl #2]
0x000138dc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138dc <AesDecrypt_C+2644>:	eor	r2, r2, r3
0x000138e0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138e0 <AesDecrypt_C+2648>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000138e4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138e4 <AesDecrypt_C+2652>:	and	r3, r3, #255	; 0xff
0x000138e8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138e8 <AesDecrypt_C+2656>:	ldr	r1, [pc, #1464]	; 0x13ea8 <AesDecrypt_C+4128>
0x000138ec	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138ec <AesDecrypt_C+2660>:	add	r3, r3, #768	; 0x300
0x000138f0	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138f0 <AesDecrypt_C+2664>:	ldr	r3, [r1, r3, lsl #2]
0x000138f4	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138f4 <AesDecrypt_C+2668>:	eor	r2, r2, r3
0x000138f8	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138f8 <AesDecrypt_C+2672>:	ldr	r3, [r11, #-12]
0x000138fc	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x138fc <AesDecrypt_C+2676>:	add	r3, r3, #88	; 0x58
0x00013900	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13900 <AesDecrypt_C+2680>:	ldr	r3, [r3]
0x00013904	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13904 <AesDecrypt_C+2684>:	eor	r3, r3, r2
0x00013908	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13908 <AesDecrypt_C+2688>:	str	r3, [r11, #-20]	; 0xffffffec
0x0001390c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1390c <AesDecrypt_C+2692>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013910	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13910 <AesDecrypt_C+2696>:	lsr	r3, r3, #24
0x00013914	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13914 <AesDecrypt_C+2700>:	and	r3, r3, #255	; 0xff
0x00013918	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13918 <AesDecrypt_C+2704>:	mov	r2, r3
0x0001391c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1391c <AesDecrypt_C+2708>:	ldr	r3, [pc, #1412]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013920	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13920 <AesDecrypt_C+2712>:	ldr	r2, [r3, r2, lsl #2]
0x00013924	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13924 <AesDecrypt_C+2716>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013928	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13928 <AesDecrypt_C+2720>:	lsr	r3, r3, #16
0x0001392c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1392c <AesDecrypt_C+2724>:	and	r3, r3, #255	; 0xff
0x00013930	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13930 <AesDecrypt_C+2728>:	ldr	r1, [pc, #1392]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013934	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13934 <AesDecrypt_C+2732>:	add	r3, r3, #256	; 0x100
0x00013938	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13938 <AesDecrypt_C+2736>:	ldr	r3, [r1, r3, lsl #2]
0x0001393c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1393c <AesDecrypt_C+2740>:	eor	r2, r2, r3
0x00013940	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13940 <AesDecrypt_C+2744>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013944	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13944 <AesDecrypt_C+2748>:	lsr	r3, r3, #8
0x00013948	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13948 <AesDecrypt_C+2752>:	and	r3, r3, #255	; 0xff
0x0001394c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1394c <AesDecrypt_C+2756>:	ldr	r1, [pc, #1364]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013950	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13950 <AesDecrypt_C+2760>:	add	r3, r3, #512	; 0x200
0x00013954	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13954 <AesDecrypt_C+2764>:	ldr	r3, [r1, r3, lsl #2]
0x00013958	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13958 <AesDecrypt_C+2768>:	eor	r2, r2, r3
0x0001395c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1395c <AesDecrypt_C+2772>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013960	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13960 <AesDecrypt_C+2776>:	and	r3, r3, #255	; 0xff
0x00013964	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13964 <AesDecrypt_C+2780>:	ldr	r1, [pc, #1340]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013968	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13968 <AesDecrypt_C+2784>:	add	r3, r3, #768	; 0x300
0x0001396c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1396c <AesDecrypt_C+2788>:	ldr	r3, [r1, r3, lsl #2]
0x00013970	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13970 <AesDecrypt_C+2792>:	eor	r2, r2, r3
0x00013974	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13974 <AesDecrypt_C+2796>:	ldr	r3, [r11, #-12]
0x00013978	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13978 <AesDecrypt_C+2800>:	add	r3, r3, #92	; 0x5c
0x0001397c	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x1397c <AesDecrypt_C+2804>:	ldr	r3, [r3]
0x00013980	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13980 <AesDecrypt_C+2808>:	eor	r3, r3, r2
0x00013984	3015	    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
=> 0x13984 <AesDecrypt_C+2812>:	str	r3, [r11, #-16]
3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13988 <AesDecrypt_C+2816>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001398c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x1398c <AesDecrypt_C+2820>:	lsr	r3, r3, #24
0x00013990	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13990 <AesDecrypt_C+2824>:	and	r3, r3, #255	; 0xff
0x00013994	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13994 <AesDecrypt_C+2828>:	mov	r2, r3
0x00013998	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13998 <AesDecrypt_C+2832>:	ldr	r3, [pc, #1288]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001399c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x1399c <AesDecrypt_C+2836>:	ldr	r2, [r3, r2, lsl #2]
0x000139a0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139a0 <AesDecrypt_C+2840>:	ldr	r3, [r11, #-16]
0x000139a4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139a4 <AesDecrypt_C+2844>:	lsr	r3, r3, #16
0x000139a8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139a8 <AesDecrypt_C+2848>:	and	r3, r3, #255	; 0xff
0x000139ac	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139ac <AesDecrypt_C+2852>:	ldr	r1, [pc, #1268]	; 0x13ea8 <AesDecrypt_C+4128>
0x000139b0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139b0 <AesDecrypt_C+2856>:	add	r3, r3, #256	; 0x100
0x000139b4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139b4 <AesDecrypt_C+2860>:	ldr	r3, [r1, r3, lsl #2]
0x000139b8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139b8 <AesDecrypt_C+2864>:	eor	r2, r2, r3
0x000139bc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139bc <AesDecrypt_C+2868>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000139c0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139c0 <AesDecrypt_C+2872>:	lsr	r3, r3, #8
0x000139c4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139c4 <AesDecrypt_C+2876>:	and	r3, r3, #255	; 0xff
0x000139c8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139c8 <AesDecrypt_C+2880>:	ldr	r1, [pc, #1240]	; 0x13ea8 <AesDecrypt_C+4128>
0x000139cc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139cc <AesDecrypt_C+2884>:	add	r3, r3, #512	; 0x200
0x000139d0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139d0 <AesDecrypt_C+2888>:	ldr	r3, [r1, r3, lsl #2]
0x000139d4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139d4 <AesDecrypt_C+2892>:	eor	r2, r2, r3
0x000139d8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139d8 <AesDecrypt_C+2896>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000139dc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139dc <AesDecrypt_C+2900>:	and	r3, r3, #255	; 0xff
0x000139e0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139e0 <AesDecrypt_C+2904>:	ldr	r1, [pc, #1216]	; 0x13ea8 <AesDecrypt_C+4128>
0x000139e4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139e4 <AesDecrypt_C+2908>:	add	r3, r3, #768	; 0x300
0x000139e8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139e8 <AesDecrypt_C+2912>:	ldr	r3, [r1, r3, lsl #2]
0x000139ec	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139ec <AesDecrypt_C+2916>:	eor	r2, r2, r3
0x000139f0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139f0 <AesDecrypt_C+2920>:	ldr	r3, [r11, #-12]
0x000139f4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139f4 <AesDecrypt_C+2924>:	add	r3, r3, #96	; 0x60
0x000139f8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139f8 <AesDecrypt_C+2928>:	ldr	r3, [r3]
0x000139fc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x139fc <AesDecrypt_C+2932>:	eor	r3, r3, r2
0x00013a00	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a00 <AesDecrypt_C+2936>:	str	r3, [r11, #-44]	; 0xffffffd4
0x00013a04	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a04 <AesDecrypt_C+2940>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013a08	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a08 <AesDecrypt_C+2944>:	lsr	r3, r3, #24
0x00013a0c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a0c <AesDecrypt_C+2948>:	and	r3, r3, #255	; 0xff
0x00013a10	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a10 <AesDecrypt_C+2952>:	mov	r2, r3
0x00013a14	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a14 <AesDecrypt_C+2956>:	ldr	r3, [pc, #1164]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013a18	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a18 <AesDecrypt_C+2960>:	ldr	r2, [r3, r2, lsl #2]
0x00013a1c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a1c <AesDecrypt_C+2964>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013a20	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a20 <AesDecrypt_C+2968>:	lsr	r3, r3, #16
0x00013a24	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a24 <AesDecrypt_C+2972>:	and	r3, r3, #255	; 0xff
0x00013a28	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a28 <AesDecrypt_C+2976>:	ldr	r1, [pc, #1144]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013a2c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a2c <AesDecrypt_C+2980>:	add	r3, r3, #256	; 0x100
0x00013a30	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a30 <AesDecrypt_C+2984>:	ldr	r3, [r1, r3, lsl #2]
0x00013a34	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a34 <AesDecrypt_C+2988>:	eor	r2, r2, r3
0x00013a38	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a38 <AesDecrypt_C+2992>:	ldr	r3, [r11, #-16]
0x00013a3c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a3c <AesDecrypt_C+2996>:	lsr	r3, r3, #8
0x00013a40	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a40 <AesDecrypt_C+3000>:	and	r3, r3, #255	; 0xff
0x00013a44	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a44 <AesDecrypt_C+3004>:	ldr	r1, [pc, #1116]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013a48	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a48 <AesDecrypt_C+3008>:	add	r3, r3, #512	; 0x200
0x00013a4c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a4c <AesDecrypt_C+3012>:	ldr	r3, [r1, r3, lsl #2]
0x00013a50	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a50 <AesDecrypt_C+3016>:	eor	r2, r2, r3
0x00013a54	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a54 <AesDecrypt_C+3020>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013a58	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a58 <AesDecrypt_C+3024>:	and	r3, r3, #255	; 0xff
0x00013a5c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a5c <AesDecrypt_C+3028>:	ldr	r1, [pc, #1092]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013a60	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a60 <AesDecrypt_C+3032>:	add	r3, r3, #768	; 0x300
0x00013a64	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a64 <AesDecrypt_C+3036>:	ldr	r3, [r1, r3, lsl #2]
0x00013a68	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a68 <AesDecrypt_C+3040>:	eor	r2, r2, r3
0x00013a6c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a6c <AesDecrypt_C+3044>:	ldr	r3, [r11, #-12]
0x00013a70	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a70 <AesDecrypt_C+3048>:	add	r3, r3, #100	; 0x64
0x00013a74	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a74 <AesDecrypt_C+3052>:	ldr	r3, [r3]
0x00013a78	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a78 <AesDecrypt_C+3056>:	eor	r3, r3, r2
0x00013a7c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a7c <AesDecrypt_C+3060>:	str	r3, [r11, #-40]	; 0xffffffd8
0x00013a80	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a80 <AesDecrypt_C+3064>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013a84	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a84 <AesDecrypt_C+3068>:	lsr	r3, r3, #24
0x00013a88	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a88 <AesDecrypt_C+3072>:	and	r3, r3, #255	; 0xff
0x00013a8c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a8c <AesDecrypt_C+3076>:	mov	r2, r3
0x00013a90	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a90 <AesDecrypt_C+3080>:	ldr	r3, [pc, #1040]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013a94	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a94 <AesDecrypt_C+3084>:	ldr	r2, [r3, r2, lsl #2]
0x00013a98	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a98 <AesDecrypt_C+3088>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013a9c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13a9c <AesDecrypt_C+3092>:	lsr	r3, r3, #16
0x00013aa0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13aa0 <AesDecrypt_C+3096>:	and	r3, r3, #255	; 0xff
0x00013aa4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13aa4 <AesDecrypt_C+3100>:	ldr	r1, [pc, #1020]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013aa8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13aa8 <AesDecrypt_C+3104>:	add	r3, r3, #256	; 0x100
0x00013aac	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13aac <AesDecrypt_C+3108>:	ldr	r3, [r1, r3, lsl #2]
0x00013ab0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ab0 <AesDecrypt_C+3112>:	eor	r2, r2, r3
0x00013ab4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ab4 <AesDecrypt_C+3116>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013ab8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ab8 <AesDecrypt_C+3120>:	lsr	r3, r3, #8
0x00013abc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13abc <AesDecrypt_C+3124>:	and	r3, r3, #255	; 0xff
0x00013ac0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ac0 <AesDecrypt_C+3128>:	ldr	r1, [pc, #992]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013ac4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ac4 <AesDecrypt_C+3132>:	add	r3, r3, #512	; 0x200
0x00013ac8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ac8 <AesDecrypt_C+3136>:	ldr	r3, [r1, r3, lsl #2]
0x00013acc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13acc <AesDecrypt_C+3140>:	eor	r2, r2, r3
0x00013ad0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ad0 <AesDecrypt_C+3144>:	ldr	r3, [r11, #-16]
0x00013ad4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ad4 <AesDecrypt_C+3148>:	and	r3, r3, #255	; 0xff
0x00013ad8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ad8 <AesDecrypt_C+3152>:	ldr	r1, [pc, #968]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013adc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13adc <AesDecrypt_C+3156>:	add	r3, r3, #768	; 0x300
0x00013ae0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ae0 <AesDecrypt_C+3160>:	ldr	r3, [r1, r3, lsl #2]
0x00013ae4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ae4 <AesDecrypt_C+3164>:	eor	r2, r2, r3
0x00013ae8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ae8 <AesDecrypt_C+3168>:	ldr	r3, [r11, #-12]
0x00013aec	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13aec <AesDecrypt_C+3172>:	add	r3, r3, #104	; 0x68
0x00013af0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13af0 <AesDecrypt_C+3176>:	ldr	r3, [r3]
0x00013af4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13af4 <AesDecrypt_C+3180>:	eor	r3, r3, r2
0x00013af8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13af8 <AesDecrypt_C+3184>:	str	r3, [r11, #-36]	; 0xffffffdc
0x00013afc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13afc <AesDecrypt_C+3188>:	ldr	r3, [r11, #-16]
0x00013b00	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b00 <AesDecrypt_C+3192>:	lsr	r3, r3, #24
0x00013b04	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b04 <AesDecrypt_C+3196>:	and	r3, r3, #255	; 0xff
0x00013b08	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b08 <AesDecrypt_C+3200>:	mov	r2, r3
0x00013b0c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b0c <AesDecrypt_C+3204>:	ldr	r3, [pc, #916]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013b10	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b10 <AesDecrypt_C+3208>:	ldr	r2, [r3, r2, lsl #2]
0x00013b14	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b14 <AesDecrypt_C+3212>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013b18	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b18 <AesDecrypt_C+3216>:	lsr	r3, r3, #16
0x00013b1c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b1c <AesDecrypt_C+3220>:	and	r3, r3, #255	; 0xff
0x00013b20	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b20 <AesDecrypt_C+3224>:	ldr	r1, [pc, #896]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013b24	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b24 <AesDecrypt_C+3228>:	add	r3, r3, #256	; 0x100
0x00013b28	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b28 <AesDecrypt_C+3232>:	ldr	r3, [r1, r3, lsl #2]
0x00013b2c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b2c <AesDecrypt_C+3236>:	eor	r2, r2, r3
0x00013b30	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b30 <AesDecrypt_C+3240>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013b34	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b34 <AesDecrypt_C+3244>:	lsr	r3, r3, #8
0x00013b38	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b38 <AesDecrypt_C+3248>:	and	r3, r3, #255	; 0xff
0x00013b3c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b3c <AesDecrypt_C+3252>:	ldr	r1, [pc, #868]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013b40	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b40 <AesDecrypt_C+3256>:	add	r3, r3, #512	; 0x200
0x00013b44	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b44 <AesDecrypt_C+3260>:	ldr	r3, [r1, r3, lsl #2]
0x00013b48	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b48 <AesDecrypt_C+3264>:	eor	r2, r2, r3
0x00013b4c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b4c <AesDecrypt_C+3268>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013b50	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b50 <AesDecrypt_C+3272>:	and	r3, r3, #255	; 0xff
0x00013b54	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b54 <AesDecrypt_C+3276>:	ldr	r1, [pc, #844]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013b58	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b58 <AesDecrypt_C+3280>:	add	r3, r3, #768	; 0x300
0x00013b5c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b5c <AesDecrypt_C+3284>:	ldr	r3, [r1, r3, lsl #2]
0x00013b60	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b60 <AesDecrypt_C+3288>:	eor	r2, r2, r3
0x00013b64	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b64 <AesDecrypt_C+3292>:	ldr	r3, [r11, #-12]
0x00013b68	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b68 <AesDecrypt_C+3296>:	add	r3, r3, #108	; 0x6c
0x00013b6c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b6c <AesDecrypt_C+3300>:	ldr	r3, [r3]
0x00013b70	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b70 <AesDecrypt_C+3304>:	eor	r3, r3, r2
0x00013b74	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b74 <AesDecrypt_C+3308>:	str	r3, [r11, #-32]	; 0xffffffe0
3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b78 <AesDecrypt_C+3312>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013b7c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b7c <AesDecrypt_C+3316>:	lsr	r3, r3, #24
0x00013b80	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b80 <AesDecrypt_C+3320>:	and	r3, r3, #255	; 0xff
0x00013b84	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b84 <AesDecrypt_C+3324>:	mov	r2, r3
0x00013b88	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b88 <AesDecrypt_C+3328>:	ldr	r3, [pc, #792]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013b8c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b8c <AesDecrypt_C+3332>:	ldr	r2, [r3, r2, lsl #2]
0x00013b90	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b90 <AesDecrypt_C+3336>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013b94	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b94 <AesDecrypt_C+3340>:	lsr	r3, r3, #16
0x00013b98	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b98 <AesDecrypt_C+3344>:	and	r3, r3, #255	; 0xff
0x00013b9c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13b9c <AesDecrypt_C+3348>:	ldr	r1, [pc, #772]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013ba0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ba0 <AesDecrypt_C+3352>:	add	r3, r3, #256	; 0x100
0x00013ba4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ba4 <AesDecrypt_C+3356>:	ldr	r3, [r1, r3, lsl #2]
0x00013ba8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ba8 <AesDecrypt_C+3360>:	eor	r2, r2, r3
0x00013bac	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bac <AesDecrypt_C+3364>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013bb0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bb0 <AesDecrypt_C+3368>:	lsr	r3, r3, #8
0x00013bb4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bb4 <AesDecrypt_C+3372>:	and	r3, r3, #255	; 0xff
0x00013bb8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bb8 <AesDecrypt_C+3376>:	ldr	r1, [pc, #744]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013bbc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bbc <AesDecrypt_C+3380>:	add	r3, r3, #512	; 0x200
0x00013bc0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bc0 <AesDecrypt_C+3384>:	ldr	r3, [r1, r3, lsl #2]
0x00013bc4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bc4 <AesDecrypt_C+3388>:	eor	r2, r2, r3
0x00013bc8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bc8 <AesDecrypt_C+3392>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013bcc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bcc <AesDecrypt_C+3396>:	and	r3, r3, #255	; 0xff
0x00013bd0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bd0 <AesDecrypt_C+3400>:	ldr	r1, [pc, #720]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013bd4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bd4 <AesDecrypt_C+3404>:	add	r3, r3, #768	; 0x300
0x00013bd8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bd8 <AesDecrypt_C+3408>:	ldr	r3, [r1, r3, lsl #2]
0x00013bdc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bdc <AesDecrypt_C+3412>:	eor	r2, r2, r3
0x00013be0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13be0 <AesDecrypt_C+3416>:	ldr	r3, [r11, #-12]
0x00013be4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13be4 <AesDecrypt_C+3420>:	add	r3, r3, #112	; 0x70
0x00013be8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13be8 <AesDecrypt_C+3424>:	ldr	r3, [r3]
0x00013bec	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bec <AesDecrypt_C+3428>:	eor	r3, r3, r2
0x00013bf0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bf0 <AesDecrypt_C+3432>:	str	r3, [r11, #-28]	; 0xffffffe4
0x00013bf4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bf4 <AesDecrypt_C+3436>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013bf8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bf8 <AesDecrypt_C+3440>:	lsr	r3, r3, #24
0x00013bfc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13bfc <AesDecrypt_C+3444>:	and	r3, r3, #255	; 0xff
0x00013c00	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c00 <AesDecrypt_C+3448>:	mov	r2, r3
0x00013c04	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c04 <AesDecrypt_C+3452>:	ldr	r3, [pc, #668]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013c08	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c08 <AesDecrypt_C+3456>:	ldr	r2, [r3, r2, lsl #2]
0x00013c0c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c0c <AesDecrypt_C+3460>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013c10	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c10 <AesDecrypt_C+3464>:	lsr	r3, r3, #16
0x00013c14	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c14 <AesDecrypt_C+3468>:	and	r3, r3, #255	; 0xff
0x00013c18	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c18 <AesDecrypt_C+3472>:	ldr	r1, [pc, #648]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013c1c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c1c <AesDecrypt_C+3476>:	add	r3, r3, #256	; 0x100
0x00013c20	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c20 <AesDecrypt_C+3480>:	ldr	r3, [r1, r3, lsl #2]
0x00013c24	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c24 <AesDecrypt_C+3484>:	eor	r2, r2, r3
0x00013c28	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c28 <AesDecrypt_C+3488>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013c2c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c2c <AesDecrypt_C+3492>:	lsr	r3, r3, #8
0x00013c30	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c30 <AesDecrypt_C+3496>:	and	r3, r3, #255	; 0xff
0x00013c34	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c34 <AesDecrypt_C+3500>:	ldr	r1, [pc, #620]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013c38	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c38 <AesDecrypt_C+3504>:	add	r3, r3, #512	; 0x200
0x00013c3c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c3c <AesDecrypt_C+3508>:	ldr	r3, [r1, r3, lsl #2]
0x00013c40	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c40 <AesDecrypt_C+3512>:	eor	r2, r2, r3
0x00013c44	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c44 <AesDecrypt_C+3516>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013c48	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c48 <AesDecrypt_C+3520>:	and	r3, r3, #255	; 0xff
0x00013c4c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c4c <AesDecrypt_C+3524>:	ldr	r1, [pc, #596]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013c50	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c50 <AesDecrypt_C+3528>:	add	r3, r3, #768	; 0x300
0x00013c54	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c54 <AesDecrypt_C+3532>:	ldr	r3, [r1, r3, lsl #2]
0x00013c58	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c58 <AesDecrypt_C+3536>:	eor	r2, r2, r3
0x00013c5c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c5c <AesDecrypt_C+3540>:	ldr	r3, [r11, #-12]
0x00013c60	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c60 <AesDecrypt_C+3544>:	add	r3, r3, #116	; 0x74
0x00013c64	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c64 <AesDecrypt_C+3548>:	ldr	r3, [r3]
0x00013c68	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c68 <AesDecrypt_C+3552>:	eor	r3, r3, r2
0x00013c6c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c6c <AesDecrypt_C+3556>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00013c70	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c70 <AesDecrypt_C+3560>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013c74	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c74 <AesDecrypt_C+3564>:	lsr	r3, r3, #24
0x00013c78	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c78 <AesDecrypt_C+3568>:	and	r3, r3, #255	; 0xff
0x00013c7c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c7c <AesDecrypt_C+3572>:	mov	r2, r3
0x00013c80	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c80 <AesDecrypt_C+3576>:	ldr	r3, [pc, #544]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013c84	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c84 <AesDecrypt_C+3580>:	ldr	r2, [r3, r2, lsl #2]
0x00013c88	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c88 <AesDecrypt_C+3584>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013c8c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c8c <AesDecrypt_C+3588>:	lsr	r3, r3, #16
0x00013c90	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c90 <AesDecrypt_C+3592>:	and	r3, r3, #255	; 0xff
0x00013c94	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c94 <AesDecrypt_C+3596>:	ldr	r1, [pc, #524]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013c98	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c98 <AesDecrypt_C+3600>:	add	r3, r3, #256	; 0x100
0x00013c9c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13c9c <AesDecrypt_C+3604>:	ldr	r3, [r1, r3, lsl #2]
0x00013ca0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ca0 <AesDecrypt_C+3608>:	eor	r2, r2, r3
0x00013ca4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ca4 <AesDecrypt_C+3612>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013ca8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ca8 <AesDecrypt_C+3616>:	lsr	r3, r3, #8
0x00013cac	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cac <AesDecrypt_C+3620>:	and	r3, r3, #255	; 0xff
0x00013cb0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cb0 <AesDecrypt_C+3624>:	ldr	r1, [pc, #496]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013cb4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cb4 <AesDecrypt_C+3628>:	add	r3, r3, #512	; 0x200
0x00013cb8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cb8 <AesDecrypt_C+3632>:	ldr	r3, [r1, r3, lsl #2]
0x00013cbc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cbc <AesDecrypt_C+3636>:	eor	r2, r2, r3
0x00013cc0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cc0 <AesDecrypt_C+3640>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013cc4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cc4 <AesDecrypt_C+3644>:	and	r3, r3, #255	; 0xff
0x00013cc8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cc8 <AesDecrypt_C+3648>:	ldr	r1, [pc, #472]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013ccc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ccc <AesDecrypt_C+3652>:	add	r3, r3, #768	; 0x300
0x00013cd0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cd0 <AesDecrypt_C+3656>:	ldr	r3, [r1, r3, lsl #2]
0x00013cd4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cd4 <AesDecrypt_C+3660>:	eor	r2, r2, r3
0x00013cd8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cd8 <AesDecrypt_C+3664>:	ldr	r3, [r11, #-12]
0x00013cdc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cdc <AesDecrypt_C+3668>:	add	r3, r3, #120	; 0x78
0x00013ce0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ce0 <AesDecrypt_C+3672>:	ldr	r3, [r3]
0x00013ce4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ce4 <AesDecrypt_C+3676>:	eor	r3, r3, r2
0x00013ce8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13ce8 <AesDecrypt_C+3680>:	str	r3, [r11, #-20]	; 0xffffffec
0x00013cec	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cec <AesDecrypt_C+3684>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013cf0	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cf0 <AesDecrypt_C+3688>:	lsr	r3, r3, #24
0x00013cf4	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cf4 <AesDecrypt_C+3692>:	and	r3, r3, #255	; 0xff
0x00013cf8	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cf8 <AesDecrypt_C+3696>:	mov	r2, r3
0x00013cfc	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13cfc <AesDecrypt_C+3700>:	ldr	r3, [pc, #420]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013d00	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d00 <AesDecrypt_C+3704>:	ldr	r2, [r3, r2, lsl #2]
0x00013d04	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d04 <AesDecrypt_C+3708>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013d08	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d08 <AesDecrypt_C+3712>:	lsr	r3, r3, #16
0x00013d0c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d0c <AesDecrypt_C+3716>:	and	r3, r3, #255	; 0xff
0x00013d10	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d10 <AesDecrypt_C+3720>:	ldr	r1, [pc, #400]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013d14	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d14 <AesDecrypt_C+3724>:	add	r3, r3, #256	; 0x100
0x00013d18	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d18 <AesDecrypt_C+3728>:	ldr	r3, [r1, r3, lsl #2]
0x00013d1c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d1c <AesDecrypt_C+3732>:	eor	r2, r2, r3
0x00013d20	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d20 <AesDecrypt_C+3736>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013d24	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d24 <AesDecrypt_C+3740>:	lsr	r3, r3, #8
0x00013d28	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d28 <AesDecrypt_C+3744>:	and	r3, r3, #255	; 0xff
0x00013d2c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d2c <AesDecrypt_C+3748>:	ldr	r1, [pc, #372]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013d30	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d30 <AesDecrypt_C+3752>:	add	r3, r3, #512	; 0x200
0x00013d34	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d34 <AesDecrypt_C+3756>:	ldr	r3, [r1, r3, lsl #2]
0x00013d38	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d38 <AesDecrypt_C+3760>:	eor	r2, r2, r3
0x00013d3c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d3c <AesDecrypt_C+3764>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013d40	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d40 <AesDecrypt_C+3768>:	and	r3, r3, #255	; 0xff
0x00013d44	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d44 <AesDecrypt_C+3772>:	ldr	r1, [pc, #348]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013d48	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d48 <AesDecrypt_C+3776>:	add	r3, r3, #768	; 0x300
0x00013d4c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d4c <AesDecrypt_C+3780>:	ldr	r3, [r1, r3, lsl #2]
0x00013d50	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d50 <AesDecrypt_C+3784>:	eor	r2, r2, r3
0x00013d54	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d54 <AesDecrypt_C+3788>:	ldr	r3, [r11, #-12]
0x00013d58	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d58 <AesDecrypt_C+3792>:	add	r3, r3, #124	; 0x7c
0x00013d5c	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d5c <AesDecrypt_C+3796>:	ldr	r3, [r3]
0x00013d60	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d60 <AesDecrypt_C+3800>:	eor	r3, r3, r2
0x00013d64	3016	    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
=> 0x13d64 <AesDecrypt_C+3804>:	str	r3, [r11, #-16]
3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d68 <AesDecrypt_C+3808>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013d6c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d6c <AesDecrypt_C+3812>:	lsr	r3, r3, #24
0x00013d70	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d70 <AesDecrypt_C+3816>:	and	r3, r3, #255	; 0xff
0x00013d74	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d74 <AesDecrypt_C+3820>:	mov	r2, r3
0x00013d78	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d78 <AesDecrypt_C+3824>:	ldr	r3, [pc, #296]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013d7c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d7c <AesDecrypt_C+3828>:	ldr	r2, [r3, r2, lsl #2]
0x00013d80	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d80 <AesDecrypt_C+3832>:	ldr	r3, [r11, #-16]
0x00013d84	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d84 <AesDecrypt_C+3836>:	lsr	r3, r3, #16
0x00013d88	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d88 <AesDecrypt_C+3840>:	and	r3, r3, #255	; 0xff
0x00013d8c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d8c <AesDecrypt_C+3844>:	ldr	r1, [pc, #276]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013d90	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d90 <AesDecrypt_C+3848>:	add	r3, r3, #256	; 0x100
0x00013d94	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d94 <AesDecrypt_C+3852>:	ldr	r3, [r1, r3, lsl #2]
0x00013d98	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d98 <AesDecrypt_C+3856>:	eor	r2, r2, r3
0x00013d9c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13d9c <AesDecrypt_C+3860>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013da0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13da0 <AesDecrypt_C+3864>:	lsr	r3, r3, #8
0x00013da4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13da4 <AesDecrypt_C+3868>:	and	r3, r3, #255	; 0xff
0x00013da8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13da8 <AesDecrypt_C+3872>:	ldr	r1, [pc, #248]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013dac	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dac <AesDecrypt_C+3876>:	add	r3, r3, #512	; 0x200
0x00013db0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13db0 <AesDecrypt_C+3880>:	ldr	r3, [r1, r3, lsl #2]
0x00013db4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13db4 <AesDecrypt_C+3884>:	eor	r2, r2, r3
0x00013db8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13db8 <AesDecrypt_C+3888>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013dbc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dbc <AesDecrypt_C+3892>:	and	r3, r3, #255	; 0xff
0x00013dc0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dc0 <AesDecrypt_C+3896>:	ldr	r1, [pc, #224]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013dc4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dc4 <AesDecrypt_C+3900>:	add	r3, r3, #768	; 0x300
0x00013dc8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dc8 <AesDecrypt_C+3904>:	ldr	r3, [r1, r3, lsl #2]
0x00013dcc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dcc <AesDecrypt_C+3908>:	eor	r2, r2, r3
0x00013dd0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dd0 <AesDecrypt_C+3912>:	ldr	r3, [r11, #-12]
0x00013dd4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dd4 <AesDecrypt_C+3916>:	add	r3, r3, #128	; 0x80
0x00013dd8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dd8 <AesDecrypt_C+3920>:	ldr	r3, [r3]
0x00013ddc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ddc <AesDecrypt_C+3924>:	eor	r3, r3, r2
0x00013de0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13de0 <AesDecrypt_C+3928>:	str	r3, [r11, #-44]	; 0xffffffd4
0x00013de4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13de4 <AesDecrypt_C+3932>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013de8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13de8 <AesDecrypt_C+3936>:	lsr	r3, r3, #24
0x00013dec	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dec <AesDecrypt_C+3940>:	and	r3, r3, #255	; 0xff
0x00013df0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13df0 <AesDecrypt_C+3944>:	mov	r2, r3
0x00013df4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13df4 <AesDecrypt_C+3948>:	ldr	r3, [pc, #172]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013df8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13df8 <AesDecrypt_C+3952>:	ldr	r2, [r3, r2, lsl #2]
0x00013dfc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13dfc <AesDecrypt_C+3956>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013e00	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e00 <AesDecrypt_C+3960>:	lsr	r3, r3, #16
0x00013e04	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e04 <AesDecrypt_C+3964>:	and	r3, r3, #255	; 0xff
0x00013e08	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e08 <AesDecrypt_C+3968>:	ldr	r1, [pc, #152]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013e0c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e0c <AesDecrypt_C+3972>:	add	r3, r3, #256	; 0x100
0x00013e10	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e10 <AesDecrypt_C+3976>:	ldr	r3, [r1, r3, lsl #2]
0x00013e14	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e14 <AesDecrypt_C+3980>:	eor	r2, r2, r3
0x00013e18	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e18 <AesDecrypt_C+3984>:	ldr	r3, [r11, #-16]
0x00013e1c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e1c <AesDecrypt_C+3988>:	lsr	r3, r3, #8
0x00013e20	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e20 <AesDecrypt_C+3992>:	and	r3, r3, #255	; 0xff
0x00013e24	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e24 <AesDecrypt_C+3996>:	ldr	r1, [pc, #124]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013e28	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e28 <AesDecrypt_C+4000>:	add	r3, r3, #512	; 0x200
0x00013e2c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e2c <AesDecrypt_C+4004>:	ldr	r3, [r1, r3, lsl #2]
0x00013e30	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e30 <AesDecrypt_C+4008>:	eor	r2, r2, r3
0x00013e34	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e34 <AesDecrypt_C+4012>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013e38	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e38 <AesDecrypt_C+4016>:	and	r3, r3, #255	; 0xff
0x00013e3c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e3c <AesDecrypt_C+4020>:	ldr	r1, [pc, #100]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013e40	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e40 <AesDecrypt_C+4024>:	add	r3, r3, #768	; 0x300
0x00013e44	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e44 <AesDecrypt_C+4028>:	ldr	r3, [r1, r3, lsl #2]
0x00013e48	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e48 <AesDecrypt_C+4032>:	eor	r2, r2, r3
0x00013e4c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e4c <AesDecrypt_C+4036>:	ldr	r3, [r11, #-12]
0x00013e50	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e50 <AesDecrypt_C+4040>:	add	r3, r3, #132	; 0x84
0x00013e54	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e54 <AesDecrypt_C+4044>:	ldr	r3, [r3]
0x00013e58	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e58 <AesDecrypt_C+4048>:	eor	r3, r3, r2
0x00013e5c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e5c <AesDecrypt_C+4052>:	str	r3, [r11, #-40]	; 0xffffffd8
0x00013e60	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e60 <AesDecrypt_C+4056>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013e64	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e64 <AesDecrypt_C+4060>:	lsr	r3, r3, #24
0x00013e68	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e68 <AesDecrypt_C+4064>:	and	r3, r3, #255	; 0xff
0x00013e6c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e6c <AesDecrypt_C+4068>:	mov	r2, r3
0x00013e70	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e70 <AesDecrypt_C+4072>:	ldr	r3, [pc, #48]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013e74	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e74 <AesDecrypt_C+4076>:	ldr	r2, [r3, r2, lsl #2]
0x00013e78	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e78 <AesDecrypt_C+4080>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013e7c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e7c <AesDecrypt_C+4084>:	lsr	r3, r3, #16
0x00013e80	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e80 <AesDecrypt_C+4088>:	and	r3, r3, #255	; 0xff
0x00013e84	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e84 <AesDecrypt_C+4092>:	ldr	r1, [pc, #28]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013e88	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e88 <AesDecrypt_C+4096>:	add	r3, r3, #256	; 0x100
0x00013e8c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e8c <AesDecrypt_C+4100>:	ldr	r3, [r1, r3, lsl #2]
0x00013e90	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e90 <AesDecrypt_C+4104>:	eor	r2, r2, r3
0x00013e94	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e94 <AesDecrypt_C+4108>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013e98	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e98 <AesDecrypt_C+4112>:	lsr	r3, r3, #8
0x00013e9c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13e9c <AesDecrypt_C+4116>:	and	r3, r3, #255	; 0xff
0x00013ea0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ea0 <AesDecrypt_C+4120>:	b	0x13eb4 <AesDecrypt_C+4140>
0x00013eb4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13eb4 <AesDecrypt_C+4140>:	ldr	r1, [pc, #-20]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013eb8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13eb8 <AesDecrypt_C+4144>:	add	r3, r3, #512	; 0x200
0x00013ebc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ebc <AesDecrypt_C+4148>:	ldr	r3, [r1, r3, lsl #2]
0x00013ec0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ec0 <AesDecrypt_C+4152>:	eor	r2, r2, r3
0x00013ec4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ec4 <AesDecrypt_C+4156>:	ldr	r3, [r11, #-16]
0x00013ec8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ec8 <AesDecrypt_C+4160>:	and	r3, r3, #255	; 0xff
0x00013ecc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ecc <AesDecrypt_C+4164>:	ldr	r1, [pc, #-44]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013ed0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ed0 <AesDecrypt_C+4168>:	add	r3, r3, #768	; 0x300
0x00013ed4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ed4 <AesDecrypt_C+4172>:	ldr	r3, [r1, r3, lsl #2]
0x00013ed8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ed8 <AesDecrypt_C+4176>:	eor	r2, r2, r3
0x00013edc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13edc <AesDecrypt_C+4180>:	ldr	r3, [r11, #-12]
0x00013ee0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ee0 <AesDecrypt_C+4184>:	add	r3, r3, #136	; 0x88
0x00013ee4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ee4 <AesDecrypt_C+4188>:	ldr	r3, [r3]
0x00013ee8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ee8 <AesDecrypt_C+4192>:	eor	r3, r3, r2
0x00013eec	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13eec <AesDecrypt_C+4196>:	str	r3, [r11, #-36]	; 0xffffffdc
0x00013ef0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ef0 <AesDecrypt_C+4200>:	ldr	r3, [r11, #-16]
0x00013ef4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ef4 <AesDecrypt_C+4204>:	lsr	r3, r3, #24
0x00013ef8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ef8 <AesDecrypt_C+4208>:	and	r3, r3, #255	; 0xff
0x00013efc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13efc <AesDecrypt_C+4212>:	mov	r2, r3
0x00013f00	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f00 <AesDecrypt_C+4216>:	ldr	r3, [pc, #-96]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013f04	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f04 <AesDecrypt_C+4220>:	ldr	r2, [r3, r2, lsl #2]
0x00013f08	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f08 <AesDecrypt_C+4224>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00013f0c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f0c <AesDecrypt_C+4228>:	lsr	r3, r3, #16
0x00013f10	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f10 <AesDecrypt_C+4232>:	and	r3, r3, #255	; 0xff
0x00013f14	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f14 <AesDecrypt_C+4236>:	ldr	r1, [pc, #-116]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013f18	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f18 <AesDecrypt_C+4240>:	add	r3, r3, #256	; 0x100
0x00013f1c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f1c <AesDecrypt_C+4244>:	ldr	r3, [r1, r3, lsl #2]
0x00013f20	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f20 <AesDecrypt_C+4248>:	eor	r2, r2, r3
0x00013f24	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f24 <AesDecrypt_C+4252>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00013f28	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f28 <AesDecrypt_C+4256>:	lsr	r3, r3, #8
0x00013f2c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f2c <AesDecrypt_C+4260>:	and	r3, r3, #255	; 0xff
0x00013f30	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f30 <AesDecrypt_C+4264>:	ldr	r1, [pc, #-144]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013f34	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f34 <AesDecrypt_C+4268>:	add	r3, r3, #512	; 0x200
0x00013f38	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f38 <AesDecrypt_C+4272>:	ldr	r3, [r1, r3, lsl #2]
0x00013f3c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f3c <AesDecrypt_C+4276>:	eor	r2, r2, r3
0x00013f40	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f40 <AesDecrypt_C+4280>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00013f44	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f44 <AesDecrypt_C+4284>:	and	r3, r3, #255	; 0xff
0x00013f48	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f48 <AesDecrypt_C+4288>:	ldr	r1, [pc, #-168]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013f4c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f4c <AesDecrypt_C+4292>:	add	r3, r3, #768	; 0x300
0x00013f50	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f50 <AesDecrypt_C+4296>:	ldr	r3, [r1, r3, lsl #2]
0x00013f54	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f54 <AesDecrypt_C+4300>:	eor	r2, r2, r3
0x00013f58	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f58 <AesDecrypt_C+4304>:	ldr	r3, [r11, #-12]
0x00013f5c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f5c <AesDecrypt_C+4308>:	add	r3, r3, #140	; 0x8c
0x00013f60	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f60 <AesDecrypt_C+4312>:	ldr	r3, [r3]
0x00013f64	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f64 <AesDecrypt_C+4316>:	eor	r3, r3, r2
0x00013f68	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f68 <AesDecrypt_C+4320>:	str	r3, [r11, #-32]	; 0xffffffe0
3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f6c <AesDecrypt_C+4324>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00013f70	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f70 <AesDecrypt_C+4328>:	lsr	r3, r3, #24
0x00013f74	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f74 <AesDecrypt_C+4332>:	and	r3, r3, #255	; 0xff
0x00013f78	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f78 <AesDecrypt_C+4336>:	mov	r2, r3
0x00013f7c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f7c <AesDecrypt_C+4340>:	ldr	r3, [pc, #-220]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013f80	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f80 <AesDecrypt_C+4344>:	ldr	r2, [r3, r2, lsl #2]
0x00013f84	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f84 <AesDecrypt_C+4348>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00013f88	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f88 <AesDecrypt_C+4352>:	lsr	r3, r3, #16
0x00013f8c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f8c <AesDecrypt_C+4356>:	and	r3, r3, #255	; 0xff
0x00013f90	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f90 <AesDecrypt_C+4360>:	ldr	r1, [pc, #-240]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013f94	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f94 <AesDecrypt_C+4364>:	add	r3, r3, #256	; 0x100
0x00013f98	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f98 <AesDecrypt_C+4368>:	ldr	r3, [r1, r3, lsl #2]
0x00013f9c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13f9c <AesDecrypt_C+4372>:	eor	r2, r2, r3
0x00013fa0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fa0 <AesDecrypt_C+4376>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00013fa4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fa4 <AesDecrypt_C+4380>:	lsr	r3, r3, #8
0x00013fa8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fa8 <AesDecrypt_C+4384>:	and	r3, r3, #255	; 0xff
0x00013fac	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fac <AesDecrypt_C+4388>:	ldr	r1, [pc, #-268]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013fb0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fb0 <AesDecrypt_C+4392>:	add	r3, r3, #512	; 0x200
0x00013fb4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fb4 <AesDecrypt_C+4396>:	ldr	r3, [r1, r3, lsl #2]
0x00013fb8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fb8 <AesDecrypt_C+4400>:	eor	r2, r2, r3
0x00013fbc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fbc <AesDecrypt_C+4404>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013fc0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fc0 <AesDecrypt_C+4408>:	and	r3, r3, #255	; 0xff
0x00013fc4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fc4 <AesDecrypt_C+4412>:	ldr	r1, [pc, #-292]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013fc8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fc8 <AesDecrypt_C+4416>:	add	r3, r3, #768	; 0x300
0x00013fcc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fcc <AesDecrypt_C+4420>:	ldr	r3, [r1, r3, lsl #2]
0x00013fd0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fd0 <AesDecrypt_C+4424>:	eor	r2, r2, r3
0x00013fd4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fd4 <AesDecrypt_C+4428>:	ldr	r3, [r11, #-12]
0x00013fd8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fd8 <AesDecrypt_C+4432>:	add	r3, r3, #144	; 0x90
0x00013fdc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fdc <AesDecrypt_C+4436>:	ldr	r3, [r3]
0x00013fe0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fe0 <AesDecrypt_C+4440>:	eor	r3, r3, r2
0x00013fe4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fe4 <AesDecrypt_C+4444>:	str	r3, [r11, #-28]	; 0xffffffe4
0x00013fe8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fe8 <AesDecrypt_C+4448>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00013fec	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13fec <AesDecrypt_C+4452>:	lsr	r3, r3, #24
0x00013ff0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ff0 <AesDecrypt_C+4456>:	and	r3, r3, #255	; 0xff
0x00013ff4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ff4 <AesDecrypt_C+4460>:	mov	r2, r3
0x00013ff8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ff8 <AesDecrypt_C+4464>:	ldr	r3, [pc, #-344]	; 0x13ea8 <AesDecrypt_C+4128>
0x00013ffc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x13ffc <AesDecrypt_C+4468>:	ldr	r2, [r3, r2, lsl #2]
0x00014000	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14000 <AesDecrypt_C+4472>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00014004	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14004 <AesDecrypt_C+4476>:	lsr	r3, r3, #16
0x00014008	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14008 <AesDecrypt_C+4480>:	and	r3, r3, #255	; 0xff
0x0001400c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1400c <AesDecrypt_C+4484>:	ldr	r1, [pc, #-364]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014010	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14010 <AesDecrypt_C+4488>:	add	r3, r3, #256	; 0x100
0x00014014	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14014 <AesDecrypt_C+4492>:	ldr	r3, [r1, r3, lsl #2]
0x00014018	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14018 <AesDecrypt_C+4496>:	eor	r2, r2, r3
0x0001401c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1401c <AesDecrypt_C+4500>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00014020	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14020 <AesDecrypt_C+4504>:	lsr	r3, r3, #8
0x00014024	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14024 <AesDecrypt_C+4508>:	and	r3, r3, #255	; 0xff
0x00014028	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14028 <AesDecrypt_C+4512>:	ldr	r1, [pc, #-392]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001402c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1402c <AesDecrypt_C+4516>:	add	r3, r3, #512	; 0x200
0x00014030	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14030 <AesDecrypt_C+4520>:	ldr	r3, [r1, r3, lsl #2]
0x00014034	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14034 <AesDecrypt_C+4524>:	eor	r2, r2, r3
0x00014038	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14038 <AesDecrypt_C+4528>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x0001403c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1403c <AesDecrypt_C+4532>:	and	r3, r3, #255	; 0xff
0x00014040	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14040 <AesDecrypt_C+4536>:	ldr	r1, [pc, #-416]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014044	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14044 <AesDecrypt_C+4540>:	add	r3, r3, #768	; 0x300
0x00014048	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14048 <AesDecrypt_C+4544>:	ldr	r3, [r1, r3, lsl #2]
0x0001404c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1404c <AesDecrypt_C+4548>:	eor	r2, r2, r3
0x00014050	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14050 <AesDecrypt_C+4552>:	ldr	r3, [r11, #-12]
0x00014054	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14054 <AesDecrypt_C+4556>:	add	r3, r3, #148	; 0x94
0x00014058	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14058 <AesDecrypt_C+4560>:	ldr	r3, [r3]
0x0001405c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1405c <AesDecrypt_C+4564>:	eor	r3, r3, r2
0x00014060	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14060 <AesDecrypt_C+4568>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00014064	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14064 <AesDecrypt_C+4572>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00014068	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14068 <AesDecrypt_C+4576>:	lsr	r3, r3, #24
0x0001406c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1406c <AesDecrypt_C+4580>:	and	r3, r3, #255	; 0xff
0x00014070	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14070 <AesDecrypt_C+4584>:	mov	r2, r3
0x00014074	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14074 <AesDecrypt_C+4588>:	ldr	r3, [pc, #-468]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014078	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14078 <AesDecrypt_C+4592>:	ldr	r2, [r3, r2, lsl #2]
0x0001407c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1407c <AesDecrypt_C+4596>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00014080	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14080 <AesDecrypt_C+4600>:	lsr	r3, r3, #16
0x00014084	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14084 <AesDecrypt_C+4604>:	and	r3, r3, #255	; 0xff
0x00014088	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14088 <AesDecrypt_C+4608>:	ldr	r1, [pc, #-488]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001408c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1408c <AesDecrypt_C+4612>:	add	r3, r3, #256	; 0x100
0x00014090	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14090 <AesDecrypt_C+4616>:	ldr	r3, [r1, r3, lsl #2]
0x00014094	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14094 <AesDecrypt_C+4620>:	eor	r2, r2, r3
0x00014098	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14098 <AesDecrypt_C+4624>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x0001409c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1409c <AesDecrypt_C+4628>:	lsr	r3, r3, #8
0x000140a0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140a0 <AesDecrypt_C+4632>:	and	r3, r3, #255	; 0xff
0x000140a4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140a4 <AesDecrypt_C+4636>:	ldr	r1, [pc, #-516]	; 0x13ea8 <AesDecrypt_C+4128>
0x000140a8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140a8 <AesDecrypt_C+4640>:	add	r3, r3, #512	; 0x200
0x000140ac	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140ac <AesDecrypt_C+4644>:	ldr	r3, [r1, r3, lsl #2]
0x000140b0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140b0 <AesDecrypt_C+4648>:	eor	r2, r2, r3
0x000140b4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140b4 <AesDecrypt_C+4652>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000140b8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140b8 <AesDecrypt_C+4656>:	and	r3, r3, #255	; 0xff
0x000140bc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140bc <AesDecrypt_C+4660>:	ldr	r1, [pc, #-540]	; 0x13ea8 <AesDecrypt_C+4128>
0x000140c0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140c0 <AesDecrypt_C+4664>:	add	r3, r3, #768	; 0x300
0x000140c4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140c4 <AesDecrypt_C+4668>:	ldr	r3, [r1, r3, lsl #2]
0x000140c8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140c8 <AesDecrypt_C+4672>:	eor	r2, r2, r3
0x000140cc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140cc <AesDecrypt_C+4676>:	ldr	r3, [r11, #-12]
0x000140d0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140d0 <AesDecrypt_C+4680>:	add	r3, r3, #152	; 0x98
0x000140d4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140d4 <AesDecrypt_C+4684>:	ldr	r3, [r3]
0x000140d8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140d8 <AesDecrypt_C+4688>:	eor	r3, r3, r2
0x000140dc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140dc <AesDecrypt_C+4692>:	str	r3, [r11, #-20]	; 0xffffffec
0x000140e0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140e0 <AesDecrypt_C+4696>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000140e4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140e4 <AesDecrypt_C+4700>:	lsr	r3, r3, #24
0x000140e8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140e8 <AesDecrypt_C+4704>:	and	r3, r3, #255	; 0xff
0x000140ec	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140ec <AesDecrypt_C+4708>:	mov	r2, r3
0x000140f0	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140f0 <AesDecrypt_C+4712>:	ldr	r3, [pc, #-592]	; 0x13ea8 <AesDecrypt_C+4128>
0x000140f4	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140f4 <AesDecrypt_C+4716>:	ldr	r2, [r3, r2, lsl #2]
0x000140f8	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140f8 <AesDecrypt_C+4720>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000140fc	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x140fc <AesDecrypt_C+4724>:	lsr	r3, r3, #16
0x00014100	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14100 <AesDecrypt_C+4728>:	and	r3, r3, #255	; 0xff
0x00014104	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14104 <AesDecrypt_C+4732>:	ldr	r1, [pc, #-612]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014108	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14108 <AesDecrypt_C+4736>:	add	r3, r3, #256	; 0x100
0x0001410c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1410c <AesDecrypt_C+4740>:	ldr	r3, [r1, r3, lsl #2]
0x00014110	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14110 <AesDecrypt_C+4744>:	eor	r2, r2, r3
0x00014114	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14114 <AesDecrypt_C+4748>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00014118	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14118 <AesDecrypt_C+4752>:	lsr	r3, r3, #8
0x0001411c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1411c <AesDecrypt_C+4756>:	and	r3, r3, #255	; 0xff
0x00014120	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14120 <AesDecrypt_C+4760>:	ldr	r1, [pc, #-640]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014124	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14124 <AesDecrypt_C+4764>:	add	r3, r3, #512	; 0x200
0x00014128	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14128 <AesDecrypt_C+4768>:	ldr	r3, [r1, r3, lsl #2]
0x0001412c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1412c <AesDecrypt_C+4772>:	eor	r2, r2, r3
0x00014130	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14130 <AesDecrypt_C+4776>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00014134	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14134 <AesDecrypt_C+4780>:	and	r3, r3, #255	; 0xff
0x00014138	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14138 <AesDecrypt_C+4784>:	ldr	r1, [pc, #-664]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001413c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1413c <AesDecrypt_C+4788>:	add	r3, r3, #768	; 0x300
0x00014140	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14140 <AesDecrypt_C+4792>:	ldr	r3, [r1, r3, lsl #2]
0x00014144	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14144 <AesDecrypt_C+4796>:	eor	r2, r2, r3
0x00014148	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14148 <AesDecrypt_C+4800>:	ldr	r3, [r11, #-12]
0x0001414c	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x1414c <AesDecrypt_C+4804>:	add	r3, r3, #156	; 0x9c
0x00014150	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14150 <AesDecrypt_C+4808>:	ldr	r3, [r3]
0x00014154	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14154 <AesDecrypt_C+4812>:	eor	r3, r3, r2
0x00014158	3017	    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
=> 0x14158 <AesDecrypt_C+4816>:	str	r3, [r11, #-16]
3018	    if (r > 5) {
=> 0x1415c <AesDecrypt_C+4820>:	ldr	r3, [r11, #-60]	; 0xffffffc4
0x00014160	3018	    if (r > 5) {
=> 0x14160 <AesDecrypt_C+4824>:	cmp	r3, #5
0x00014164	3018	    if (r > 5) {
=> 0x14164 <AesDecrypt_C+4828>:	bls	0x14934 <AesDecrypt_C+6828>
3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14168 <AesDecrypt_C+4832>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001416c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1416c <AesDecrypt_C+4836>:	lsr	r3, r3, #24
0x00014170	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14170 <AesDecrypt_C+4840>:	and	r3, r3, #255	; 0xff
0x00014174	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14174 <AesDecrypt_C+4844>:	mov	r2, r3
0x00014178	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14178 <AesDecrypt_C+4848>:	ldr	r3, [pc, #-728]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001417c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1417c <AesDecrypt_C+4852>:	ldr	r2, [r3, r2, lsl #2]
0x00014180	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14180 <AesDecrypt_C+4856>:	ldr	r3, [r11, #-16]
0x00014184	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14184 <AesDecrypt_C+4860>:	lsr	r3, r3, #16
0x00014188	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14188 <AesDecrypt_C+4864>:	and	r3, r3, #255	; 0xff
0x0001418c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1418c <AesDecrypt_C+4868>:	ldr	r1, [pc, #-748]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014190	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14190 <AesDecrypt_C+4872>:	add	r3, r3, #256	; 0x100
0x00014194	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14194 <AesDecrypt_C+4876>:	ldr	r3, [r1, r3, lsl #2]
0x00014198	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14198 <AesDecrypt_C+4880>:	eor	r2, r2, r3
0x0001419c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1419c <AesDecrypt_C+4884>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000141a0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141a0 <AesDecrypt_C+4888>:	lsr	r3, r3, #8
0x000141a4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141a4 <AesDecrypt_C+4892>:	and	r3, r3, #255	; 0xff
0x000141a8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141a8 <AesDecrypt_C+4896>:	ldr	r1, [pc, #-776]	; 0x13ea8 <AesDecrypt_C+4128>
0x000141ac	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141ac <AesDecrypt_C+4900>:	add	r3, r3, #512	; 0x200
0x000141b0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141b0 <AesDecrypt_C+4904>:	ldr	r3, [r1, r3, lsl #2]
0x000141b4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141b4 <AesDecrypt_C+4908>:	eor	r2, r2, r3
0x000141b8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141b8 <AesDecrypt_C+4912>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000141bc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141bc <AesDecrypt_C+4916>:	and	r3, r3, #255	; 0xff
0x000141c0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141c0 <AesDecrypt_C+4920>:	ldr	r1, [pc, #-800]	; 0x13ea8 <AesDecrypt_C+4128>
0x000141c4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141c4 <AesDecrypt_C+4924>:	add	r3, r3, #768	; 0x300
0x000141c8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141c8 <AesDecrypt_C+4928>:	ldr	r3, [r1, r3, lsl #2]
0x000141cc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141cc <AesDecrypt_C+4932>:	eor	r2, r2, r3
0x000141d0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141d0 <AesDecrypt_C+4936>:	ldr	r3, [r11, #-12]
0x000141d4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141d4 <AesDecrypt_C+4940>:	add	r3, r3, #160	; 0xa0
0x000141d8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141d8 <AesDecrypt_C+4944>:	ldr	r3, [r3]
0x000141dc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141dc <AesDecrypt_C+4948>:	eor	r3, r3, r2
0x000141e0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141e0 <AesDecrypt_C+4952>:	str	r3, [r11, #-44]	; 0xffffffd4
0x000141e4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141e4 <AesDecrypt_C+4956>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000141e8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141e8 <AesDecrypt_C+4960>:	lsr	r3, r3, #24
0x000141ec	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141ec <AesDecrypt_C+4964>:	and	r3, r3, #255	; 0xff
0x000141f0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141f0 <AesDecrypt_C+4968>:	mov	r2, r3
0x000141f4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141f4 <AesDecrypt_C+4972>:	ldr	r3, [pc, #-852]	; 0x13ea8 <AesDecrypt_C+4128>
0x000141f8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141f8 <AesDecrypt_C+4976>:	ldr	r2, [r3, r2, lsl #2]
0x000141fc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x141fc <AesDecrypt_C+4980>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00014200	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14200 <AesDecrypt_C+4984>:	lsr	r3, r3, #16
0x00014204	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14204 <AesDecrypt_C+4988>:	and	r3, r3, #255	; 0xff
0x00014208	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14208 <AesDecrypt_C+4992>:	ldr	r1, [pc, #-872]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001420c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1420c <AesDecrypt_C+4996>:	add	r3, r3, #256	; 0x100
0x00014210	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14210 <AesDecrypt_C+5000>:	ldr	r3, [r1, r3, lsl #2]
0x00014214	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14214 <AesDecrypt_C+5004>:	eor	r2, r2, r3
0x00014218	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14218 <AesDecrypt_C+5008>:	ldr	r3, [r11, #-16]
0x0001421c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1421c <AesDecrypt_C+5012>:	lsr	r3, r3, #8
0x00014220	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14220 <AesDecrypt_C+5016>:	and	r3, r3, #255	; 0xff
0x00014224	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14224 <AesDecrypt_C+5020>:	ldr	r1, [pc, #-900]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014228	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14228 <AesDecrypt_C+5024>:	add	r3, r3, #512	; 0x200
0x0001422c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1422c <AesDecrypt_C+5028>:	ldr	r3, [r1, r3, lsl #2]
0x00014230	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14230 <AesDecrypt_C+5032>:	eor	r2, r2, r3
0x00014234	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14234 <AesDecrypt_C+5036>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00014238	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14238 <AesDecrypt_C+5040>:	and	r3, r3, #255	; 0xff
0x0001423c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1423c <AesDecrypt_C+5044>:	ldr	r1, [pc, #-924]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014240	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14240 <AesDecrypt_C+5048>:	add	r3, r3, #768	; 0x300
0x00014244	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14244 <AesDecrypt_C+5052>:	ldr	r3, [r1, r3, lsl #2]
0x00014248	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14248 <AesDecrypt_C+5056>:	eor	r2, r2, r3
0x0001424c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1424c <AesDecrypt_C+5060>:	ldr	r3, [r11, #-12]
0x00014250	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14250 <AesDecrypt_C+5064>:	add	r3, r3, #164	; 0xa4
0x00014254	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14254 <AesDecrypt_C+5068>:	ldr	r3, [r3]
0x00014258	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14258 <AesDecrypt_C+5072>:	eor	r3, r3, r2
0x0001425c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1425c <AesDecrypt_C+5076>:	str	r3, [r11, #-40]	; 0xffffffd8
0x00014260	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14260 <AesDecrypt_C+5080>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00014264	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14264 <AesDecrypt_C+5084>:	lsr	r3, r3, #24
0x00014268	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14268 <AesDecrypt_C+5088>:	and	r3, r3, #255	; 0xff
0x0001426c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1426c <AesDecrypt_C+5092>:	mov	r2, r3
0x00014270	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14270 <AesDecrypt_C+5096>:	ldr	r3, [pc, #-976]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014274	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14274 <AesDecrypt_C+5100>:	ldr	r2, [r3, r2, lsl #2]
0x00014278	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14278 <AesDecrypt_C+5104>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x0001427c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1427c <AesDecrypt_C+5108>:	lsr	r3, r3, #16
0x00014280	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14280 <AesDecrypt_C+5112>:	and	r3, r3, #255	; 0xff
0x00014284	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14284 <AesDecrypt_C+5116>:	ldr	r1, [pc, #-996]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014288	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14288 <AesDecrypt_C+5120>:	add	r3, r3, #256	; 0x100
0x0001428c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1428c <AesDecrypt_C+5124>:	ldr	r3, [r1, r3, lsl #2]
0x00014290	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14290 <AesDecrypt_C+5128>:	eor	r2, r2, r3
0x00014294	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14294 <AesDecrypt_C+5132>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00014298	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14298 <AesDecrypt_C+5136>:	lsr	r3, r3, #8
0x0001429c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1429c <AesDecrypt_C+5140>:	and	r3, r3, #255	; 0xff
0x000142a0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142a0 <AesDecrypt_C+5144>:	ldr	r1, [pc, #-1024]	; 0x13ea8 <AesDecrypt_C+4128>
0x000142a4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142a4 <AesDecrypt_C+5148>:	add	r3, r3, #512	; 0x200
0x000142a8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142a8 <AesDecrypt_C+5152>:	ldr	r3, [r1, r3, lsl #2]
0x000142ac	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142ac <AesDecrypt_C+5156>:	eor	r2, r2, r3
0x000142b0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142b0 <AesDecrypt_C+5160>:	ldr	r3, [r11, #-16]
0x000142b4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142b4 <AesDecrypt_C+5164>:	and	r3, r3, #255	; 0xff
0x000142b8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142b8 <AesDecrypt_C+5168>:	ldr	r1, [pc, #-1048]	; 0x13ea8 <AesDecrypt_C+4128>
0x000142bc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142bc <AesDecrypt_C+5172>:	add	r3, r3, #768	; 0x300
0x000142c0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142c0 <AesDecrypt_C+5176>:	ldr	r3, [r1, r3, lsl #2]
0x000142c4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142c4 <AesDecrypt_C+5180>:	eor	r2, r2, r3
0x000142c8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142c8 <AesDecrypt_C+5184>:	ldr	r3, [r11, #-12]
0x000142cc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142cc <AesDecrypt_C+5188>:	add	r3, r3, #168	; 0xa8
0x000142d0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142d0 <AesDecrypt_C+5192>:	ldr	r3, [r3]
0x000142d4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142d4 <AesDecrypt_C+5196>:	eor	r3, r3, r2
0x000142d8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142d8 <AesDecrypt_C+5200>:	str	r3, [r11, #-36]	; 0xffffffdc
0x000142dc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142dc <AesDecrypt_C+5204>:	ldr	r3, [r11, #-16]
0x000142e0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142e0 <AesDecrypt_C+5208>:	lsr	r3, r3, #24
0x000142e4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142e4 <AesDecrypt_C+5212>:	and	r3, r3, #255	; 0xff
0x000142e8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142e8 <AesDecrypt_C+5216>:	mov	r2, r3
0x000142ec	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142ec <AesDecrypt_C+5220>:	ldr	r3, [pc, #-1100]	; 0x13ea8 <AesDecrypt_C+4128>
0x000142f0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142f0 <AesDecrypt_C+5224>:	ldr	r2, [r3, r2, lsl #2]
0x000142f4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142f4 <AesDecrypt_C+5228>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000142f8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142f8 <AesDecrypt_C+5232>:	lsr	r3, r3, #16
0x000142fc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x142fc <AesDecrypt_C+5236>:	and	r3, r3, #255	; 0xff
0x00014300	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14300 <AesDecrypt_C+5240>:	ldr	r1, [pc, #-1120]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014304	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14304 <AesDecrypt_C+5244>:	add	r3, r3, #256	; 0x100
0x00014308	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14308 <AesDecrypt_C+5248>:	ldr	r3, [r1, r3, lsl #2]
0x0001430c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1430c <AesDecrypt_C+5252>:	eor	r2, r2, r3
0x00014310	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14310 <AesDecrypt_C+5256>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00014314	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14314 <AesDecrypt_C+5260>:	lsr	r3, r3, #8
0x00014318	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14318 <AesDecrypt_C+5264>:	and	r3, r3, #255	; 0xff
0x0001431c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1431c <AesDecrypt_C+5268>:	ldr	r1, [pc, #-1148]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014320	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14320 <AesDecrypt_C+5272>:	add	r3, r3, #512	; 0x200
0x00014324	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14324 <AesDecrypt_C+5276>:	ldr	r3, [r1, r3, lsl #2]
0x00014328	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14328 <AesDecrypt_C+5280>:	eor	r2, r2, r3
0x0001432c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1432c <AesDecrypt_C+5284>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00014330	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14330 <AesDecrypt_C+5288>:	and	r3, r3, #255	; 0xff
0x00014334	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14334 <AesDecrypt_C+5292>:	ldr	r1, [pc, #-1172]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014338	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14338 <AesDecrypt_C+5296>:	add	r3, r3, #768	; 0x300
0x0001433c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1433c <AesDecrypt_C+5300>:	ldr	r3, [r1, r3, lsl #2]
0x00014340	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14340 <AesDecrypt_C+5304>:	eor	r2, r2, r3
0x00014344	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14344 <AesDecrypt_C+5308>:	ldr	r3, [r11, #-12]
0x00014348	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14348 <AesDecrypt_C+5312>:	add	r3, r3, #172	; 0xac
0x0001434c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1434c <AesDecrypt_C+5316>:	ldr	r3, [r3]
0x00014350	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14350 <AesDecrypt_C+5320>:	eor	r3, r3, r2
0x00014354	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14354 <AesDecrypt_C+5324>:	str	r3, [r11, #-32]	; 0xffffffe0
3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14358 <AesDecrypt_C+5328>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x0001435c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1435c <AesDecrypt_C+5332>:	lsr	r3, r3, #24
0x00014360	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14360 <AesDecrypt_C+5336>:	and	r3, r3, #255	; 0xff
0x00014364	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14364 <AesDecrypt_C+5340>:	mov	r2, r3
0x00014368	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14368 <AesDecrypt_C+5344>:	ldr	r3, [pc, #-1224]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001436c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1436c <AesDecrypt_C+5348>:	ldr	r2, [r3, r2, lsl #2]
0x00014370	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14370 <AesDecrypt_C+5352>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00014374	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14374 <AesDecrypt_C+5356>:	lsr	r3, r3, #16
0x00014378	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14378 <AesDecrypt_C+5360>:	and	r3, r3, #255	; 0xff
0x0001437c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1437c <AesDecrypt_C+5364>:	ldr	r1, [pc, #-1244]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014380	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14380 <AesDecrypt_C+5368>:	add	r3, r3, #256	; 0x100
0x00014384	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14384 <AesDecrypt_C+5372>:	ldr	r3, [r1, r3, lsl #2]
0x00014388	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14388 <AesDecrypt_C+5376>:	eor	r2, r2, r3
0x0001438c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1438c <AesDecrypt_C+5380>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00014390	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14390 <AesDecrypt_C+5384>:	lsr	r3, r3, #8
0x00014394	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14394 <AesDecrypt_C+5388>:	and	r3, r3, #255	; 0xff
0x00014398	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14398 <AesDecrypt_C+5392>:	ldr	r1, [pc, #-1272]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001439c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1439c <AesDecrypt_C+5396>:	add	r3, r3, #512	; 0x200
0x000143a0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143a0 <AesDecrypt_C+5400>:	ldr	r3, [r1, r3, lsl #2]
0x000143a4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143a4 <AesDecrypt_C+5404>:	eor	r2, r2, r3
0x000143a8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143a8 <AesDecrypt_C+5408>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000143ac	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143ac <AesDecrypt_C+5412>:	and	r3, r3, #255	; 0xff
0x000143b0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143b0 <AesDecrypt_C+5416>:	ldr	r1, [pc, #-1296]	; 0x13ea8 <AesDecrypt_C+4128>
0x000143b4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143b4 <AesDecrypt_C+5420>:	add	r3, r3, #768	; 0x300
0x000143b8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143b8 <AesDecrypt_C+5424>:	ldr	r3, [r1, r3, lsl #2]
0x000143bc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143bc <AesDecrypt_C+5428>:	eor	r2, r2, r3
0x000143c0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143c0 <AesDecrypt_C+5432>:	ldr	r3, [r11, #-12]
0x000143c4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143c4 <AesDecrypt_C+5436>:	add	r3, r3, #176	; 0xb0
0x000143c8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143c8 <AesDecrypt_C+5440>:	ldr	r3, [r3]
0x000143cc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143cc <AesDecrypt_C+5444>:	eor	r3, r3, r2
0x000143d0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143d0 <AesDecrypt_C+5448>:	str	r3, [r11, #-28]	; 0xffffffe4
0x000143d4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143d4 <AesDecrypt_C+5452>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000143d8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143d8 <AesDecrypt_C+5456>:	lsr	r3, r3, #24
0x000143dc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143dc <AesDecrypt_C+5460>:	and	r3, r3, #255	; 0xff
0x000143e0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143e0 <AesDecrypt_C+5464>:	mov	r2, r3
0x000143e4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143e4 <AesDecrypt_C+5468>:	ldr	r3, [pc, #-1348]	; 0x13ea8 <AesDecrypt_C+4128>
0x000143e8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143e8 <AesDecrypt_C+5472>:	ldr	r2, [r3, r2, lsl #2]
0x000143ec	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143ec <AesDecrypt_C+5476>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000143f0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143f0 <AesDecrypt_C+5480>:	lsr	r3, r3, #16
0x000143f4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143f4 <AesDecrypt_C+5484>:	and	r3, r3, #255	; 0xff
0x000143f8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143f8 <AesDecrypt_C+5488>:	ldr	r1, [pc, #-1368]	; 0x13ea8 <AesDecrypt_C+4128>
0x000143fc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x143fc <AesDecrypt_C+5492>:	add	r3, r3, #256	; 0x100
0x00014400	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14400 <AesDecrypt_C+5496>:	ldr	r3, [r1, r3, lsl #2]
0x00014404	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14404 <AesDecrypt_C+5500>:	eor	r2, r2, r3
0x00014408	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14408 <AesDecrypt_C+5504>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x0001440c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1440c <AesDecrypt_C+5508>:	lsr	r3, r3, #8
0x00014410	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14410 <AesDecrypt_C+5512>:	and	r3, r3, #255	; 0xff
0x00014414	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14414 <AesDecrypt_C+5516>:	ldr	r1, [pc, #-1396]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014418	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14418 <AesDecrypt_C+5520>:	add	r3, r3, #512	; 0x200
0x0001441c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1441c <AesDecrypt_C+5524>:	ldr	r3, [r1, r3, lsl #2]
0x00014420	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14420 <AesDecrypt_C+5528>:	eor	r2, r2, r3
0x00014424	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14424 <AesDecrypt_C+5532>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00014428	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14428 <AesDecrypt_C+5536>:	and	r3, r3, #255	; 0xff
0x0001442c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1442c <AesDecrypt_C+5540>:	ldr	r1, [pc, #-1420]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014430	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14430 <AesDecrypt_C+5544>:	add	r3, r3, #768	; 0x300
0x00014434	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14434 <AesDecrypt_C+5548>:	ldr	r3, [r1, r3, lsl #2]
0x00014438	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14438 <AesDecrypt_C+5552>:	eor	r2, r2, r3
0x0001443c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1443c <AesDecrypt_C+5556>:	ldr	r3, [r11, #-12]
0x00014440	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14440 <AesDecrypt_C+5560>:	add	r3, r3, #180	; 0xb4
0x00014444	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14444 <AesDecrypt_C+5564>:	ldr	r3, [r3]
0x00014448	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14448 <AesDecrypt_C+5568>:	eor	r3, r3, r2
0x0001444c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1444c <AesDecrypt_C+5572>:	str	r3, [r11, #-24]	; 0xffffffe8
0x00014450	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14450 <AesDecrypt_C+5576>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00014454	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14454 <AesDecrypt_C+5580>:	lsr	r3, r3, #24
0x00014458	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14458 <AesDecrypt_C+5584>:	and	r3, r3, #255	; 0xff
0x0001445c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1445c <AesDecrypt_C+5588>:	mov	r2, r3
0x00014460	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14460 <AesDecrypt_C+5592>:	ldr	r3, [pc, #-1472]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014464	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14464 <AesDecrypt_C+5596>:	ldr	r2, [r3, r2, lsl #2]
0x00014468	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14468 <AesDecrypt_C+5600>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x0001446c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1446c <AesDecrypt_C+5604>:	lsr	r3, r3, #16
0x00014470	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14470 <AesDecrypt_C+5608>:	and	r3, r3, #255	; 0xff
0x00014474	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14474 <AesDecrypt_C+5612>:	ldr	r1, [pc, #-1492]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014478	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14478 <AesDecrypt_C+5616>:	add	r3, r3, #256	; 0x100
0x0001447c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1447c <AesDecrypt_C+5620>:	ldr	r3, [r1, r3, lsl #2]
0x00014480	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14480 <AesDecrypt_C+5624>:	eor	r2, r2, r3
0x00014484	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14484 <AesDecrypt_C+5628>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00014488	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14488 <AesDecrypt_C+5632>:	lsr	r3, r3, #8
0x0001448c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1448c <AesDecrypt_C+5636>:	and	r3, r3, #255	; 0xff
0x00014490	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14490 <AesDecrypt_C+5640>:	ldr	r1, [pc, #-1520]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014494	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14494 <AesDecrypt_C+5644>:	add	r3, r3, #512	; 0x200
0x00014498	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14498 <AesDecrypt_C+5648>:	ldr	r3, [r1, r3, lsl #2]
0x0001449c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1449c <AesDecrypt_C+5652>:	eor	r2, r2, r3
0x000144a0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144a0 <AesDecrypt_C+5656>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000144a4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144a4 <AesDecrypt_C+5660>:	and	r3, r3, #255	; 0xff
0x000144a8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144a8 <AesDecrypt_C+5664>:	ldr	r1, [pc, #-1544]	; 0x13ea8 <AesDecrypt_C+4128>
0x000144ac	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144ac <AesDecrypt_C+5668>:	add	r3, r3, #768	; 0x300
0x000144b0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144b0 <AesDecrypt_C+5672>:	ldr	r3, [r1, r3, lsl #2]
0x000144b4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144b4 <AesDecrypt_C+5676>:	eor	r2, r2, r3
0x000144b8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144b8 <AesDecrypt_C+5680>:	ldr	r3, [r11, #-12]
0x000144bc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144bc <AesDecrypt_C+5684>:	add	r3, r3, #184	; 0xb8
0x000144c0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144c0 <AesDecrypt_C+5688>:	ldr	r3, [r3]
0x000144c4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144c4 <AesDecrypt_C+5692>:	eor	r3, r3, r2
0x000144c8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144c8 <AesDecrypt_C+5696>:	str	r3, [r11, #-20]	; 0xffffffec
0x000144cc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144cc <AesDecrypt_C+5700>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000144d0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144d0 <AesDecrypt_C+5704>:	lsr	r3, r3, #24
0x000144d4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144d4 <AesDecrypt_C+5708>:	and	r3, r3, #255	; 0xff
0x000144d8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144d8 <AesDecrypt_C+5712>:	mov	r2, r3
0x000144dc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144dc <AesDecrypt_C+5716>:	ldr	r3, [pc, #-1596]	; 0x13ea8 <AesDecrypt_C+4128>
0x000144e0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144e0 <AesDecrypt_C+5720>:	ldr	r2, [r3, r2, lsl #2]
0x000144e4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144e4 <AesDecrypt_C+5724>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000144e8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144e8 <AesDecrypt_C+5728>:	lsr	r3, r3, #16
0x000144ec	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144ec <AesDecrypt_C+5732>:	and	r3, r3, #255	; 0xff
0x000144f0	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144f0 <AesDecrypt_C+5736>:	ldr	r1, [pc, #-1616]	; 0x13ea8 <AesDecrypt_C+4128>
0x000144f4	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144f4 <AesDecrypt_C+5740>:	add	r3, r3, #256	; 0x100
0x000144f8	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144f8 <AesDecrypt_C+5744>:	ldr	r3, [r1, r3, lsl #2]
0x000144fc	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x144fc <AesDecrypt_C+5748>:	eor	r2, r2, r3
0x00014500	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14500 <AesDecrypt_C+5752>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00014504	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14504 <AesDecrypt_C+5756>:	lsr	r3, r3, #8
0x00014508	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14508 <AesDecrypt_C+5760>:	and	r3, r3, #255	; 0xff
0x0001450c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1450c <AesDecrypt_C+5764>:	ldr	r1, [pc, #-1644]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014510	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14510 <AesDecrypt_C+5768>:	add	r3, r3, #512	; 0x200
0x00014514	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14514 <AesDecrypt_C+5772>:	ldr	r3, [r1, r3, lsl #2]
0x00014518	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14518 <AesDecrypt_C+5776>:	eor	r2, r2, r3
0x0001451c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1451c <AesDecrypt_C+5780>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00014520	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14520 <AesDecrypt_C+5784>:	and	r3, r3, #255	; 0xff
0x00014524	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14524 <AesDecrypt_C+5788>:	ldr	r1, [pc, #-1668]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014528	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14528 <AesDecrypt_C+5792>:	add	r3, r3, #768	; 0x300
0x0001452c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1452c <AesDecrypt_C+5796>:	ldr	r3, [r1, r3, lsl #2]
0x00014530	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14530 <AesDecrypt_C+5800>:	eor	r2, r2, r3
0x00014534	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14534 <AesDecrypt_C+5804>:	ldr	r3, [r11, #-12]
0x00014538	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14538 <AesDecrypt_C+5808>:	add	r3, r3, #188	; 0xbc
0x0001453c	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x1453c <AesDecrypt_C+5812>:	ldr	r3, [r3]
0x00014540	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14540 <AesDecrypt_C+5816>:	eor	r3, r3, r2
0x00014544	3019	        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
=> 0x14544 <AesDecrypt_C+5820>:	str	r3, [r11, #-16]
3020	        if (r > 6) {
=> 0x14548 <AesDecrypt_C+5824>:	ldr	r3, [r11, #-60]	; 0xffffffc4
0x0001454c	3020	        if (r > 6) {
=> 0x1454c <AesDecrypt_C+5828>:	cmp	r3, #6
0x00014550	3020	        if (r > 6) {
=> 0x14550 <AesDecrypt_C+5832>:	bls	0x14934 <AesDecrypt_C+6828>
3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14554 <AesDecrypt_C+5836>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00014558	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14558 <AesDecrypt_C+5840>:	lsr	r3, r3, #24
0x0001455c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1455c <AesDecrypt_C+5844>:	and	r3, r3, #255	; 0xff
0x00014560	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14560 <AesDecrypt_C+5848>:	mov	r2, r3
0x00014564	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14564 <AesDecrypt_C+5852>:	ldr	r3, [pc, #-1732]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014568	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14568 <AesDecrypt_C+5856>:	ldr	r2, [r3, r2, lsl #2]
0x0001456c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1456c <AesDecrypt_C+5860>:	ldr	r3, [r11, #-16]
0x00014570	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14570 <AesDecrypt_C+5864>:	lsr	r3, r3, #16
0x00014574	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14574 <AesDecrypt_C+5868>:	and	r3, r3, #255	; 0xff
0x00014578	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14578 <AesDecrypt_C+5872>:	ldr	r1, [pc, #-1752]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001457c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1457c <AesDecrypt_C+5876>:	add	r3, r3, #256	; 0x100
0x00014580	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14580 <AesDecrypt_C+5880>:	ldr	r3, [r1, r3, lsl #2]
0x00014584	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14584 <AesDecrypt_C+5884>:	eor	r2, r2, r3
0x00014588	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14588 <AesDecrypt_C+5888>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001458c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1458c <AesDecrypt_C+5892>:	lsr	r3, r3, #8
0x00014590	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14590 <AesDecrypt_C+5896>:	and	r3, r3, #255	; 0xff
0x00014594	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14594 <AesDecrypt_C+5900>:	ldr	r1, [pc, #-1780]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014598	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14598 <AesDecrypt_C+5904>:	add	r3, r3, #512	; 0x200
0x0001459c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1459c <AesDecrypt_C+5908>:	ldr	r3, [r1, r3, lsl #2]
0x000145a0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145a0 <AesDecrypt_C+5912>:	eor	r2, r2, r3
0x000145a4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145a4 <AesDecrypt_C+5916>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000145a8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145a8 <AesDecrypt_C+5920>:	and	r3, r3, #255	; 0xff
0x000145ac	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145ac <AesDecrypt_C+5924>:	ldr	r1, [pc, #-1804]	; 0x13ea8 <AesDecrypt_C+4128>
0x000145b0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145b0 <AesDecrypt_C+5928>:	add	r3, r3, #768	; 0x300
0x000145b4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145b4 <AesDecrypt_C+5932>:	ldr	r3, [r1, r3, lsl #2]
0x000145b8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145b8 <AesDecrypt_C+5936>:	eor	r2, r2, r3
0x000145bc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145bc <AesDecrypt_C+5940>:	ldr	r3, [r11, #-12]
0x000145c0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145c0 <AesDecrypt_C+5944>:	add	r3, r3, #192	; 0xc0
0x000145c4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145c4 <AesDecrypt_C+5948>:	ldr	r3, [r3]
0x000145c8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145c8 <AesDecrypt_C+5952>:	eor	r3, r3, r2
0x000145cc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145cc <AesDecrypt_C+5956>:	str	r3, [r11, #-44]	; 0xffffffd4
0x000145d0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145d0 <AesDecrypt_C+5960>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000145d4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145d4 <AesDecrypt_C+5964>:	lsr	r3, r3, #24
0x000145d8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145d8 <AesDecrypt_C+5968>:	and	r3, r3, #255	; 0xff
0x000145dc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145dc <AesDecrypt_C+5972>:	mov	r2, r3
0x000145e0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145e0 <AesDecrypt_C+5976>:	ldr	r3, [pc, #-1856]	; 0x13ea8 <AesDecrypt_C+4128>
0x000145e4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145e4 <AesDecrypt_C+5980>:	ldr	r2, [r3, r2, lsl #2]
0x000145e8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145e8 <AesDecrypt_C+5984>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x000145ec	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145ec <AesDecrypt_C+5988>:	lsr	r3, r3, #16
0x000145f0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145f0 <AesDecrypt_C+5992>:	and	r3, r3, #255	; 0xff
0x000145f4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145f4 <AesDecrypt_C+5996>:	ldr	r1, [pc, #-1876]	; 0x13ea8 <AesDecrypt_C+4128>
0x000145f8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145f8 <AesDecrypt_C+6000>:	add	r3, r3, #256	; 0x100
0x000145fc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x145fc <AesDecrypt_C+6004>:	ldr	r3, [r1, r3, lsl #2]
0x00014600	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14600 <AesDecrypt_C+6008>:	eor	r2, r2, r3
0x00014604	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14604 <AesDecrypt_C+6012>:	ldr	r3, [r11, #-16]
0x00014608	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14608 <AesDecrypt_C+6016>:	lsr	r3, r3, #8
0x0001460c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1460c <AesDecrypt_C+6020>:	and	r3, r3, #255	; 0xff
0x00014610	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14610 <AesDecrypt_C+6024>:	ldr	r1, [pc, #-1904]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014614	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14614 <AesDecrypt_C+6028>:	add	r3, r3, #512	; 0x200
0x00014618	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14618 <AesDecrypt_C+6032>:	ldr	r3, [r1, r3, lsl #2]
0x0001461c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1461c <AesDecrypt_C+6036>:	eor	r2, r2, r3
0x00014620	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14620 <AesDecrypt_C+6040>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00014624	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14624 <AesDecrypt_C+6044>:	and	r3, r3, #255	; 0xff
0x00014628	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14628 <AesDecrypt_C+6048>:	ldr	r1, [pc, #-1928]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001462c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1462c <AesDecrypt_C+6052>:	add	r3, r3, #768	; 0x300
0x00014630	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14630 <AesDecrypt_C+6056>:	ldr	r3, [r1, r3, lsl #2]
0x00014634	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14634 <AesDecrypt_C+6060>:	eor	r2, r2, r3
0x00014638	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14638 <AesDecrypt_C+6064>:	ldr	r3, [r11, #-12]
0x0001463c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1463c <AesDecrypt_C+6068>:	add	r3, r3, #196	; 0xc4
0x00014640	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14640 <AesDecrypt_C+6072>:	ldr	r3, [r3]
0x00014644	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14644 <AesDecrypt_C+6076>:	eor	r3, r3, r2
0x00014648	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14648 <AesDecrypt_C+6080>:	str	r3, [r11, #-40]	; 0xffffffd8
0x0001464c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1464c <AesDecrypt_C+6084>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00014650	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14650 <AesDecrypt_C+6088>:	lsr	r3, r3, #24
0x00014654	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14654 <AesDecrypt_C+6092>:	and	r3, r3, #255	; 0xff
0x00014658	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14658 <AesDecrypt_C+6096>:	mov	r2, r3
0x0001465c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1465c <AesDecrypt_C+6100>:	ldr	r3, [pc, #-1980]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014660	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14660 <AesDecrypt_C+6104>:	ldr	r2, [r3, r2, lsl #2]
0x00014664	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14664 <AesDecrypt_C+6108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00014668	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14668 <AesDecrypt_C+6112>:	lsr	r3, r3, #16
0x0001466c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1466c <AesDecrypt_C+6116>:	and	r3, r3, #255	; 0xff
0x00014670	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14670 <AesDecrypt_C+6120>:	ldr	r1, [pc, #-2000]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014674	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14674 <AesDecrypt_C+6124>:	add	r3, r3, #256	; 0x100
0x00014678	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14678 <AesDecrypt_C+6128>:	ldr	r3, [r1, r3, lsl #2]
0x0001467c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1467c <AesDecrypt_C+6132>:	eor	r2, r2, r3
0x00014680	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14680 <AesDecrypt_C+6136>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00014684	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14684 <AesDecrypt_C+6140>:	lsr	r3, r3, #8
0x00014688	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14688 <AesDecrypt_C+6144>:	and	r3, r3, #255	; 0xff
0x0001468c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1468c <AesDecrypt_C+6148>:	ldr	r1, [pc, #-2028]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014690	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14690 <AesDecrypt_C+6152>:	add	r3, r3, #512	; 0x200
0x00014694	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14694 <AesDecrypt_C+6156>:	ldr	r3, [r1, r3, lsl #2]
0x00014698	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14698 <AesDecrypt_C+6160>:	eor	r2, r2, r3
0x0001469c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1469c <AesDecrypt_C+6164>:	ldr	r3, [r11, #-16]
0x000146a0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146a0 <AesDecrypt_C+6168>:	and	r3, r3, #255	; 0xff
0x000146a4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146a4 <AesDecrypt_C+6172>:	ldr	r1, [pc, #-2052]	; 0x13ea8 <AesDecrypt_C+4128>
0x000146a8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146a8 <AesDecrypt_C+6176>:	add	r3, r3, #768	; 0x300
0x000146ac	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146ac <AesDecrypt_C+6180>:	ldr	r3, [r1, r3, lsl #2]
0x000146b0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146b0 <AesDecrypt_C+6184>:	eor	r2, r2, r3
0x000146b4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146b4 <AesDecrypt_C+6188>:	ldr	r3, [r11, #-12]
0x000146b8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146b8 <AesDecrypt_C+6192>:	add	r3, r3, #200	; 0xc8
0x000146bc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146bc <AesDecrypt_C+6196>:	ldr	r3, [r3]
0x000146c0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146c0 <AesDecrypt_C+6200>:	eor	r3, r3, r2
0x000146c4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146c4 <AesDecrypt_C+6204>:	str	r3, [r11, #-36]	; 0xffffffdc
0x000146c8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146c8 <AesDecrypt_C+6208>:	ldr	r3, [r11, #-16]
0x000146cc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146cc <AesDecrypt_C+6212>:	lsr	r3, r3, #24
0x000146d0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146d0 <AesDecrypt_C+6216>:	and	r3, r3, #255	; 0xff
0x000146d4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146d4 <AesDecrypt_C+6220>:	mov	r2, r3
0x000146d8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146d8 <AesDecrypt_C+6224>:	ldr	r3, [pc, #-2104]	; 0x13ea8 <AesDecrypt_C+4128>
0x000146dc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146dc <AesDecrypt_C+6228>:	ldr	r2, [r3, r2, lsl #2]
0x000146e0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146e0 <AesDecrypt_C+6232>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x000146e4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146e4 <AesDecrypt_C+6236>:	lsr	r3, r3, #16
0x000146e8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146e8 <AesDecrypt_C+6240>:	and	r3, r3, #255	; 0xff
0x000146ec	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146ec <AesDecrypt_C+6244>:	ldr	r1, [pc, #-2124]	; 0x13ea8 <AesDecrypt_C+4128>
0x000146f0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146f0 <AesDecrypt_C+6248>:	add	r3, r3, #256	; 0x100
0x000146f4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146f4 <AesDecrypt_C+6252>:	ldr	r3, [r1, r3, lsl #2]
0x000146f8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146f8 <AesDecrypt_C+6256>:	eor	r2, r2, r3
0x000146fc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x146fc <AesDecrypt_C+6260>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00014700	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14700 <AesDecrypt_C+6264>:	lsr	r3, r3, #8
0x00014704	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14704 <AesDecrypt_C+6268>:	and	r3, r3, #255	; 0xff
0x00014708	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14708 <AesDecrypt_C+6272>:	ldr	r1, [pc, #-2152]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001470c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1470c <AesDecrypt_C+6276>:	add	r3, r3, #512	; 0x200
0x00014710	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14710 <AesDecrypt_C+6280>:	ldr	r3, [r1, r3, lsl #2]
0x00014714	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14714 <AesDecrypt_C+6284>:	eor	r2, r2, r3
0x00014718	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14718 <AesDecrypt_C+6288>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001471c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1471c <AesDecrypt_C+6292>:	and	r3, r3, #255	; 0xff
0x00014720	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14720 <AesDecrypt_C+6296>:	ldr	r1, [pc, #-2176]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014724	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14724 <AesDecrypt_C+6300>:	add	r3, r3, #768	; 0x300
0x00014728	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14728 <AesDecrypt_C+6304>:	ldr	r3, [r1, r3, lsl #2]
0x0001472c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1472c <AesDecrypt_C+6308>:	eor	r2, r2, r3
0x00014730	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14730 <AesDecrypt_C+6312>:	ldr	r3, [r11, #-12]
0x00014734	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14734 <AesDecrypt_C+6316>:	add	r3, r3, #204	; 0xcc
0x00014738	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14738 <AesDecrypt_C+6320>:	ldr	r3, [r3]
0x0001473c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1473c <AesDecrypt_C+6324>:	eor	r3, r3, r2
0x00014740	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14740 <AesDecrypt_C+6328>:	str	r3, [r11, #-32]	; 0xffffffe0
3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14744 <AesDecrypt_C+6332>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00014748	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14748 <AesDecrypt_C+6336>:	lsr	r3, r3, #24
0x0001474c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1474c <AesDecrypt_C+6340>:	and	r3, r3, #255	; 0xff
0x00014750	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14750 <AesDecrypt_C+6344>:	mov	r2, r3
0x00014754	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14754 <AesDecrypt_C+6348>:	ldr	r3, [pc, #-2228]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014758	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14758 <AesDecrypt_C+6352>:	ldr	r2, [r3, r2, lsl #2]
0x0001475c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1475c <AesDecrypt_C+6356>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00014760	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14760 <AesDecrypt_C+6360>:	lsr	r3, r3, #16
0x00014764	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14764 <AesDecrypt_C+6364>:	and	r3, r3, #255	; 0xff
0x00014768	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14768 <AesDecrypt_C+6368>:	ldr	r1, [pc, #-2248]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001476c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1476c <AesDecrypt_C+6372>:	add	r3, r3, #256	; 0x100
0x00014770	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14770 <AesDecrypt_C+6376>:	ldr	r3, [r1, r3, lsl #2]
0x00014774	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14774 <AesDecrypt_C+6380>:	eor	r2, r2, r3
0x00014778	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14778 <AesDecrypt_C+6384>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x0001477c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1477c <AesDecrypt_C+6388>:	lsr	r3, r3, #8
0x00014780	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14780 <AesDecrypt_C+6392>:	and	r3, r3, #255	; 0xff
0x00014784	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14784 <AesDecrypt_C+6396>:	ldr	r1, [pc, #-2276]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014788	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14788 <AesDecrypt_C+6400>:	add	r3, r3, #512	; 0x200
0x0001478c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1478c <AesDecrypt_C+6404>:	ldr	r3, [r1, r3, lsl #2]
0x00014790	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14790 <AesDecrypt_C+6408>:	eor	r2, r2, r3
0x00014794	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14794 <AesDecrypt_C+6412>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00014798	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14798 <AesDecrypt_C+6416>:	and	r3, r3, #255	; 0xff
0x0001479c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1479c <AesDecrypt_C+6420>:	ldr	r1, [pc, #-2300]	; 0x13ea8 <AesDecrypt_C+4128>
0x000147a0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147a0 <AesDecrypt_C+6424>:	add	r3, r3, #768	; 0x300
0x000147a4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147a4 <AesDecrypt_C+6428>:	ldr	r3, [r1, r3, lsl #2]
0x000147a8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147a8 <AesDecrypt_C+6432>:	eor	r2, r2, r3
0x000147ac	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147ac <AesDecrypt_C+6436>:	ldr	r3, [r11, #-12]
0x000147b0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147b0 <AesDecrypt_C+6440>:	add	r3, r3, #208	; 0xd0
0x000147b4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147b4 <AesDecrypt_C+6444>:	ldr	r3, [r3]
0x000147b8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147b8 <AesDecrypt_C+6448>:	eor	r3, r3, r2
0x000147bc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147bc <AesDecrypt_C+6452>:	str	r3, [r11, #-28]	; 0xffffffe4
0x000147c0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147c0 <AesDecrypt_C+6456>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000147c4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147c4 <AesDecrypt_C+6460>:	lsr	r3, r3, #24
0x000147c8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147c8 <AesDecrypt_C+6464>:	and	r3, r3, #255	; 0xff
0x000147cc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147cc <AesDecrypt_C+6468>:	mov	r2, r3
0x000147d0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147d0 <AesDecrypt_C+6472>:	ldr	r3, [pc, #-2352]	; 0x13ea8 <AesDecrypt_C+4128>
0x000147d4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147d4 <AesDecrypt_C+6476>:	ldr	r2, [r3, r2, lsl #2]
0x000147d8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147d8 <AesDecrypt_C+6480>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x000147dc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147dc <AesDecrypt_C+6484>:	lsr	r3, r3, #16
0x000147e0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147e0 <AesDecrypt_C+6488>:	and	r3, r3, #255	; 0xff
0x000147e4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147e4 <AesDecrypt_C+6492>:	ldr	r1, [pc, #-2372]	; 0x13ea8 <AesDecrypt_C+4128>
0x000147e8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147e8 <AesDecrypt_C+6496>:	add	r3, r3, #256	; 0x100
0x000147ec	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147ec <AesDecrypt_C+6500>:	ldr	r3, [r1, r3, lsl #2]
0x000147f0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147f0 <AesDecrypt_C+6504>:	eor	r2, r2, r3
0x000147f4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147f4 <AesDecrypt_C+6508>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000147f8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147f8 <AesDecrypt_C+6512>:	lsr	r3, r3, #8
0x000147fc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x147fc <AesDecrypt_C+6516>:	and	r3, r3, #255	; 0xff
0x00014800	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14800 <AesDecrypt_C+6520>:	ldr	r1, [pc, #-2400]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014804	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14804 <AesDecrypt_C+6524>:	add	r3, r3, #512	; 0x200
0x00014808	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14808 <AesDecrypt_C+6528>:	ldr	r3, [r1, r3, lsl #2]
0x0001480c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1480c <AesDecrypt_C+6532>:	eor	r2, r2, r3
0x00014810	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14810 <AesDecrypt_C+6536>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00014814	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14814 <AesDecrypt_C+6540>:	and	r3, r3, #255	; 0xff
0x00014818	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14818 <AesDecrypt_C+6544>:	ldr	r1, [pc, #-2424]	; 0x13ea8 <AesDecrypt_C+4128>
0x0001481c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1481c <AesDecrypt_C+6548>:	add	r3, r3, #768	; 0x300
0x00014820	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14820 <AesDecrypt_C+6552>:	ldr	r3, [r1, r3, lsl #2]
0x00014824	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14824 <AesDecrypt_C+6556>:	eor	r2, r2, r3
0x00014828	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14828 <AesDecrypt_C+6560>:	ldr	r3, [r11, #-12]
0x0001482c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1482c <AesDecrypt_C+6564>:	add	r3, r3, #212	; 0xd4
0x00014830	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14830 <AesDecrypt_C+6568>:	ldr	r3, [r3]
0x00014834	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14834 <AesDecrypt_C+6572>:	eor	r3, r3, r2
0x00014838	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14838 <AesDecrypt_C+6576>:	str	r3, [r11, #-24]	; 0xffffffe8
0x0001483c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1483c <AesDecrypt_C+6580>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00014840	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14840 <AesDecrypt_C+6584>:	lsr	r3, r3, #24
0x00014844	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14844 <AesDecrypt_C+6588>:	and	r3, r3, #255	; 0xff
0x00014848	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14848 <AesDecrypt_C+6592>:	mov	r2, r3
0x0001484c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1484c <AesDecrypt_C+6596>:	ldr	r3, [pc, #-2476]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014850	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14850 <AesDecrypt_C+6600>:	ldr	r2, [r3, r2, lsl #2]
0x00014854	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14854 <AesDecrypt_C+6604>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00014858	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14858 <AesDecrypt_C+6608>:	lsr	r3, r3, #16
0x0001485c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1485c <AesDecrypt_C+6612>:	and	r3, r3, #255	; 0xff
0x00014860	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14860 <AesDecrypt_C+6616>:	ldr	r1, [pc, #-2496]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014864	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14864 <AesDecrypt_C+6620>:	add	r3, r3, #256	; 0x100
0x00014868	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14868 <AesDecrypt_C+6624>:	ldr	r3, [r1, r3, lsl #2]
0x0001486c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1486c <AesDecrypt_C+6628>:	eor	r2, r2, r3
0x00014870	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14870 <AesDecrypt_C+6632>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00014874	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14874 <AesDecrypt_C+6636>:	lsr	r3, r3, #8
0x00014878	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14878 <AesDecrypt_C+6640>:	and	r3, r3, #255	; 0xff
0x0001487c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1487c <AesDecrypt_C+6644>:	ldr	r1, [pc, #-2524]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014880	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14880 <AesDecrypt_C+6648>:	add	r3, r3, #512	; 0x200
0x00014884	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14884 <AesDecrypt_C+6652>:	ldr	r3, [r1, r3, lsl #2]
0x00014888	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14888 <AesDecrypt_C+6656>:	eor	r2, r2, r3
0x0001488c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1488c <AesDecrypt_C+6660>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00014890	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14890 <AesDecrypt_C+6664>:	and	r3, r3, #255	; 0xff
0x00014894	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14894 <AesDecrypt_C+6668>:	ldr	r1, [pc, #-2548]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014898	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14898 <AesDecrypt_C+6672>:	add	r3, r3, #768	; 0x300
0x0001489c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1489c <AesDecrypt_C+6676>:	ldr	r3, [r1, r3, lsl #2]
0x000148a0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148a0 <AesDecrypt_C+6680>:	eor	r2, r2, r3
0x000148a4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148a4 <AesDecrypt_C+6684>:	ldr	r3, [r11, #-12]
0x000148a8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148a8 <AesDecrypt_C+6688>:	add	r3, r3, #216	; 0xd8
0x000148ac	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148ac <AesDecrypt_C+6692>:	ldr	r3, [r3]
0x000148b0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148b0 <AesDecrypt_C+6696>:	eor	r3, r3, r2
0x000148b4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148b4 <AesDecrypt_C+6700>:	str	r3, [r11, #-20]	; 0xffffffec
0x000148b8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148b8 <AesDecrypt_C+6704>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x000148bc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148bc <AesDecrypt_C+6708>:	lsr	r3, r3, #24
0x000148c0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148c0 <AesDecrypt_C+6712>:	and	r3, r3, #255	; 0xff
0x000148c4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148c4 <AesDecrypt_C+6716>:	mov	r2, r3
0x000148c8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148c8 <AesDecrypt_C+6720>:	ldr	r3, [pc, #-2600]	; 0x13ea8 <AesDecrypt_C+4128>
0x000148cc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148cc <AesDecrypt_C+6724>:	ldr	r2, [r3, r2, lsl #2]
0x000148d0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148d0 <AesDecrypt_C+6728>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x000148d4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148d4 <AesDecrypt_C+6732>:	lsr	r3, r3, #16
0x000148d8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148d8 <AesDecrypt_C+6736>:	and	r3, r3, #255	; 0xff
0x000148dc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148dc <AesDecrypt_C+6740>:	ldr	r1, [pc, #-2620]	; 0x13ea8 <AesDecrypt_C+4128>
0x000148e0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148e0 <AesDecrypt_C+6744>:	add	r3, r3, #256	; 0x100
0x000148e4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148e4 <AesDecrypt_C+6748>:	ldr	r3, [r1, r3, lsl #2]
0x000148e8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148e8 <AesDecrypt_C+6752>:	eor	r2, r2, r3
0x000148ec	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148ec <AesDecrypt_C+6756>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x000148f0	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148f0 <AesDecrypt_C+6760>:	lsr	r3, r3, #8
0x000148f4	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148f4 <AesDecrypt_C+6764>:	and	r3, r3, #255	; 0xff
0x000148f8	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148f8 <AesDecrypt_C+6768>:	ldr	r1, [pc, #-2648]	; 0x13ea8 <AesDecrypt_C+4128>
0x000148fc	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x148fc <AesDecrypt_C+6772>:	add	r3, r3, #512	; 0x200
0x00014900	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14900 <AesDecrypt_C+6776>:	ldr	r3, [r1, r3, lsl #2]
0x00014904	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14904 <AesDecrypt_C+6780>:	eor	r2, r2, r3
0x00014908	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14908 <AesDecrypt_C+6784>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x0001490c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1490c <AesDecrypt_C+6788>:	and	r3, r3, #255	; 0xff
0x00014910	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14910 <AesDecrypt_C+6792>:	ldr	r1, [pc, #-2672]	; 0x13ea8 <AesDecrypt_C+4128>
0x00014914	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14914 <AesDecrypt_C+6796>:	add	r3, r3, #768	; 0x300
0x00014918	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14918 <AesDecrypt_C+6800>:	ldr	r3, [r1, r3, lsl #2]
0x0001491c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1491c <AesDecrypt_C+6804>:	eor	r2, r2, r3
0x00014920	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14920 <AesDecrypt_C+6808>:	ldr	r3, [r11, #-12]
0x00014924	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14924 <AesDecrypt_C+6812>:	add	r3, r3, #220	; 0xdc
0x00014928	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14928 <AesDecrypt_C+6816>:	ldr	r3, [r3]
0x0001492c	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x1492c <AesDecrypt_C+6820>:	eor	r3, r3, r2
0x00014930	3021	            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
=> 0x14930 <AesDecrypt_C+6824>:	str	r3, [r11, #-16]
3024	    rk += r * 8;
=> 0x14934 <AesDecrypt_C+6828>:	ldr	r3, [r11, #-60]	; 0xffffffc4
0x00014938	3024	    rk += r * 8;
=> 0x14938 <AesDecrypt_C+6832>:	lsl	r3, r3, #5
0x0001493c	3024	    rk += r * 8;
=> 0x1493c <AesDecrypt_C+6836>:	ldr	r2, [r11, #-12]
0x00014940	3024	    rk += r * 8;
=> 0x14940 <AesDecrypt_C+6840>:	add	r3, r2, r3
0x00014944	3024	    rk += r * 8;
=> 0x14944 <AesDecrypt_C+6844>:	str	r3, [r11, #-12]
3048	    t0 |= PreFetchTd4();
=> 0x14948 <AesDecrypt_C+6848>:	bl	0x12e18 <PreFetchTd4>
PreFetchTd4 () at wolfcrypt/src/aes.c:2907
2907	{
=> 0x12e18 <PreFetchTd4>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00012e1c	2907	{
=> 0x12e1c <PreFetchTd4+4>:	add	r11, sp, #0
0x00012e20	2907	{
=> 0x12e20 <PreFetchTd4+8>:	sub	sp, sp, #12
2909	    word32 x = 0;
=> 0x12e24 <PreFetchTd4+12>:	mov	r3, #0
0x00012e28	2909	    word32 x = 0;
=> 0x12e28 <PreFetchTd4+16>:	str	r3, [r11, #-12]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e2c <PreFetchTd4+20>:	mov	r3, #0
0x00012e30	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e30 <PreFetchTd4+24>:	str	r3, [r11, #-8]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e34 <PreFetchTd4+28>:	b	0x12e64 <PreFetchTd4+76>
0x00012e64	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e64 <PreFetchTd4+76>:	ldr	r3, [r11, #-8]
0x00012e68	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e68 <PreFetchTd4+80>:	cmp	r3, #255	; 0xff
0x00012e6c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e6c <PreFetchTd4+84>:	ble	0x12e38 <PreFetchTd4+32>
2913	        x &= (word32)Td4[i];
=> 0x12e38 <PreFetchTd4+32>:	ldr	r2, [pc, #68]	; 0x12e84 <PreFetchTd4+108>
0x00012e3c	2913	        x &= (word32)Td4[i];
=> 0x12e3c <PreFetchTd4+36>:	ldr	r3, [r11, #-8]
0x00012e40	2913	        x &= (word32)Td4[i];
=> 0x12e40 <PreFetchTd4+40>:	add	r3, r2, r3
0x00012e44	2913	        x &= (word32)Td4[i];
=> 0x12e44 <PreFetchTd4+44>:	ldrb	r3, [r3]
0x00012e48	2913	        x &= (word32)Td4[i];
=> 0x12e48 <PreFetchTd4+48>:	mov	r2, r3
0x00012e4c	2913	        x &= (word32)Td4[i];
=> 0x12e4c <PreFetchTd4+52>:	ldr	r3, [r11, #-12]
0x00012e50	2913	        x &= (word32)Td4[i];
=> 0x12e50 <PreFetchTd4+56>:	and	r3, r3, r2
0x00012e54	2913	        x &= (word32)Td4[i];
=> 0x12e54 <PreFetchTd4+60>:	str	r3, [r11, #-12]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e58 <PreFetchTd4+64>:	ldr	r3, [r11, #-8]
0x00012e5c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e5c <PreFetchTd4+68>:	add	r3, r3, #32
0x00012e60	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e60 <PreFetchTd4+72>:	str	r3, [r11, #-8]
0x00012e64	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e64 <PreFetchTd4+76>:	ldr	r3, [r11, #-8]
0x00012e68	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e68 <PreFetchTd4+80>:	cmp	r3, #255	; 0xff
0x00012e6c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e6c <PreFetchTd4+84>:	ble	0x12e38 <PreFetchTd4+32>
2913	        x &= (word32)Td4[i];
=> 0x12e38 <PreFetchTd4+32>:	ldr	r2, [pc, #68]	; 0x12e84 <PreFetchTd4+108>
0x00012e3c	2913	        x &= (word32)Td4[i];
=> 0x12e3c <PreFetchTd4+36>:	ldr	r3, [r11, #-8]
0x00012e40	2913	        x &= (word32)Td4[i];
=> 0x12e40 <PreFetchTd4+40>:	add	r3, r2, r3
0x00012e44	2913	        x &= (word32)Td4[i];
=> 0x12e44 <PreFetchTd4+44>:	ldrb	r3, [r3]
0x00012e48	2913	        x &= (word32)Td4[i];
=> 0x12e48 <PreFetchTd4+48>:	mov	r2, r3
0x00012e4c	2913	        x &= (word32)Td4[i];
=> 0x12e4c <PreFetchTd4+52>:	ldr	r3, [r11, #-12]
0x00012e50	2913	        x &= (word32)Td4[i];
=> 0x12e50 <PreFetchTd4+56>:	and	r3, r3, r2
0x00012e54	2913	        x &= (word32)Td4[i];
=> 0x12e54 <PreFetchTd4+60>:	str	r3, [r11, #-12]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e58 <PreFetchTd4+64>:	ldr	r3, [r11, #-8]
0x00012e5c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e5c <PreFetchTd4+68>:	add	r3, r3, #32
0x00012e60	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e60 <PreFetchTd4+72>:	str	r3, [r11, #-8]
0x00012e64	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e64 <PreFetchTd4+76>:	ldr	r3, [r11, #-8]
0x00012e68	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e68 <PreFetchTd4+80>:	cmp	r3, #255	; 0xff
0x00012e6c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e6c <PreFetchTd4+84>:	ble	0x12e38 <PreFetchTd4+32>
2913	        x &= (word32)Td4[i];
=> 0x12e38 <PreFetchTd4+32>:	ldr	r2, [pc, #68]	; 0x12e84 <PreFetchTd4+108>
0x00012e3c	2913	        x &= (word32)Td4[i];
=> 0x12e3c <PreFetchTd4+36>:	ldr	r3, [r11, #-8]
0x00012e40	2913	        x &= (word32)Td4[i];
=> 0x12e40 <PreFetchTd4+40>:	add	r3, r2, r3
0x00012e44	2913	        x &= (word32)Td4[i];
=> 0x12e44 <PreFetchTd4+44>:	ldrb	r3, [r3]
0x00012e48	2913	        x &= (word32)Td4[i];
=> 0x12e48 <PreFetchTd4+48>:	mov	r2, r3
0x00012e4c	2913	        x &= (word32)Td4[i];
=> 0x12e4c <PreFetchTd4+52>:	ldr	r3, [r11, #-12]
0x00012e50	2913	        x &= (word32)Td4[i];
=> 0x12e50 <PreFetchTd4+56>:	and	r3, r3, r2
0x00012e54	2913	        x &= (word32)Td4[i];
=> 0x12e54 <PreFetchTd4+60>:	str	r3, [r11, #-12]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e58 <PreFetchTd4+64>:	ldr	r3, [r11, #-8]
0x00012e5c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e5c <PreFetchTd4+68>:	add	r3, r3, #32
0x00012e60	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e60 <PreFetchTd4+72>:	str	r3, [r11, #-8]
0x00012e64	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e64 <PreFetchTd4+76>:	ldr	r3, [r11, #-8]
0x00012e68	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e68 <PreFetchTd4+80>:	cmp	r3, #255	; 0xff
0x00012e6c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e6c <PreFetchTd4+84>:	ble	0x12e38 <PreFetchTd4+32>
2913	        x &= (word32)Td4[i];
=> 0x12e38 <PreFetchTd4+32>:	ldr	r2, [pc, #68]	; 0x12e84 <PreFetchTd4+108>
0x00012e3c	2913	        x &= (word32)Td4[i];
=> 0x12e3c <PreFetchTd4+36>:	ldr	r3, [r11, #-8]
0x00012e40	2913	        x &= (word32)Td4[i];
=> 0x12e40 <PreFetchTd4+40>:	add	r3, r2, r3
0x00012e44	2913	        x &= (word32)Td4[i];
=> 0x12e44 <PreFetchTd4+44>:	ldrb	r3, [r3]
0x00012e48	2913	        x &= (word32)Td4[i];
=> 0x12e48 <PreFetchTd4+48>:	mov	r2, r3
0x00012e4c	2913	        x &= (word32)Td4[i];
=> 0x12e4c <PreFetchTd4+52>:	ldr	r3, [r11, #-12]
0x00012e50	2913	        x &= (word32)Td4[i];
=> 0x12e50 <PreFetchTd4+56>:	and	r3, r3, r2
0x00012e54	2913	        x &= (word32)Td4[i];
=> 0x12e54 <PreFetchTd4+60>:	str	r3, [r11, #-12]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e58 <PreFetchTd4+64>:	ldr	r3, [r11, #-8]
0x00012e5c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e5c <PreFetchTd4+68>:	add	r3, r3, #32
0x00012e60	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e60 <PreFetchTd4+72>:	str	r3, [r11, #-8]
0x00012e64	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e64 <PreFetchTd4+76>:	ldr	r3, [r11, #-8]
0x00012e68	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e68 <PreFetchTd4+80>:	cmp	r3, #255	; 0xff
0x00012e6c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e6c <PreFetchTd4+84>:	ble	0x12e38 <PreFetchTd4+32>
2913	        x &= (word32)Td4[i];
=> 0x12e38 <PreFetchTd4+32>:	ldr	r2, [pc, #68]	; 0x12e84 <PreFetchTd4+108>
0x00012e3c	2913	        x &= (word32)Td4[i];
=> 0x12e3c <PreFetchTd4+36>:	ldr	r3, [r11, #-8]
0x00012e40	2913	        x &= (word32)Td4[i];
=> 0x12e40 <PreFetchTd4+40>:	add	r3, r2, r3
0x00012e44	2913	        x &= (word32)Td4[i];
=> 0x12e44 <PreFetchTd4+44>:	ldrb	r3, [r3]
0x00012e48	2913	        x &= (word32)Td4[i];
=> 0x12e48 <PreFetchTd4+48>:	mov	r2, r3
0x00012e4c	2913	        x &= (word32)Td4[i];
=> 0x12e4c <PreFetchTd4+52>:	ldr	r3, [r11, #-12]
0x00012e50	2913	        x &= (word32)Td4[i];
=> 0x12e50 <PreFetchTd4+56>:	and	r3, r3, r2
0x00012e54	2913	        x &= (word32)Td4[i];
=> 0x12e54 <PreFetchTd4+60>:	str	r3, [r11, #-12]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e58 <PreFetchTd4+64>:	ldr	r3, [r11, #-8]
0x00012e5c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e5c <PreFetchTd4+68>:	add	r3, r3, #32
0x00012e60	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e60 <PreFetchTd4+72>:	str	r3, [r11, #-8]
0x00012e64	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e64 <PreFetchTd4+76>:	ldr	r3, [r11, #-8]
0x00012e68	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e68 <PreFetchTd4+80>:	cmp	r3, #255	; 0xff
0x00012e6c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e6c <PreFetchTd4+84>:	ble	0x12e38 <PreFetchTd4+32>
2913	        x &= (word32)Td4[i];
=> 0x12e38 <PreFetchTd4+32>:	ldr	r2, [pc, #68]	; 0x12e84 <PreFetchTd4+108>
0x00012e3c	2913	        x &= (word32)Td4[i];
=> 0x12e3c <PreFetchTd4+36>:	ldr	r3, [r11, #-8]
0x00012e40	2913	        x &= (word32)Td4[i];
=> 0x12e40 <PreFetchTd4+40>:	add	r3, r2, r3
0x00012e44	2913	        x &= (word32)Td4[i];
=> 0x12e44 <PreFetchTd4+44>:	ldrb	r3, [r3]
0x00012e48	2913	        x &= (word32)Td4[i];
=> 0x12e48 <PreFetchTd4+48>:	mov	r2, r3
0x00012e4c	2913	        x &= (word32)Td4[i];
=> 0x12e4c <PreFetchTd4+52>:	ldr	r3, [r11, #-12]
0x00012e50	2913	        x &= (word32)Td4[i];
=> 0x12e50 <PreFetchTd4+56>:	and	r3, r3, r2
0x00012e54	2913	        x &= (word32)Td4[i];
=> 0x12e54 <PreFetchTd4+60>:	str	r3, [r11, #-12]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e58 <PreFetchTd4+64>:	ldr	r3, [r11, #-8]
0x00012e5c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e5c <PreFetchTd4+68>:	add	r3, r3, #32
0x00012e60	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e60 <PreFetchTd4+72>:	str	r3, [r11, #-8]
0x00012e64	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e64 <PreFetchTd4+76>:	ldr	r3, [r11, #-8]
0x00012e68	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e68 <PreFetchTd4+80>:	cmp	r3, #255	; 0xff
0x00012e6c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e6c <PreFetchTd4+84>:	ble	0x12e38 <PreFetchTd4+32>
2913	        x &= (word32)Td4[i];
=> 0x12e38 <PreFetchTd4+32>:	ldr	r2, [pc, #68]	; 0x12e84 <PreFetchTd4+108>
0x00012e3c	2913	        x &= (word32)Td4[i];
=> 0x12e3c <PreFetchTd4+36>:	ldr	r3, [r11, #-8]
0x00012e40	2913	        x &= (word32)Td4[i];
=> 0x12e40 <PreFetchTd4+40>:	add	r3, r2, r3
0x00012e44	2913	        x &= (word32)Td4[i];
=> 0x12e44 <PreFetchTd4+44>:	ldrb	r3, [r3]
0x00012e48	2913	        x &= (word32)Td4[i];
=> 0x12e48 <PreFetchTd4+48>:	mov	r2, r3
0x00012e4c	2913	        x &= (word32)Td4[i];
=> 0x12e4c <PreFetchTd4+52>:	ldr	r3, [r11, #-12]
0x00012e50	2913	        x &= (word32)Td4[i];
=> 0x12e50 <PreFetchTd4+56>:	and	r3, r3, r2
0x00012e54	2913	        x &= (word32)Td4[i];
=> 0x12e54 <PreFetchTd4+60>:	str	r3, [r11, #-12]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e58 <PreFetchTd4+64>:	ldr	r3, [r11, #-8]
0x00012e5c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e5c <PreFetchTd4+68>:	add	r3, r3, #32
0x00012e60	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e60 <PreFetchTd4+72>:	str	r3, [r11, #-8]
0x00012e64	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e64 <PreFetchTd4+76>:	ldr	r3, [r11, #-8]
0x00012e68	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e68 <PreFetchTd4+80>:	cmp	r3, #255	; 0xff
0x00012e6c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e6c <PreFetchTd4+84>:	ble	0x12e38 <PreFetchTd4+32>
2913	        x &= (word32)Td4[i];
=> 0x12e38 <PreFetchTd4+32>:	ldr	r2, [pc, #68]	; 0x12e84 <PreFetchTd4+108>
0x00012e3c	2913	        x &= (word32)Td4[i];
=> 0x12e3c <PreFetchTd4+36>:	ldr	r3, [r11, #-8]
0x00012e40	2913	        x &= (word32)Td4[i];
=> 0x12e40 <PreFetchTd4+40>:	add	r3, r2, r3
0x00012e44	2913	        x &= (word32)Td4[i];
=> 0x12e44 <PreFetchTd4+44>:	ldrb	r3, [r3]
0x00012e48	2913	        x &= (word32)Td4[i];
=> 0x12e48 <PreFetchTd4+48>:	mov	r2, r3
0x00012e4c	2913	        x &= (word32)Td4[i];
=> 0x12e4c <PreFetchTd4+52>:	ldr	r3, [r11, #-12]
0x00012e50	2913	        x &= (word32)Td4[i];
=> 0x12e50 <PreFetchTd4+56>:	and	r3, r3, r2
0x00012e54	2913	        x &= (word32)Td4[i];
=> 0x12e54 <PreFetchTd4+60>:	str	r3, [r11, #-12]
2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e58 <PreFetchTd4+64>:	ldr	r3, [r11, #-8]
0x00012e5c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e5c <PreFetchTd4+68>:	add	r3, r3, #32
0x00012e60	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e60 <PreFetchTd4+72>:	str	r3, [r11, #-8]
0x00012e64	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e64 <PreFetchTd4+76>:	ldr	r3, [r11, #-8]
0x00012e68	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e68 <PreFetchTd4+80>:	cmp	r3, #255	; 0xff
0x00012e6c	2912	    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
=> 0x12e6c <PreFetchTd4+84>:	ble	0x12e38 <PreFetchTd4+32>
2915	    return x;
=> 0x12e70 <PreFetchTd4+88>:	ldr	r3, [r11, #-12]
2919	}
=> 0x12e74 <PreFetchTd4+92>:	mov	r0, r3
0x00012e78	2919	}
=> 0x12e78 <PreFetchTd4+96>:	add	sp, r11, #0
0x00012e7c	2919	}
=> 0x12e7c <PreFetchTd4+100>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00012e80	2919	}
=> 0x12e80 <PreFetchTd4+104>:	bx	lr
0x0001494c in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:3048
3048	    t0 |= PreFetchTd4();
=> 0x1494c <AesDecrypt_C+6852>:	mov	r2, r0
3048	    t0 |= PreFetchTd4();
=> 0x14950 <AesDecrypt_C+6856>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00014954	3048	    t0 |= PreFetchTd4();
=> 0x14954 <AesDecrypt_C+6860>:	orr	r3, r3, r2
0x00014958	3048	    t0 |= PreFetchTd4();
=> 0x14958 <AesDecrypt_C+6864>:	str	r3, [r11, #-28]	; 0xffffffe4
3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x1495c <AesDecrypt_C+6868>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00014960	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14960 <AesDecrypt_C+6872>:	lsr	r3, r3, #24
0x00014964	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14964 <AesDecrypt_C+6876>:	and	r3, r3, #255	; 0xff
0x00014968	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14968 <AesDecrypt_C+6880>:	mov	r2, r3
0x0001496c	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x1496c <AesDecrypt_C+6884>:	ldr	r3, [pc, #-2760]	; 0x13eac <AesDecrypt_C+4132>
0x00014970	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14970 <AesDecrypt_C+6888>:	ldrb	r3, [r3, r2]
0x00014974	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14974 <AesDecrypt_C+6892>:	lsl	r2, r3, #24
0x00014978	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14978 <AesDecrypt_C+6896>:	ldr	r3, [r11, #-16]
0x0001497c	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x1497c <AesDecrypt_C+6900>:	lsr	r3, r3, #16
0x00014980	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14980 <AesDecrypt_C+6904>:	and	r3, r3, #255	; 0xff
0x00014984	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14984 <AesDecrypt_C+6908>:	mov	r1, r3
0x00014988	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14988 <AesDecrypt_C+6912>:	ldr	r3, [pc, #-2788]	; 0x13eac <AesDecrypt_C+4132>
0x0001498c	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x1498c <AesDecrypt_C+6916>:	ldrb	r3, [r3, r1]
0x00014990	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14990 <AesDecrypt_C+6920>:	lsl	r3, r3, #16
0x00014994	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14994 <AesDecrypt_C+6924>:	orr	r2, r2, r3
0x00014998	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x14998 <AesDecrypt_C+6928>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x0001499c	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x1499c <AesDecrypt_C+6932>:	lsr	r3, r3, #8
0x000149a0	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149a0 <AesDecrypt_C+6936>:	and	r3, r3, #255	; 0xff
0x000149a4	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149a4 <AesDecrypt_C+6940>:	mov	r1, r3
0x000149a8	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149a8 <AesDecrypt_C+6944>:	ldr	r3, [pc, #-2820]	; 0x13eac <AesDecrypt_C+4132>
0x000149ac	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149ac <AesDecrypt_C+6948>:	ldrb	r3, [r3, r1]
0x000149b0	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149b0 <AesDecrypt_C+6952>:	lsl	r3, r3, #8
0x000149b4	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149b4 <AesDecrypt_C+6956>:	orr	r3, r2, r3
0x000149b8	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149b8 <AesDecrypt_C+6960>:	ldr	r2, [r11, #-24]	; 0xffffffe8
0x000149bc	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149bc <AesDecrypt_C+6964>:	and	r2, r2, #255	; 0xff
0x000149c0	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149c0 <AesDecrypt_C+6968>:	mov	r1, r2
0x000149c4	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149c4 <AesDecrypt_C+6972>:	ldr	r2, [pc, #-2848]	; 0x13eac <AesDecrypt_C+4132>
0x000149c8	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149c8 <AesDecrypt_C+6976>:	ldrb	r2, [r2, r1]
0x000149cc	3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149cc <AesDecrypt_C+6980>:	orr	r2, r3, r2
3052	                          GETBYTE(t2, 1), GETBYTE(t1, 0)) ^ rk[0];
=> 0x149d0 <AesDecrypt_C+6984>:	ldr	r3, [r11, #-12]
0x000149d4	3052	                          GETBYTE(t2, 1), GETBYTE(t1, 0)) ^ rk[0];
=> 0x149d4 <AesDecrypt_C+6988>:	ldr	r3, [r3]
3052	                          GETBYTE(t2, 1), GETBYTE(t1, 0)) ^ rk[0];
=> 0x149d8 <AesDecrypt_C+6992>:	eor	r3, r3, r2
3051	    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
=> 0x149dc <AesDecrypt_C+6996>:	str	r3, [r11, #-44]	; 0xffffffd4
3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x149e0 <AesDecrypt_C+7000>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x000149e4	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x149e4 <AesDecrypt_C+7004>:	lsr	r3, r3, #24
0x000149e8	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x149e8 <AesDecrypt_C+7008>:	and	r3, r3, #255	; 0xff
0x000149ec	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x149ec <AesDecrypt_C+7012>:	mov	r2, r3
0x000149f0	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x149f0 <AesDecrypt_C+7016>:	ldr	r3, [pc, #-2892]	; 0x13eac <AesDecrypt_C+4132>
0x000149f4	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x149f4 <AesDecrypt_C+7020>:	ldrb	r3, [r3, r2]
0x000149f8	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x149f8 <AesDecrypt_C+7024>:	lsl	r2, r3, #24
0x000149fc	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x149fc <AesDecrypt_C+7028>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00014a00	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a00 <AesDecrypt_C+7032>:	lsr	r3, r3, #16
0x00014a04	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a04 <AesDecrypt_C+7036>:	and	r3, r3, #255	; 0xff
0x00014a08	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a08 <AesDecrypt_C+7040>:	mov	r1, r3
0x00014a0c	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a0c <AesDecrypt_C+7044>:	ldr	r3, [pc, #-2920]	; 0x13eac <AesDecrypt_C+4132>
0x00014a10	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a10 <AesDecrypt_C+7048>:	ldrb	r3, [r3, r1]
0x00014a14	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a14 <AesDecrypt_C+7052>:	lsl	r3, r3, #16
0x00014a18	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a18 <AesDecrypt_C+7056>:	orr	r2, r2, r3
0x00014a1c	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a1c <AesDecrypt_C+7060>:	ldr	r3, [r11, #-16]
0x00014a20	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a20 <AesDecrypt_C+7064>:	lsr	r3, r3, #8
0x00014a24	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a24 <AesDecrypt_C+7068>:	and	r3, r3, #255	; 0xff
0x00014a28	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a28 <AesDecrypt_C+7072>:	mov	r1, r3
0x00014a2c	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a2c <AesDecrypt_C+7076>:	ldr	r3, [pc, #-2952]	; 0x13eac <AesDecrypt_C+4132>
0x00014a30	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a30 <AesDecrypt_C+7080>:	ldrb	r3, [r3, r1]
0x00014a34	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a34 <AesDecrypt_C+7084>:	lsl	r3, r3, #8
0x00014a38	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a38 <AesDecrypt_C+7088>:	orr	r3, r2, r3
0x00014a3c	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a3c <AesDecrypt_C+7092>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00014a40	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a40 <AesDecrypt_C+7096>:	and	r2, r2, #255	; 0xff
0x00014a44	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a44 <AesDecrypt_C+7100>:	mov	r1, r2
0x00014a48	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a48 <AesDecrypt_C+7104>:	ldr	r2, [pc, #-2980]	; 0x13eac <AesDecrypt_C+4132>
0x00014a4c	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a4c <AesDecrypt_C+7108>:	ldrb	r2, [r2, r1]
0x00014a50	3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a50 <AesDecrypt_C+7112>:	orr	r2, r3, r2
3054	                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
=> 0x14a54 <AesDecrypt_C+7116>:	ldr	r3, [r11, #-12]
0x00014a58	3054	                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
=> 0x14a58 <AesDecrypt_C+7120>:	add	r3, r3, #4
0x00014a5c	3054	                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
=> 0x14a5c <AesDecrypt_C+7124>:	ldr	r3, [r3]
3054	                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
=> 0x14a60 <AesDecrypt_C+7128>:	eor	r3, r3, r2
3053	    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
=> 0x14a64 <AesDecrypt_C+7132>:	str	r3, [r11, #-40]	; 0xffffffd8
3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a68 <AesDecrypt_C+7136>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00014a6c	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a6c <AesDecrypt_C+7140>:	lsr	r3, r3, #24
0x00014a70	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a70 <AesDecrypt_C+7144>:	and	r3, r3, #255	; 0xff
0x00014a74	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a74 <AesDecrypt_C+7148>:	mov	r2, r3
0x00014a78	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a78 <AesDecrypt_C+7152>:	ldr	r3, [pc, #-3028]	; 0x13eac <AesDecrypt_C+4132>
0x00014a7c	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a7c <AesDecrypt_C+7156>:	ldrb	r3, [r3, r2]
0x00014a80	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a80 <AesDecrypt_C+7160>:	lsl	r2, r3, #24
0x00014a84	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a84 <AesDecrypt_C+7164>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00014a88	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a88 <AesDecrypt_C+7168>:	lsr	r3, r3, #16
0x00014a8c	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a8c <AesDecrypt_C+7172>:	and	r3, r3, #255	; 0xff
0x00014a90	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a90 <AesDecrypt_C+7176>:	mov	r1, r3
0x00014a94	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a94 <AesDecrypt_C+7180>:	ldr	r3, [pc, #-3056]	; 0x13eac <AesDecrypt_C+4132>
0x00014a98	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a98 <AesDecrypt_C+7184>:	ldrb	r3, [r3, r1]
0x00014a9c	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14a9c <AesDecrypt_C+7188>:	lsl	r3, r3, #16
0x00014aa0	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14aa0 <AesDecrypt_C+7192>:	orr	r2, r2, r3
0x00014aa4	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14aa4 <AesDecrypt_C+7196>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00014aa8	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14aa8 <AesDecrypt_C+7200>:	lsr	r3, r3, #8
0x00014aac	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14aac <AesDecrypt_C+7204>:	and	r3, r3, #255	; 0xff
0x00014ab0	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14ab0 <AesDecrypt_C+7208>:	mov	r1, r3
0x00014ab4	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14ab4 <AesDecrypt_C+7212>:	ldr	r3, [pc, #-3088]	; 0x13eac <AesDecrypt_C+4132>
0x00014ab8	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14ab8 <AesDecrypt_C+7216>:	ldrb	r3, [r3, r1]
0x00014abc	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14abc <AesDecrypt_C+7220>:	lsl	r3, r3, #8
0x00014ac0	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14ac0 <AesDecrypt_C+7224>:	orr	r3, r2, r3
0x00014ac4	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14ac4 <AesDecrypt_C+7228>:	ldr	r2, [r11, #-16]
0x00014ac8	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14ac8 <AesDecrypt_C+7232>:	and	r2, r2, #255	; 0xff
0x00014acc	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14acc <AesDecrypt_C+7236>:	mov	r1, r2
0x00014ad0	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14ad0 <AesDecrypt_C+7240>:	ldr	r2, [pc, #-3116]	; 0x13eac <AesDecrypt_C+4132>
0x00014ad4	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14ad4 <AesDecrypt_C+7244>:	ldrb	r2, [r2, r1]
0x00014ad8	3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14ad8 <AesDecrypt_C+7248>:	orr	r2, r3, r2
3056	                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
=> 0x14adc <AesDecrypt_C+7252>:	ldr	r3, [r11, #-12]
0x00014ae0	3056	                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
=> 0x14ae0 <AesDecrypt_C+7256>:	add	r3, r3, #8
0x00014ae4	3056	                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
=> 0x14ae4 <AesDecrypt_C+7260>:	ldr	r3, [r3]
3056	                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
=> 0x14ae8 <AesDecrypt_C+7264>:	eor	r3, r3, r2
3055	    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
=> 0x14aec <AesDecrypt_C+7268>:	str	r3, [r11, #-36]	; 0xffffffdc
3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14af0 <AesDecrypt_C+7272>:	ldr	r3, [r11, #-16]
0x00014af4	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14af4 <AesDecrypt_C+7276>:	lsr	r3, r3, #24
0x00014af8	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14af8 <AesDecrypt_C+7280>:	and	r3, r3, #255	; 0xff
0x00014afc	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14afc <AesDecrypt_C+7284>:	mov	r2, r3
0x00014b00	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b00 <AesDecrypt_C+7288>:	ldr	r3, [pc, #-3164]	; 0x13eac <AesDecrypt_C+4132>
0x00014b04	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b04 <AesDecrypt_C+7292>:	ldrb	r3, [r3, r2]
0x00014b08	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b08 <AesDecrypt_C+7296>:	lsl	r2, r3, #24
0x00014b0c	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b0c <AesDecrypt_C+7300>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00014b10	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b10 <AesDecrypt_C+7304>:	lsr	r3, r3, #16
0x00014b14	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b14 <AesDecrypt_C+7308>:	and	r3, r3, #255	; 0xff
0x00014b18	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b18 <AesDecrypt_C+7312>:	mov	r1, r3
0x00014b1c	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b1c <AesDecrypt_C+7316>:	ldr	r3, [pc, #-3192]	; 0x13eac <AesDecrypt_C+4132>
0x00014b20	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b20 <AesDecrypt_C+7320>:	ldrb	r3, [r3, r1]
0x00014b24	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b24 <AesDecrypt_C+7324>:	lsl	r3, r3, #16
0x00014b28	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b28 <AesDecrypt_C+7328>:	orr	r2, r2, r3
0x00014b2c	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b2c <AesDecrypt_C+7332>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00014b30	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b30 <AesDecrypt_C+7336>:	lsr	r3, r3, #8
0x00014b34	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b34 <AesDecrypt_C+7340>:	and	r3, r3, #255	; 0xff
0x00014b38	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b38 <AesDecrypt_C+7344>:	mov	r1, r3
0x00014b3c	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b3c <AesDecrypt_C+7348>:	ldr	r3, [pc, #-3224]	; 0x13eac <AesDecrypt_C+4132>
0x00014b40	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b40 <AesDecrypt_C+7352>:	ldrb	r3, [r3, r1]
0x00014b44	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b44 <AesDecrypt_C+7356>:	lsl	r3, r3, #8
0x00014b48	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b48 <AesDecrypt_C+7360>:	orr	r3, r2, r3
0x00014b4c	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b4c <AesDecrypt_C+7364>:	ldr	r2, [r11, #-28]	; 0xffffffe4
0x00014b50	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b50 <AesDecrypt_C+7368>:	and	r2, r2, #255	; 0xff
0x00014b54	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b54 <AesDecrypt_C+7372>:	mov	r1, r2
0x00014b58	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b58 <AesDecrypt_C+7376>:	ldr	r2, [pc, #-3252]	; 0x13eac <AesDecrypt_C+4132>
0x00014b5c	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b5c <AesDecrypt_C+7380>:	ldrb	r2, [r2, r1]
0x00014b60	3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b60 <AesDecrypt_C+7384>:	orr	r2, r3, r2
3058	                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
=> 0x14b64 <AesDecrypt_C+7388>:	ldr	r3, [r11, #-12]
0x00014b68	3058	                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
=> 0x14b68 <AesDecrypt_C+7392>:	add	r3, r3, #12
0x00014b6c	3058	                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
=> 0x14b6c <AesDecrypt_C+7396>:	ldr	r3, [r3]
3058	                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
=> 0x14b70 <AesDecrypt_C+7400>:	eor	r3, r3, r2
3057	    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
=> 0x14b74 <AesDecrypt_C+7404>:	str	r3, [r11, #-32]	; 0xffffffe0
3141	    s0 = ByteReverseWord32(s0);
=> 0x14b78 <AesDecrypt_C+7408>:	ldr	r3, [r11, #-44]	; 0xffffffd4
0x00014b7c	3141	    s0 = ByteReverseWord32(s0);
=> 0x14b7c <AesDecrypt_C+7412>:	mov	r0, r3
0x00014b80	3141	    s0 = ByteReverseWord32(s0);
=> 0x14b80 <AesDecrypt_C+7416>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=256) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=275546312, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=979462001) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00014b84 in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:3141
3141	    s0 = ByteReverseWord32(s0);
=> 0x14b84 <AesDecrypt_C+7420>:	mov	r3, r0
3141	    s0 = ByteReverseWord32(s0);
=> 0x14b88 <AesDecrypt_C+7424>:	str	r3, [r11, #-44]	; 0xffffffd4
3142	    s1 = ByteReverseWord32(s1);
=> 0x14b8c <AesDecrypt_C+7428>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00014b90	3142	    s1 = ByteReverseWord32(s1);
=> 0x14b90 <AesDecrypt_C+7432>:	mov	r0, r3
0x00014b94	3142	    s1 = ByteReverseWord32(s1);
=> 0x14b94 <AesDecrypt_C+7436>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=979462001) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=979462001, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=1852334444) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00014b98 in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:3142
3142	    s1 = ByteReverseWord32(s1);
=> 0x14b98 <AesDecrypt_C+7440>:	mov	r3, r0
3142	    s1 = ByteReverseWord32(s1);
=> 0x14b9c <AesDecrypt_C+7444>:	str	r3, [r11, #-40]	; 0xffffffd8
3143	    s2 = ByteReverseWord32(s2);
=> 0x14ba0 <AesDecrypt_C+7448>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00014ba4	3143	    s2 = ByteReverseWord32(s2);
=> 0x14ba4 <AesDecrypt_C+7452>:	mov	r0, r3
0x00014ba8	3143	    s2 = ByteReverseWord32(s2);
=> 0x14ba8 <AesDecrypt_C+7456>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=1852334444) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=1852334444, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=1617770558) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00014bac in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:3143
3143	    s2 = ByteReverseWord32(s2);
=> 0x14bac <AesDecrypt_C+7460>:	mov	r3, r0
3143	    s2 = ByteReverseWord32(s2);
=> 0x14bb0 <AesDecrypt_C+7464>:	str	r3, [r11, #-36]	; 0xffffffdc
3144	    s3 = ByteReverseWord32(s3);
=> 0x14bb4 <AesDecrypt_C+7468>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00014bb8	3144	    s3 = ByteReverseWord32(s3);
=> 0x14bb8 <AesDecrypt_C+7472>:	mov	r0, r3
0x00014bbc	3144	    s3 = ByteReverseWord32(s3);
=> 0x14bbc <AesDecrypt_C+7476>:	bl	0x10798 <ByteReverseWord32>
ByteReverseWord32 (value=1617770558) at ./wolfcrypt/src/misc.c:140
140	{
=> 0x10798 <ByteReverseWord32>:	push	{r11, lr}
0x0001079c	140	{
=> 0x1079c <ByteReverseWord32+4>:	add	r11, sp, #4
0x000107a0	140	{
=> 0x107a0 <ByteReverseWord32+8>:	sub	sp, sp, #8
0x000107a4	140	{
=> 0x107a4 <ByteReverseWord32+12>:	str	r0, [r11, #-8]
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107a8 <ByteReverseWord32+16>:	ldr	r3, [r11, #-8]
0x000107ac	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107ac <ByteReverseWord32+20>:	lsr	r3, r3, #8
0x000107b0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b0 <ByteReverseWord32+24>:	bic	r2, r3, #-16777216	; 0xff000000
0x000107b4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b4 <ByteReverseWord32+28>:	bic	r2, r2, #65280	; 0xff00
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107b8 <ByteReverseWord32+32>:	ldr	r3, [r11, #-8]
0x000107bc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107bc <ByteReverseWord32+36>:	lsl	r3, r3, #8
0x000107c0	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c0 <ByteReverseWord32+40>:	bic	r3, r3, #16711680	; 0xff0000
0x000107c4	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c4 <ByteReverseWord32+44>:	bic	r3, r3, #255	; 0xff
175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107c8 <ByteReverseWord32+48>:	orr	r3, r2, r3
0x000107cc	175	    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
=> 0x107cc <ByteReverseWord32+52>:	str	r3, [r11, #-8]
176	    return rotlFixed(value, 16U);
=> 0x107d0 <ByteReverseWord32+56>:	mov	r1, #16
0x000107d4	176	    return rotlFixed(value, 16U);
=> 0x107d4 <ByteReverseWord32+60>:	ldr	r0, [r11, #-8]
0x000107d8	176	    return rotlFixed(value, 16U);
=> 0x107d8 <ByteReverseWord32+64>:	bl	0x10764 <rotlFixed>
rotlFixed (x=1617770558, y=16) at ./wolfcrypt/src/misc.c:106
106	    {
=> 0x10764 <rotlFixed>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010768	106	    {
=> 0x10768 <rotlFixed+4>:	add	r11, sp, #0
0x0001076c	106	    {
=> 0x1076c <rotlFixed+8>:	sub	sp, sp, #12
0x00010770	106	    {
=> 0x10770 <rotlFixed+12>:	str	r0, [r11, #-8]
0x00010774	106	    {
=> 0x10774 <rotlFixed+16>:	str	r1, [r11, #-12]
107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10778 <rotlFixed+20>:	ldr	r2, [r11, #-8]
0x0001077c	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x1077c <rotlFixed+24>:	ldr	r3, [r11, #-12]
0x00010780	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10780 <rotlFixed+28>:	rsb	r3, r3, #32
0x00010784	107	        return (x << y) | (x >> (sizeof(x) * 8 - y));
=> 0x10784 <rotlFixed+32>:	ror	r3, r2, r3
108	    }
=> 0x10788 <rotlFixed+36>:	mov	r0, r3
0x0001078c	108	    }
=> 0x1078c <rotlFixed+40>:	add	sp, r11, #0
0x00010790	108	    }
=> 0x10790 <rotlFixed+44>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010794	108	    }
=> 0x10794 <rotlFixed+48>:	bx	lr
0x000107dc in ByteReverseWord32 (value=959982670) at ./wolfcrypt/src/misc.c:176
176	    return rotlFixed(value, 16U);
=> 0x107dc <ByteReverseWord32+68>:	mov	r3, r0
178	}
=> 0x107e0 <ByteReverseWord32+72>:	mov	r0, r3
0x000107e4	178	}
=> 0x107e4 <ByteReverseWord32+76>:	sub	sp, r11, #4
0x000107e8	178	}
=> 0x107e8 <ByteReverseWord32+80>:	pop	{r11, pc}
0x00014bc0 in AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020l", outBlock=0x40800184 "", r=7) at wolfcrypt/src/aes.c:3144
3144	    s3 = ByteReverseWord32(s3);
=> 0x14bc0 <AesDecrypt_C+7480>:	mov	r3, r0
3144	    s3 = ByteReverseWord32(s3);
=> 0x14bc4 <AesDecrypt_C+7484>:	str	r3, [r11, #-32]	; 0xffffffe0
3147	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x14bc8 <AesDecrypt_C+7488>:	sub	r3, r11, #44	; 0x2c
0x00014bcc	3147	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x14bcc <AesDecrypt_C+7492>:	mov	r2, #4
0x00014bd0	3147	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x14bd0 <AesDecrypt_C+7496>:	mov	r1, r3
0x00014bd4	3147	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x14bd4 <AesDecrypt_C+7500>:	ldr	r0, [r11, #-56]	; 0xffffffc8
0x00014bd8	3147	    XMEMCPY(outBlock,                  &s0, sizeof(s0));
=> 0x14bd8 <AesDecrypt_C+7504>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020la:qg", outBlock=0x40800184 "a:qg", r=7) at wolfcrypt/src/aes.c:3148
3148	    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
=> 0x14bdc <AesDecrypt_C+7508>:	ldr	r3, [r11, #-56]	; 0xffffffc8
0x00014be0	3148	    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
=> 0x14be0 <AesDecrypt_C+7512>:	add	r3, r3, #4
0x00014be4	3148	    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
=> 0x14be4 <AesDecrypt_C+7516>:	sub	r1, r11, #40	; 0x28
0x00014be8	3148	    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
=> 0x14be8 <AesDecrypt_C+7520>:	mov	r2, #4
0x00014bec	3148	    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
=> 0x14bec <AesDecrypt_C+7524>:	mov	r0, r3
0x00014bf0	3148	    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
=> 0x14bf0 <AesDecrypt_C+7528>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020la:qghnla", outBlock=0x40800184 "a:qghnla", r=7) at wolfcrypt/src/aes.c:3149
3149	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x14bf4 <AesDecrypt_C+7532>:	ldr	r3, [r11, #-56]	; 0xffffffc8
0x00014bf8	3149	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x14bf8 <AesDecrypt_C+7536>:	add	r3, r3, #8
0x00014bfc	3149	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x14bfc <AesDecrypt_C+7540>:	sub	r1, r11, #36	; 0x24
0x00014c00	3149	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x14c00 <AesDecrypt_C+7544>:	mov	r2, #4
0x00014c04	3149	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x14c04 <AesDecrypt_C+7548>:	mov	r0, r3
0x00014c08	3149	    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
=> 0x14c08 <AesDecrypt_C+7552>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020la:qghnlam`>8", outBlock=0x40800184 "a:qghnlam`>8", r=7) at wolfcrypt/src/aes.c:3150
3150	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x14c0c <AesDecrypt_C+7556>:	ldr	r3, [r11, #-56]	; 0xffffffc8
0x00014c10	3150	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x14c10 <AesDecrypt_C+7560>:	add	r3, r3, #12
0x00014c14	3150	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x14c14 <AesDecrypt_C+7564>:	sub	r1, r11, #32
0x00014c18	3150	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x14c18 <AesDecrypt_C+7568>:	mov	r2, #4
0x00014c1c	3150	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x14c1c <AesDecrypt_C+7572>:	mov	r0, r3
0x00014c20	3150	    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
=> 0x14c20 <AesDecrypt_C+7576>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
AesDecrypt_C (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020la:qghnlam`>889N,", outBlock=0x40800184 "a:qghnlam`>889N,", r=7) at wolfcrypt/src/aes.c:3152
3152	}
=> 0x14c24 <AesDecrypt_C+7580>:	nop			; (mov r0, r0)
0x00014c28	3152	}
=> 0x14c28 <AesDecrypt_C+7584>:	ldr	r3, [pc, #-3456]	; 0x13eb0 <AesDecrypt_C+4136>
0x00014c2c	3152	}
=> 0x14c2c <AesDecrypt_C+7588>:	ldr	r2, [r3]
0x00014c30	3152	}
=> 0x14c30 <AesDecrypt_C+7592>:	ldr	r3, [r11, #-8]
0x00014c34	3152	}
=> 0x14c34 <AesDecrypt_C+7596>:	eors	r2, r3, r2
0x00014c38	3152	}
=> 0x14c38 <AesDecrypt_C+7600>:	mov	r3, #0
0x00014c3c	3152	}
=> 0x14c3c <AesDecrypt_C+7604>:	beq	0x14c44 <AesDecrypt_C+7612>
0x00014c44	3152	}
=> 0x14c44 <AesDecrypt_C+7612>:	sub	sp, r11, #4
0x00014c48	3152	}
=> 0x14c48 <AesDecrypt_C+7616>:	pop	{r11, pc}
wc_AesDecrypt (aes=0x407ffe00, inBlock=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020la:qghnlam`>889N,", outBlock=0x40800184 "a:qghnlam`>889N,") at wolfcrypt/src/aes.c:3600
3600	    return 0;
=> 0x14cbc <wc_AesDecrypt+112>:	mov	r3, #0
3601	} /* wc_AesDecrypt[_SW]() */
=> 0x14cc0 <wc_AesDecrypt+116>:	mov	r0, r3
0x00014cc4	3601	} /* wc_AesDecrypt[_SW]() */
=> 0x14cc4 <wc_AesDecrypt+120>:	sub	sp, r11, #4
0x00014cc8	3601	} /* wc_AesDecrypt[_SW]() */
=> 0x14cc8 <wc_AesDecrypt+124>:	pop	{r11, pc}
0x00015c8c in wc_AesCbcDecrypt (aes=0x407ffe00, out=0x40800184 "a:qghnlam`>889N,", in=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020la:qghnlam`>889N,", sz=16) at wolfcrypt/src/aes.c:5802
5802	                ret = wc_AesDecrypt(aes, in, out);
=> 0x15c8c <wc_AesCbcDecrypt+180>:	str	r0, [r11, #-8]
5803	                if (ret != 0)
=> 0x15c90 <wc_AesCbcDecrypt+184>:	ldr	r3, [r11, #-8]
0x00015c94	5803	                if (ret != 0)
=> 0x15c94 <wc_AesCbcDecrypt+188>:	cmp	r3, #0
0x00015c98	5803	                if (ret != 0)
=> 0x15c98 <wc_AesCbcDecrypt+192>:	beq	0x15ca4 <wc_AesCbcDecrypt+204>
5805	                xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
=> 0x15ca4 <wc_AesCbcDecrypt+204>:	ldr	r3, [r11, #-16]
0x00015ca8	5805	                xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
=> 0x15ca8 <wc_AesCbcDecrypt+208>:	add	r3, r3, #256	; 0x100
5805	                xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
=> 0x15cac <wc_AesCbcDecrypt+212>:	mov	r2, #16
0x00015cb0	5805	                xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
=> 0x15cb0 <wc_AesCbcDecrypt+216>:	mov	r1, r3
0x00015cb4	5805	                xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
=> 0x15cb4 <wc_AesCbcDecrypt+220>:	ldr	r0, [r11, #-20]	; 0xffffffec
0x00015cb8	5805	                xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
=> 0x15cb8 <wc_AesCbcDecrypt+224>:	bl	0x10c44 <xorbuf>
xorbuf (buf=0x14cbc <wc_AesDecrypt+112>, mask=0x407ffdc4, count=2662689536) at ./wolfcrypt/src/misc.c:333
333	{
=> 0x10c44 <xorbuf>:	push	{r11, lr}
0x00010c48	333	{
=> 0x10c48 <xorbuf+4>:	add	r11, sp, #4
0x00010c4c	333	{
=> 0x10c4c <xorbuf+8>:	sub	sp, sp, #40	; 0x28
0x00010c50	333	{
=> 0x10c50 <xorbuf+12>:	str	r0, [r11, #-32]	; 0xffffffe0
0x00010c54	333	{
=> 0x10c54 <xorbuf+16>:	str	r1, [r11, #-36]	; 0xffffffdc
0x00010c58	333	{
=> 0x10c58 <xorbuf+20>:	str	r2, [r11, #-40]	; 0xffffffd8
333	{
=> 0x10c5c <xorbuf+24>:	ldr	r3, [pc, #340]	; 0x10db8 <xorbuf+372>
0x00010c60	333	{
=> 0x10c60 <xorbuf+28>:	ldr	r3, [r3]
0x00010c64	333	{
=> 0x10c64 <xorbuf+32>:	str	r3, [r11, #-8]
0x00010c68	333	{
=> 0x10c68 <xorbuf+36>:	mov	r3, #0
338	    b = (byte*)buf;
=> 0x10c6c <xorbuf+40>:	ldr	r3, [r11, #-32]	; 0xffffffe0
0x00010c70	338	    b = (byte*)buf;
=> 0x10c70 <xorbuf+44>:	str	r3, [r11, #-16]
339	    m = (const byte*)mask;
=> 0x10c74 <xorbuf+48>:	ldr	r3, [r11, #-36]	; 0xffffffdc
0x00010c78	339	    m = (const byte*)mask;
=> 0x10c78 <xorbuf+52>:	str	r3, [r11, #-12]
341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c7c <xorbuf+56>:	ldr	r2, [r11, #-16]
342	            ((wc_ptr_t)m) % WOLFSSL_WORD_SIZE) {
=> 0x10c80 <xorbuf+60>:	ldr	r3, [r11, #-12]
341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c84 <xorbuf+64>:	eor	r3, r3, r2
0x00010c88	341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c88 <xorbuf+68>:	and	r3, r3, #3
341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c8c <xorbuf+72>:	cmp	r3, #0
0x00010c90	341	    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
=> 0x10c90 <xorbuf+76>:	bne	0x10d30 <xorbuf+236>
355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10c94 <xorbuf+80>:	b	0x10cd0 <xorbuf+140>
355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10cd0 <xorbuf+140>:	ldr	r3, [r11, #-32]	; 0xffffffe0
355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10cd4 <xorbuf+144>:	and	r3, r3, #3
355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10cd8 <xorbuf+148>:	cmp	r3, #0
0x00010cdc	355	        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
=> 0x10cdc <xorbuf+152>:	beq	0x10cec <xorbuf+168>
359	        tpb.bp = b;
=> 0x10cec <xorbuf+168>:	ldr	r3, [r11, #-16]
0x00010cf0	359	        tpb.bp = b;
=> 0x10cf0 <xorbuf+172>:	str	r3, [r11, #-28]	; 0xffffffe4
360	        tpm.bp = m;
=> 0x10cf4 <xorbuf+176>:	ldr	r3, [r11, #-12]
0x00010cf8	360	        tpm.bp = m;
=> 0x10cf8 <xorbuf+180>:	str	r3, [r11, #-24]	; 0xffffffe8
361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10cfc <xorbuf+184>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010d00	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d00 <xorbuf+188>:	lsr	r2, r3, #2
0x00010d04	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d04 <xorbuf+192>:	sub	r1, r11, #24
0x00010d08	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d08 <xorbuf+196>:	sub	r3, r11, #28
0x00010d0c	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d0c <xorbuf+200>:	mov	r0, r3
0x00010d10	361	        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
=> 0x10d10 <xorbuf+204>:	bl	0x10bb8 <XorWords>
XorWords (r=0x2c4e3938, a=0x383e606d, n=1634496104) at ./wolfcrypt/src/misc.c:322
322	{
=> 0x10bb8 <XorWords>:	push	{r11}		; (str r11, [sp, #-4]!)
0x00010bbc	322	{
=> 0x10bbc <XorWords+4>:	add	r11, sp, #0
0x00010bc0	322	{
=> 0x10bc0 <XorWords+8>:	sub	sp, sp, #28
0x00010bc4	322	{
=> 0x10bc4 <XorWords+12>:	str	r0, [r11, #-16]
0x00010bc8	322	{
=> 0x10bc8 <XorWords+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00010bcc	322	{
=> 0x10bcc <XorWords+20>:	str	r2, [r11, #-24]	; 0xffffffe8
325	    for (i = 0; i < n; i++)
=> 0x10bd0 <XorWords+24>:	mov	r3, #0
0x00010bd4	325	    for (i = 0; i < n; i++)
=> 0x10bd4 <XorWords+28>:	str	r3, [r11, #-8]
325	    for (i = 0; i < n; i++)
=> 0x10bd8 <XorWords+32>:	b	0x10c20 <XorWords+104>
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
326	        *((*r)++) ^= *((*a)++);
=> 0x10bdc <XorWords+36>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010be0	326	        *((*r)++) ^= *((*a)++);
=> 0x10be0 <XorWords+40>:	ldr	r3, [r3]
0x00010be4	326	        *((*r)++) ^= *((*a)++);
=> 0x10be4 <XorWords+44>:	add	r1, r3, #4
0x00010be8	326	        *((*r)++) ^= *((*a)++);
=> 0x10be8 <XorWords+48>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010bec	326	        *((*r)++) ^= *((*a)++);
=> 0x10bec <XorWords+52>:	str	r1, [r2]
0x00010bf0	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf0 <XorWords+56>:	ldr	r1, [r3]
0x00010bf4	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf4 <XorWords+60>:	ldr	r3, [r11, #-16]
0x00010bf8	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf8 <XorWords+64>:	ldr	r3, [r3]
0x00010bfc	326	        *((*r)++) ^= *((*a)++);
=> 0x10bfc <XorWords+68>:	add	r0, r3, #4
0x00010c00	326	        *((*r)++) ^= *((*a)++);
=> 0x10c00 <XorWords+72>:	ldr	r2, [r11, #-16]
0x00010c04	326	        *((*r)++) ^= *((*a)++);
=> 0x10c04 <XorWords+76>:	str	r0, [r2]
0x00010c08	326	        *((*r)++) ^= *((*a)++);
=> 0x10c08 <XorWords+80>:	ldr	r2, [r3]
0x00010c0c	326	        *((*r)++) ^= *((*a)++);
=> 0x10c0c <XorWords+84>:	eor	r2, r2, r1
0x00010c10	326	        *((*r)++) ^= *((*a)++);
=> 0x10c10 <XorWords+88>:	str	r2, [r3]
325	    for (i = 0; i < n; i++)
=> 0x10c14 <XorWords+92>:	ldr	r3, [r11, #-8]
0x00010c18	325	    for (i = 0; i < n; i++)
=> 0x10c18 <XorWords+96>:	add	r3, r3, #1
0x00010c1c	325	    for (i = 0; i < n; i++)
=> 0x10c1c <XorWords+100>:	str	r3, [r11, #-8]
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
326	        *((*r)++) ^= *((*a)++);
=> 0x10bdc <XorWords+36>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010be0	326	        *((*r)++) ^= *((*a)++);
=> 0x10be0 <XorWords+40>:	ldr	r3, [r3]
0x00010be4	326	        *((*r)++) ^= *((*a)++);
=> 0x10be4 <XorWords+44>:	add	r1, r3, #4
0x00010be8	326	        *((*r)++) ^= *((*a)++);
=> 0x10be8 <XorWords+48>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010bec	326	        *((*r)++) ^= *((*a)++);
=> 0x10bec <XorWords+52>:	str	r1, [r2]
0x00010bf0	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf0 <XorWords+56>:	ldr	r1, [r3]
0x00010bf4	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf4 <XorWords+60>:	ldr	r3, [r11, #-16]
0x00010bf8	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf8 <XorWords+64>:	ldr	r3, [r3]
0x00010bfc	326	        *((*r)++) ^= *((*a)++);
=> 0x10bfc <XorWords+68>:	add	r0, r3, #4
0x00010c00	326	        *((*r)++) ^= *((*a)++);
=> 0x10c00 <XorWords+72>:	ldr	r2, [r11, #-16]
0x00010c04	326	        *((*r)++) ^= *((*a)++);
=> 0x10c04 <XorWords+76>:	str	r0, [r2]
0x00010c08	326	        *((*r)++) ^= *((*a)++);
=> 0x10c08 <XorWords+80>:	ldr	r2, [r3]
0x00010c0c	326	        *((*r)++) ^= *((*a)++);
=> 0x10c0c <XorWords+84>:	eor	r2, r2, r1
0x00010c10	326	        *((*r)++) ^= *((*a)++);
=> 0x10c10 <XorWords+88>:	str	r2, [r3]
325	    for (i = 0; i < n; i++)
=> 0x10c14 <XorWords+92>:	ldr	r3, [r11, #-8]
0x00010c18	325	    for (i = 0; i < n; i++)
=> 0x10c18 <XorWords+96>:	add	r3, r3, #1
0x00010c1c	325	    for (i = 0; i < n; i++)
=> 0x10c1c <XorWords+100>:	str	r3, [r11, #-8]
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
326	        *((*r)++) ^= *((*a)++);
=> 0x10bdc <XorWords+36>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010be0	326	        *((*r)++) ^= *((*a)++);
=> 0x10be0 <XorWords+40>:	ldr	r3, [r3]
0x00010be4	326	        *((*r)++) ^= *((*a)++);
=> 0x10be4 <XorWords+44>:	add	r1, r3, #4
0x00010be8	326	        *((*r)++) ^= *((*a)++);
=> 0x10be8 <XorWords+48>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010bec	326	        *((*r)++) ^= *((*a)++);
=> 0x10bec <XorWords+52>:	str	r1, [r2]
0x00010bf0	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf0 <XorWords+56>:	ldr	r1, [r3]
0x00010bf4	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf4 <XorWords+60>:	ldr	r3, [r11, #-16]
0x00010bf8	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf8 <XorWords+64>:	ldr	r3, [r3]
0x00010bfc	326	        *((*r)++) ^= *((*a)++);
=> 0x10bfc <XorWords+68>:	add	r0, r3, #4
0x00010c00	326	        *((*r)++) ^= *((*a)++);
=> 0x10c00 <XorWords+72>:	ldr	r2, [r11, #-16]
0x00010c04	326	        *((*r)++) ^= *((*a)++);
=> 0x10c04 <XorWords+76>:	str	r0, [r2]
0x00010c08	326	        *((*r)++) ^= *((*a)++);
=> 0x10c08 <XorWords+80>:	ldr	r2, [r3]
0x00010c0c	326	        *((*r)++) ^= *((*a)++);
=> 0x10c0c <XorWords+84>:	eor	r2, r2, r1
0x00010c10	326	        *((*r)++) ^= *((*a)++);
=> 0x10c10 <XorWords+88>:	str	r2, [r3]
325	    for (i = 0; i < n; i++)
=> 0x10c14 <XorWords+92>:	ldr	r3, [r11, #-8]
0x00010c18	325	    for (i = 0; i < n; i++)
=> 0x10c18 <XorWords+96>:	add	r3, r3, #1
0x00010c1c	325	    for (i = 0; i < n; i++)
=> 0x10c1c <XorWords+100>:	str	r3, [r11, #-8]
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
326	        *((*r)++) ^= *((*a)++);
=> 0x10bdc <XorWords+36>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00010be0	326	        *((*r)++) ^= *((*a)++);
=> 0x10be0 <XorWords+40>:	ldr	r3, [r3]
0x00010be4	326	        *((*r)++) ^= *((*a)++);
=> 0x10be4 <XorWords+44>:	add	r1, r3, #4
0x00010be8	326	        *((*r)++) ^= *((*a)++);
=> 0x10be8 <XorWords+48>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010bec	326	        *((*r)++) ^= *((*a)++);
=> 0x10bec <XorWords+52>:	str	r1, [r2]
0x00010bf0	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf0 <XorWords+56>:	ldr	r1, [r3]
0x00010bf4	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf4 <XorWords+60>:	ldr	r3, [r11, #-16]
0x00010bf8	326	        *((*r)++) ^= *((*a)++);
=> 0x10bf8 <XorWords+64>:	ldr	r3, [r3]
0x00010bfc	326	        *((*r)++) ^= *((*a)++);
=> 0x10bfc <XorWords+68>:	add	r0, r3, #4
0x00010c00	326	        *((*r)++) ^= *((*a)++);
=> 0x10c00 <XorWords+72>:	ldr	r2, [r11, #-16]
0x00010c04	326	        *((*r)++) ^= *((*a)++);
=> 0x10c04 <XorWords+76>:	str	r0, [r2]
0x00010c08	326	        *((*r)++) ^= *((*a)++);
=> 0x10c08 <XorWords+80>:	ldr	r2, [r3]
0x00010c0c	326	        *((*r)++) ^= *((*a)++);
=> 0x10c0c <XorWords+84>:	eor	r2, r2, r1
0x00010c10	326	        *((*r)++) ^= *((*a)++);
=> 0x10c10 <XorWords+88>:	str	r2, [r3]
325	    for (i = 0; i < n; i++)
=> 0x10c14 <XorWords+92>:	ldr	r3, [r11, #-8]
0x00010c18	325	    for (i = 0; i < n; i++)
=> 0x10c18 <XorWords+96>:	add	r3, r3, #1
0x00010c1c	325	    for (i = 0; i < n; i++)
=> 0x10c1c <XorWords+100>:	str	r3, [r11, #-8]
0x00010c20	325	    for (i = 0; i < n; i++)
=> 0x10c20 <XorWords+104>:	ldr	r2, [r11, #-8]
0x00010c24	325	    for (i = 0; i < n; i++)
=> 0x10c24 <XorWords+108>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010c28	325	    for (i = 0; i < n; i++)
=> 0x10c28 <XorWords+112>:	cmp	r2, r3
0x00010c2c	325	    for (i = 0; i < n; i++)
=> 0x10c2c <XorWords+116>:	bcc	0x10bdc <XorWords+36>
327	}
=> 0x10c30 <XorWords+120>:	nop			; (mov r0, r0)
0x00010c34	327	}
=> 0x10c34 <XorWords+124>:	nop			; (mov r0, r0)
0x00010c38	327	}
=> 0x10c38 <XorWords+128>:	add	sp, r11, #0
0x00010c3c	327	}
=> 0x10c3c <XorWords+132>:	pop	{r11}		; (ldr r11, [sp], #4)
0x00010c40	327	}
=> 0x10c40 <XorWords+136>:	bx	lr
xorbuf (buf=0x40800184, mask=0x407fff00, count=16) at ./wolfcrypt/src/misc.c:362
362	        b = tpb.bp;
=> 0x10d14 <xorbuf+208>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00010d18	362	        b = tpb.bp;
=> 0x10d18 <xorbuf+212>:	str	r3, [r11, #-16]
363	        m = tpm.bp;
=> 0x10d1c <xorbuf+216>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00010d20	363	        m = tpm.bp;
=> 0x10d20 <xorbuf+220>:	str	r3, [r11, #-12]
364	        count %= WOLFSSL_WORD_SIZE;
=> 0x10d24 <xorbuf+224>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010d28	364	        count %= WOLFSSL_WORD_SIZE;
=> 0x10d28 <xorbuf+228>:	and	r3, r3, #3
0x00010d2c	364	        count %= WOLFSSL_WORD_SIZE;
=> 0x10d2c <xorbuf+232>:	str	r3, [r11, #-40]	; 0xffffffd8
367	    for (i = 0; i < count; i++)
=> 0x10d30 <xorbuf+236>:	mov	r3, #0
0x00010d34	367	    for (i = 0; i < count; i++)
=> 0x10d34 <xorbuf+240>:	str	r3, [r11, #-20]	; 0xffffffec
367	    for (i = 0; i < count; i++)
=> 0x10d38 <xorbuf+244>:	b	0x10d80 <xorbuf+316>
0x00010d80	367	    for (i = 0; i < count; i++)
=> 0x10d80 <xorbuf+316>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00010d84	367	    for (i = 0; i < count; i++)
=> 0x10d84 <xorbuf+320>:	ldr	r3, [r11, #-40]	; 0xffffffd8
0x00010d88	367	    for (i = 0; i < count; i++)
=> 0x10d88 <xorbuf+324>:	cmp	r2, r3
0x00010d8c	367	    for (i = 0; i < count; i++)
=> 0x10d8c <xorbuf+328>:	bcc	0x10d3c <xorbuf+248>
369	}
=> 0x10d90 <xorbuf+332>:	nop			; (mov r0, r0)
0x00010d94	369	}
=> 0x10d94 <xorbuf+336>:	ldr	r3, [pc, #28]	; 0x10db8 <xorbuf+372>
0x00010d98	369	}
=> 0x10d98 <xorbuf+340>:	ldr	r2, [r3]
0x00010d9c	369	}
=> 0x10d9c <xorbuf+344>:	ldr	r3, [r11, #-8]
0x00010da0	369	}
=> 0x10da0 <xorbuf+348>:	eors	r2, r3, r2
0x00010da4	369	}
=> 0x10da4 <xorbuf+352>:	mov	r3, #0
0x00010da8	369	}
=> 0x10da8 <xorbuf+356>:	beq	0x10db0 <xorbuf+364>
0x00010db0	369	}
=> 0x10db0 <xorbuf+364>:	sub	sp, r11, #4
0x00010db4	369	}
=> 0x10db4 <xorbuf+368>:	pop	{r11, pc}
wc_AesCbcDecrypt (aes=0x407ffe00, out=0x40800184 "a;sdlkjfei4344@#", in=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020la;sdlkjfei4344@#", sz=16) at wolfcrypt/src/aes.c:5807
5807	                XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
=> 0x15cbc <wc_AesCbcDecrypt+228>:	ldr	r3, [r11, #-16]
0x00015cc0	5807	                XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
=> 0x15cc0 <wc_AesCbcDecrypt+232>:	add	r0, r3, #256	; 0x100
0x00015cc4	5807	                XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
=> 0x15cc4 <wc_AesCbcDecrypt+236>:	ldr	r3, [r11, #-16]
0x00015cc8	5807	                XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
=> 0x15cc8 <wc_AesCbcDecrypt+240>:	add	r3, r3, #272	; 0x110
0x00015ccc	5807	                XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
=> 0x15ccc <wc_AesCbcDecrypt+244>:	mov	r2, #16
0x00015cd0	5807	                XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
=> 0x15cd0 <wc_AesCbcDecrypt+248>:	mov	r1, r3
0x00015cd4	5807	                XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
=> 0x15cd4 <wc_AesCbcDecrypt+252>:	bl	0x3af20 <memcpy>
0x0003af20 in memcpy ()
=> 0x3af20 <memcpy>:	push	{r0, r4, lr}
0x0003af24 in memcpy ()
=> 0x3af24 <memcpy+4>:	subs	r2, r2, #4
0x0003af28 in memcpy ()
=> 0x3af28 <memcpy+8>:	bcc	0x3afb4 <memcpy+148>
0x0003af2c in memcpy ()
=> 0x3af2c <memcpy+12>:	ands	r12, r0, #3
0x0003af30 in memcpy ()
=> 0x3af30 <memcpy+16>:	bne	0x3afd4 <memcpy+180>
0x0003af34 in memcpy ()
=> 0x3af34 <memcpy+20>:	ands	r12, r1, #3
0x0003af38 in memcpy ()
=> 0x3af38 <memcpy+24>:	bne	0x3b004 <memcpy+228>
0x0003af3c in memcpy ()
=> 0x3af3c <memcpy+28>:	subs	r2, r2, #28
0x0003af40 in memcpy ()
=> 0x3af40 <memcpy+32>:	push	{r5, r6, r7, r8}
0x0003af44 in memcpy ()
=> 0x3af44 <memcpy+36>:	bcc	0x3af58 <memcpy+56>
0x0003af58 in memcpy ()
=> 0x3af58 <memcpy+56>:	ands	r12, r2, #28
0x0003af5c in memcpy ()
=> 0x3af5c <memcpy+60>:	rsb	r12, r12, #32
0x0003af60 in memcpy ()
=> 0x3af60 <memcpy+64>:	addne	pc, pc, r12
0x0003af78 in memcpy ()
=> 0x3af78 <memcpy+88>:	ldr	r6, [r1], #4
0x0003af7c in memcpy ()
=> 0x3af7c <memcpy+92>:	ldr	r7, [r1], #4
0x0003af80 in memcpy ()
=> 0x3af80 <memcpy+96>:	ldr	r8, [r1], #4
0x0003af84 in memcpy ()
=> 0x3af84 <memcpy+100>:	ldr	lr, [r1], #4
0x0003af88 in memcpy ()
=> 0x3af88 <memcpy+104>:	add	pc, pc, r12
0x0003afa0 in memcpy ()
=> 0x3afa0 <memcpy+128>:	str	r6, [r0], #4
0x0003afa4 in memcpy ()
=> 0x3afa4 <memcpy+132>:	str	r7, [r0], #4
0x0003afa8 in memcpy ()
=> 0x3afa8 <memcpy+136>:	str	r8, [r0], #4
0x0003afac in memcpy ()
=> 0x3afac <memcpy+140>:	str	lr, [r0], #4
0x0003afb0 in memcpy ()
=> 0x3afb0 <memcpy+144>:	pop	{r5, r6, r7, r8}
0x0003afb4 in memcpy ()
=> 0x3afb4 <memcpy+148>:	lsls	r2, r2, #31
0x0003afb8 in memcpy ()
=> 0x3afb8 <memcpy+152>:	ldrbne	r3, [r1], #1
0x0003afbc in memcpy ()
=> 0x3afbc <memcpy+156>:	ldrbcs	r4, [r1], #1
0x0003afc0 in memcpy ()
=> 0x3afc0 <memcpy+160>:	ldrbcs	r12, [r1]
0x0003afc4 in memcpy ()
=> 0x3afc4 <memcpy+164>:	strbne	r3, [r0], #1
0x0003afc8 in memcpy ()
=> 0x3afc8 <memcpy+168>:	strbcs	r4, [r0], #1
0x0003afcc in memcpy ()
=> 0x3afcc <memcpy+172>:	strbcs	r12, [r0]
0x0003afd0 in memcpy ()
=> 0x3afd0 <memcpy+176>:	pop	{r0, r4, pc}
wc_AesCbcDecrypt (aes=0x407ffe00, out=0x40800184 "a;sdlkjfei4344@#", in=0x40800174 "\231:\343cx\336֗\nF\260\356\200\310\020la;sdlkjfei4344@#", sz=16) at wolfcrypt/src/aes.c:5809
5809	                out += AES_BLOCK_SIZE;
=> 0x15cd8 <wc_AesCbcDecrypt+256>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00015cdc	5809	                out += AES_BLOCK_SIZE;
=> 0x15cdc <wc_AesCbcDecrypt+260>:	add	r3, r3, #16
0x00015ce0	5809	                out += AES_BLOCK_SIZE;
=> 0x15ce0 <wc_AesCbcDecrypt+264>:	str	r3, [r11, #-20]	; 0xffffffec
5810	                in  += AES_BLOCK_SIZE;
=> 0x15ce4 <wc_AesCbcDecrypt+268>:	ldr	r3, [r11, #-24]	; 0xffffffe8
0x00015ce8	5810	                in  += AES_BLOCK_SIZE;
=> 0x15ce8 <wc_AesCbcDecrypt+272>:	add	r3, r3, #16
0x00015cec	5810	                in  += AES_BLOCK_SIZE;
=> 0x15cec <wc_AesCbcDecrypt+276>:	str	r3, [r11, #-24]	; 0xffffffe8
5800	            while (blocks--) {
=> 0x15cf0 <wc_AesCbcDecrypt+280>:	ldr	r3, [r11, #-12]
0x00015cf4	5800	            while (blocks--) {
=> 0x15cf4 <wc_AesCbcDecrypt+284>:	sub	r2, r3, #1
0x00015cf8	5800	            while (blocks--) {
=> 0x15cf8 <wc_AesCbcDecrypt+288>:	str	r2, [r11, #-12]
5800	            while (blocks--) {
=> 0x15cfc <wc_AesCbcDecrypt+292>:	cmp	r3, #0
0x00015d00	5800	            while (blocks--) {
=> 0x15d00 <wc_AesCbcDecrypt+296>:	bne	0x15c64 <wc_AesCbcDecrypt+140>
5817	        return ret;
=> 0x15d04 <wc_AesCbcDecrypt+300>:	ldr	r3, [r11, #-8]
5818	    }
=> 0x15d08 <wc_AesCbcDecrypt+304>:	mov	r0, r3
0x00015d0c	5818	    }
=> 0x15d0c <wc_AesCbcDecrypt+308>:	sub	sp, r11, #4
0x00015d10	5818	    }
=> 0x15d10 <wc_AesCbcDecrypt+312>:	pop	{r11, pc}
0x000106c4 in main () at AES.c:45
45	    ret = wc_AesCbcDecrypt(&aes, decryptedtext, ciphertext, sizeof(ciphertext));
=> 0x106c4 <main+284>:	str	r0, [r11, #-976]	; 0xfffffc30
46	    check_wolfssl_result(ret, "wc_AesCbcDecrypt");
=> 0x106c8 <main+288>:	ldr	r1, [pc, #140]	; 0x1075c <main+436>
0x000106cc	46	    check_wolfssl_result(ret, "wc_AesCbcDecrypt");
=> 0x106cc <main+292>:	ldr	r0, [r11, #-976]	; 0xfffffc30
0x000106d0	46	    check_wolfssl_result(ret, "wc_AesCbcDecrypt");
=> 0x106d0 <main+296>:	bl	0x1055c <check_wolfssl_result>
check_wolfssl_result (ret=0, func=0xffffffff <error: Cannot access memory at address 0xffffffff>) at AES.c:11
11	void check_wolfssl_result(int ret, const char* func) {
=> 0x1055c <check_wolfssl_result>:	push	{r11, lr}
0x00010560	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10560 <check_wolfssl_result+4>:	add	r11, sp, #4
0x00010564	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10564 <check_wolfssl_result+8>:	sub	sp, sp, #8
0x00010568	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x10568 <check_wolfssl_result+12>:	str	r0, [r11, #-8]
0x0001056c	11	void check_wolfssl_result(int ret, const char* func) {
=> 0x1056c <check_wolfssl_result+16>:	str	r1, [r11, #-12]
12	    if (ret != 0) {
=> 0x10570 <check_wolfssl_result+20>:	ldr	r3, [r11, #-8]
0x00010574	12	    if (ret != 0) {
=> 0x10574 <check_wolfssl_result+24>:	cmp	r3, #0
0x00010578	12	    if (ret != 0) {
=> 0x10578 <check_wolfssl_result+28>:	beq	0x10598 <check_wolfssl_result+60>
15	}
=> 0x10598 <check_wolfssl_result+60>:	nop			; (mov r0, r0)
0x0001059c	15	}
=> 0x1059c <check_wolfssl_result+64>:	sub	sp, r11, #4
0x000105a0	15	}
=> 0x105a0 <check_wolfssl_result+68>:	pop	{r11, pc}
main () at AES.c:51
51	    for (int i = 0; i < sizeof(ciphertext); i++)
=> 0x106d4 <main+300>:	mov	r3, #0
0x000106d8	51	    for (int i = 0; i < sizeof(ciphertext); i++)
=> 0x106d8 <main+304>:	str	r3, [r11, #-980]	; 0xfffffc2c
51	    for (int i = 0; i < sizeof(ciphertext); i++)
=> 0x106dc <main+308>:	b	0x10708 <main+352>
0x00010708	51	    for (int i = 0; i < sizeof(ciphertext); i++)
=> 0x10708 <main+352>:	ldr	r3, [r11, #-980]	; 0xfffffc2c
0x0001070c	51	    for (int i = 0; i < sizeof(ciphertext); i++)
=> 0x1070c <main+356>:	cmp	r3, #15
0x00010710	51	    for (int i = 0; i < sizeof(ciphertext); i++)
=> 0x10710 <main+360>:	bls	0x106e0 <main+312>
52	        printf("%02x ", ciphertext[i]);
=> 0x106e0 <main+312>:	sub	r2, r11, #80	; 0x50
0x000106e4	52	        printf("%02x ", ciphertext[i]);
=> 0x106e4 <main+316>:	ldr	r3, [r11, #-980]	; 0xfffffc2c
0x000106e8	52	        printf("%02x ", ciphertext[i]);
=> 0x106e8 <main+320>:	add	r3, r2, r3
0x000106ec	52	        printf("%02x ", ciphertext[i]);
=> 0x106ec <main+324>:	ldrb	r3, [r3]
0x000106f0	52	        printf("%02x ", ciphertext[i]);
=> 0x106f0 <main+328>:	mov	r1, r3
0x000106f4	52	        printf("%02x ", ciphertext[i]);
=> 0x106f4 <main+332>:	ldr	r0, [pc, #100]	; 0x10760 <main+440>
0x000106f8	52	        printf("%02x ", ciphertext[i]);
=> 0x106f8 <main+336>:	bl	0x23940 <printf>
0x00023940 in printf ()
=> 0x23940 <printf>:	push	{r0, r1, r2, r3}
0x00023944 in printf ()
=> 0x23944 <printf+4>:	push	{lr}		; (str lr, [sp, #-4]!)
0x00023948 in printf ()
=> 0x23948 <printf+8>:	ldr	r2, [pc, #120]	; 0x239c8 <printf+136>
0x0002394c in printf ()
=> 0x2394c <printf+12>:	ldr	r3, [pc, #120]	; 0x239cc <printf+140>
0x00023950 in printf ()
=> 0x23950 <printf+16>:	add	r2, pc, r2
0x00023954 in printf ()
=> 0x23954 <printf+20>:	ldr	r3, [r2, r3]
0x00023958 in printf ()
=> 0x23958 <printf+24>:	sub	sp, sp, #12
0x0002395c in printf ()
=> 0x2395c <printf+28>:	ldr	r3, [r3]
0x00023960 in printf ()
=> 0x23960 <printf+32>:	str	r3, [sp, #4]
0x00023964 in printf ()
=> 0x23964 <printf+36>:	mov	r3, #0
0x00023968 in printf ()
=> 0x23968 <printf+40>:	ldr	r0, [pc, #96]	; 0x239d0 <printf+144>
0x0002396c in printf ()
=> 0x2396c <printf+44>:	add	r2, sp, #20
0x00023970 in printf ()
=> 0x23970 <printf+48>:	ldr	r12, [pc, #92]	; 0x239d4 <printf+148>
0x00023974 in printf ()
=> 0x23974 <printf+52>:	str	r2, [sp]
0x00023978 in printf ()
=> 0x23978 <printf+56>:	add	r0, pc, r0
0x0002397c in printf ()
=> 0x2397c <printf+60>:	ldr	r0, [r0, r12]
0x00023980 in printf ()
=> 0x23980 <printf+64>:	mov	r3, #0
0x00023984 in printf ()
=> 0x23984 <printf+68>:	ldr	r1, [sp, #16]
0x00023988 in printf ()
=> 0x23988 <printf+72>:	ldr	r0, [r0]
0x0002398c in printf ()
=> 0x2398c <printf+76>:	bl	0x262b8 <__vfprintf_internal>
0x000262b8 in __vfprintf_internal ()
=> 0x262b8 <__vfprintf_internal>:	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
0x000262bc in __vfprintf_internal ()
=> 0x262bc <__vfprintf_internal+4>:	
    ldr	r12, [pc, #4044]	; 0x27290 <__vfprintf_internal+4056>
0x000262c0 in __vfprintf_internal ()
=> 0x262c0 <__vfprintf_internal+8>:	mov	r6, r0
0x000262c4 in __vfprintf_internal ()
=> 0x262c4 <__vfprintf_internal+12>:	ldr	r0, [pc, #4040]	; 0x27294 <__vfprintf_internal+4060>
0x000262c8 in __vfprintf_internal ()
=> 0x262c8 <__vfprintf_internal+16>:	add	r12, pc, r12
0x000262cc in __vfprintf_internal ()
=> 0x262cc <__vfprintf_internal+20>:	ldr	r0, [r12, r0]
0x000262d0 in __vfprintf_internal ()
=> 0x262d0 <__vfprintf_internal+24>:	sub	sp, sp, #1232	; 0x4d0
0x000262d4 in __vfprintf_internal ()
=> 0x262d4 <__vfprintf_internal+28>:	sub	sp, sp, #4
0x000262d8 in __vfprintf_internal ()
=> 0x262d8 <__vfprintf_internal+32>:	ldr	r0, [r0]
0x000262dc in __vfprintf_internal ()
=> 0x262dc <__vfprintf_internal+36>:	str	r0, [sp, #1228]	; 0x4cc
0x000262e0 in __vfprintf_internal ()
=> 0x262e0 <__vfprintf_internal+40>:	mov	r0, #0
0x000262e4 in __vfprintf_internal ()
=> 0x262e4 <__vfprintf_internal+44>:	bl	0x1d010 <__aeabi_read_tp>
0x0001d010 in __aeabi_read_tp ()
=> 0x1d010 <__aeabi_read_tp>:	mvn	r0, #61440	; 0xf000
0x0001d014 in __aeabi_read_tp ()
=> 0x1d014 <__aeabi_read_tp+4>:	sub	pc, r0, #31
0xffff0fe0 in ?? ()
=> 0xffff0fe0:	./scr.gdb:8: Error in sourced command file:
Cannot access memory at address 0xffff0fe0
[?2004hA program is being debugged already.  Kill it? (y or n) y
[?2004llocalhost:1131: Connection timed out.
[?2004h(gdb) 