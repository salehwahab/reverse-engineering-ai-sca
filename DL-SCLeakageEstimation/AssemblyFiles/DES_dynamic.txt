GNU gdb (Ubuntu 12.1-0ubuntu1~22.04.2) 12.1
Copyright (C) 2022 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ../cfiles/DES...
0x00010418 in _start ()
The target architecture is set to "arm".
Breakpoint 1 at 0x105c4: file DES.c, line 17.

Breakpoint 1, main () at DES.c:17
17	    byte iv[DES_BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
0x000105c8	17	    byte iv[DES_BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
=> 0x105c8 <main+32>:	sub	r3, r11, #80	; 0x50
0x000105cc	17	    byte iv[DES_BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
=> 0x105cc <main+36>:	ldm	r2, {r0, r1, r2}
0x000105d0	17	    byte iv[DES_BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
=> 0x105d0 <main+40>:	stmia	r3!, {r0, r1}
0x000105d4	17	    byte iv[DES_BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
=> 0x105d4 <main+44>:	strb	r2, [r3]
18	    byte plaintext[DES_BLOCK_SIZE] = {'H', 'e', 'l', 'l', 'o', 'D', 'E', 'S', 'r'};  // Explicitly ignoring null terminator
=> 0x105d8 <main+48>:	ldr	r2, [pc, #540]	; 0x107fc <main+596>
0x000105dc	18	    byte plaintext[DES_BLOCK_SIZE] = {'H', 'e', 'l', 'l', 'o', 'D', 'E', 'S', 'r'};  // Explicitly ignoring null terminator
=> 0x105dc <main+52>:	sub	r3, r11, #68	; 0x44
0x000105e0	18	    byte plaintext[DES_BLOCK_SIZE] = {'H', 'e', 'l', 'l', 'o', 'D', 'E', 'S', 'r'};  // Explicitly ignoring null terminator
=> 0x105e0 <main+56>:	ldm	r2, {r0, r1, r2}
0x000105e4	18	    byte plaintext[DES_BLOCK_SIZE] = {'H', 'e', 'l', 'l', 'o', 'D', 'E', 'S', 'r'};  // Explicitly ignoring null terminator
=> 0x105e4 <main+60>:	stmia	r3!, {r0, r1}
0x000105e8	18	    byte plaintext[DES_BLOCK_SIZE] = {'H', 'e', 'l', 'l', 'o', 'D', 'E', 'S', 'r'};  // Explicitly ignoring null terminator
=> 0x105e8 <main+64>:	strb	r2, [r3]
20	    byte decryptedtext[DES_BLOCK_SIZE] = {0};  // Initialize to zero
=> 0x105ec <main+68>:	mov	r3, #0
0x000105f0	20	    byte decryptedtext[DES_BLOCK_SIZE] = {0};  // Initialize to zero
=> 0x105f0 <main+72>:	str	r3, [r11, #-44]	; 0xffffffd4
0x000105f4	20	    byte decryptedtext[DES_BLOCK_SIZE] = {0};  // Initialize to zero
=> 0x105f4 <main+76>:	sub	r3, r11, #40	; 0x28
0x000105f8	20	    byte decryptedtext[DES_BLOCK_SIZE] = {0};  // Initialize to zero
=> 0x105f8 <main+80>:	mov	r2, #0
0x000105fc	20	    byte decryptedtext[DES_BLOCK_SIZE] = {0};  // Initialize to zero
=> 0x105fc <main+84>:	str	r2, [r3]
0x00010600	20	    byte decryptedtext[DES_BLOCK_SIZE] = {0};  // Initialize to zero
=> 0x10600 <main+88>:	strb	r2, [r3, #4]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10604 <main+92>:	mov	r3, #0
0x00010608	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10608 <main+96>:	str	r3, [r11, #-500]	; 0xfffffe0c
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1060c <main+100>:	b	0x10640 <main+152>
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
25	        key[i] = (byte)(i + 1);
=> 0x10610 <main+104>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010614	25	        key[i] = (byte)(i + 1);
=> 0x10614 <main+108>:	and	r3, r3, #255	; 0xff
0x00010618	25	        key[i] = (byte)(i + 1);
=> 0x10618 <main+112>:	add	r3, r3, #1
0x0001061c	25	        key[i] = (byte)(i + 1);
=> 0x1061c <main+116>:	and	r1, r3, #255	; 0xff
0x00010620	25	        key[i] = (byte)(i + 1);
=> 0x10620 <main+120>:	sub	r2, r11, #32
0x00010624	25	        key[i] = (byte)(i + 1);
=> 0x10624 <main+124>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010628	25	        key[i] = (byte)(i + 1);
=> 0x10628 <main+128>:	add	r3, r2, r3
0x0001062c	25	        key[i] = (byte)(i + 1);
=> 0x1062c <main+132>:	mov	r2, r1
0x00010630	25	        key[i] = (byte)(i + 1);
=> 0x10630 <main+136>:	strb	r2, [r3]
24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10634 <main+140>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010638	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10638 <main+144>:	add	r3, r3, #1
0x0001063c	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x1063c <main+148>:	str	r3, [r11, #-500]	; 0xfffffe0c
0x00010640	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10640 <main+152>:	ldr	r3, [r11, #-500]	; 0xfffffe0c
0x00010644	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10644 <main+156>:	cmp	r3, #23
0x00010648	24	    for (int i = 0; i < sizeof(key); ++i) {
=> 0x10648 <main+160>:	bls	0x10610 <main+104>
29	    ret = wc_Des3_SetKey(&des3, key, iv, DES_ENCRYPTION);
=> 0x1064c <main+164>:	sub	r2, r11, #80	; 0x50
0x00010650	29	    ret = wc_Des3_SetKey(&des3, key, iv, DES_ENCRYPTION);
=> 0x10650 <main+168>:	sub	r1, r11, #32
0x00010654	29	    ret = wc_Des3_SetKey(&des3, key, iv, DES_ENCRYPTION);
=> 0x10654 <main+172>:	sub	r0, r11, #484	; 0x1e4
0x00010658	29	    ret = wc_Des3_SetKey(&des3, key, iv, DES_ENCRYPTION);
=> 0x10658 <main+176>:	mov	r3, #0
0x0001065c	29	    ret = wc_Des3_SetKey(&des3, key, iv, DES_ENCRYPTION);
=> 0x1065c <main+180>:	bl	0x113ec <wc_Des3_SetKey>
wc_Des3_SetKey (des=0x0, key=0x0, iv=0x0, dir=0) at wolfcrypt/src/des3.c:1447
1447	    {
=> 0x113ec <wc_Des3_SetKey>:	push	{r11, lr}
0x000113f0	1447	    {
=> 0x113f0 <wc_Des3_SetKey+4>:	add	r11, sp, #4
0x000113f4	1447	    {
=> 0x113f4 <wc_Des3_SetKey+8>:	sub	sp, sp, #24
0x000113f8	1447	    {
=> 0x113f8 <wc_Des3_SetKey+12>:	str	r0, [r11, #-16]
0x000113fc	1447	    {
=> 0x113fc <wc_Des3_SetKey+16>:	str	r1, [r11, #-20]	; 0xffffffec
0x00011400	1447	    {
=> 0x11400 <wc_Des3_SetKey+20>:	str	r2, [r11, #-24]	; 0xffffffe8
0x00011404	1447	    {
=> 0x11404 <wc_Des3_SetKey+24>:	str	r3, [r11, #-28]	; 0xffffffe4
1450	        if (des == NULL || key == NULL || dir < 0) {
=> 0x11408 <wc_Des3_SetKey+28>:	ldr	r3, [r11, #-16]
0x0001140c	1450	        if (des == NULL || key == NULL || dir < 0) {
=> 0x1140c <wc_Des3_SetKey+32>:	cmp	r3, #0
0x00011410	1450	        if (des == NULL || key == NULL || dir < 0) {
=> 0x11410 <wc_Des3_SetKey+36>:	beq	0x1142c <wc_Des3_SetKey+64>
0x00011414	1450	        if (des == NULL || key == NULL || dir < 0) {
=> 0x11414 <wc_Des3_SetKey+40>:	ldr	r3, [r11, #-20]	; 0xffffffec
0x00011418	1450	        if (des == NULL || key == NULL || dir < 0) {
=> 0x11418 <wc_Des3_SetKey+44>:	cmp	r3, #0
0x0001141c	1450	        if (des == NULL || key == NULL || dir < 0) {
=> 0x1141c <wc_Des3_SetKey+48>:	beq	0x1142c <wc_Des3_SetKey+64>
0x00011420	1450	        if (des == NULL || key == NULL || dir < 0) {
=> 0x11420 <wc_Des3_SetKey+52>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x00011424	1450	        if (des == NULL || key == NULL || dir < 0) {
=> 0x11424 <wc_Des3_SetKey+56>:	cmp	r3, #0
0x00011428	1450	        if (des == NULL || key == NULL || dir < 0) {
=> 0x11428 <wc_Des3_SetKey+60>:	bge	0x11434 <wc_Des3_SetKey+72>
1454	        XMEMSET(des->key, 0, sizeof(*(des->key)));
=> 0x11434 <wc_Des3_SetKey+72>:	ldr	r3, [r11, #-16]
0x00011438	1454	        XMEMSET(des->key, 0, sizeof(*(des->key)));
=> 0x11438 <wc_Des3_SetKey+76>:	mov	r2, #128	; 0x80
0x0001143c	1454	        XMEMSET(des->key, 0, sizeof(*(des->key)));
=> 0x1143c <wc_Des3_SetKey+80>:	mov	r1, #0
0x00011440	1454	        XMEMSET(des->key, 0, sizeof(*(des->key)));
=> 0x11440 <wc_Des3_SetKey+84>:	mov	r0, r3
0x00011444	1454	        XMEMSET(des->key, 0, sizeof(*(des->key)));
=> 0x11444 <wc_Des3_SetKey+88>:	bl	0x30590 <memset>
0x00030590 in memset ()
=> 0x30590 <memset>:	mov	r3, r0
0x00030594 in memset ()
=> 0x30594 <memset+4>:	cmp	r2, #8
0x00030598 in memset ()
=> 0x30598 <memset+8>:	bcc	0x305e4 <memset+84>
0x0003059c in memset ()
=> 0x3059c <memset+12>:	tst	r3, #3
0x000305a0 in memset ()
=> 0x305a0 <memset+16>:	strbne	r1, [r3], #1
0x000305a4 in memset ()
=> 0x305a4 <memset+20>:	subne	r2, r2, #1
0x000305a8 in memset ()
=> 0x305a8 <memset+24>:	bne	0x3059c <memset+12>
0x000305ac in memset ()
=> 0x305ac <memset+28>:	and	r1, r1, #255	; 0xff
0x000305b0 in memset ()
=> 0x305b0 <memset+32>:	orr	r1, r1, r1, lsl #8
0x000305b4 in memset ()
=> 0x305b4 <memset+36>:	orr	r1, r1, r1, lsl #16
0x000305b8 in memset ()
=> 0x305b8 <memset+40>:	mov	r12, r1
0x000305bc in memset ()
=> 0x305bc <memset+44>:	subs	r2, r2, #8
0x000305c0 in memset ()
=> 0x305c0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000305c4 in memset ()
=> 0x305c4 <memset+52>:	subscs	r2, r2, #8
0x000305c8 in memset ()
=> 0x305c8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000305cc in memset ()
=> 0x305cc <memset+60>:	subscs	r2, r2, #8
0x000305d0 in memset ()
=> 0x305d0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000305d4 in memset ()
=> 0x305d4 <memset+68>:	subscs	r2, r2, #8
0x000305d8 in memset ()
=> 0x305d8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000305dc in memset ()
=> 0x305dc <memset+76>:	bcs	0x305bc <memset+44>
0x000305bc in memset ()
=> 0x305bc <memset+44>:	subs	r2, r2, #8
0x000305c0 in memset ()
=> 0x305c0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000305c4 in memset ()
=> 0x305c4 <memset+52>:	subscs	r2, r2, #8
0x000305c8 in memset ()
=> 0x305c8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000305cc in memset ()
=> 0x305cc <memset+60>:	subscs	r2, r2, #8
0x000305d0 in memset ()
=> 0x305d0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000305d4 in memset ()
=> 0x305d4 <memset+68>:	subscs	r2, r2, #8
0x000305d8 in memset ()
=> 0x305d8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000305dc in memset ()
=> 0x305dc <memset+76>:	bcs	0x305bc <memset+44>
0x000305bc in memset ()
=> 0x305bc <memset+44>:	subs	r2, r2, #8
0x000305c0 in memset ()
=> 0x305c0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000305c4 in memset ()
=> 0x305c4 <memset+52>:	subscs	r2, r2, #8
0x000305c8 in memset ()
=> 0x305c8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000305cc in memset ()
=> 0x305cc <memset+60>:	subscs	r2, r2, #8
0x000305d0 in memset ()
=> 0x305d0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000305d4 in memset ()
=> 0x305d4 <memset+68>:	subscs	r2, r2, #8
0x000305d8 in memset ()
=> 0x305d8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000305dc in memset ()
=> 0x305dc <memset+76>:	bcs	0x305bc <memset+44>
0x000305bc in memset ()
=> 0x305bc <memset+44>:	subs	r2, r2, #8
0x000305c0 in memset ()
=> 0x305c0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000305c4 in memset ()
=> 0x305c4 <memset+52>:	subscs	r2, r2, #8
0x000305c8 in memset ()
=> 0x305c8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000305cc in memset ()
=> 0x305cc <memset+60>:	subscs	r2, r2, #8
0x000305d0 in memset ()
=> 0x305d0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000305d4 in memset ()
=> 0x305d4 <memset+68>:	subscs	r2, r2, #8
0x000305d8 in memset ()
=> 0x305d8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000305dc in memset ()
=> 0x305dc <memset+76>:	bcs	0x305bc <memset+44>
0x000305bc in memset ()
=> 0x305bc <memset+44>:	subs	r2, r2, #8
0x000305c0 in memset ()
=> 0x305c0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000305c4 in memset ()
=> 0x305c4 <memset+52>:	subscs	r2, r2, #8
0x000305c8 in memset ()
=> 0x305c8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000305cc in memset ()
=> 0x305cc <memset+60>:	subscs	r2, r2, #8
0x000305d0 in memset ()
=> 0x305d0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000305d4 in memset ()
=> 0x305d4 <memset+68>:	subscs	r2, r2, #8
0x000305d8 in memset ()
=> 0x305d8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000305dc in memset ()
=> 0x305dc <memset+76>:	bcs	0x305bc <memset+44>
0x000305e0 in memset ()
=> 0x305e0 <memset+80>:	and	r2, r2, #7
0x000305e4 in memset ()
=> 0x305e4 <memset+84>:	subs	r2, r2, #1
0x000305e8 in memset ()
=> 0x305e8 <memset+88>:	strbcs	r1, [r3], #1
0x000305ec in memset ()
=> 0x305ec <memset+92>:	subscs	r2, r2, #1
0x000305f0 in memset ()
=> 0x305f0 <memset+96>:	strbcs	r1, [r3], #1
0x000305f4 in memset ()
=> 0x305f4 <memset+100>:	subscs	r2, r2, #1
0x000305f8 in memset ()
=> 0x305f8 <memset+104>:	strbcs	r1, [r3], #1
0x000305fc in memset ()
=> 0x305fc <memset+108>:	subscs	r2, r2, #1
0x00030600 in memset ()
=> 0x30600 <memset+112>:	strbcs	r1, [r3], #1
0x00030604 in memset ()
=> 0x30604 <memset+116>:	bcs	0x305e4 <memset+84>
0x00030608 in memset ()
=> 0x30608 <memset+120>:	bx	lr
wc_Des3_SetKey (des=0x407ffe30, key=0x407ffff4 "\001\002\003\004\005\006\a\b\t\n\v\f\r\016\017\020\021\022\023\024\025\026\027\030", iv=0x407fffc4 "", dir=0) at wolfcrypt/src/des3.c:1455
1455	        XMEMSET(des->reg, 0, sizeof(*(des->reg)));
=> 0x11448 <wc_Des3_SetKey+92>:	ldr	r3, [r11, #-16]
0x0001144c	1455	        XMEMSET(des->reg, 0, sizeof(*(des->reg)));
=> 0x1144c <wc_Des3_SetKey+96>:	add	r3, r3, #384	; 0x180
0x00011450	1455	        XMEMSET(des->reg, 0, sizeof(*(des->reg)));
=> 0x11450 <wc_Des3_SetKey+100>:	mov	r2, #4
0x00011454	1455	        XMEMSET(des->reg, 0, sizeof(*(des->reg)));
=> 0x11454 <wc_Des3_SetKey+104>:	mov	r1, #0
0x00011458	1455	        XMEMSET(des->reg, 0, sizeof(*(des->reg)));
=> 0x11458 <wc_Des3_SetKey+108>:	mov	r0, r3
0x0001145c	1455	        XMEMSET(des->reg, 0, sizeof(*(des->reg)));
=> 0x1145c <wc_Des3_SetKey+112>:	bl	0x30590 <memset>
0x00030590 in memset ()
=> 0x30590 <memset>:	mov	r3, r0
0x00030594 in memset ()
=> 0x30594 <memset+4>:	cmp	r2, #8
0x00030598 in memset ()
=> 0x30598 <memset+8>:	bcc	0x305e4 <memset+84>
0x000305e4 in memset ()
=> 0x305e4 <memset+84>:	subs	r2, r2, #1
0x000305e8 in memset ()
=> 0x305e8 <memset+88>:	strbcs	r1, [r3], #1
0x000305ec in memset ()
=> 0x305ec <memset+92>:	subscs	r2, r2, #1
0x000305f0 in memset ()
=> 0x305f0 <memset+96>:	strbcs	r1, [r3], #1
0x000305f4 in memset ()
=> 0x305f4 <memset+100>:	subscs	r2, r2, #1
0x000305f8 in memset ()
=> 0x305f8 <memset+104>:	strbcs	r1, [r3], #1
0x000305fc in memset ()
=> 0x305fc <memset+108>:	subscs	r2, r2, #1
0x00030600 in memset ()
=> 0x30600 <memset+112>:	strbcs	r1, [r3], #1
0x00030604 in memset ()
=> 0x30604 <memset+116>:	bcs	0x305e4 <memset+84>
0x000305e4 in memset ()
=> 0x305e4 <memset+84>:	subs	r2, r2, #1
0x000305e8 in memset ()
=> 0x305e8 <memset+88>:	strbcs	r1, [r3], #1
0x000305ec in memset ()
=> 0x305ec <memset+92>:	subscs	r2, r2, #1
0x000305f0 in memset ()
=> 0x305f0 <memset+96>:	strbcs	r1, [r3], #1
0x000305f4 in memset ()
=> 0x305f4 <memset+100>:	subscs	r2, r2, #1
0x000305f8 in memset ()
=> 0x305f8 <memset+104>:	strbcs	r1, [r3], #1
0x000305fc in memset ()
=> 0x305fc <memset+108>:	subscs	r2, r2, #1
0x00030600 in memset ()
=> 0x30600 <memset+112>:	strbcs	r1, [r3], #1
0x00030604 in memset ()
=> 0x30604 <memset+116>:	bcs	0x305e4 <memset+84>
0x00030608 in memset ()
=> 0x30608 <memset+120>:	bx	lr
wc_Des3_SetKey (des=0x407ffe30, key=0x407ffff4 "\001\002\003\004\005\006\a\b\t\n\v\f\r\016\017\020\021\022\023\024\025\026\027\030", iv=0x407fffc4 "", dir=0) at wolfcrypt/src/des3.c:1456
1456	        XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
=> 0x11460 <wc_Des3_SetKey+116>:	ldr	r3, [r11, #-16]
0x00011464	1456	        XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
=> 0x11464 <wc_Des3_SetKey+120>:	add	r3, r3, #392	; 0x188
0x00011468	1456	        XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
=> 0x11468 <wc_Des3_SetKey+124>:	mov	r2, #4
0x0001146c	1456	        XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
=> 0x1146c <wc_Des3_SetKey+128>:	mov	r1, #0
0x00011470	1456	        XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
=> 0x11470 <wc_Des3_SetKey+132>:	mov	r0, r3
0x00011474	1456	        XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
=> 0x11474 <wc_Des3_SetKey+136>:	bl	0x30590 <memset>
0x00030590 in memset ()
=> 0x30590 <memset>:	mov	r3, r0
0x00030594 in memset ()
=> 0x30594 <memset+4>:	cmp	r2, #8
0x00030598 in memset ()
=> 0x30598 <memset+8>:	bcc	0x305e4 <memset+84>
0x000305e4 in memset ()
=> 0x305e4 <memset+84>:	subs	r2, r2, #1
0x000305e8 in memset ()
=> 0x305e8 <memset+88>:	strbcs	r1, [r3], #1
0x000305ec in memset ()
=> 0x305ec <memset+92>:	subscs	r2, r2, #1
0x000305f0 in memset ()
=> 0x305f0 <memset+96>:	strbcs	r1, [r3], #1
0x000305f4 in memset ()
=> 0x305f4 <memset+100>:	subscs	r2, r2, #1
0x000305f8 in memset ()
=> 0x305f8 <memset+104>:	strbcs	r1, [r3], #1
0x000305fc in memset ()
=> 0x305fc <memset+108>:	subscs	r2, r2, #1
0x00030600 in memset ()
=> 0x30600 <memset+112>:	strbcs	r1, [r3], #1
0x00030604 in memset ()
=> 0x30604 <memset+116>:	bcs	0x305e4 <memset+84>
0x000305e4 in memset ()
=> 0x305e4 <memset+84>:	subs	r2, r2, #1
0x000305e8 in memset ()
=> 0x305e8 <memset+88>:	strbcs	r1, [r3], #1
0x000305ec in memset ()
=> 0x305ec <memset+92>:	subscs	r2, r2, #1
0x000305f0 in memset ()
=> 0x305f0 <memset+96>:	strbcs	r1, [r3], #1
0x000305f4 in memset ()
=> 0x305f4 <memset+100>:	subscs	r2, r2, #1
0x000305f8 in memset ()
=> 0x305f8 <memset+104>:	strbcs	r1, [r3], #1
0x000305fc in memset ()
=> 0x305fc <memset+108>:	subscs	r2, r2, #1
0x00030600 in memset ()
=> 0x30600 <memset+112>:	strbcs	r1, [r3], #1
0x00030604 in memset ()
=> 0x30604 <memset+116>:	bcs	0x305e4 <memset+84>
0x00030608 in memset ()
=> 0x30608 <memset+120>:	bx	lr
wc_Des3_SetKey (des=0x407ffe30, key=0x407ffff4 "\001\002\003\004\005\006\a\b\t\n\v\f\r\016\017\020\021\022\023\024\025\026\027\030", iv=0x407fffc4 "", dir=0) at wolfcrypt/src/des3.c:1468
1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x11478 <wc_Des3_SetKey+140>:	ldr	r3, [r11, #-28]	; 0xffffffe4
0x0001147c	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x1147c <wc_Des3_SetKey+144>:	cmp	r3, #0
0x00011480	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x11480 <wc_Des3_SetKey+148>:	bne	0x1148c <wc_Des3_SetKey+160>
0x00011484	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x11484 <wc_Des3_SetKey+152>:	mov	r3, #0
0x00011488	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x11488 <wc_Des3_SetKey+156>:	b	0x11490 <wc_Des3_SetKey+164>
0x00011490	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x11490 <wc_Des3_SetKey+164>:	ldr	r2, [r11, #-20]	; 0xffffffec
0x00011494	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x11494 <wc_Des3_SetKey+168>:	add	r3, r2, r3
0x00011498	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x11498 <wc_Des3_SetKey+172>:	ldr	r2, [r11, #-16]
0x0001149c	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x1149c <wc_Des3_SetKey+176>:	ldr	r1, [r11, #-28]	; 0xffffffe4
0x000114a0	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x114a0 <wc_Des3_SetKey+180>:	mov	r0, r3
0x000114a4	1468	        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
=> 0x114a4 <wc_Des3_SetKey+184>:	bl	0x10f30 <DesSetKey>
DesSetKey (key=0x0, dir=0, out=0x0) at wolfcrypt/src/des3.c:1365
1365	    {
=> 0x10f30 <DesSetKey>:	push	{r11, lr}
0x00010f34	1365	    {
=> 0x10f34 <DesSetKey+4>:	add	r11, sp, #4
0x00010f38	1365	    {
=> 0x10f38 <DesSetKey+8>:	sub	sp, sp, #176	; 0xb0
0x00010f3c	1365	    {
=> 0x10f3c <DesSetKey+12>:	str	r0, [r11, #-168]	; 0xffffff58
0x00010f40	1365	    {
=> 0x10f40 <DesSetKey+16>:	str	r1, [r11, #-172]	; 0xffffff54
0x00010f44	1365	    {
=> 0x10f44 <DesSetKey+20>:	str	r2, [r11, #-176]	; 0xffffff50
1365	    {
=> 0x10f48 <DesSetKey+24>:	ldr	r3, [pc, #1076]	; 0x11384 <DesSetKey+1108>
0x00010f4c	1365	    {
=> 0x10f4c <DesSetKey+28>:	ldr	r3, [r3]
0x00010f50	1365	    {
=> 0x10f50 <DesSetKey+32>:	str	r3, [r11, #-8]
0x00010f54	1365	    {
=> 0x10f54 <DesSetKey+36>:	mov	r3, #0
1377	            byte* const  pc1m = buffer;            /* place to modify pc1 into */
=> 0x10f58 <DesSetKey+40>:	sub	r3, r11, #128	; 0x80
0x00010f5c	1377	            byte* const  pc1m = buffer;            /* place to modify pc1 into */
=> 0x10f5c <DesSetKey+44>:	str	r3, [r11, #-152]	; 0xffffff68
1378	            byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
=> 0x10f60 <DesSetKey+48>:	ldr	r3, [r11, #-152]	; 0xffffff68
0x00010f64	1378	            byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
=> 0x10f64 <DesSetKey+52>:	add	r3, r3, #56	; 0x38
0x00010f68	1378	            byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
=> 0x10f68 <DesSetKey+56>:	str	r3, [r11, #-148]	; 0xffffff6c
1379	            byte* const  ks   = pcr  + 56;
=> 0x10f6c <DesSetKey+60>:	ldr	r3, [r11, #-148]	; 0xffffff6c
0x00010f70	1379	            byte* const  ks   = pcr  + 56;
=> 0x10f70 <DesSetKey+64>:	add	r3, r3, #56	; 0x38
0x00010f74	1379	            byte* const  ks   = pcr  + 56;
=> 0x10f74 <DesSetKey+68>:	str	r3, [r11, #-144]	; 0xffffff70
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10f78 <DesSetKey+72>:	mov	r3, #0
0x00010f7c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10f7c <DesSetKey+76>:	str	r3, [r11, #-156]	; 0xffffff64
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10f80 <DesSetKey+80>:	b	0x11004 <DesSetKey+212>
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f84 <DesSetKey+84>:	ldr	r2, [pc, #1020]	; 0x11388 <DesSetKey+1112>
0x00010f88	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f88 <DesSetKey+88>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010f8c	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f8c <DesSetKey+92>:	add	r3, r2, r3
0x00010f90	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f90 <DesSetKey+96>:	ldrb	r3, [r3]
0x00010f94	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f94 <DesSetKey+100>:	sub	r3, r3, #1
0x00010f98	1384	                l = pc1[j] - 1;                    /* integer bit location        */
=> 0x10f98 <DesSetKey+104>:	str	r3, [r11, #-136]	; 0xffffff78
1385	                m = l & 07;                        /* find bit                    */
=> 0x10f9c <DesSetKey+108>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fa0	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa0 <DesSetKey+112>:	and	r3, r3, #7
0x00010fa4	1385	                m = l & 07;                        /* find bit                    */
=> 0x10fa4 <DesSetKey+116>:	str	r3, [r11, #-132]	; 0xffffff7c
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fa8 <DesSetKey+120>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00010fac	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fac <DesSetKey+124>:	asr	r3, r3, #3
0x00010fb0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb0 <DesSetKey+128>:	mov	r2, r3
0x00010fb4	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb4 <DesSetKey+132>:	ldr	r3, [r11, #-168]	; 0xffffff58
0x00010fb8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fb8 <DesSetKey+136>:	add	r3, r3, r2
0x00010fbc	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fbc <DesSetKey+140>:	ldrb	r3, [r3]
0x00010fc0	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fc0 <DesSetKey+144>:	mov	r1, r3
1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc4 <DesSetKey+148>:	ldr	r2, [pc, #960]	; 0x1138c <DesSetKey+1116>
0x00010fc8	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fc8 <DesSetKey+152>:	ldr	r3, [r11, #-132]	; 0xffffff7c
0x00010fcc	1387	                    bytebit[m])                    /* and which bit of that byte  */
=> 0x10fcc <DesSetKey+156>:	ldr	r3, [r2, r3, lsl #2]
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fd0 <DesSetKey+160>:	and	r3, r3, r1
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd4 <DesSetKey+164>:	cmp	r3, #0
0x00010fd8	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fd8 <DesSetKey+168>:	movne	r3, #1
0x00010fdc	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fdc <DesSetKey+172>:	moveq	r3, #0
0x00010fe0	1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10fe0 <DesSetKey+176>:	and	r1, r3, #255	; 0xff
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe4 <DesSetKey+180>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010fe8	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fe8 <DesSetKey+184>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00010fec	1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10fec <DesSetKey+188>:	add	r3, r2, r3
1388	                    ? 1 : 0;                       /* and store 1-bit result      */
=> 0x10ff0 <DesSetKey+192>:	mov	r2, r1
1386	                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
=> 0x10ff4 <DesSetKey+196>:	strb	r2, [r3]
1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ff8 <DesSetKey+200>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00010ffc	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x10ffc <DesSetKey+204>:	add	r3, r3, #1
0x00011000	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11000 <DesSetKey+208>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011004	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11004 <DesSetKey+212>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011008	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x11008 <DesSetKey+216>:	cmp	r3, #55	; 0x37
0x0001100c	1383	            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
=> 0x1100c <DesSetKey+220>:	ble	0x10f84 <DesSetKey+84>
1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x11010 <DesSetKey+224>:	mov	r3, #0
0x00011014	1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x11014 <DesSetKey+228>:	str	r3, [r11, #-160]	; 0xffffff60
1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x11018 <DesSetKey+232>:	b	0x11254 <DesSetKey+804>
0x00011254	1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x11254 <DesSetKey+804>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011258	1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x11258 <DesSetKey+808>:	cmp	r3, #15
0x0001125c	1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x1125c <DesSetKey+812>:	ble	0x1101c <DesSetKey+236>
1392	                XMEMSET(ks, 0, 8);                /* Clear key schedule */
=> 0x1101c <DesSetKey+236>:	mov	r2, #8
0x00011020	1392	                XMEMSET(ks, 0, 8);                /* Clear key schedule */
=> 0x11020 <DesSetKey+240>:	mov	r1, #0
0x00011024	1392	                XMEMSET(ks, 0, 8);                /* Clear key schedule */
=> 0x11024 <DesSetKey+244>:	ldr	r0, [r11, #-144]	; 0xffffff70
0x00011028	1392	                XMEMSET(ks, 0, 8);                /* Clear key schedule */
=> 0x11028 <DesSetKey+248>:	bl	0x30590 <memset>
0x00030590 in memset ()
=> 0x30590 <memset>:	mov	r3, r0
0x00030594 in memset ()
=> 0x30594 <memset+4>:	cmp	r2, #8
0x00030598 in memset ()
=> 0x30598 <memset+8>:	bcc	0x305e4 <memset+84>
0x0003059c in memset ()
=> 0x3059c <memset+12>:	tst	r3, #3
0x000305a0 in memset ()
=> 0x305a0 <memset+16>:	strbne	r1, [r3], #1
0x000305a4 in memset ()
=> 0x305a4 <memset+20>:	subne	r2, r2, #1
0x000305a8 in memset ()
=> 0x305a8 <memset+24>:	bne	0x3059c <memset+12>
0x000305ac in memset ()
=> 0x305ac <memset+28>:	and	r1, r1, #255	; 0xff
0x000305b0 in memset ()
=> 0x305b0 <memset+32>:	orr	r1, r1, r1, lsl #8
0x000305b4 in memset ()
=> 0x305b4 <memset+36>:	orr	r1, r1, r1, lsl #16
0x000305b8 in memset ()
=> 0x305b8 <memset+40>:	mov	r12, r1
0x000305bc in memset ()
=> 0x305bc <memset+44>:	subs	r2, r2, #8
0x000305c0 in memset ()
=> 0x305c0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000305c4 in memset ()
=> 0x305c4 <memset+52>:	subscs	r2, r2, #8
0x000305c8 in memset ()
=> 0x305c8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000305cc in memset ()
=> 0x305cc <memset+60>:	subscs	r2, r2, #8
0x000305d0 in memset ()
=> 0x305d0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000305d4 in memset ()
=> 0x305d4 <memset+68>:	subscs	r2, r2, #8
0x000305d8 in memset ()
=> 0x305d8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000305dc in memset ()
=> 0x305dc <memset+76>:	bcs	0x305bc <memset+44>
0x000305e0 in memset ()
=> 0x305e0 <memset+80>:	and	r2, r2, #7
0x000305e4 in memset ()
=> 0x305e4 <memset+84>:	subs	r2, r2, #1
0x000305e8 in memset ()
=> 0x305e8 <memset+88>:	strbcs	r1, [r3], #1
0x000305ec in memset ()
=> 0x305ec <memset+92>:	subscs	r2, r2, #1
0x000305f0 in memset ()
=> 0x305f0 <memset+96>:	strbcs	r1, [r3], #1
0x000305f4 in memset ()
=> 0x305f4 <memset+100>:	subscs	r2, r2, #1
0x000305f8 in memset ()
=> 0x305f8 <memset+104>:	strbcs	r1, [r3], #1
0x000305fc in memset ()
=> 0x305fc <memset+108>:	subscs	r2, r2, #1
0x00030600 in memset ()
=> 0x30600 <memset+112>:	strbcs	r1, [r3], #1
0x00030604 in memset ()
=> 0x30604 <memset+116>:	bcs	0x305e4 <memset+84>
0x00030608 in memset ()
=> 0x30608 <memset+120>:	bx	lr
DesSetKey (key=0x407ffff4 "\001\002\003\004\005\006\a\b\t\n\v\f\r\016\017\020\021\022\023\024\025\026\027\030", dir=0, out=0x407ffe30) at wolfcrypt/src/des3.c:1394
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x1102c <DesSetKey+252>:	mov	r3, #0
0x00011030	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x11030 <DesSetKey+256>:	str	r3, [r11, #-156]	; 0xffffff64
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x11034 <DesSetKey+260>:	b	0x110b4 <DesSetKey+388>
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x0001107c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1107c <DesSetKey+332>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00011080	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11080 <DesSetKey+336>:	sub	r3, r3, #28
0x00011084	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11084 <DesSetKey+340>:	b	0x1108c <DesSetKey+348>
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x0001107c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1107c <DesSetKey+332>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00011080	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11080 <DesSetKey+336>:	sub	r3, r3, #28
0x00011084	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11084 <DesSetKey+340>:	b	0x1108c <DesSetKey+348>
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x110c0 <DesSetKey+400>:	mov	r3, #0
0x000110c4	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x110c4 <DesSetKey+404>:	str	r3, [r11, #-156]	; 0xffffff64
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x110c8 <DesSetKey+408>:	b	0x11178 <DesSetKey+584>
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f4 <DesSetKey+452>:	ldr	r2, [r11, #-156]	; 0xffffff64
0x000110f8	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f8 <DesSetKey+456>:	ldr	r3, [pc, #664]	; 0x11398 <DesSetKey+1128>
0x000110fc	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110fc <DesSetKey+460>:	smull	r0, r1, r3, r2
0x00011100	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11100 <DesSetKey+464>:	asr	r3, r2, #31
0x00011104	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11104 <DesSetKey+468>:	sub	r1, r1, r3
0x00011108	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11108 <DesSetKey+472>:	mov	r3, r1
0x0001110c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1110c <DesSetKey+476>:	lsl	r3, r3, #1
0x00011110	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11110 <DesSetKey+480>:	add	r3, r3, r1
0x00011114	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11114 <DesSetKey+484>:	lsl	r3, r3, #1
0x00011118	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11118 <DesSetKey+488>:	sub	r3, r2, r3
0x0001111c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1111c <DesSetKey+492>:	str	r3, [r11, #-136]	; 0xffffff78
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11120 <DesSetKey+496>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011124	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11124 <DesSetKey+500>:	ldr	r2, [pc, #620]	; 0x11398 <DesSetKey+1128>
0x00011128	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11128 <DesSetKey+504>:	smull	r1, r2, r3, r2
0x0001112c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1112c <DesSetKey+508>:	asr	r3, r3, #31
0x00011130	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11130 <DesSetKey+512>:	sub	r0, r2, r3
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11134 <DesSetKey+516>:	mov	r2, r0
0x00011138	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11138 <DesSetKey+520>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001113c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1113c <DesSetKey+524>:	add	r3, r3, r2
0x00011140	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11140 <DesSetKey+528>:	ldrb	r1, [r3]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11144 <DesSetKey+532>:	ldr	r2, [pc, #576]	; 0x1138c <DesSetKey+1116>
0x00011148	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11148 <DesSetKey+536>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001114c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1114c <DesSetKey+540>:	ldr	r3, [r2, r3, lsl #2]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11150 <DesSetKey+544>:	asr	r3, r3, #2
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11154 <DesSetKey+548>:	and	r2, r3, #255	; 0xff
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11158 <DesSetKey+552>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001115c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1115c <DesSetKey+556>:	add	r3, r3, r0
0x00011160	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11160 <DesSetKey+560>:	orr	r2, r1, r2
0x00011164	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11164 <DesSetKey+564>:	and	r2, r2, #255	; 0xff
0x00011168	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11168 <DesSetKey+568>:	strb	r2, [r3]
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f4 <DesSetKey+452>:	ldr	r2, [r11, #-156]	; 0xffffff64
0x000110f8	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f8 <DesSetKey+456>:	ldr	r3, [pc, #664]	; 0x11398 <DesSetKey+1128>
0x000110fc	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110fc <DesSetKey+460>:	smull	r0, r1, r3, r2
0x00011100	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11100 <DesSetKey+464>:	asr	r3, r2, #31
0x00011104	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11104 <DesSetKey+468>:	sub	r1, r1, r3
0x00011108	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11108 <DesSetKey+472>:	mov	r3, r1
0x0001110c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1110c <DesSetKey+476>:	lsl	r3, r3, #1
0x00011110	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11110 <DesSetKey+480>:	add	r3, r3, r1
0x00011114	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11114 <DesSetKey+484>:	lsl	r3, r3, #1
0x00011118	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11118 <DesSetKey+488>:	sub	r3, r2, r3
0x0001111c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1111c <DesSetKey+492>:	str	r3, [r11, #-136]	; 0xffffff78
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11120 <DesSetKey+496>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011124	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11124 <DesSetKey+500>:	ldr	r2, [pc, #620]	; 0x11398 <DesSetKey+1128>
0x00011128	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11128 <DesSetKey+504>:	smull	r1, r2, r3, r2
0x0001112c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1112c <DesSetKey+508>:	asr	r3, r3, #31
0x00011130	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11130 <DesSetKey+512>:	sub	r0, r2, r3
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11134 <DesSetKey+516>:	mov	r2, r0
0x00011138	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11138 <DesSetKey+520>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001113c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1113c <DesSetKey+524>:	add	r3, r3, r2
0x00011140	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11140 <DesSetKey+528>:	ldrb	r1, [r3]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11144 <DesSetKey+532>:	ldr	r2, [pc, #576]	; 0x1138c <DesSetKey+1116>
0x00011148	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11148 <DesSetKey+536>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001114c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1114c <DesSetKey+540>:	ldr	r3, [r2, r3, lsl #2]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11150 <DesSetKey+544>:	asr	r3, r3, #2
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11154 <DesSetKey+548>:	and	r2, r3, #255	; 0xff
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11158 <DesSetKey+552>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001115c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1115c <DesSetKey+556>:	add	r3, r3, r0
0x00011160	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11160 <DesSetKey+560>:	orr	r2, r1, r2
0x00011164	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11164 <DesSetKey+564>:	and	r2, r2, #255	; 0xff
0x00011168	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11168 <DesSetKey+568>:	strb	r2, [r3]
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f4 <DesSetKey+452>:	ldr	r2, [r11, #-156]	; 0xffffff64
0x000110f8	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f8 <DesSetKey+456>:	ldr	r3, [pc, #664]	; 0x11398 <DesSetKey+1128>
0x000110fc	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110fc <DesSetKey+460>:	smull	r0, r1, r3, r2
0x00011100	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11100 <DesSetKey+464>:	asr	r3, r2, #31
0x00011104	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11104 <DesSetKey+468>:	sub	r1, r1, r3
0x00011108	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11108 <DesSetKey+472>:	mov	r3, r1
0x0001110c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1110c <DesSetKey+476>:	lsl	r3, r3, #1
0x00011110	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11110 <DesSetKey+480>:	add	r3, r3, r1
0x00011114	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11114 <DesSetKey+484>:	lsl	r3, r3, #1
0x00011118	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11118 <DesSetKey+488>:	sub	r3, r2, r3
0x0001111c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1111c <DesSetKey+492>:	str	r3, [r11, #-136]	; 0xffffff78
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11120 <DesSetKey+496>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011124	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11124 <DesSetKey+500>:	ldr	r2, [pc, #620]	; 0x11398 <DesSetKey+1128>
0x00011128	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11128 <DesSetKey+504>:	smull	r1, r2, r3, r2
0x0001112c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1112c <DesSetKey+508>:	asr	r3, r3, #31
0x00011130	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11130 <DesSetKey+512>:	sub	r0, r2, r3
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11134 <DesSetKey+516>:	mov	r2, r0
0x00011138	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11138 <DesSetKey+520>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001113c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1113c <DesSetKey+524>:	add	r3, r3, r2
0x00011140	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11140 <DesSetKey+528>:	ldrb	r1, [r3]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11144 <DesSetKey+532>:	ldr	r2, [pc, #576]	; 0x1138c <DesSetKey+1116>
0x00011148	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11148 <DesSetKey+536>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001114c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1114c <DesSetKey+540>:	ldr	r3, [r2, r3, lsl #2]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11150 <DesSetKey+544>:	asr	r3, r3, #2
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11154 <DesSetKey+548>:	and	r2, r3, #255	; 0xff
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11158 <DesSetKey+552>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001115c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1115c <DesSetKey+556>:	add	r3, r3, r0
0x00011160	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11160 <DesSetKey+560>:	orr	r2, r1, r2
0x00011164	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11164 <DesSetKey+564>:	and	r2, r2, #255	; 0xff
0x00011168	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11168 <DesSetKey+568>:	strb	r2, [r3]
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f4 <DesSetKey+452>:	ldr	r2, [r11, #-156]	; 0xffffff64
0x000110f8	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f8 <DesSetKey+456>:	ldr	r3, [pc, #664]	; 0x11398 <DesSetKey+1128>
0x000110fc	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110fc <DesSetKey+460>:	smull	r0, r1, r3, r2
0x00011100	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11100 <DesSetKey+464>:	asr	r3, r2, #31
0x00011104	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11104 <DesSetKey+468>:	sub	r1, r1, r3
0x00011108	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11108 <DesSetKey+472>:	mov	r3, r1
0x0001110c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1110c <DesSetKey+476>:	lsl	r3, r3, #1
0x00011110	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11110 <DesSetKey+480>:	add	r3, r3, r1
0x00011114	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11114 <DesSetKey+484>:	lsl	r3, r3, #1
0x00011118	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11118 <DesSetKey+488>:	sub	r3, r2, r3
0x0001111c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1111c <DesSetKey+492>:	str	r3, [r11, #-136]	; 0xffffff78
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11120 <DesSetKey+496>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011124	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11124 <DesSetKey+500>:	ldr	r2, [pc, #620]	; 0x11398 <DesSetKey+1128>
0x00011128	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11128 <DesSetKey+504>:	smull	r1, r2, r3, r2
0x0001112c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1112c <DesSetKey+508>:	asr	r3, r3, #31
0x00011130	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11130 <DesSetKey+512>:	sub	r0, r2, r3
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11134 <DesSetKey+516>:	mov	r2, r0
0x00011138	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11138 <DesSetKey+520>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001113c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1113c <DesSetKey+524>:	add	r3, r3, r2
0x00011140	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11140 <DesSetKey+528>:	ldrb	r1, [r3]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11144 <DesSetKey+532>:	ldr	r2, [pc, #576]	; 0x1138c <DesSetKey+1116>
0x00011148	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11148 <DesSetKey+536>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001114c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1114c <DesSetKey+540>:	ldr	r3, [r2, r3, lsl #2]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11150 <DesSetKey+544>:	asr	r3, r3, #2
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11154 <DesSetKey+548>:	and	r2, r3, #255	; 0xff
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11158 <DesSetKey+552>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001115c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1115c <DesSetKey+556>:	add	r3, r3, r0
0x00011160	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11160 <DesSetKey+560>:	orr	r2, r1, r2
0x00011164	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11164 <DesSetKey+564>:	and	r2, r2, #255	; 0xff
0x00011168	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11168 <DesSetKey+568>:	strb	r2, [r3]
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f4 <DesSetKey+452>:	ldr	r2, [r11, #-156]	; 0xffffff64
0x000110f8	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f8 <DesSetKey+456>:	ldr	r3, [pc, #664]	; 0x11398 <DesSetKey+1128>
0x000110fc	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110fc <DesSetKey+460>:	smull	r0, r1, r3, r2
0x00011100	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11100 <DesSetKey+464>:	asr	r3, r2, #31
0x00011104	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11104 <DesSetKey+468>:	sub	r1, r1, r3
0x00011108	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11108 <DesSetKey+472>:	mov	r3, r1
0x0001110c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1110c <DesSetKey+476>:	lsl	r3, r3, #1
0x00011110	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11110 <DesSetKey+480>:	add	r3, r3, r1
0x00011114	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11114 <DesSetKey+484>:	lsl	r3, r3, #1
0x00011118	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11118 <DesSetKey+488>:	sub	r3, r2, r3
0x0001111c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1111c <DesSetKey+492>:	str	r3, [r11, #-136]	; 0xffffff78
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11120 <DesSetKey+496>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011124	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11124 <DesSetKey+500>:	ldr	r2, [pc, #620]	; 0x11398 <DesSetKey+1128>
0x00011128	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11128 <DesSetKey+504>:	smull	r1, r2, r3, r2
0x0001112c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1112c <DesSetKey+508>:	asr	r3, r3, #31
0x00011130	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11130 <DesSetKey+512>:	sub	r0, r2, r3
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11134 <DesSetKey+516>:	mov	r2, r0
0x00011138	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11138 <DesSetKey+520>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001113c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1113c <DesSetKey+524>:	add	r3, r3, r2
0x00011140	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11140 <DesSetKey+528>:	ldrb	r1, [r3]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11144 <DesSetKey+532>:	ldr	r2, [pc, #576]	; 0x1138c <DesSetKey+1116>
0x00011148	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11148 <DesSetKey+536>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001114c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1114c <DesSetKey+540>:	ldr	r3, [r2, r3, lsl #2]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11150 <DesSetKey+544>:	asr	r3, r3, #2
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11154 <DesSetKey+548>:	and	r2, r3, #255	; 0xff
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11158 <DesSetKey+552>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001115c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1115c <DesSetKey+556>:	add	r3, r3, r0
0x00011160	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11160 <DesSetKey+560>:	orr	r2, r1, r2
0x00011164	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11164 <DesSetKey+564>:	and	r2, r2, #255	; 0xff
0x00011168	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11168 <DesSetKey+568>:	strb	r2, [r3]
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f4 <DesSetKey+452>:	ldr	r2, [r11, #-156]	; 0xffffff64
0x000110f8	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f8 <DesSetKey+456>:	ldr	r3, [pc, #664]	; 0x11398 <DesSetKey+1128>
0x000110fc	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110fc <DesSetKey+460>:	smull	r0, r1, r3, r2
0x00011100	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11100 <DesSetKey+464>:	asr	r3, r2, #31
0x00011104	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11104 <DesSetKey+468>:	sub	r1, r1, r3
0x00011108	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11108 <DesSetKey+472>:	mov	r3, r1
0x0001110c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1110c <DesSetKey+476>:	lsl	r3, r3, #1
0x00011110	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11110 <DesSetKey+480>:	add	r3, r3, r1
0x00011114	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11114 <DesSetKey+484>:	lsl	r3, r3, #1
0x00011118	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11118 <DesSetKey+488>:	sub	r3, r2, r3
0x0001111c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1111c <DesSetKey+492>:	str	r3, [r11, #-136]	; 0xffffff78
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11120 <DesSetKey+496>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011124	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11124 <DesSetKey+500>:	ldr	r2, [pc, #620]	; 0x11398 <DesSetKey+1128>
0x00011128	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11128 <DesSetKey+504>:	smull	r1, r2, r3, r2
0x0001112c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1112c <DesSetKey+508>:	asr	r3, r3, #31
0x00011130	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11130 <DesSetKey+512>:	sub	r0, r2, r3
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11134 <DesSetKey+516>:	mov	r2, r0
0x00011138	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11138 <DesSetKey+520>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001113c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1113c <DesSetKey+524>:	add	r3, r3, r2
0x00011140	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11140 <DesSetKey+528>:	ldrb	r1, [r3]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11144 <DesSetKey+532>:	ldr	r2, [pc, #576]	; 0x1138c <DesSetKey+1116>
0x00011148	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11148 <DesSetKey+536>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001114c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1114c <DesSetKey+540>:	ldr	r3, [r2, r3, lsl #2]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11150 <DesSetKey+544>:	asr	r3, r3, #2
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11154 <DesSetKey+548>:	and	r2, r3, #255	; 0xff
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11158 <DesSetKey+552>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001115c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1115c <DesSetKey+556>:	add	r3, r3, r0
0x00011160	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11160 <DesSetKey+560>:	orr	r2, r1, r2
0x00011164	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11164 <DesSetKey+564>:	and	r2, r2, #255	; 0xff
0x00011168	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11168 <DesSetKey+568>:	strb	r2, [r3]
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f4 <DesSetKey+452>:	ldr	r2, [r11, #-156]	; 0xffffff64
0x000110f8	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f8 <DesSetKey+456>:	ldr	r3, [pc, #664]	; 0x11398 <DesSetKey+1128>
0x000110fc	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110fc <DesSetKey+460>:	smull	r0, r1, r3, r2
0x00011100	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11100 <DesSetKey+464>:	asr	r3, r2, #31
0x00011104	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11104 <DesSetKey+468>:	sub	r1, r1, r3
0x00011108	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11108 <DesSetKey+472>:	mov	r3, r1
0x0001110c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1110c <DesSetKey+476>:	lsl	r3, r3, #1
0x00011110	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11110 <DesSetKey+480>:	add	r3, r3, r1
0x00011114	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11114 <DesSetKey+484>:	lsl	r3, r3, #1
0x00011118	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11118 <DesSetKey+488>:	sub	r3, r2, r3
0x0001111c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1111c <DesSetKey+492>:	str	r3, [r11, #-136]	; 0xffffff78
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11120 <DesSetKey+496>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011124	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11124 <DesSetKey+500>:	ldr	r2, [pc, #620]	; 0x11398 <DesSetKey+1128>
0x00011128	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11128 <DesSetKey+504>:	smull	r1, r2, r3, r2
0x0001112c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1112c <DesSetKey+508>:	asr	r3, r3, #31
0x00011130	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11130 <DesSetKey+512>:	sub	r0, r2, r3
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11134 <DesSetKey+516>:	mov	r2, r0
0x00011138	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11138 <DesSetKey+520>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001113c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1113c <DesSetKey+524>:	add	r3, r3, r2
0x00011140	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11140 <DesSetKey+528>:	ldrb	r1, [r3]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11144 <DesSetKey+532>:	ldr	r2, [pc, #576]	; 0x1138c <DesSetKey+1116>
0x00011148	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11148 <DesSetKey+536>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001114c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1114c <DesSetKey+540>:	ldr	r3, [r2, r3, lsl #2]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11150 <DesSetKey+544>:	asr	r3, r3, #2
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11154 <DesSetKey+548>:	and	r2, r3, #255	; 0xff
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11158 <DesSetKey+552>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001115c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1115c <DesSetKey+556>:	add	r3, r3, r0
0x00011160	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11160 <DesSetKey+560>:	orr	r2, r1, r2
0x00011164	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11164 <DesSetKey+564>:	and	r2, r2, #255	; 0xff
0x00011168	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11168 <DesSetKey+568>:	strb	r2, [r3]
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f4 <DesSetKey+452>:	ldr	r2, [r11, #-156]	; 0xffffff64
0x000110f8	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110f8 <DesSetKey+456>:	ldr	r3, [pc, #664]	; 0x11398 <DesSetKey+1128>
0x000110fc	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x110fc <DesSetKey+460>:	smull	r0, r1, r3, r2
0x00011100	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11100 <DesSetKey+464>:	asr	r3, r2, #31
0x00011104	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11104 <DesSetKey+468>:	sub	r1, r1, r3
0x00011108	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11108 <DesSetKey+472>:	mov	r3, r1
0x0001110c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1110c <DesSetKey+476>:	lsl	r3, r3, #1
0x00011110	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11110 <DesSetKey+480>:	add	r3, r3, r1
0x00011114	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11114 <DesSetKey+484>:	lsl	r3, r3, #1
0x00011118	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x11118 <DesSetKey+488>:	sub	r3, r2, r3
0x0001111c	1401	                        l= j % 6;                 /* mask it in if it's there     */
=> 0x1111c <DesSetKey+492>:	str	r3, [r11, #-136]	; 0xffffff78
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11120 <DesSetKey+496>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011124	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11124 <DesSetKey+500>:	ldr	r2, [pc, #620]	; 0x11398 <DesSetKey+1128>
0x00011128	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11128 <DesSetKey+504>:	smull	r1, r2, r3, r2
0x0001112c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1112c <DesSetKey+508>:	asr	r3, r3, #31
0x00011130	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11130 <DesSetKey+512>:	sub	r0, r2, r3
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11134 <DesSetKey+516>:	mov	r2, r0
0x00011138	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11138 <DesSetKey+520>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001113c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1113c <DesSetKey+524>:	add	r3, r3, r2
0x00011140	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11140 <DesSetKey+528>:	ldrb	r1, [r3]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11144 <DesSetKey+532>:	ldr	r2, [pc, #576]	; 0x1138c <DesSetKey+1116>
0x00011148	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11148 <DesSetKey+536>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001114c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1114c <DesSetKey+540>:	ldr	r3, [r2, r3, lsl #2]
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11150 <DesSetKey+544>:	asr	r3, r3, #2
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11154 <DesSetKey+548>:	and	r2, r3, #255	; 0xff
1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11158 <DesSetKey+552>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001115c	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x1115c <DesSetKey+556>:	add	r3, r3, r0
0x00011160	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11160 <DesSetKey+560>:	orr	r2, r1, r2
0x00011164	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11164 <DesSetKey+564>:	and	r2, r2, #255	; 0xff
0x00011168	1402	                        ks[j/6] |= (byte)(bytebit[l] >> 2);
=> 0x11168 <DesSetKey+568>:	strb	r2, [r3]
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110cc <DesSetKey+412>:	ldr	r2, [pc, #704]	; 0x11394 <DesSetKey+1124>
0x000110d0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d0 <DesSetKey+416>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110d4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d4 <DesSetKey+420>:	add	r3, r2, r3
0x000110d8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110d8 <DesSetKey+424>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110dc <DesSetKey+428>:	sub	r3, r3, #1
0x000110e0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e0 <DesSetKey+432>:	ldr	r2, [r11, #-148]	; 0xffffff6c
0x000110e4	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e4 <DesSetKey+436>:	add	r3, r2, r3
0x000110e8	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110e8 <DesSetKey+440>:	ldrb	r3, [r3]
1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110ec <DesSetKey+444>:	cmp	r3, #0
0x000110f0	1400	                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
=> 0x110f0 <DesSetKey+448>:	beq	0x1116c <DesSetKey+572>
1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1116c <DesSetKey+572>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011170	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11170 <DesSetKey+576>:	add	r3, r3, #1
0x00011174	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11174 <DesSetKey+580>:	str	r3, [r11, #-156]	; 0xffffff64
0x00011178	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11178 <DesSetKey+584>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001117c	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x1117c <DesSetKey+588>:	cmp	r3, #47	; 0x2f
0x00011180	1399	                for (j = 0; j < 48; j++) {        /* select bits individually     */
=> 0x11180 <DesSetKey+592>:	ble	0x110cc <DesSetKey+412>
1407	                out[2*i] = ((word32) ks[0] << 24)
=> 0x11184 <DesSetKey+596>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x00011188	1407	                out[2*i] = ((word32) ks[0] << 24)
=> 0x11188 <DesSetKey+600>:	ldrb	r3, [r3]
0x0001118c	1407	                out[2*i] = ((word32) ks[0] << 24)
=> 0x1118c <DesSetKey+604>:	lsl	r2, r3, #24
1408	                         | ((word32) ks[2] << 16)
=> 0x11190 <DesSetKey+608>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x00011194	1408	                         | ((word32) ks[2] << 16)
=> 0x11194 <DesSetKey+612>:	add	r3, r3, #2
0x00011198	1408	                         | ((word32) ks[2] << 16)
=> 0x11198 <DesSetKey+616>:	ldrb	r3, [r3]
0x0001119c	1408	                         | ((word32) ks[2] << 16)
=> 0x1119c <DesSetKey+620>:	lsl	r3, r3, #16
0x000111a0	1408	                         | ((word32) ks[2] << 16)
=> 0x111a0 <DesSetKey+624>:	orr	r2, r2, r3
1409	                         | ((word32) ks[4] << 8)
=> 0x111a4 <DesSetKey+628>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x000111a8	1409	                         | ((word32) ks[4] << 8)
=> 0x111a8 <DesSetKey+632>:	add	r3, r3, #4
0x000111ac	1409	                         | ((word32) ks[4] << 8)
=> 0x111ac <DesSetKey+636>:	ldrb	r3, [r3]
0x000111b0	1409	                         | ((word32) ks[4] << 8)
=> 0x111b0 <DesSetKey+640>:	lsl	r3, r3, #8
0x000111b4	1409	                         | ((word32) ks[4] << 8)
=> 0x111b4 <DesSetKey+644>:	orr	r2, r2, r3
1410	                         | ((word32) ks[6]);
=> 0x111b8 <DesSetKey+648>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x000111bc	1410	                         | ((word32) ks[6]);
=> 0x111bc <DesSetKey+652>:	add	r3, r3, #6
0x000111c0	1410	                         | ((word32) ks[6]);
=> 0x111c0 <DesSetKey+656>:	ldrb	r3, [r3]
0x000111c4	1410	                         | ((word32) ks[6]);
=> 0x111c4 <DesSetKey+660>:	mov	r1, r3
1407	                out[2*i] = ((word32) ks[0] << 24)
=> 0x111c8 <DesSetKey+664>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x000111cc	1407	                out[2*i] = ((word32) ks[0] << 24)
=> 0x111cc <DesSetKey+668>:	lsl	r3, r3, #3
0x000111d0	1407	                out[2*i] = ((word32) ks[0] << 24)
=> 0x111d0 <DesSetKey+672>:	mov	r0, r3
0x000111d4	1407	                out[2*i] = ((word32) ks[0] << 24)
=> 0x111d4 <DesSetKey+676>:	ldr	r3, [r11, #-176]	; 0xffffff50
0x000111d8	1407	                out[2*i] = ((word32) ks[0] << 24)
=> 0x111d8 <DesSetKey+680>:	add	r3, r3, r0
1410	                         | ((word32) ks[6]);
=> 0x111dc <DesSetKey+684>:	orr	r2, r2, r1
1407	                out[2*i] = ((word32) ks[0] << 24)
=> 0x111e0 <DesSetKey+688>:	str	r2, [r3]
1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x111e4 <DesSetKey+692>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x000111e8	1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x111e8 <DesSetKey+696>:	add	r3, r3, #1
0x000111ec	1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x111ec <DesSetKey+700>:	ldrb	r3, [r3]
0x000111f0	1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x111f0 <DesSetKey+704>:	lsl	r2, r3, #24
1413	                             | ((word32) ks[3] << 16)
=> 0x111f4 <DesSetKey+708>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x000111f8	1413	                             | ((word32) ks[3] << 16)
=> 0x111f8 <DesSetKey+712>:	add	r3, r3, #3
0x000111fc	1413	                             | ((word32) ks[3] << 16)
=> 0x111fc <DesSetKey+716>:	ldrb	r3, [r3]
0x00011200	1413	                             | ((word32) ks[3] << 16)
=> 0x11200 <DesSetKey+720>:	lsl	r3, r3, #16
0x00011204	1413	                             | ((word32) ks[3] << 16)
=> 0x11204 <DesSetKey+724>:	orr	r2, r2, r3
1414	                             | ((word32) ks[5] << 8)
=> 0x11208 <DesSetKey+728>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x0001120c	1414	                             | ((word32) ks[5] << 8)
=> 0x1120c <DesSetKey+732>:	add	r3, r3, #5
0x00011210	1414	                             | ((word32) ks[5] << 8)
=> 0x11210 <DesSetKey+736>:	ldrb	r3, [r3]
0x00011214	1414	                             | ((word32) ks[5] << 8)
=> 0x11214 <DesSetKey+740>:	lsl	r3, r3, #8
0x00011218	1414	                             | ((word32) ks[5] << 8)
=> 0x11218 <DesSetKey+744>:	orr	r2, r2, r3
1415	                             | ((word32) ks[7]);
=> 0x1121c <DesSetKey+748>:	ldr	r3, [r11, #-144]	; 0xffffff70
0x00011220	1415	                             | ((word32) ks[7]);
=> 0x11220 <DesSetKey+752>:	add	r3, r3, #7
0x00011224	1415	                             | ((word32) ks[7]);
=> 0x11224 <DesSetKey+756>:	ldrb	r3, [r3]
0x00011228	1415	                             | ((word32) ks[7]);
=> 0x11228 <DesSetKey+760>:	mov	r0, r3
1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x1122c <DesSetKey+764>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011230	1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x11230 <DesSetKey+768>:	lsl	r3, r3, #3
0x00011234	1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x11234 <DesSetKey+772>:	add	r3, r3, #4
0x00011238	1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x11238 <DesSetKey+776>:	ldr	r1, [r11, #-176]	; 0xffffff50
0x0001123c	1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x1123c <DesSetKey+780>:	add	r3, r1, r3
1415	                             | ((word32) ks[7]);
=> 0x11240 <DesSetKey+784>:	orr	r2, r2, r0
1412	                out[2*i + 1] = ((word32) ks[1] << 24)
=> 0x11244 <DesSetKey+788>:	str	r2, [r3]
1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x11248 <DesSetKey+792>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x0001124c	1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x1124c <DesSetKey+796>:	add	r3, r3, #1
0x00011250	1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x11250 <DesSetKey+800>:	str	r3, [r11, #-160]	; 0xffffff60
0x00011254	1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x11254 <DesSetKey+804>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011258	1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x11258 <DesSetKey+808>:	cmp	r3, #15
0x0001125c	1391	            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
=> 0x1125c <DesSetKey+812>:	ble	0x1101c <DesSetKey+236>
1392	                XMEMSET(ks, 0, 8);                /* Clear key schedule */
=> 0x1101c <DesSetKey+236>:	mov	r2, #8
0x00011020	1392	                XMEMSET(ks, 0, 8);                /* Clear key schedule */
=> 0x11020 <DesSetKey+240>:	mov	r1, #0
0x00011024	1392	                XMEMSET(ks, 0, 8);                /* Clear key schedule */
=> 0x11024 <DesSetKey+244>:	ldr	r0, [r11, #-144]	; 0xffffff70
0x00011028	1392	                XMEMSET(ks, 0, 8);                /* Clear key schedule */
=> 0x11028 <DesSetKey+248>:	bl	0x30590 <memset>
0x00030590 in memset ()
=> 0x30590 <memset>:	mov	r3, r0
0x00030594 in memset ()
=> 0x30594 <memset+4>:	cmp	r2, #8
0x00030598 in memset ()
=> 0x30598 <memset+8>:	bcc	0x305e4 <memset+84>
0x0003059c in memset ()
=> 0x3059c <memset+12>:	tst	r3, #3
0x000305a0 in memset ()
=> 0x305a0 <memset+16>:	strbne	r1, [r3], #1
0x000305a4 in memset ()
=> 0x305a4 <memset+20>:	subne	r2, r2, #1
0x000305a8 in memset ()
=> 0x305a8 <memset+24>:	bne	0x3059c <memset+12>
0x000305ac in memset ()
=> 0x305ac <memset+28>:	and	r1, r1, #255	; 0xff
0x000305b0 in memset ()
=> 0x305b0 <memset+32>:	orr	r1, r1, r1, lsl #8
0x000305b4 in memset ()
=> 0x305b4 <memset+36>:	orr	r1, r1, r1, lsl #16
0x000305b8 in memset ()
=> 0x305b8 <memset+40>:	mov	r12, r1
0x000305bc in memset ()
=> 0x305bc <memset+44>:	subs	r2, r2, #8
0x000305c0 in memset ()
=> 0x305c0 <memset+48>:	stmiacs	r3!, {r1, r12}
0x000305c4 in memset ()
=> 0x305c4 <memset+52>:	subscs	r2, r2, #8
0x000305c8 in memset ()
=> 0x305c8 <memset+56>:	stmiacs	r3!, {r1, r12}
0x000305cc in memset ()
=> 0x305cc <memset+60>:	subscs	r2, r2, #8
0x000305d0 in memset ()
=> 0x305d0 <memset+64>:	stmiacs	r3!, {r1, r12}
0x000305d4 in memset ()
=> 0x305d4 <memset+68>:	subscs	r2, r2, #8
0x000305d8 in memset ()
=> 0x305d8 <memset+72>:	stmiacs	r3!, {r1, r12}
0x000305dc in memset ()
=> 0x305dc <memset+76>:	bcs	0x305bc <memset+44>
0x000305e0 in memset ()
=> 0x305e0 <memset+80>:	and	r2, r2, #7
0x000305e4 in memset ()
=> 0x305e4 <memset+84>:	subs	r2, r2, #1
0x000305e8 in memset ()
=> 0x305e8 <memset+88>:	strbcs	r1, [r3], #1
0x000305ec in memset ()
=> 0x305ec <memset+92>:	subscs	r2, r2, #1
0x000305f0 in memset ()
=> 0x305f0 <memset+96>:	strbcs	r1, [r3], #1
0x000305f4 in memset ()
=> 0x305f4 <memset+100>:	subscs	r2, r2, #1
0x000305f8 in memset ()
=> 0x305f8 <memset+104>:	strbcs	r1, [r3], #1
0x000305fc in memset ()
=> 0x305fc <memset+108>:	subscs	r2, r2, #1
0x00030600 in memset ()
=> 0x30600 <memset+112>:	strbcs	r1, [r3], #1
0x00030604 in memset ()
=> 0x30604 <memset+116>:	bcs	0x305e4 <memset+84>
0x00030608 in memset ()
=> 0x30608 <memset+120>:	bx	lr
DesSetKey (key=0x407ffff4 "\001\002\003\004\005\006\a\b\t\n\v\f\r\016\017\020\021\022\023\024\025\026\027\030", dir=0, out=0x407ffe30) at wolfcrypt/src/des3.c:1394
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x1102c <DesSetKey+252>:	mov	r3, #0
0x00011030	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x11030 <DesSetKey+256>:	str	r3, [r11, #-156]	; 0xffffff64
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x11034 <DesSetKey+260>:	b	0x110b4 <DesSetKey+388>
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x0001107c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1107c <DesSetKey+332>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00011080	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11080 <DesSetKey+336>:	sub	r3, r3, #28
0x00011084	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11084 <DesSetKey+340>:	b	0x1108c <DesSetKey+348>
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x00011064	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11064 <DesSetKey+308>:	mov	r3, #28
0x00011068	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11068 <DesSetKey+312>:	b	0x11070 <DesSetKey+320>
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x0001107c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1107c <DesSetKey+332>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00011080	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11080 <DesSetKey+336>:	sub	r3, r3, #28
0x00011084	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11084 <DesSetKey+340>:	b	0x1108c <DesSetKey+348>
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x00011088	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11088 <DesSetKey+344>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
0x00011054	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11054 <DesSetKey+292>:	str	r3, [r11, #-136]	; 0xffffff78
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11058 <DesSetKey+296>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x0001105c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1105c <DesSetKey+300>:	cmp	r3, #27
0x00011060	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11060 <DesSetKey+304>:	bgt	0x1106c <DesSetKey+316>
0x0001106c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1106c <DesSetKey+316>:	mov	r3, #56	; 0x38
0x00011070	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11070 <DesSetKey+320>:	ldr	r2, [r11, #-136]	; 0xffffff78
0x00011074	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11074 <DesSetKey+324>:	cmp	r2, r3
0x00011078	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11078 <DesSetKey+328>:	blt	0x11088 <DesSetKey+344>
0x0001107c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1107c <DesSetKey+332>:	ldr	r3, [r11, #-136]	; 0xffffff78
0x00011080	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11080 <DesSetKey+336>:	sub	r3, r3, #28
0x00011084	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11084 <DesSetKey+340>:	b	0x1108c <DesSetKey+348>
0x0001108c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1108c <DesSetKey+348>:	ldr	r2, [r11, #-152]	; 0xffffff68
0x00011090	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11090 <DesSetKey+352>:	add	r2, r2, r3
1395	                    pcr[j] =
=> 0x11094 <DesSetKey+356>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011098	1395	                    pcr[j] =
=> 0x11098 <DesSetKey+360>:	ldr	r1, [r11, #-148]	; 0xffffff6c
0x0001109c	1395	                    pcr[j] =
=> 0x1109c <DesSetKey+364>:	add	r3, r1, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x110a0 <DesSetKey+368>:	ldrb	r2, [r2]
1395	                    pcr[j] =
=> 0x110a4 <DesSetKey+372>:	strb	r2, [r3]
1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110a8 <DesSetKey+376>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110ac	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110ac <DesSetKey+380>:	add	r3, r3, #1
0x000110b0	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b0 <DesSetKey+384>:	str	r3, [r11, #-156]	; 0xffffff64
0x000110b4	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b4 <DesSetKey+388>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x000110b8	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110b8 <DesSetKey+392>:	cmp	r3, #55	; 0x37
0x000110bc	1394	                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
=> 0x110bc <DesSetKey+396>:	ble	0x11038 <DesSetKey+264>
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11038 <DesSetKey+264>:	ldr	r2, [pc, #848]	; 0x11390 <DesSetKey+1120>
0x0001103c	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1103c <DesSetKey+268>:	ldr	r3, [r11, #-160]	; 0xffffff60
0x00011040	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11040 <DesSetKey+272>:	add	r3, r2, r3
0x00011044	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11044 <DesSetKey+276>:	ldrb	r3, [r3]
0x00011048	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11048 <DesSetKey+280>:	mov	r2, r3
1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x1104c <DesSetKey+284>:	ldr	r3, [r11, #-156]	; 0xffffff64
0x00011050	1396	                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
=> 0x11050 <DesSetKey+288>:	add	r3, r3, r2
